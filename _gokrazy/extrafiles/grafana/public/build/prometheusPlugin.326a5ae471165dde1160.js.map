{"version":3,"file":"prometheusPlugin.326a5ae471165dde1160.js","mappings":"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CACED,WAAY,KACZhsB,MAAO,KACPksB,OAAQ,uBACRD,cACE,oKAEJ,CACED,WAAY,OACZhsB,MAAO,OACPksB,OAAQ,yBACRD,cACE,+GAEJ,CACED,WAAY,QACZhsB,MAAO,QACPksB,OAAQ,0BACRD,cACE,gHAEJ,CACED,WAAY,SACZhsB,MAAO,SACPksB,OAAQ,0CACRD,cACE,wGAEJ,CACED,WAAY,QACZhsB,MAAO,QACPksB,OAAQ,yCACRD,cACE,kIAEJ,CACED,WAAY,KACZhsB,MAAO,KACPksB,OAAQ,OACRD,cAAe,cAEjB,CACED,WAAY,iBACZhsB,MAAO,iBACPksB,OAAQ,2CACRD,cACE,0HAEJ,CACED,WAAY,MACZhsB,MAAO,MACPksB,OAAQ,wBACRD,cAAe,qDAEjB,CACED,WAAY,OACZhsB,MAAO,OACPksB,OAAQ,uBACRD,cACE,yWAEJ,CACED,WAAY,SACZhsB,MAAO,SACPksB,OAAQ,yBACRD,cACE,+OAEJ,CACED,WAAY,QACZhsB,MAAO,QACPksB,OAAQ,+CACRD,cACE,2QAEJ,CACED,WAAY,SACZhsB,MAAO,SACPksB,OAAQ,2BACRD,cACE,mNAEJ,CACED,WAAY,MACZhsB,MAAO,MACPksB,OAAQ,wBACRD,cACE,0JAEJ,CACED,WAAY,OACZhsB,MAAO,OACPksB,OAAQ,yBACRD,cAAe,8EAEjB,CACED,WAAY,YACZhsB,MAAO,YACPksB,OAAQ,8BACRD,cAAe,+EAEjB,CACED,WAAY,OACZhsB,MAAO,OACPksB,OAAQ,yBACRD,cAAe,sDAEjB,CACED,WAAY,OACZhsB,MAAO,OACPksB,OAAQ,SACRD,cACE,+KAEJ,CACED,WAAY,YACZhsB,MAAO,YACPksB,OAAQ,8BACRD,cACE,wHAEJ,CACED,WAAY,SACZhsB,MAAO,SACPksB,OAAQ,mBACRD,cAAe,sDAEjB,CACED,WAAY,OACZhsB,MAAO,OACPksB,OAAQ,wCACRD,cAAe,wDAEjB,CACED,WAAY,gBACZhsB,MAAO,gBACPksB,OAAQ,8BACRD,cAAe,8DAEjB,CACED,WAAY,gBACZhsB,MAAO,gBACPksB,OAAQ,8BACRD,cAAe,8DAEjB,CACED,WAAY,gBACZhsB,MAAO,gBACPksB,OAAQ,8BACRD,cAAe,8DAEjB,CACED,WAAY,gBACZhsB,MAAO,gBACPksB,OAAQ,8BACRD,cAAe,oDAEjB,CACED,WAAY,kBACZhsB,MAAO,kBACPksB,OAAQ,gCACRD,cAAe,sDAEjB,CACED,WAAY,qBACZhsB,MAAO,qBACPksB,OAAQ,2CACRD,cAAe,uEAEjB,CACED,WAAY,mBACZhsB,MAAO,mBACPksB,OAAQ,iCACRD,cAAe,8EAEjB,CACED,WAAY,mBACZhsB,MAAO,mBACPksB,OAAQ,iCACRD,cAAe,6EAEjB,CACED,WAAY,iBACZhsB,MAAO,iBACPksB,OAAQ,+BACRD,cAAe,uDAINE,EAAgBJ,EAAU7rB,KAAKksB,GAAYA,EAAQpsB,QAEnDoN,EAAyB,CACpCif,QAAS,CACPC,QAAS,OAEX,sBAAuB,CACrBA,QAAS,6BACTC,YAAY,EACZC,OAAQ,CACN,YAAa,CACXF,QAAS,yBACTG,MAAO,aAETC,YAAa,SAGjB,iBAAkB,CAChBJ,QAAS,gBACTK,QAAQ,EACRH,OAAQ,CACNH,QAAS,CACPC,QAAS,OAEX,YAAa,CACXA,QAAS,+BACTG,MAAO,YACPE,QAAQ,GAEV,cAAe,CACbL,QAAS,oBACTK,QAAQ,EACRF,MAAO,cAETC,YAAa,QAGjBE,SAAU,IAAIC,OAAQ,SAAQd,EAAU7rB,KAAK4sB,GAAMA,EAAE9sB,QAAO4S,KAAK,mBAAoB,KACrF,gBAAiB,CACf,CACE0Z,QAAS,gBACTE,OAAQ,CACN,iBAAkB,CAChBF,QAAS,mBACTG,MAAO,YAIb,CACEH,QAAS,iBACTC,YAAY,EACZC,OAAQ,CACN,iBAAkB,CAChBF,QAAS,mBACTG,MAAO,aAKfM,OAAQ,CACNT,QAAS,cACTG,MAAO,UAETO,OAAQ,sCACRzmB,SAAU,IAAIsmB,OAAQ,0DAAyDhB,EAAUjZ,KAAK,WAAY,KAC1G8Z,YAAa,cAGf","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/FeedbackLink.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderHints.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromLink.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PrometheusMetricsBrowser.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryField.tsx","webpack://grafana/./public/app/core/utils/CancelablePromise.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentials.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/promql.ts"],"sourcesContent":["import React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nconst PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <div\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </div>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default PromCheatSheet;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  feedbackUrl?: string;\n}\n\nexport function FeedbackLink({ feedbackUrl }: Props) {\n  const styles = useStyles2(getStyles);\n\n  if (!config.feedbackLinksEnabled) {\n    return null;\n  }\n\n  return (\n    <Stack gap={1}>\n      <a\n        href={feedbackUrl}\n        className={styles.link}\n        title=\"This query builder is new, please let us know how we can improve it\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    link: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      ':hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { HTMLProps, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Switch, useStyles2 } from '@grafana/ui';\n\nexport interface Props extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: boolean;\n  label: string;\n}\n\nexport function QueryHeaderSwitch({ label, ...inputProps }: Props) {\n  const switchIdRef = useRef(uniqueId(`switch-${label}`));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <label htmlFor={switchIdRef.current} className={styles.switchLabel}>\n        {label}\n      </label>\n      <Switch {...inputProps} id={switchIdRef.current} />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","import { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\n// @ts-ignore Will be used after builder is out of beta\nfunction getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n    case QueryEditorMode.Explain:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: PromQuery, app: CoreApp | undefined): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    // Default to Code mode until we are out of beta with the builder, then use getDefaultEditorMode.\n    result = { ...query, editorMode: QueryEditorMode.Code };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { SelectableValue, toOption, GrafanaTheme2 } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { Select, FormatOptionLabelMeta, useStyles2 } from '@grafana/ui';\n\nimport { PromVisualQuery } from '../types';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface Props {\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n}\n\nexport function MetricSelect({ query, onChange, onGetMetrics }: Props) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<any>>;\n    isLoading?: boolean;\n  }>({});\n\n  const customFilterOption = useCallback((option: SelectableValue<any>, searchQuery: string) => {\n    const label = option.label ?? option.value;\n    if (!label) {\n      return false;\n    }\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue<any>, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Metric\">\n        <Select\n          inputId=\"prometheus-metric-select\"\n          className={styles.select}\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Select metric\"\n          allowCustomValue\n          formatOptionLabel={formatOptionLabel}\n          filterOption={customFilterOption}\n          onOpenMenu={async () => {\n            setState({ isLoading: true });\n            const metrics = await onGetMetrics();\n            setState({ metrics, isLoading: undefined });\n          }}\n          isLoading={state.isLoading}\n          options={state.metrics}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n            }\n          }}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css`\n    min-width: 125px;\n  `,\n  highlight: css`\n    label: select__match-highlight;\n    background: inherit;\n    padding: inherit;\n    color: ${theme.colors.warning.main};\n    background-color: rgba(${theme.colors.warning.main}, 0.1);\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { AutoSizeInput } from '../shared/AutoSizeInput';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface Props {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            query={nestedQuery.query}\n            datasource={datasource}\n            nested={true}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  data?: PanelData;\n}\n\nexport const PromQueryBuilderHints = React.memo<Props>(({ datasource, query, onChange, data }) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const promQuery = { expr: promQueryModeller.renderQuery(query), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(promQuery, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, query, onChange, data, styles.hint]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    const promQuery = { expr: promQueryModeller.renderQuery(query), refId: '' };\n                    const newPromQuery = datasource.modifyQuery(promQuery, hint!.fix!.action);\n                    const visualQuery = buildVisualQueryFromString(newPromQuery.expr);\n                    return onChange(visualQuery.query);\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  {'hint: ' + hint.fix?.action?.type.toLowerCase().replace('_', ' ') + '()'}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n});\n\nPromQueryBuilderHints.displayName = 'PromQueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(1)};\n      align-items: center;\n    `,\n    hint: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { useCallback } from 'react';\n\nimport { DataSourceApi, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataString } from '../../language_provider';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { LabelFilters } from '../shared/LabelFilters';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricSelect } from './MetricSelect';\nimport { NestedQueryList } from './NestedQueryList';\nimport { PromQueryBuilderHints } from './PromQueryBuilderHints';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  nested?: boolean;\n  data?: PanelData;\n}\n\nexport const PromQueryBuilder = React.memo<Props>(({ datasource, query, onChange, onRunQuery, data }) => {\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  /**\n   * Map metric metadata to SelectableValue for Select component and also adds defined template variables to the list.\n   */\n  const withTemplateVariableOptions = useCallback(\n    async (optionsPromise: Promise<Array<{ value: string; description?: string }>>): Promise<SelectableValue[]> => {\n      const variables = datasource.getVariables();\n      const options = await optionsPromise;\n      return [\n        ...variables.map((value) => ({ label: value, value })),\n        ...options.map((option) => ({ label: option.value, value: option.value, title: option.description })),\n      ];\n    },\n    [datasource]\n  );\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<Array<{ value: string }>> => {\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      // Todo add caching but inside language provider!\n      await datasource.languageProvider.fetchLabels();\n      return datasource.languageProvider.getLabelKeys().map((k) => ({ value: k }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n    const labelsIndex = await datasource.languageProvider.fetchSeriesLabels(expr);\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !labelsToConsider.find((filter) => filter.label === labelName))\n      .map((k) => ({ value: k }));\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      return (await datasource.languageProvider.getLabelValues(forLabel.label)).map((v) => ({ value: v }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n    const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result[forLabelInterpolated].map((v) => ({ value: v })) ?? [];\n  };\n\n  const onGetMetrics = useCallback(() => {\n    return withTemplateVariableOptions(getMetrics(datasource, query));\n  }, [datasource, query, withTemplateVariableOptions]);\n\n  return (\n    <>\n      <EditorRow>\n        <MetricSelect query={query} onChange={onChange} onGetMetrics={onGetMetrics} />\n        <LabelFilters\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n        />\n      </EditorRow>\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n        />\n        <PromQueryBuilderHints datasource={datasource} query={query} onChange={onChange} data={data} />\n      </OperationsEditorRow>\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList query={query} datasource={datasource} onChange={onChange} onRunQuery={onRunQuery} />\n      )}\n    </>\n  );\n});\n\n/**\n * Returns list of metrics, either all or filtered by query param. It also adds description string to each metric if it\n * exists.\n * @param datasource\n * @param query\n */\nasync function getMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery\n): Promise<Array<{ value: string; description?: string }>> {\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n  // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n\n  let metrics;\n  if (query.labels.length > 0) {\n    const expr = promQueryModeller.renderLabels(query.labels);\n    metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n  } else {\n    metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n  }\n\n  return metrics.map((m) => ({\n    value: m,\n    description: getMetadataString(m, datasource.languageProvider.metricsMetadata!),\n  }));\n}\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","import { css, cx } from '@emotion/css';\nimport Prism from 'prismjs';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { promqlGrammar } from '../../promql';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const hightlighted = Prism.highlight(query, promqlGrammar, 'promql');\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <EditorField label=\"Raw query\">\n          <div\n            className={cx(styles.editorField, 'prism-syntax-highlight')}\n            aria-label=\"selector\"\n            dangerouslySetInnerHTML={{ __html: hightlighted }}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, data } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n      />\n      {query.rawQuery && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { PromVisualQuery } from '../types';\n\nexport interface Props {\n  query: string;\n  nested?: boolean;\n}\n\nexport const PromQueryBuilderExplained = React.memo<Props>(({ query, nested }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={`${visQuery.metric} ${promQueryModeller.renderLabels(visQuery.labels)}`}\n      >\n        Fetch all series matching metric name and label filters.\n      </OperationExplainedBox>\n      <OperationListExplained<PromVisualQuery> stepNumber={2} queryModeller={promQueryModeller} query={visQuery} />\n    </Stack>\n  );\n});\n\nPromQueryBuilderExplained.displayName = 'PromQueryBuilderExplained';\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    activeIcon: css`\n      color: ${theme.colors.primary.main};\n    `,\n    iconWrapper: css`\n      display: flex;\n      align-items: center;\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField: React.FC<PromExploreExtraFieldProps> = memo(\n  ({ query, datasource, onChange, onRunQuery }) => {\n    const rangeOptions = getQueryTypeOptions(true);\n    const prevQuery = usePrevious(query);\n\n    const onExemplarChange = useCallback(\n      (exemplar: boolean) => {\n        if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n          onChange({ ...query, exemplar });\n        }\n      },\n      [prevQuery, query, onChange]\n    );\n\n    function onChangeQueryStep(interval: string) {\n      onChange({ ...query, interval });\n    }\n\n    function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      if (e.currentTarget.value !== query.interval) {\n        onChangeQueryStep(e.currentTarget.value);\n      }\n    }\n\n    function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n      if (e.key === 'Enter' && e.shiftKey) {\n        onRunQuery();\n      }\n    }\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    return (\n      <div aria-label=\"Prometheus extra field\" className=\"gf-form-inline\" data-testid={testIds.extraFieldEditor}>\n        {/*Query type field*/}\n        <div\n          data-testid={testIds.queryTypeField}\n          className={cx(\n            'gf-form explore-input-margin',\n            css`\n              flex-wrap: nowrap;\n            `\n          )}\n          aria-label=\"Query type field\"\n        >\n          <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n          <RadioButtonGroup\n            options={rangeOptions}\n            value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n            onChange={onQueryTypeChange}\n          />\n        </div>\n        {/*Step field*/}\n        <div\n          data-testid={testIds.stepField}\n          className={cx(\n            'gf-form',\n            css`\n              flex-wrap: nowrap;\n            `\n          )}\n          aria-label=\"Step field\"\n        >\n          <InlineFormLabel\n            width={6}\n            tooltip={\n              'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n            }\n          >\n            Min step\n          </InlineFormLabel>\n          <input\n            type={'text'}\n            className=\"gf-form-input width-4\"\n            placeholder={'auto'}\n            onChange={onStepChange}\n            onKeyDown={onReturnKeyDown}\n            value={query.interval ?? ''}\n          />\n        </div>\n\n        <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n      </div>\n    );\n  }\n);\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","import { map } from 'lodash';\nimport React, { FC, useEffect, useState, memo } from 'react';\n\nimport { DataQueryRequest, PanelData, ScopedVars, textUtil, rangeUtil } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  panelData?: PanelData;\n}\n\nconst PromLink: FC<Props> = ({ panelData, query, datasource }) => {\n  const [href, setHref] = useState('');\n\n  useEffect(() => {\n    if (panelData) {\n      const getExternalLink = () => {\n        if (!panelData.request) {\n          return '';\n        }\n\n        const {\n          request: { range, interval, scopedVars },\n        } = panelData;\n\n        const start = datasource.getPrometheusTime(range.from, false);\n        const end = datasource.getPrometheusTime(range.to, true);\n        const rangeDiff = Math.ceil(end - start);\n        const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n\n        const enrichedScopedVars: ScopedVars = {\n          ...scopedVars,\n          // As we support $__rate_interval variable in min step, we need add it to scopedVars\n          ...datasource.getRateIntervalScopedVariable(\n            rangeUtil.intervalToSeconds(interval),\n            rangeUtil.intervalToSeconds(datasource.interval)\n          ),\n        };\n\n        const options = {\n          interval,\n          scopedVars: enrichedScopedVars,\n        } as DataQueryRequest<PromQuery>;\n\n        const customQueryParameters: { [key: string]: string } = {};\n        if (datasource.customQueryParameters) {\n          for (const [k, v] of datasource.customQueryParameters) {\n            customQueryParameters[k] = v;\n          }\n        }\n\n        const queryOptions = datasource.createQuery(query, options, start, end);\n\n        const expr = {\n          ...customQueryParameters,\n          'g0.expr': queryOptions.expr,\n          'g0.range_input': rangeDiff + 's',\n          'g0.end_input': endTime,\n          'g0.step_input': queryOptions.step,\n          'g0.tab': 0,\n        };\n\n        const args = map(expr, (v: string, k: string) => {\n          return k + '=' + encodeURIComponent(v);\n        }).join('&');\n        return `${datasource.directUrl}/graph?${args}`;\n      };\n\n      setHref(getExternalLink());\n    }\n  }, [datasource, panelData, query]);\n\n  return (\n    <a href={textUtil.sanitizeUrl(href)} target=\"_blank\" rel=\"noopener noreferrer\">\n      Prometheus\n    </a>\n  );\n};\n\nexport default memo(PromLink);\n","import { css, cx } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport {\n  Button,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  stylesFactory,\n  withTheme,\n  BrowserLabel as PromLabel,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\n\nexport interface BrowserProps {\n  languageProvider: PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  labelSearchTerm: string;\n  metricSearchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n  valueSearchTerm: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  details?: string;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  let singleMetric = '';\n  const selectedLabels = [];\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return {\n        ...label,\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length,\n      };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrapper: css`\n    background-color: ${theme.colors.bg2};\n    padding: ${theme.spacing.sm};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing.sm};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n    align-content: flex-start;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing.md} 0;\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  status: css`\n    padding: ${theme.spacing.xs};\n    color: ${theme.colors.textSemiWeak};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.palette.brandDanger};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing.sm};\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border2};\n    margin: ${theme.spacing.sm} 0;\n    padding: ${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing.sm};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n    color: ${theme.colors.textStrong};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n}));\n\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\nexport class UnthemedPrometheusMetricsBrowser extends React.Component<BrowserProps, BrowserState> {\n  valueListsRef = React.createRef<HTMLDivElement>();\n  state: BrowserState = {\n    labels: [] as SelectableLabel[],\n    labelSearchTerm: '',\n    metricSearchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n    valueSearchTerm: '',\n  };\n\n  onChangeLabelSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ labelSearchTerm: event.target.value });\n  };\n\n  onChangeMetricSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ metricSearchTerm: event.target.value });\n  };\n\n  onChangeValueSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ valueSearchTerm: event.target.value });\n  };\n\n  onClickRunQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunRateQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return {\n        labels,\n        labelSearchTerm: '',\n        metricSearchTerm: '',\n        status: '',\n        error: '',\n        validationStatus: '',\n        valueSearchTerm: '',\n      };\n    });\n    this.props.deleteLastUsedLabels();\n    // Get metrics\n    this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickMetric = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    // Finding special metric label\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ metricSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({\n      ...v,\n      selected: v.name === value || v.selected ? !v.selected : v.selected,\n    }));\n    // Toggle selected state of special metrics label\n    const selected = values.some((v) => v.selected);\n    this.updateLabelState(name, { selected, values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        // Get metrics\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n        // Auto-select previously selected labels\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach(\n          (label) => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector)\n        );\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false });\n        return;\n      }\n      const values: FacettableValue[] = [];\n      const { metricsMetadata } = languageProvider;\n      for (const labelValue of rawValues) {\n        const value: FacettableValue = { name: labelValue };\n        // Adding type/help text to metrics\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n        values.push(value);\n      }\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} series found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, labelSearchTerm, metricSearchTerm, status, error, validationStatus, valueSearchTerm } = this.state;\n    const styles = getStyles(theme);\n    if (labels.length === 0) {\n      return (\n        <div className={styles.wrapper}>\n          <LoadingPlaceholder text=\"Loading labels...\" />\n        </div>\n      );\n    }\n\n    // Filter metrics\n    let metrics = labels.find((label) => label.name === METRIC_LABEL);\n    if (metrics && metricSearchTerm) {\n      metrics = {\n        ...metrics,\n        values: metrics.values?.filter((value) => value.selected || value.name.includes(metricSearchTerm)),\n      };\n    }\n\n    // Filter labels\n    let nonMetricLabels = labels.filter((label) => !label.hidden && label.name !== METRIC_LABEL);\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter((label) => label.selected || label.name.includes(labelSearchTerm));\n    }\n\n    // Filter non-metric label values\n    let selectedLabels = nonMetricLabels.filter((label) => label.selected && label.values);\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map((label) => ({\n        ...label,\n        values: label.values?.filter((value) => value.selected || value.name.includes(valueSearchTerm)),\n      }));\n    }\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = metrics?.values?.length || 0;\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"flex-start\" spacing=\"lg\">\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once a metric is selected only possible labels are shown.\">1. Select a metric</Label>\n              <div>\n                <Input\n                  onChange={this.onChangeMetricSearch}\n                  aria-label=\"Filter expression for metric\"\n                  value={metricSearchTerm}\n                />\n              </div>\n              <div role=\"list\" className={styles.valueListWrapper}>\n                <FixedSizeList\n                  height={Math.min(450, metricCount * LIST_ITEM_SIZE)}\n                  itemCount={metricCount}\n                  itemSize={LIST_ITEM_SIZE}\n                  itemKey={(i) => (metrics!.values as FacettableValue[])[i].name}\n                  width={300}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = metrics?.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <PromLabel\n                          name={metrics!.name}\n                          value={value?.name}\n                          title={value.details}\n                          active={value?.selected}\n                          onClick={this.onClickMetric}\n                          searchTerm={metricSearchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once label values are selected, only possible label combinations are shown.\">\n                2. Select labels to search in\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeLabelSearch}\n                  aria-label=\"Filter expression for label\"\n                  value={labelSearchTerm}\n                />\n              </div>\n              {/* Using fixed height here to prevent jumpy layout */}\n              <div className={styles.list} style={{ height: 120 }}>\n                {nonMetricLabels.map((label) => (\n                  <PromLabel\n                    key={label.name}\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    facets={label.facets}\n                    onClick={this.onClickLabel}\n                    searchTerm={labelSearchTerm}\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.section}>\n              <Label description=\"Use the search field to find values across selected labels.\">\n                3. Select (multiple) values for your labels\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeValueSearch}\n                  aria-label=\"Filter expression for label values\"\n                  value={valueSearchTerm}\n                />\n              </div>\n              <div className={styles.valueListArea} ref={this.valueListsRef}>\n                {selectedLabels.map((label) => (\n                  <div\n                    role=\"list\"\n                    key={label.name}\n                    aria-label={`Values for ${label.name}`}\n                    className={styles.valueListWrapper}\n                  >\n                    <div className={styles.valueTitle}>\n                      <PromLabel\n                        name={label.name}\n                        loading={label.loading}\n                        active={label.selected}\n                        hidden={label.hidden}\n                        //If no facets, we want to show number of all label values\n                        facets={label.facets || label.values?.length}\n                        onClick={this.onClickLabel}\n                      />\n                    </div>\n                    <FixedSizeList\n                      height={Math.min(200, LIST_ITEM_SIZE * (label.values?.length || 0))}\n                      itemCount={label.values?.length || 0}\n                      itemSize={28}\n                      itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                      width={200}\n                      className={styles.valueList}\n                    >\n                      {({ index, style }) => {\n                        const value = label.values?.[index];\n                        if (!value) {\n                          return null;\n                        }\n                        return (\n                          <div style={style}>\n                            <PromLabel\n                              name={label.name}\n                              value={value?.name}\n                              active={value?.selected}\n                              onClick={this.onClickValue}\n                              searchTerm={valueSearchTerm}\n                            />\n                          </div>\n                        );\n                      }}\n                    </FixedSizeList>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </HorizontalGroup>\n\n        <div className={styles.section}>\n          <Label>4. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector for query button\" disabled={empty} onClick={this.onClickRunQuery}>\n              Use query\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunRateQuery}\n            >\n              Use as rate query\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const PrometheusMetricsBrowser = withTheme(UnthemedPrometheusMetricsBrowser);\n","import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"prom-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\ntype Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  runQueryOnBlur: boolean;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { runQueryOnBlur, onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    if (runQueryOnBlur) {\n      // run handleRunQuery only if the current value is different from the last-time-executed value\n      if (value !== lastRunValueRef.current) {\n        handleRunQuery(value);\n      }\n    } else {\n      onChange(value);\n    }\n  };\n\n  return <MonacoQueryFieldLazy onRunQuery={handleRunQuery} onBlur={handleBlur} {...rest} />;\n};\n","import { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Plugin } from 'slate';\n\nimport { QueryEditorProps, QueryHint, isDataFrame, toLegacyResponseData, TimeRange, CoreApp } from '@grafana/data';\nimport {\n  SlatePrism,\n  TypeaheadInput,\n  TypeaheadOutput,\n  BracesPlugin,\n  DOMUtil,\n  SuggestionsState,\n  Icon,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { CancelablePromise, makePromiseCancelable } from 'app/core/utils/CancelablePromise';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { roundMsToMin } from '../language_utils';\nimport { PromQuery, PromOptions } from '../types';\n\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport const RECORDING_RULES_GROUP = '__recording_rules__';\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled: boolean, hasSyntax: boolean, hasMetrics: boolean) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\nexport function willApplySuggestion(suggestion: string, { typeaheadContext, typeaheadText }: SuggestionsState): string {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels': {\n      const nextChar = DOMUtil.getNextCharacter();\n      if (!nextChar || nextChar === '}' || nextChar === ',') {\n        suggestion += '=';\n      }\n      break;\n    }\n\n    case 'context-label-values': {\n      // Always add quotes and remove existing ones instead\n      if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n        suggestion = `\"${suggestion}`;\n      }\n      if (DOMUtil.getNextCharacter() !== '\"') {\n        suggestion = `${suggestion}\"`;\n      }\n      break;\n    }\n\n    default:\n  }\n  return suggestion;\n}\n\ninterface PromQueryFieldProps extends QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions> {\n  ExtraFieldElement?: ReactNode;\n  'data-testid'?: string;\n}\n\ninterface PromQueryFieldState {\n  labelBrowserVisible: boolean;\n  syntaxLoaded: boolean;\n  hint: QueryHint | null;\n}\n\nclass PromQueryField extends React.PureComponent<PromQueryFieldProps, PromQueryFieldState> {\n  plugins: Plugin[];\n  declare languageProviderInitializationPromise: CancelablePromise<any>;\n\n  constructor(props: PromQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: (node: any) => 'promql',\n        },\n        { ...(prismLanguages as LanguageMap), promql: this.props.datasource.languageProvider.syntax }\n      ),\n    ];\n\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps: PromQueryFieldProps) {\n    const {\n      data,\n      datasource: { languageProvider },\n      range,\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false,\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range);\n    // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  refreshHint = () => {\n    const { datasource, query, data } = this.props;\n    const initHints = datasource.getInitHints();\n    const initHint = initHints.length > 0 ? initHints[0] : null;\n\n    if (!data || data.series.length === 0) {\n      this.setState({\n        hint: initHint,\n      });\n      return;\n    }\n\n    const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n    const queryHints = datasource.getQueryHints(query, result);\n    let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n\n    this.setState({ hint: queryHint ?? initHint });\n  };\n\n  refreshMetrics = async () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start());\n\n    try {\n      const remainingTasks = await this.languageProviderInitializationPromise.promise;\n      await Promise.all(remainingTasks);\n      this.onUpdateLanguage();\n    } catch (err) {\n      if (!err.isCanceled) {\n        throw err;\n      }\n    }\n  };\n\n  rangeChangedToRefresh(range?: TimeRange, prevRange?: TimeRange): boolean {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n      // If both are same, don't need to refresh.\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n    return false;\n  }\n\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: PromQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n  };\n\n  onClickHintFix = () => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    const { hint } = this.state;\n\n    onChange(datasource.modifyQuery(query, hint!.fix!.action));\n    onRunQuery();\n  };\n\n  onUpdateLanguage = () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n    const { metrics } = languageProvider;\n\n    if (!metrics) {\n      return;\n    }\n\n    this.setState({ syntaxLoaded: true });\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    if (!languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const { history } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey } = typeahead;\n\n    const result = await languageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey },\n      { history }\n    );\n\n    return result;\n  };\n\n  render() {\n    const {\n      datasource,\n      datasource: { languageProvider },\n      query,\n      ExtraFieldElement,\n      history = [],\n    } = this.props;\n\n    const { labelBrowserVisible, syntaxLoaded, hint } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n\n                <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                  <MonacoQueryFieldWrapper\n                    runQueryOnBlur={this.props.app !== CoreApp.Explore}\n                    languageProvider={languageProvider}\n                    history={history}\n                    onChange={this.onChangeQuery}\n                    onRunQuery={this.props.onRunQuery}\n                    initialValue={query.expr ?? ''}\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <PrometheusMetricsBrowser\n                    languageProvider={languageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n              {hint ? (\n                <div className=\"query-row-break\">\n                  <div className=\"prom-query-field-info text-warning\">\n                    {hint.label}{' '}\n                    {hint.fix ? (\n                      <a className=\"text-link muted\" onClick={this.onClickHintFix}>\n                        {hint.fix.label}\n                      </a>\n                    ) : null}\n                  </div>\n                </div>\n              ) : null}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n\nexport default PromQueryField;\n","// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    promise.then((val) => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\n    promise.catch((error) => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n","import { map } from 'lodash';\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Select } from '@grafana/ui';\n\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\nimport PromLink from './PromLink';\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nconst { Switch } = LegacyForms;\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<string>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ninterface State {\n  legendFormat?: string;\n  formatOption: SelectableValue<string>;\n  interval?: string;\n  intervalFactorOption: SelectableValue<number>;\n  instant: boolean;\n  exemplar: boolean;\n}\n\nexport class PromQueryEditor extends PureComponent<PromQueryEditorProps, State> {\n  // Query target to be modified and used for queries\n  query: PromQuery;\n\n  constructor(props: PromQueryEditorProps) {\n    super(props);\n    // Use default query to prevent undefined input values\n    const defaultQuery: Partial<PromQuery> = {\n      expr: '',\n      legendFormat: '',\n      interval: '',\n      // Set exemplar to false for alerting queries\n      exemplar: props.app === CoreApp.UnifiedAlerting ? false : true,\n    };\n    const query = Object.assign({}, defaultQuery, props.query);\n    this.query = query;\n    // Query target properties that are fully controlled inputs\n    this.state = {\n      // Fully controlled text inputs\n      interval: query.interval,\n      legendFormat: query.legendFormat,\n      // Select options\n      formatOption: FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0],\n      intervalFactorOption:\n        INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor) || INTERVAL_FACTOR_OPTIONS[0],\n      // Switch options\n      instant: Boolean(query.instant),\n      exemplar: Boolean(query.exemplar),\n    };\n  }\n\n  onFieldChange = (query: PromQuery, override?: any) => {\n    this.query.expr = query.expr;\n  };\n\n  onFormatChange = (option: SelectableValue<string>) => {\n    this.query.format = option.value;\n    this.setState({ formatOption: option }, this.onRunQuery);\n  };\n\n  onInstantChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const instant = (e.target as HTMLInputElement).checked;\n    this.query.instant = instant;\n    this.setState({ instant }, this.onRunQuery);\n  };\n\n  onIntervalChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const interval = e.currentTarget.value;\n    this.query.interval = interval;\n    this.setState({ interval });\n  };\n\n  onIntervalFactorChange = (option: SelectableValue<number>) => {\n    this.query.intervalFactor = option.value;\n    this.setState({ intervalFactorOption: option }, this.onRunQuery);\n  };\n\n  onLegendChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const legendFormat = e.currentTarget.value;\n    this.query.legendFormat = legendFormat;\n    this.setState({ legendFormat });\n  };\n\n  onExemplarChange = (isEnabled: boolean) => {\n    this.query.exemplar = isEnabled;\n    this.setState({ exemplar: isEnabled }, this.onRunQuery);\n  };\n\n  onRunQuery = () => {\n    const { query } = this;\n    // Change of query.hide happens outside of this component and is just passed as prop. We have to update it when running queries.\n    const { hide } = this.props.query;\n    this.props.onChange({ ...query, hide });\n    this.props.onRunQuery();\n  };\n\n  render() {\n    const { datasource, query, range, data } = this.props;\n    const { formatOption, instant, interval, intervalFactorOption, legendFormat } = this.state;\n    //We want to hide exemplar field for unified alerting as exemplars in alerting don't make sense and are source of confusion\n    const showExemplarField = this.props.app !== CoreApp.UnifiedAlerting;\n\n    return (\n      <PromQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={this.onRunQuery}\n        onChange={this.onFieldChange}\n        history={[]}\n        data={data}\n        data-testid={testIds.editor}\n        ExtraFieldElement={\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel\n                width={7}\n                tooltip=\"Controls the name of the time series, using name or pattern. For example\n        {{hostname}} will be replaced with label value for the label hostname.\"\n              >\n                Legend\n              </InlineFormLabel>\n              <input\n                type=\"text\"\n                className=\"gf-form-input\"\n                placeholder=\"legend format\"\n                value={legendFormat}\n                onChange={this.onLegendChange}\n                onBlur={this.onRunQuery}\n              />\n            </div>\n\n            <div className=\"gf-form\">\n              <InlineFormLabel\n                width={7}\n                tooltip={\n                  <>\n                    An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                    <code>$__interval</code> and <code>$__rate_interval</code> variables. The limit is absolute and not\n                    modified by the &quot;Resolution&quot; setting.\n                  </>\n                }\n              >\n                Min step\n              </InlineFormLabel>\n              <input\n                type=\"text\"\n                className=\"gf-form-input width-8\"\n                aria-label=\"Set lower limit for the step parameter\"\n                placeholder={interval}\n                onChange={this.onIntervalChange}\n                onBlur={this.onRunQuery}\n                value={interval}\n              />\n            </div>\n\n            <div className=\"gf-form\">\n              <div className=\"gf-form-label\">Resolution</div>\n              <Select\n                aria-label=\"Select resolution\"\n                menuShouldPortal\n                isSearchable={false}\n                options={INTERVAL_FACTOR_OPTIONS}\n                onChange={this.onIntervalFactorChange}\n                value={intervalFactorOption}\n              />\n            </div>\n\n            <div className=\"gf-form\">\n              <div className=\"gf-form-label width-7\">Format</div>\n              <Select\n                menuShouldPortal\n                className=\"select-container\"\n                width={16}\n                isSearchable={false}\n                options={FORMAT_OPTIONS}\n                onChange={this.onFormatChange}\n                value={formatOption}\n                aria-label=\"Select format\"\n              />\n              <Switch label=\"Instant\" checked={instant} onChange={this.onInstantChange} />\n\n              <InlineFormLabel width={10} tooltip=\"Link to Graph in Prometheus\">\n                <PromLink\n                  datasource={datasource}\n                  query={this.query} // Use modified query\n                  panelData={data}\n                />\n              </InlineFormLabel>\n            </div>\n            {showExemplarField && (\n              <PromExemplarField\n                onChange={this.onExemplarChange}\n                datasource={datasource}\n                query={this.query}\n                data-testid={testIds.exemplar}\n              />\n            )}\n          </div>\n        }\n      />\n    );\n  }\n}\n\nexport const testIds = {\n  editor: 'prom-editor',\n  exemplar: 'exemplar-editor',\n};\n","import React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\nimport { AutoSizeInput } from '../shared/AutoSizeInput';\n\nexport interface Props {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<Props>(({ legendFormat, onChange, onRunQuery }) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    let newFormat = evt.currentTarget.value;\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n    switch (value.value!) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          inputRef.current?.focus();\n          inputRef.current?.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n    onRunQuery();\n  };\n\n  return (\n    <EditorField\n      label=\"Legend\"\n      tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n    >\n      <>\n        {mode === LegendFormatMode.Custom && (\n          <AutoSizeInput\n            id=\"legendFormat\"\n            minWidth={22}\n            placeholder=\"auto\"\n            defaultValue={legendFormat}\n            onCommitChange={onLegendFormatChanged}\n            ref={inputRef}\n          />\n        )}\n        {mode !== LegendFormatMode.Custom && (\n          <Select\n            inputId=\"legend.mode\"\n            isSearchable={false}\n            placeholder=\"Select legend mode\"\n            options={legendModeOptions}\n            width={22}\n            onChange={onLegendModeChanged}\n            value={legendModeOptions.find((x) => x.value === mode)}\n          />\n        )}\n      </>\n    </EditorField>\n  );\n});\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorRow, EditorField } from '@grafana/experimental';\nimport { RadioButtonGroup, Select, Switch } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from '../../components/PromQueryEditor';\nimport { PromQuery } from '../../types';\nimport { AutoSizeInput } from '../shared/AutoSizeInput';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface Props {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<Props>(({ query, app, onChange, onRunQuery }) => {\n  const onChangeFormat = (value: SelectableValue<string>) => {\n    onChange({ ...query, format: value.value });\n    onRunQuery();\n  };\n\n  const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, interval: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(app === CoreApp.Explore);\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, exemplar: isEnabled });\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = (value: SelectableValue<number>) => {\n    onChange({ ...query, intervalFactor: value.value });\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup title=\"Options\" collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel)}>\n        <PromQueryLegendEditor\n          legendFormat={query.legendFormat}\n          onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n          onRunQuery={onRunQuery}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            <>\n              An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n              <code>$__interval</code> and <code>$__rate_interval</code> variables.\n            </>\n          }\n        >\n          <AutoSizeInput\n            type=\"text\"\n            aria-label=\"Set lower limit for the step parameter\"\n            placeholder={'auto'}\n            minWidth={10}\n            onCommitChange={onChangeStep}\n            defaultValue={query.interval}\n          />\n        </EditorField>\n        <EditorField label=\"Format\">\n          <Select value={formatOption} allowCustomValue onChange={onChangeFormat} options={FORMAT_OPTIONS} />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n        </EditorField>\n        {shouldShowExemplarSwitch(query, app) && (\n          <EditorField label=\"Exemplars\">\n            <Switch value={query.exemplar} onChange={onExemplarChange} />\n          </EditorField>\n        )}\n        {query.intervalFactor && query.intervalFactor > 1 && (\n          <EditorField label=\"Resolution\">\n            <Select\n              aria-label=\"Select resolution\"\n              menuShouldPortal\n              isSearchable={false}\n              options={INTERVAL_FACTOR_OPTIONS}\n              onChange={onIntervalFactorChange}\n              value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n            />\n          </EditorField>\n        )}\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n\n  if (query.interval) {\n    items.push(`Step ${query.interval}`);\n  }\n\n  items.push(`Type: ${queryType}`);\n\n  if (query.exemplar) {\n    items.push(`Exemplars: true`);\n  }\n\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { testIds } from '../../components/PromQueryEditor';\nimport PromQueryField from '../../components/PromQueryField';\nimport { PromQueryEditorProps } from '../../components/types';\n\nexport function PromQueryCodeEditor({\n  query,\n  datasource,\n  range,\n  onRunQuery,\n  onChange,\n  data,\n  app,\n}: PromQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <PromQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={[]}\n        data={data}\n        data-testid={testIds.editor}\n        app={app}\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // This wrapper styling can be removed after the old PromQueryEditor is removed.\n    // This is removing margin bottom on the old legacy inline form styles\n    wrapper: css`\n      .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n  };\n};\n","import React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { FeedbackLink } from '../shared/FeedbackLink';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderExplained } from './PromQueryBuilderExplained';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\n\nexport const PromQueryEditorSelector = React.memo<PromQueryEditorProps>((props) => {\n  const { onChange, onRunQuery, data, app } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n\n  const query = getQueryWithDefaults(props.query, app);\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can loose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onQueryPreviewChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, rawQuery: isEnabled });\n  };\n\n  const onChangeInternal = (query: PromQuery) => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may loose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <EditorHeader>\n        {editorMode === QueryEditorMode.Builder && (\n          <>\n            <InlineSelect\n              value={null}\n              placeholder=\"Query patterns\"\n              allowCustomValue\n              onChange={({ value }) => {\n                // TODO: Bit convoluted as we don't have access to visualQuery model here. Maybe would make sense to\n                //  move it inside the editor?\n                const result = buildVisualQueryFromString(query.expr || '');\n                result.query.operations = value?.operations!;\n                onChange({\n                  ...query,\n                  expr: promQueryModeller.renderQuery(result.query),\n                });\n              }}\n              options={promQueryModeller.getQueryPatterns().map((x) => ({ label: x.name, value: x }))}\n            />\n            <QueryHeaderSwitch label=\"Raw query\" value={query.rawQuery} onChange={onQueryPreviewChange} />\n          </>\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <FeedbackLink feedbackUrl=\"https://github.com/grafana/grafana/discussions/47693\" />\n        )}\n        <FlexItem grow={1} />\n        <Button\n          variant={dataIsStale ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={onRunQuery}\n          icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n          disabled={data?.state === LoadingState.Loading}\n        >\n          Run query\n        </Button>\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && <PromQueryCodeEditor {...props} />}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n          />\n        )}\n        {editorMode === QueryEditorMode.Explain && <PromQueryBuilderExplained query={query.expr} />}\n        {editorMode !== QueryEditorMode.Explain && (\n          <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n        )}\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","import React, { memo, useEffect } from 'react';\n\nimport { QueryEditorProps, CoreApp } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery, PromOptions } from '../types';\n\nimport { PromExploreExtraField } from './PromExploreExtraField';\nimport PromQueryField from './PromQueryField';\n\nexport type Props = QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions>;\n\nexport const PromExploreQueryEditor = memo((props: Props) => {\n  const { range, query, data, datasource, history, onChange, onRunQuery } = props;\n\n  // Setting default values\n  useEffect(() => {\n    if (query.expr === undefined) {\n      onChange({ ...query, expr: '' });\n    }\n    if (query.exemplar === undefined) {\n      onChange({ ...query, exemplar: true });\n    }\n\n    // Override query type to \"Both\" only for new queries (no query.expr).\n    if (!query.instant && !query.range && !query.expr) {\n      onChange({ ...query, instant: true, range: true });\n    }\n  }, [onChange, query]);\n\n  return (\n    <PromQueryField\n      app={CoreApp.Explore}\n      datasource={datasource}\n      query={query}\n      range={range}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      onBlur={() => {}}\n      history={history}\n      data={data}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <PromExploreExtraField query={query} onChange={onChange} datasource={datasource} onRunQuery={onRunQuery} />\n      }\n    />\n  );\n});\n\nPromExploreQueryEditor.displayName = 'PromExploreQueryEditor';\n\nexport const testIds = {\n  editor: 'prom-editor-explore',\n};\n","import React from 'react';\n\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromExploreQueryEditor } from './PromExploreQueryEditor';\nimport { PromQueryEditor } from './PromQueryEditor';\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorByApp(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    case CoreApp.Explore:\n      if (config.featureToggles.promQueryBuilder) {\n        return <PromQueryEditorSelector {...props} />;\n      }\n      return <PromExploreQueryEditor {...props} />;\n    default:\n      if (config.featureToggles.promQueryBuilder) {\n        return <PromQueryEditorSelector {...props} />;\n      }\n      return <PromQueryEditor {...props} />;\n  }\n}\n\nexport default memo(PromQueryEditorByApp);\n","import { SelectableValue } from '@grafana/data';\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  Germany = 'AzureGermanCloud',\n  None = '',\n}\n\nexport const KnownAzureClouds = [\n  { value: AzureCloud.Public, label: 'Azure' },\n  { value: AzureCloud.China, label: 'Azure China' },\n  { value: AzureCloud.USGovernment, label: 'Azure US Government' },\n  { value: AzureCloud.Germany, label: 'Azure Germany' },\n] as SelectableValue[];\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { AzureCloud, AzureCredentials, ConcealedSecret } from './AzureCredentials';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud(): string {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options: DataSourceSettings<any, any>): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options: DataSourceSettings<any, any>): boolean {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: DataSourceSettings<any, any>): AzureCredentials {\n  const credentials = options.jsonData.azureCredentials as AzureCredentials | undefined;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: DataSourceSettings<any, any>,\n  credentials: AzureCredentials\n): DataSourceSettings<any, any> {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'msi',\n          },\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function setDefaultCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, Button } from '@grafana/ui/src/components';\nimport { Input } from '@grafana/ui/src/components/Forms/Legacy/Input/Input';\nimport { Select } from '@grafana/ui/src/components/Forms/Legacy/Select/Select';\n\nimport { AzureAuthType, AzureCredentials, isCredentialsComplete } from './AzureCredentials';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              menuShouldPortal\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  menuShouldPortal\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  menuShouldPortal\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { InlineFormLabel, Input } from '@grafana/ui';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\n\nimport { KnownAzureClouds, AzureCredentials } from './AzureCredentials';\nimport { getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings: FunctionComponent<HttpSettingsBaseProps> = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig, onChange } = props;\n\n  const credentials = useMemo(() => getCredentials(dataSourceConfig), [dataSourceConfig]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    onChange(updateCredentials(dataSourceConfig, credentials));\n  };\n\n  return (\n    <>\n      <h6>Azure Authentication</h6>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={KnownAzureClouds}\n        onCredentialsChange={onCredentialsChange}\n      />\n      <h6>Azure Configuration</h6>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\">AAD resource ID</InlineFormLabel>\n            <div className=\"width-15\">\n              <Input\n                className=\"width-30\"\n                value={dataSourceConfig.jsonData.azureEndpointResourceId || ''}\n                onChange={(event) =>\n                  onChange({\n                    ...dataSourceConfig,\n                    jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: event.currentTarget.value },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AzureAuthSettings;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineSwitch, Input } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n};\n\nexport default function ExemplarSetting({ value, onChange, onDelete }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Internal link\" labelWidth={24}>\n        <>\n          <InlineSwitch\n            value={isInternalLink}\n            aria-label={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n          <Button\n            variant=\"destructive\"\n            title=\"Remove link\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n            className={css`\n              margin-left: 8px;\n            `}\n          />\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={24}\n          tooltip=\"The data source the exemplar is going to navigate to.\"\n        >\n          <DataSourcePicker\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={24}\n          tooltip=\"The URL of the trace backend the user would go to see its trace.\"\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={24}\n        tooltip=\"Use to override the button label on the exemplar traceID field.\"\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={24}\n        tooltip=\"The name of the field in the labels object that should be used to get the traceID.\"\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport ExemplarSetting from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n};\n\nexport function ExemplarsSettings({ options, onChange }: Props) {\n  return (\n    <>\n      <h3 className=\"page-heading\">Exemplars</h3>\n\n      {options &&\n        options.map((option, index) => {\n          return (\n            <ExemplarSetting\n              key={index}\n              value={option}\n              onChange={(newField) => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1, newField);\n                onChange(newOptions);\n              }}\n              onDelete={() => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1);\n                onChange(newOptions);\n              }}\n            />\n          );\n        })}\n\n      <Button\n        variant=\"secondary\"\n        aria-label={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n        className={css`\n          margin-bottom: 10px;\n        `}\n        icon=\"plus\"\n        onClick={(event) => {\n          event.preventDefault();\n          const newOptions = [...(options || []), { name: 'traceID' }];\n          onChange(newOptions);\n        }}\n      >\n        Add\n      </Button>\n    </>\n  );\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { EventsWithValidation, InlineFormLabel, LegacyForms, regexValidation } from '@grafana/ui';\n\nimport { PromOptions } from '../types';\n\nimport { ExemplarsSettings } from './ExemplarsSettings';\nconst { Select, Input, FormField, Switch } = LegacyForms;\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // We are explicitly adding httpMethod so it is correctly displayed in dropdown. This way, it is more predictable for users.\n\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Scrape interval\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.timeInterval}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                  validationEvents={promSettingsValidationEvents}\n                />\n              }\n              tooltip=\"Set this to the typical scrape and evaluation interval configured in Prometheus. Defaults to 15s.\"\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Query timeout\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.queryTimeout}\n                  onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"60s\"\n                  validationEvents={promSettingsValidationEvents}\n                />\n              }\n              tooltip=\"Set the Prometheus query timeout.\"\n            />\n          </div>\n        </div>\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={13}\n            tooltip=\"You can use either POST or GET HTTP method to query your Prometheus data source. POST is the recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version older than 2.1 or if POST requests are restricted in your network.\"\n          >\n            HTTP Method\n          </InlineFormLabel>\n          <Select\n            aria-label=\"Select HTTP method\"\n            menuShouldPortal\n            options={httpOptions}\n            value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n            onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n            width={7}\n          />\n        </div>\n      </div>\n      <h3 className=\"page-heading\">Misc</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <Switch\n            checked={options.jsonData.disableMetricsLookup ?? false}\n            label=\"Disable metrics lookup\"\n            labelClass=\"width-14\"\n            onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n            tooltip=\"Checking this option will disable the metrics chooser and metric/label support in the query field's autocomplete. This helps if you have performance issues with bigger Prometheus instances.\"\n          />\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              label=\"Custom query parameters\"\n              labelWidth={14}\n              tooltip=\"Add Custom parameters to all Prometheus or Thanos queries.\"\n              inputEl={\n                <Input\n                  className=\"width-25\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                />\n              }\n            />\n          </div>\n        </div>\n      </div>\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport const promSettingsValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    regexValidation(\n      /^$|^\\d+(ms|[Mwdhmsy])$/,\n      'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n    ),\n  ],\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if (eventItem.hasOwnProperty('currentTarget')) {\n    return eventItem.currentTarget.value;\n  }\n\n  return (eventItem as SelectableValue<string>).value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport PromCheatSheet from './components/PromCheatSheet';\nimport PromQueryEditorByApp from './components/PromQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { ANNOTATION_QUERY_STEP_DEFAULT, PrometheusDatasource } from './datasource';\n\nclass PrometheusAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  stepDefaultValuePlaceholder = ANNOTATION_QUERY_STEP_DEFAULT;\n}\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(PrometheusAnnotationsQueryCtrl)\n  .setQueryEditorHelp(PromCheatSheet);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { AlertingSettings, DataSourceHttpSettings, Alert } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { getAllAlertmanagerDataSources } from 'app/features/alerting/unified/utils/alertmanager';\n\nimport { PromOptions } from '../types';\n\nimport { AzureAuthSettings } from './AzureAuthSettings';\nimport { hasCredentials, setDefaultCredentials, resetCredentials } from './AzureCredentialsConfig';\nimport { PromSettings } from './PromSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps<PromOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const alertmanagers = getAllAlertmanagerDataSources();\n\n  const azureAuthSettings = {\n    azureAuthSupported: config.featureToggles['prometheus_azure_auth'] ?? false,\n    getAzureAuthEnabled: (config: DataSourceSettings<any, any>): boolean => hasCredentials(config),\n    setAzureAuthEnabled: (config: DataSourceSettings<any, any>, enabled: boolean) =>\n      enabled ? setDefaultCredentials(config) : resetCredentials(config),\n    azureSettingsUI: AzureAuthSettings,\n  };\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Deprecation Notice\" severity=\"warning\">\n          Browser access mode in the Prometheus datasource is deprecated and will be removed in a future release.\n        </Alert>\n      )}\n\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9090\"\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        azureAuthSettings={azureAuthSettings}\n      />\n\n      <AlertingSettings<PromOptions>\n        alertmanagerDataSources={alertmanagers}\n        options={options}\n        onOptionsChange={onOptionsChange}\n      />\n\n      <PromSettings options={options} onOptionsChange={onOptionsChange} />\n    </>\n  );\n};\n","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\n// When changing RATE_RANGES, check if Loki/LogQL ranges should be changed too\n// @see public/app/plugins/datasource/loki/language_provider.ts\nexport const RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '$__rate_interval', sortValue: '$__rate_interval' },\n  { label: '$__range', sortValue: '$__range' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const OPERATORS = ['by', 'group_left', 'group_right', 'ignoring', 'on', 'offset', 'without'];\nexport const LOGICAL_OPERATORS = ['or', 'and', 'unless'];\n\nconst TRIGONOMETRIC_FUNCTIONS: CompletionItem[] = [\n  {\n    label: 'acos',\n    insertText: 'acos',\n    detail: 'acos(v instant-vector)',\n    documentation: 'calculates the arccosine of all elements in v',\n  },\n  {\n    label: 'acosh',\n    insertText: 'acosh',\n    detail: 'acosh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic cosine of all elements in v',\n  },\n  {\n    label: 'asin',\n    insertText: 'asin',\n    detail: 'asin(v instant-vector)',\n    documentation: 'calculates the arcsine of all elements in v',\n  },\n  {\n    label: 'asinh',\n    insertText: 'asinh',\n    detail: 'asinh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic sine of all elements in v',\n  },\n  {\n    label: 'atan',\n    insertText: 'atan',\n    detail: 'atan(v instant-vector)',\n    documentation: 'calculates the arctangent of all elements in v',\n  },\n  {\n    label: 'atanh',\n    insertText: 'atanh',\n    detail: 'atanh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic tangent of all elements in v',\n  },\n  {\n    label: 'cos',\n    insertText: 'cos',\n    detail: 'cos(v instant-vector)',\n    documentation: 'calculates the cosine of all elements in v',\n  },\n  {\n    label: 'cosh',\n    insertText: 'cosh',\n    detail: 'cosh(v instant-vector)',\n    documentation: 'calculates the hyperbolic cosine of all elements in v',\n  },\n  {\n    label: 'sin',\n    insertText: 'sin',\n    detail: 'sin(v instant-vector)',\n    documentation: 'calculates the sine of all elements in v',\n  },\n  {\n    label: 'sinh',\n    insertText: 'sinh',\n    detail: 'sinh(v instant-vector)',\n    documentation: 'calculates the hyperbolic sine of all elements in v',\n  },\n  {\n    label: 'tan',\n    insertText: 'tan',\n    detail: 'tan(v instant-vector)',\n    documentation: 'calculates the tangent of all elements in v',\n  },\n  {\n    label: 'tanh',\n    insertText: 'tanh',\n    detail: 'tanh(v instant-vector)',\n    documentation: 'calculates the hyperbolic tangent of all elements in v',\n  },\n];\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'group',\n    insertText: 'group',\n    documentation: 'All values in the resulting vector are 1',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'count_values',\n    insertText: 'count_values',\n    documentation: 'Count number of elements with the same value',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n  {\n    label: 'quantile',\n    insertText: 'quantile',\n    documentation: 'Calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions',\n  },\n];\n\nexport const FUNCTIONS = [\n  ...AGGREGATION_OPERATORS,\n  ...TRIGONOMETRIC_FUNCTIONS,\n  {\n    insertText: 'abs',\n    label: 'abs',\n    detail: 'abs(v instant-vector)',\n    documentation: 'Returns the input vector with all sample values converted to their absolute value.',\n  },\n  {\n    insertText: 'absent',\n    label: 'absent',\n    detail: 'absent(v instant-vector)',\n    documentation:\n      'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.',\n  },\n  {\n    insertText: 'absent_over_time',\n    label: 'absent_over_time',\n    detail: 'absent(v range-vector)',\n    documentation:\n      'Returns an empty vector if the range vector passed to it has any elements and a 1-element vector with the value 1 if the range vector passed to it has no elements.',\n  },\n  {\n    insertText: 'ceil',\n    label: 'ceil',\n    detail: 'ceil(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` up to the nearest integer.',\n  },\n  {\n    insertText: 'changes',\n    label: 'changes',\n    detail: 'changes(v range-vector)',\n    documentation:\n      'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.',\n  },\n  {\n    insertText: 'clamp',\n    label: 'clamp',\n    detail: 'clamp(v instant-vector, min scalar, max scalar)',\n    documentation:\n      'Clamps the sample values of all elements in `v` to have a lower limit of `min` and an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_max',\n    label: 'clamp_max',\n    detail: 'clamp_max(v instant-vector, max scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_min',\n    label: 'clamp_min',\n    detail: 'clamp_min(v instant-vector, min scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.',\n  },\n  {\n    insertText: 'count_scalar',\n    label: 'count_scalar',\n    detail: 'count_scalar(v instant-vector)',\n    documentation:\n      'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.',\n  },\n  {\n    insertText: 'deg',\n    label: 'deg',\n    detail: 'deg(v instant-vector)',\n    documentation: 'Converts radians to degrees for all elements in v',\n  },\n  {\n    insertText: 'day_of_month',\n    label: 'day_of_month',\n    detail: 'day_of_month(v=vector(time()) instant-vector)',\n    documentation: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.',\n  },\n  {\n    insertText: 'day_of_week',\n    label: 'day_of_week',\n    detail: 'day_of_week(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.',\n  },\n  {\n    insertText: 'days_in_month',\n    label: 'days_in_month',\n    detail: 'days_in_month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.',\n  },\n  {\n    insertText: 'delta',\n    label: 'delta',\n    detail: 'delta(v range-vector)',\n    documentation:\n      'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.',\n  },\n  {\n    insertText: 'deriv',\n    label: 'deriv',\n    detail: 'deriv(v range-vector)',\n    documentation:\n      'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'drop_common_labels',\n    label: 'drop_common_labels',\n    detail: 'drop_common_labels(instant-vector)',\n    documentation: 'Drops all labels that have the same name and value across all series in the input vector.',\n  },\n  {\n    insertText: 'exp',\n    label: 'exp',\n    detail: 'exp(v instant-vector)',\n    documentation:\n      'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`',\n  },\n  {\n    insertText: 'floor',\n    label: 'floor',\n    detail: 'floor(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` down to the nearest integer.',\n  },\n  {\n    insertText: 'histogram_quantile',\n    label: 'histogram_quantile',\n    detail: 'histogram_quantile(φ float, b instant-vector)',\n    documentation:\n      'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.',\n  },\n  {\n    insertText: 'holt_winters',\n    label: 'holt_winters',\n    detail: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    documentation:\n      'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.',\n  },\n  {\n    insertText: 'hour',\n    label: 'hour',\n    detail: 'hour(v=vector(time()) instant-vector)',\n    documentation: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.',\n  },\n  {\n    insertText: 'idelta',\n    label: 'idelta',\n    detail: 'idelta(v range-vector)',\n    documentation:\n      'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.',\n  },\n  {\n    insertText: 'increase',\n    label: 'increase',\n    detail: 'increase(v range-vector)',\n    documentation:\n      'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.',\n  },\n  {\n    insertText: 'irate',\n    label: 'irate',\n    detail: 'irate(v range-vector)',\n    documentation:\n      'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.',\n  },\n  {\n    insertText: 'label_join',\n    label: 'label_join',\n    detail:\n      'label_join(v instant-vector, dst_label string, separator string, src_label_1 string, src_label_2 string, ...)',\n    documentation:\n      'For each timeseries in `v`, joins all the values of all the `src_labels` using `separator` and returns the timeseries with the label `dst_label` containing the joined value. There can be any number of `src_labels` in this function.',\n  },\n  {\n    insertText: 'label_replace',\n    label: 'label_replace',\n    detail: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    documentation:\n      \"For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn't match then the timeseries is returned unchanged.\",\n  },\n  {\n    insertText: 'ln',\n    label: 'ln',\n    detail: 'ln(v instant-vector)',\n    documentation:\n      'Calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`',\n  },\n  {\n    insertText: 'log2',\n    label: 'log2',\n    detail: 'log2(v instant-vector)',\n    documentation:\n      'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'log10',\n    label: 'log10',\n    detail: 'log10(v instant-vector)',\n    documentation:\n      'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'minute',\n    label: 'minute',\n    detail: 'minute(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.',\n  },\n  {\n    insertText: 'month',\n    label: 'month',\n    detail: 'month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.',\n  },\n  {\n    insertText: 'pi',\n    label: 'pi',\n    detail: 'pi()',\n    documentation: 'Returns pi',\n  },\n  {\n    insertText: 'predict_linear',\n    label: 'predict_linear',\n    detail: 'predict_linear(v range-vector, t scalar)',\n    documentation:\n      'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'rad',\n    label: 'rad',\n    detail: 'rad(v instant-vector)',\n    documentation: 'Converts degrees to radians for all elements in v',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation:\n      \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\",\n  },\n  {\n    insertText: 'resets',\n    label: 'resets',\n    detail: 'resets(v range-vector)',\n    documentation:\n      'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.',\n  },\n  {\n    insertText: 'round',\n    label: 'round',\n    detail: 'round(v instant-vector, to_nearest=1 scalar)',\n    documentation:\n      'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.',\n  },\n  {\n    insertText: 'scalar',\n    label: 'scalar',\n    detail: 'scalar(v instant-vector)',\n    documentation:\n      'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.',\n  },\n  {\n    insertText: 'sgn',\n    label: 'sgn',\n    detail: 'sgn(v instant-vector)',\n    documentation:\n      'Returns a vector with all sample values converted to their sign, defined as this: 1 if v is positive, -1 if v is negative and 0 if v is equal to zero.',\n  },\n  {\n    insertText: 'sort',\n    label: 'sort',\n    detail: 'sort(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in ascending order.',\n  },\n  {\n    insertText: 'sort_desc',\n    label: 'sort_desc',\n    detail: 'sort_desc(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in descending order.',\n  },\n  {\n    insertText: 'sqrt',\n    label: 'sqrt',\n    detail: 'sqrt(v instant-vector)',\n    documentation: 'Calculates the square root of all elements in `v`.',\n  },\n  {\n    insertText: 'time',\n    label: 'time',\n    detail: 'time()',\n    documentation:\n      'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.',\n  },\n  {\n    insertText: 'timestamp',\n    label: 'timestamp',\n    detail: 'timestamp(v instant-vector)',\n    documentation:\n      'Returns the timestamp of each of the samples of the given vector as the number of seconds since January 1, 1970 UTC.',\n  },\n  {\n    insertText: 'vector',\n    label: 'vector',\n    detail: 'vector(s scalar)',\n    documentation: 'Returns the scalar `s` as a vector with no labels.',\n  },\n  {\n    insertText: 'year',\n    label: 'year',\n    detail: 'year(v=vector(time()) instant-vector)',\n    documentation: 'Returns the year for each of the given times in UTC.',\n  },\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average value of all points in the specified interval.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation: 'The population standard deviation of the values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation: 'The population standard variance of the values in the specified interval.',\n  },\n  {\n    insertText: 'last_over_time',\n    label: 'last_over_time',\n    detail: 'last_over_time(range-vector)',\n    documentation: 'The most recent point value in specified interval.',\n  },\n];\n\nexport const PROM_KEYWORDS = FUNCTIONS.map((keyword) => keyword.label);\n\nexport const promqlGrammar: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((by|without)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  idList: {\n    pattern: /\\d+(\\|\\d+)+/,\n    alias: 'number',\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/[-+*/=%^~]|&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:${OPERATORS.join('|')})\\\\b`, 'i'),\n  punctuation: /[{};()`,.]/,\n};\n\nexport default promqlGrammar;\n"],"names":["CHEAT_SHEET_ITEMS","title","expression","label","props","map","item","index","className","onClick","e","onClickExample","refId","expr","FeedbackLink","feedbackUrl","styles","useStyles2","getStyles","config","Stack","gap","href","link","target","rel","Icon","name","theme","css","color","colors","text","secondary","fontSize","typography","bodySmall","QueryHeaderSwitch","inputProps","switchIdRef","useRef","uniqueId","htmlFor","current","switchLabel","Switch","id","cursor","primary","queryEditorModeDefaultLocalStorageKey","changeEditorMode","query","editorMode","onChange","store","MetricSelect","onGetMetrics","state","setState","useState","customFilterOption","useCallback","option","searchQuery","value","split","reduce","acc","cur","toLowerCase","includes","formatOptionLabel","meta","searchWords","inputValue","textToHighlight","highlightClassName","highlight","EditorFieldGroup","EditorField","Select","inputId","select","metric","toOption","undefined","placeholder","allowCustomValue","filterOption","onOpenMenu","async","isLoading","metrics","options","warning","main","NestedQuery","React","nestedQuery","datasource","onRemove","onRunQuery","card","header","width","operators","operator","vectorMatchWrapper","vectorMatchesType","val","AutoSizeInput","vectorMatchInput","minWidth","defaultValue","vectorMatches","onCommitChange","evt","currentTarget","FlexItem","grow","IconButton","size","body","EditorRows","PromQueryBuilder","nested","update","binaryScalarDefs","def","sign","displayName","display","flexDirection","spacing","padding","alignItems","whiteSpace","paddingLeft","marginLeft","NestedQueryList","nestedQueries","binaryQueries","onNestedQueryUpdate","updatedList","splice","slice","direction","toString","PromQueryBuilderHints","data","hints","setHints","useEffect","promQuery","promQueryModeller","getQueryHints","series","filter","hint","fix","action","length","container","Tooltip","content","Button","newPromQuery","modifyQuery","visualQuery","buildVisualQueryFromString","fill","type","replace","withTemplateVariableOptions","variables","getVariables","optionsPromise","description","languageProvider","metricsMetadata","loadMetricsMetadata","labels","getSeries","getLabelValues","m","getMetadataString","getMetrics","EditorRow","LabelFilters","labelsFilters","onGetLabelNames","forLabel","fetchLabels","getLabelKeys","k","labelsToConsider","x","push","op","labelsIndex","fetchSeriesLabels","Object","keys","labelName","find","onGetLabelValues","v","interpolateString","OperationsEditorRow","OperationList","queryModeller","QueryPreview","useTheme2","hightlighted","Prism","promqlGrammar","cx","editorField","dangerouslySetInnerHTML","__html","fontFamily","fontFamilyMonospace","PromQueryBuilderContainer","dispatch","useReducer","stateSlice","reducer","exprChanged","visQuery","visualQueryChange","rawQuery","createSlice","initialState","reducers","payload","parseResult","actions","PromQueryBuilderExplained","OperationExplainedBox","stepNumber","OperationListExplained","PromExemplarField","rest","error","setError","prevError","usePrevious","exemplarsAvailable","instant","range","iconButtonStyles","activeIcon","exemplar","eyeIcon","InlineLabel","iconWrapper","tooltip","disabled","PromExploreExtraField","memo","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","isEqual","onQueryTypeChange","getQueryTypeChangeHandler","testIds","extraFieldEditor","queryTypeField","InlineFormLabel","RadioButtonGroup","stepField","interval","onKeyDown","key","shiftKey","includeBoth","queryType","PromLink","panelData","setHref","request","scopedVars","start","getPrometheusTime","from","end","to","rangeDiff","Math","ceil","endTime","utc","format","getRateIntervalScopedVariable","rangeUtil","customQueryParameters","queryOptions","createQuery","step","args","encodeURIComponent","join","directUrl","getExternalLink","textUtil","EMPTY_SELECTOR","METRIC_LABEL","buildSelector","singleMetric","selectedLabels","selected","values","selectedValues","escapeLabelValueInRegexSelector","escapeLabelValueInExactSelector","stylesFactory","wrapper","bg2","sm","list","section","md","selector","monospace","status","xs","textSemiWeak","statusShowing","palette","brandDanger","valueList","valueListWrapper","border2","valueListArea","valueTitle","validationStatus","textStrong","UnthemedPrometheusMetricsBrowser","labelSearchTerm","metricSearchTerm","valueSearchTerm","event","this","loading","hidden","facets","deleteLastUsedLabels","fetchValues","l","nextValue","updateLabelState","doFacettingForLabel","doFacetting","some","validateSelector","lastFacetted","forEach","fetchSeries","updatedFields","cb","componentDidMount","lastUsedLabels","then","rawLabels","i","arr","storeLastUsedLabels","rawValues","labelValue","details","help","console","possibleLabels","possibleValues","existingValues","Set","has","facetLabels","streams","render","LoadingPlaceholder","nonMetricLabels","empty","metricCount","HorizontalGroup","align","Label","Input","onChangeMetricSearch","role","height","min","itemCount","itemSize","itemKey","style","active","onClickMetric","searchTerm","onChangeLabelSearch","onClickLabel","onChangeValueSearch","ref","valueListsRef","onClickValue","onClickRunQuery","variant","onClickRunRateQuery","onClickValidate","onClickClear","PrometheusMetricsBrowser","withTheme","Field","MonacoQueryFieldLazy","Suspense","fallback","MonacoQueryFieldWrapper","lastRunValueRef","runQueryOnBlur","handleRunQuery","onBlur","PromQueryField","constructor","context","super","initHints","getInitHints","initHint","result","isDataFrame","toLegacyResponseData","queryHints","queryHint","languageProviderInitializationPromise","promise","hasCanceled_","Promise","resolve","reject","isCanceled","catch","cancel","makePromiseCancelable","remainingTasks","all","onUpdateLanguage","err","onChangeQuery","labelBrowserVisible","override","syntaxLoaded","suggestions","history","prefix","wrapperClasses","labelKey","typeahead","provideCompletionItems","plugins","BracesPlugin","SlatePrism","onlyIn","node","getSyntax","prismLanguages","promql","syntax","refreshMetrics","refreshHint","componentWillUnmount","componentDidUpdate","prevProps","changedRangeToRefresh","rangeChangedToRefresh","prevRange","sameMinuteFrom","roundMsToMin","valueOf","sameMinuteTo","ExtraFieldElement","hasMetrics","chooserText","metricsLookupDisabled","hasSyntax","getChooserText","lookupsDisabled","buttonDisabled","LocalStorageValueProvider","storageKey","onLastUsedLabelsSave","onLastUsedLabelsDelete","onClickChooserButton","app","CoreApp","initialValue","onChangeLabelBrowser","onClickHintFix","LegacyForms","FORMAT_OPTIONS","INTERVAL_FACTOR_OPTIONS","PromQueryEditor","PureComponent","formatOption","checked","intervalFactor","intervalFactorOption","legendFormat","isEnabled","hide","defaultQuery","assign","Boolean","showExemplarField","onFieldChange","editor","onLegendChange","onIntervalChange","menuShouldPortal","isSearchable","onIntervalFactorChange","onFormatChange","onInstantChange","legendModeOptions","LegendFormatMode","PromQueryLegendEditor","mode","getLegendMode","inputRef","newFormat","setTimeout","focus","setSelectionRange","PromQueryBuilderOptions","queryTypeOptions","queryTypeValue","getQueryTypeValue","queryTypeLabel","QueryOptionGroup","collapsedInfo","getCollapsedInfo","shouldShowExemplarSwitch","items","getLegendModeLabel","PromQueryCodeEditor","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","dataIsStale","setDataIsStale","QueryEditorMode","getQueryWithDefaults","onEditorModeChange","newMetricEditorMode","reportInteraction","newEditor","previousEditor","newQuery","errors","ConfirmModal","isOpen","confirmText","onConfirm","onDismiss","EditorHeader","InlineSelect","operations","icon","LoadingState","QueryEditorModeToggle","Space","PromExploreQueryEditor","PromQueryEditorForAlerting","PromQueryEditorByApp","AzureCloud","KnownAzureClouds","Public","China","USGovernment","Germany","concealed","Symbol","getDefaultAzureCloud","getSecret","secureJsonFields","azureClientSecret","secret","secureJsonData","getDefaultCredentials","authType","azureCloud","authTypeOptions","AzureCredentialsForm","credentials","azureCloudOptions","onCredentialsChange","getSubscriptions","hasRequiredFields","tenantId","clientId","clientSecret","isCredentialsComplete","subscriptions","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","updateSubscriptions","canceled","received","autoSelect","defaultSubscriptionId","onSubscriptionChange","opt","updated","managedIdentityEnabled","I","AzureAuthSettings","dataSourceConfig","useMemo","jsonData","azureCredentials","getCredentials","Error","updateCredentials","azureEndpointResourceId","ExemplarSetting","onDelete","isInternalLink","setIsInternalLink","datasourceUid","InlineField","labelWidth","InlineSwitch","selectors","ev","preventDefault","DataSourcePicker","tracing","noDefault","ds","uid","url","spellCheck","urlDisplayLabel","ExemplarsSettings","newField","newOptions","FormField","httpOptions","PromSettings","onOptionsChange","httpMethod","inputEl","timeInterval","onChangeHandler","validationEvents","promSettingsValidationEvents","queryTimeout","o","disableMetricsLookup","labelClass","onUpdateDatasourceJsonDataOptionChecked","exemplarTraceIdDestinations","exemplarOptions","updateDatasourcePluginJsonDataOption","EventsWithValidation","regexValidation","getValueFromEventItem","eventItem","hasOwnProperty","PrometheusAnnotationsQueryCtrl","ANNOTATION_QUERY_STEP_DEFAULT","plugin","DataSourcePlugin","PrometheusDatasource","setQueryEditor","setConfigEditor","alertmanagers","getAllAlertmanagerDataSources","azureAuthSettings","azureAuthSupported","getAzureAuthEnabled","hasCredentials","setAzureAuthEnabled","enabled","setDefaultCredentials","azureAuth","resetCredentials","azureSettingsUI","access","Alert","severity","DataSourceHttpSettings","defaultUrl","showAccessOptions","sigV4AuthToggleEnabled","AlertingSettings","alertmanagerDataSources","setAnnotationQueryCtrl","setQueryEditorHelp","PromCheatSheet","RATE_RANGES","sortValue","OPERATORS","LOGICAL_OPERATORS","FUNCTIONS","insertText","documentation","detail","PROM_KEYWORDS","keyword","comment","pattern","lookbehind","inside","alias","punctuation","greedy","function","RegExp","f","idList","number"],"sourceRoot":""}