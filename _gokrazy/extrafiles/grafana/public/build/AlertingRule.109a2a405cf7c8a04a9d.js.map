{"version":3,"file":"AlertingRule.109a2a405cf7c8a04a9d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/utils/query.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerVisualization.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsFederatedSources.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/PanelPluginsButtonGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts","webpack://grafana/./public/app/features/alerting/unified/utils/timeRange.ts","webpack://grafana/./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack://grafana/./public/app/features/expressions/guards.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/3/opt/drone/yarncache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useObservable.js"],"sourcesContent":["import { DataQuery, DataSourceInstanceSettings } from '@grafana/data';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { isCloudRulesSource, isGrafanaRulesSource } from './datasource';\nimport { isGrafanaRulerRule } from './rules';\n\nexport function alertRuleToQueries(combinedRule: CombinedRule | undefined | null): AlertQuery[] {\n  if (!combinedRule) {\n    return [];\n  }\n  const { namespace, rulerRule } = combinedRule;\n  const { rulesSource } = namespace;\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    if (isGrafanaRulerRule(rulerRule)) {\n      return rulerRule.grafana_alert.data;\n    }\n  }\n\n  if (isCloudRulesSource(rulesSource)) {\n    const model = cloudAlertRuleToModel(rulesSource, combinedRule);\n\n    return [\n      {\n        refId: model.refId,\n        datasourceUid: rulesSource.uid,\n        queryType: '',\n        model,\n        relativeTimeRange: {\n          from: 360,\n          to: 0,\n        },\n      },\n    ];\n  }\n\n  return [];\n}\n\nfunction cloudAlertRuleToModel(dsSettings: DataSourceInstanceSettings, rule: CombinedRule): DataQuery {\n  const refId = 'A';\n\n  switch (dsSettings.type) {\n    case 'prometheus': {\n      const query: PromQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    case 'loki': {\n      const query: LokiQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    default:\n      throw new Error(`Query for datasource type ${dsSettings.type} is currently not supported by cloud alert rules.`);\n  }\n}\n","import React, { useCallback, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { DataSourceInstanceSettings, DateTime, dateTime, GrafanaTheme2, PanelData, urlUtil } from '@grafana/data';\nimport { config, getDataSourceSrv, PanelRenderer } from '@grafana/runtime';\nimport { Alert, CodeEditor, DateTimePicker, LinkButton, useStyles2, useTheme2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { PanelPluginsButtonGroup, SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\nimport { TABLE, TIMESERIES } from '../../utils/constants';\n\ntype RuleViewerVisualizationProps = {\n  data?: PanelData;\n  query: AlertQuery;\n  onChangeQuery: (query: AlertQuery) => void;\n};\n\nconst headerHeight = 4;\n\nexport function RuleViewerVisualization(props: RuleViewerVisualizationProps): JSX.Element | null {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { data, query, onChangeQuery } = props;\n  const defaultPanel = isExpressionQuery(query.model) ? TABLE : TIMESERIES;\n  const [panel, setPanel] = useState<SupportedPanelPlugins>(defaultPanel);\n  const dsSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  const relativeTimeRange = query.relativeTimeRange;\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n\n  const onTimeChange = useCallback(\n    (newDateTime: DateTime) => {\n      const now = dateTime().unix() - newDateTime.unix();\n\n      if (relativeTimeRange) {\n        const interval = relativeTimeRange.from - relativeTimeRange.to;\n        onChangeQuery({\n          ...query,\n          relativeTimeRange: { from: now + interval, to: now },\n        });\n      }\n    },\n    [onChangeQuery, query, relativeTimeRange]\n  );\n\n  const setDateTime = useCallback((relativeTimeRangeTo: number) => {\n    return relativeTimeRangeTo === 0 ? dateTime() : dateTime().subtract(relativeTimeRangeTo, 'seconds');\n  }, []);\n\n  if (!data) {\n    return null;\n  }\n\n  if (!dsSettings) {\n    return (\n      <div className={styles.content}>\n        <Alert title=\"Could not find datasource for query\" />\n        <CodeEditor\n          width=\"100%\"\n          height=\"250px\"\n          language=\"json\"\n          showLineNumbers={false}\n          showMiniMap={false}\n          value={JSON.stringify(query, null, '\\t')}\n          readOnly={true}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.content}>\n      <AutoSizer>\n        {({ width, height }) => {\n          return (\n            <div style={{ width, height }}>\n              <div className={styles.header}>\n                <div>\n                  {`Query ${query.refId}`}\n                  <span className={styles.dataSource}>({dsSettings.name})</span>\n                </div>\n                <div className={styles.actions}>\n                  {!isExpressionQuery(query.model) && relativeTimeRange ? (\n                    <DateTimePicker\n                      date={setDateTime(relativeTimeRange.to)}\n                      onChange={onTimeChange}\n                      maxDate={new Date()}\n                    />\n                  ) : null}\n                  <PanelPluginsButtonGroup onChange={setPanel} value={panel} size=\"md\" />\n                  {!isExpressionQuery(query.model) && (\n                    <>\n                      <div className={styles.spacing} />\n                      <LinkButton\n                        size=\"md\"\n                        variant=\"secondary\"\n                        icon=\"compass\"\n                        target=\"_blank\"\n                        href={createExploreLink(dsSettings, query)}\n                      >\n                        View in Explore\n                      </LinkButton>\n                    </>\n                  )}\n                </div>\n              </div>\n              <PanelRenderer\n                height={height - theme.spacing.gridSize * headerHeight}\n                width={width}\n                data={data}\n                pluginId={panel}\n                title=\"\"\n                onOptionsChange={setOptions}\n                options={options}\n              />\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n}\n\nfunction createExploreLink(settings: DataSourceInstanceSettings, query: AlertQuery): string {\n  const { name } = settings;\n  const { refId, ...rest } = query.model;\n  const queryParams = { ...rest, datasource: name };\n\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify(['now-1h', 'now', name, queryParams]),\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      width: 100%;\n      height: 250px;\n    `,\n    header: css`\n      height: ${theme.spacing(headerHeight)};\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      white-space: nowrap;\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.text.link};\n      overflow: hidden;\n    `,\n    dataSource: css`\n      margin-left: ${theme.spacing(1)};\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    actions: css`\n      display: flex;\n      align-items: center;\n    `,\n    spacing: css`\n      padding: ${theme.spacing(0, 1, 0, 0)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n};\n","import { CombinedRuleGroup } from 'app/types/unified-alerting';\nimport React, { FC } from 'react';\nimport { DetailsField } from '../DetailsField';\n\ninterface Props {\n  group: CombinedRuleGroup;\n}\n\nconst RuleDetailsFederatedSources: FC<Props> = ({ group }) => {\n  const sourceTenants = group.source_tenants ?? [];\n\n  return (\n    <DetailsField label=\"Tenant sources\">\n      <>\n        {sourceTenants.map((tenant) => (\n          <div key={tenant}>{tenant}</div>\n        ))}\n      </>\n    </DetailsField>\n  );\n};\n\nexport { RuleDetailsFederatedSources };\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState, PanelData } from '@grafana/data';\nimport {\n  withErrorBoundary,\n  useStyles2,\n  Alert,\n  LoadingPlaceholder,\n  PanelChromeLoadingIndicator,\n  Icon,\n  Button,\n  VerticalGroup,\n} from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AlertingQueryRunner } from './state/AlertingQueryRunner';\nimport { useCombinedRule } from './hooks/useCombinedRule';\nimport { alertRuleToQueries } from './utils/query';\nimport { RuleState } from './components/rules/RuleState';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { DetailsField } from './components/DetailsField';\nimport { RuleHealth } from './components/rules/RuleHealth';\nimport { RuleViewerVisualization } from './components/rule-viewer/RuleViewerVisualization';\nimport { RuleDetailsActionButtons } from './components/rules/RuleDetailsActionButtons';\nimport { RuleDetailsMatchingInstances } from './components/rules/RuleDetailsMatchingInstances';\nimport { RuleDetailsDataSources } from './components/rules/RuleDetailsDataSources';\nimport { RuleViewerLayout, RuleViewerLayoutContent } from './components/rule-viewer/RuleViewerLayout';\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleDetailsExpression } from './components/rules/RuleDetailsExpression';\nimport { RuleDetailsAnnotations } from './components/rules/RuleDetailsAnnotations';\nimport * as ruleId from './utils/rule-id';\nimport { AlertQuery } from '../../../types/unified-alerting-dto';\nimport { RuleDetailsFederatedSources } from './components/rules/RuleDetailsFederatedSources';\nimport { isFederatedRuleGroup } from './utils/rules';\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{ id?: string; sourceName?: string }>;\n\nconst errorMessage = 'Could not find data source for rule';\nconst errorTitle = 'Could not view rule';\nconst pageTitle = 'Alerting / View rule';\n\nexport function RuleViewer({ match }: RuleViewerProps) {\n  const styles = useStyles2(getStyles);\n  const { id, sourceName } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n  const { loading, error, result: rule } = useCombinedRule(identifier, sourceName);\n  const runner = useMemo(() => new AlertingQueryRunner(), []);\n  const data = useObservable(runner.get());\n  const queries2 = useMemo(() => alertRuleToQueries(rule), [rule]);\n  const [queries, setQueries] = useState<AlertQuery[]>([]);\n\n  const onRunQueries = useCallback(() => {\n    if (queries.length > 0) {\n      runner.run(queries);\n    }\n  }, [queries, runner]);\n\n  useEffect(() => {\n    setQueries(queries2);\n  }, [queries2]);\n\n  useEffect(() => {\n    onRunQueries();\n  }, [onRunQueries]);\n\n  useEffect(() => {\n    return () => runner.destroy();\n  }, [runner]);\n\n  const onChangeQuery = useCallback((query: AlertQuery) => {\n    setQueries((queries) =>\n      queries.map((q) => {\n        if (q.refId === query.refId) {\n          return query;\n        }\n        return q;\n      })\n    );\n  }, []);\n\n  if (!sourceName) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>{errorMessage}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (error || !rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>\n            {error?.message ?? errorMessage}\n            <br />\n            {!!error?.stack && error.stack}\n          </details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (!rule) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <span>Rule could not be found.</span>\n      </RuleViewerLayout>\n    );\n  }\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n  const isFederatedRule = isFederatedRuleGroup(rule.group);\n\n  return (\n    <RuleViewerLayout wrapInContent={false} title={pageTitle}>\n      {isFederatedRule && (\n        <Alert severity=\"info\" title=\"This rule is part of a federated rule group.\">\n          <VerticalGroup>\n            Federated rule groups are currently an experimental feature.\n            <Button fill=\"text\" icon=\"book\">\n              <a href=\"https://grafana.com/docs/metrics-enterprise/latest/tenant-management/tenant-federation/#cross-tenant-alerting-and-recording-rule-federation\">\n                Read documentation\n              </a>\n            </Button>\n          </VerticalGroup>\n        </Alert>\n      )}\n      <RuleViewerLayoutContent>\n        <div>\n          <h4>\n            <Icon name=\"bell\" size=\"lg\" /> {rule.name}\n          </h4>\n          <RuleState rule={rule} isCreating={false} isDeleting={false} />\n          <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n        </div>\n        <div className={styles.details}>\n          <div className={styles.leftSide}>\n            {rule.promRule && (\n              <DetailsField label=\"Health\" horizontal={true}>\n                <RuleHealth rule={rule.promRule} />\n              </DetailsField>\n            )}\n            {!!rule.labels && !!Object.keys(rule.labels).length && (\n              <DetailsField label=\"Labels\" horizontal={true}>\n                <AlertLabels labels={rule.labels} />\n              </DetailsField>\n            )}\n            <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n            <RuleDetailsAnnotations annotations={annotations} />\n          </div>\n          <div className={styles.rightSide}>\n            <RuleDetailsDataSources rule={rule} rulesSource={rulesSource} />\n            {isFederatedRule && <RuleDetailsFederatedSources group={rule.group} />}\n            <DetailsField label=\"Namespace / Group\">{`${rule.namespace.name} / ${rule.group.name}`}</DetailsField>\n          </div>\n        </div>\n        <div>\n          <RuleDetailsMatchingInstances promRule={rule.promRule} />\n        </div>\n      </RuleViewerLayoutContent>\n      {!isFederatedRule && data && Object.keys(data).length > 0 && (\n        <>\n          <div className={styles.queriesTitle}>\n            Query results <PanelChromeLoadingIndicator loading={isLoading(data)} onCancel={() => runner.cancel()} />\n          </div>\n          <RuleViewerLayoutContent padding={0}>\n            <div className={styles.queries}>\n              {queries.map((query) => {\n                return (\n                  <div key={query.refId} className={styles.query}>\n                    <RuleViewerVisualization\n                      query={query}\n                      data={data && data[query.refId]}\n                      onChangeQuery={onChangeQuery}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </RuleViewerLayoutContent>\n        </>\n      )}\n    </RuleViewerLayout>\n  );\n}\n\nfunction isLoading(data: Record<string, PanelData>): boolean {\n  return !!Object.values(data).find((d) => d.state === LoadingState.Loading);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n    queries: css`\n      height: 100%;\n      width: 100%;\n    `,\n    queriesTitle: css`\n      padding: ${theme.spacing(2, 0.5)};\n      font-size: ${theme.typography.h5.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n      font-family: ${theme.typography.h5.fontFamily};\n    `,\n    query: css`\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing(2)};\n    `,\n    details: css`\n      display: flex;\n      flex-direction: row;\n    `,\n    leftSide: css`\n      flex: 1;\n    `,\n    rightSide: css`\n      padding-left: 90px;\n      width: 300px;\n    `,\n  };\n};\n\nexport default withErrorBoundary(RuleViewer, { style: 'page' });\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React, { useMemo } from 'react';\nimport { STAT, TABLE, TIMESERIES } from '../utils/constants';\n\nexport type SupportedPanelPlugins = 'timeseries' | 'table' | 'stat';\n\ntype Props = {\n  value: SupportedPanelPlugins;\n  onChange: (value: SupportedPanelPlugins) => void;\n  size?: 'sm' | 'md';\n};\n\nexport function PanelPluginsButtonGroup(props: Props): JSX.Element | null {\n  const { value, onChange, size = 'md' } = props;\n  const panels = useMemo(() => getSupportedPanels(), []);\n\n  return <RadioButtonGroup options={panels} value={value} onChange={onChange} size={size} />;\n}\n\nfunction getSupportedPanels(): Array<SelectableValue<SupportedPanelPlugins>> {\n  return Object.values(config.panels).reduce((panels: Array<SelectableValue<SupportedPanelPlugins>>, panel) => {\n    if (isSupportedPanelPlugin(panel.id)) {\n      panels.push({\n        value: panel.id,\n        label: panel.name,\n        imgUrl: panel.info.logos.small,\n      });\n    }\n    return panels;\n  }, []);\n}\n\nfunction isSupportedPanelPlugin(id: string): id is SupportedPanelPlugins {\n  switch (id) {\n    case TIMESERIES:\n    case TABLE:\n    case STAT:\n      return true;\n    default:\n      return false;\n  }\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page>\n      <PageToolbar title={title} pageIcon=\"bell\" onGoBack={() => locationService.push('/alerting/list')} />\n      <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      margin: ${theme.spacing(0, 2, 2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CombinedRule, RuleIdentifier, RuleNamespace } from 'app/types/unified-alerting';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { fetchPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\n\nexport function useCombinedRule(\n  identifier: RuleIdentifier | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rule,\n  };\n}\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nfunction useCombinedRulesLoader(rulesSourceName: string | undefined): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  useEffect(() => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    dispatch(fetchPromRulesAction({ rulesSourceName }));\n    dispatch(fetchRulerRulesAction({ rulesSourceName }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading: promRuleRequest.loading || rulerRuleRequest.loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { preProcessPanelData } from 'app/features/query/state/runRequest';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { getTimeRangeForExpression } from '../utils/timeRange';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\n\nexport interface AlertingQueryResult {\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(private backendSrv = getBackendSrv(), private dataSourceSrv = getDataSourceSrv()) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  async run(queries: AlertQuery[]) {\n    if (queries.length === 0) {\n      const empty = initialState(queries, LoadingState.Done);\n      return this.subject.next(empty);\n    }\n\n    // do not execute if one more of the queries are not runnable,\n    // for example not completely configured\n    for (const query of queries) {\n      if (!isExpressionQuery(query.model)) {\n        const ds = await this.dataSourceSrv.get(query.datasourceUid);\n        if (ds.filterQuery && !ds.filterQuery(query.model)) {\n          const empty = initialState(queries, LoadingState.Done);\n          return this.subject.next(empty);\n        }\n      }\n    }\n\n    this.subscription = runRequest(this.backendSrv, queries).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      results[refId] = {\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: result.frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { DataQuery } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n"],"names":["alertRuleToQueries","combinedRule","namespace","rulerRule","rulesSource","isGrafanaRulesSource","isGrafanaRulerRule","grafana_alert","data","isCloudRulesSource","model","dsSettings","rule","refId","type","expr","query","Error","cloudAlertRuleToModel","datasourceUid","uid","queryType","relativeTimeRange","from","to","RuleViewerVisualization","props","theme","useTheme2","styles","useStyles2","getStyles","onChangeQuery","defaultPanel","isExpressionQuery","TABLE","TIMESERIES","panel","setPanel","useState","getDataSourceSrv","getInstanceSettings","options","setOptions","frameIndex","showHeader","onTimeChange","useCallback","newDateTime","now","dateTime","unix","interval","setDateTime","relativeTimeRangeTo","subtract","className","content","width","height","style","header","dataSource","name","actions","DateTimePicker","date","onChange","maxDate","Date","PanelPluginsButtonGroup","value","size","spacing","LinkButton","variant","icon","target","href","createExploreLink","PanelRenderer","gridSize","pluginId","title","onOptionsChange","Alert","CodeEditor","language","showLineNumbers","showMiniMap","JSON","stringify","readOnly","settings","rest","queryParams","datasource","urlUtil","config","left","css","typography","fontWeightMedium","colors","text","link","secondary","errorMessage","RuleDetailsFederatedSources","group","sourceTenants","source_tenants","DetailsField","label","map","tenant","errorTitle","pageTitle","RuleViewer","match","id","sourceName","params","identifier","ruleId","loading","error","result","useCombinedRule","runner","useMemo","AlertingQueryRunner","useObservable","get","queries2","queries","setQueries","onRunQueries","length","run","useEffect","destroy","q","RuleViewerLayout","getRulesSourceByName","LoadingPlaceholder","message","stack","annotations","Object","entries","filter","_","trim","isFederatedRule","isFederatedRuleGroup","wrapInContent","severity","VerticalGroup","Button","fill","Icon","RuleState","isCreating","isDeleting","RuleDetailsActionButtons","details","leftSide","promRule","horizontal","RuleHealth","labels","keys","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","queriesTitle","PanelChromeLoadingIndicator","isLoading","onCancel","cancel","padding","values","find","d","state","LoadingState","h5","fontSize","fontWeightBold","fontFamily","border","medium","withErrorBoundary","panels","reduce","STAT","isSupportedPanelPlugin","push","imgUrl","info","logos","small","RadioButtonGroup","children","getPageStyles","PageToolbar","pageIcon","onGoBack","locationService","RuleViewerLayoutContent","getContentStyles","wrapper","breakpoints","xxl","background","primary","weak","shape","borderRadius","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","useCombinedRuleNamespaces","groups","rules","useCombinedRulesMatching","ruleName","rulesSourceName","dispatch","useDispatch","promRuleRequests","useUnifiedAlertingSelector","promRules","promRuleRequest","getRequestState","rulerRuleRequests","rulerRules","rulerRuleRequest","fetchPromRulesAction","fetchRulerRulesAction","isRulerNotSupportedResponse","undefined","dispatched","slice","initialAsyncRequestState","FALL_BACK_TIME_RANGE","getReferencedIds","ExpressionQueryType","getReferencedIdsForClassicCondition","getReferencedIdsForMath","getReferencedIdsForReduce","conditions","condition","getTimeRanges","referencedRefIds","referencedRefIdsKey","expression","includes","constructor","backendSrv","getBackendSrv","dataSourceSrv","this","subject","ReplaySubject","lastResult","asObservable","empty","initialState","next","ds","filterQuery","subscription","runRequest","subscribe","dataPerQuery","nextResult","applyChange","previous","preProcessed","preProcessPanelData","setStructureRevision","mapErrorToPanelData","unsubscribe","requestIsRunning","complete","initial","request","url","method","requestId","uuidv4","withLoadingIndicator","whileLoading","source","fetch","pipe","mapToPanelData","catchError","of","cancelNetworkRequestsOnUnsubscribe","share","dataByQuery","series","timeRange","getTimeRange","relative","Math","max","min","getTimeRangeForExpression","rangeUtil","console","warn","getDefaultTimeRange","response","results","frames","dataFrameFromJSON","queryError","toDataQueryError","change","dataQuery","isExpressionReference","observable$","initialValue","_a","update","s"],"sourceRoot":""}