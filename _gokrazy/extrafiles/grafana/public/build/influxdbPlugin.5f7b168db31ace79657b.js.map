{"version":3,"file":"influxdbPlugin.5f7b168db31ace79657b.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/influxdb/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/types.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/InfluxCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/InfluxStartPage.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/query_part.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/queryUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/FluxQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/QueryEditorModeSwitcher.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/useShadowedState.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/RawInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/query_builder.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influxQLMetadataQuery.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/styles.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/unwrap.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FormatAsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Seg.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/toSelectableValue.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/InputSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/OrderByTimeSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/AddButton.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/PartListSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/tagUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/TagsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/partListUtils.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Editor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/module.ts"],"sourcesContent":["export const BROWSER_MODE_DISABLED_MESSAGE =\n  'Direct browser access in the InfluxDB datasource is no longer available. Switch to server access mode.';\n","import { DataQuery, DataSourceJsonData, AdHocVariableFilter } from '@grafana/data';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval?: string;\n  httpMode?: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n  // for migrated InfluxQL annotations\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n  textEditor?: boolean;\n  adhocFilters?: AdHocVariableFilter[];\n}\n","import { uniqueId } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  onUpdateDatasourceOption,\n  updateDatasourcePluginResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport {\n  Alert,\n  DataSourceHttpSettings,\n  InfoBox,\n  InlineField,\n  InlineFormLabel,\n  LegacyForms,\n  Select,\n  SecureSocksProxySettings,\n} from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nconst { Input, SecretFormField } = LegacyForms;\nimport { BROWSER_MODE_DISABLED_MESSAGE } from '../constants';\nimport { InfluxOptions, InfluxSecureJsonData, InfluxVersion } from '../types';\n\nconst httpModes: SelectableValue[] = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n];\n\nconst versions: Array<SelectableValue<InfluxVersion>> = [\n  {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.',\n  },\n  {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+',\n  },\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  htmlPrefix: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n    this.htmlPrefix = uniqueId('influxdb-config');\n  }\n\n  // 1x\n  onResetPassword = () => {\n    updateDatasourcePluginResetOption(this.props, 'password');\n  };\n\n  // 2x\n  onResetToken = () => {\n    updateDatasourcePluginResetOption(this.props, 'token');\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: any = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      delete copy.user;\n      delete copy.database;\n    }\n\n    onOptionsChange(copy);\n  };\n\n  renderInflux2x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n    const { htmlPrefix } = this;\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-org`} className=\"width-10\">\n              Organization\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                id={`${htmlPrefix}-org`}\n                className=\"width-20\"\n                value={options.jsonData.organization || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'organization')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={Boolean(secureJsonFields && secureJsonFields.token)}\n              value={secureJsonData.token || ''}\n              label=\"Token\"\n              aria-label=\"Token\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetToken}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'token')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Default Bucket</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                placeholder=\"default bucket\"\n                value={options.jsonData.defaultBucket || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderInflux1x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n    const { htmlPrefix } = this;\n\n    return (\n      <>\n        <InfoBox>\n          <h5>Database Access</h5>\n          <p>\n            Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n            allows switching the database in the query. For example:\n            <code>SHOW MEASUREMENTS ON _internal</code> or\n            <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n            <br />\n            <br />\n            To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n          </p>\n        </InfoBox>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-db`} className=\"width-10\">\n              Database\n            </InlineFormLabel>\n            <div className=\"width-20\">\n              <Input\n                id={`${htmlPrefix}-db`}\n                className=\"width-20\"\n                value={options.database || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'database')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-user`} className=\"width-10\">\n              User\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                id={`${htmlPrefix}-user`}\n                className=\"width-20\"\n                value={options.user || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'user')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={Boolean(secureJsonFields && secureJsonFields.password)}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              aria-label=\"Password\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetPassword}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'password')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              htmlFor={`${htmlPrefix}-http-method`}\n              className=\"width-10\"\n              tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n            >\n              HTTP Method\n            </InlineFormLabel>\n            <Select\n              inputId={`${htmlPrefix}-http-method`}\n              className=\"width-10\"\n              value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n              options={httpModes}\n              defaultValue={options.jsonData.httpMode}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')}\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    const isDirectAccess = options.access === 'direct';\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Query Language</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <Select\n                aria-label=\"Query language\"\n                className=\"width-30\"\n                value={options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0]}\n                options={versions}\n                defaultValue={versions[0]}\n                onChange={this.onVersionChanged}\n              />\n            </div>\n          </div>\n        </div>\n\n        {options.jsonData.version === InfluxVersion.Flux && (\n          <InfoBox>\n            <h5>Support for Flux in Grafana is currently in beta</h5>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </InfoBox>\n        )}\n\n        {isDirectAccess && (\n          <Alert title=\"Error\" severity=\"error\">\n            {BROWSER_MODE_DISABLED_MESSAGE}\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={isDirectAccess}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n        />\n\n        {config.featureToggles.secureSocksDatasourceProxy && (\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n        )}\n\n        <div className=\"gf-form-group\">\n          <div>\n            <h3 className=\"page-heading\">InfluxDB Details</h3>\n          </div>\n          {options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x()}\n          <div className=\"gf-form-inline\">\n            <InlineField\n              labelWidth={20}\n              label=\"Max series\"\n              tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n            >\n              <Input\n                placeholder=\"1000\"\n                type=\"number\"\n                className=\"width-10\"\n                value={this.state.maxSeries}\n                onChange={(event) => {\n                  // We duplicate this state so that we allow to write freely inside the input. We don't have\n                  // any influence over saving so this seems to be only way to do this.\n                  this.setState({ maxSeries: event.currentTarget.value });\n                  const val = parseInt(event.currentTarget.value, 10);\n                  updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n                }}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React from 'react';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nconst InfluxCheatSheet = (props: any) => (\n  <div>\n    <h2>InfluxDB Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item) => (\n      <div className=\"cheat-sheet-item\" key={item.title}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default InfluxCheatSheet;\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport InfluxCheatSheet from './InfluxCheatSheet';\n\nexport default class InfluxStartPage extends PureComponent<QueryEditorHelpProps> {\n  render() {\n    return <InfluxCheatSheet onClickExample={this.props.onClickExample} />;\n  }\n}\n","import { map, clone } from 'lodash';\n\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/features/alerting/state/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }, innerExpr: any) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { map, find, filter, indexOf } from 'lodash';\n\nimport { escapeRegex, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport queryPart from './query_part';\nimport { InfluxQuery, InfluxQueryTag } from './types';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: any[] = [];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n  refId?: string;\n\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts: any) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s: any) => {\n        return filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: any[], part: any) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: any[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    // FIXME: merge this function with query_builder/renderTagCondition\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate: any) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value: any[], variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return escapeRegex(value);\n    }\n\n    const escapedValues = map(value, escapeRegex);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: any[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types';\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n","import { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport {\n  InlineFormLabel,\n  LinkButton,\n  Segment,\n  CodeEditor,\n  MonacoEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n  withTheme2,\n  Themeable2,\n} from '@grafana/ui';\n\nimport InfluxDatasource from '../datasource';\nimport { InfluxQuery } from '../types';\n\ninterface Props extends Themeable2 {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n}\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nclass UnthemedFluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n    this.props.onRunQuery();\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n    this.props.onRunQuery();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query, theme } = this.props;\n    const styles = getStyles(theme);\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'100%'}\n          containerStyles={styles.editorContainerStyles}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div className={cx('gf-form-inline', styles.editorActions)}>\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment options={samples} value=\"Sample Query\" onChange={this.onSampleChange} />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorContainerStyles: css`\n    height: 200px;\n    max-width: 100%;\n    resize: vertical;\n    overflow: auto;\n    background-color: ${theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n  editorActions: css`\n    margin-top: 6px;\n  `,\n});\n\nexport const FluxQueryEditor = withTheme2(UnthemedFluxQueryEditor);\n","import React, { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          aria-label=\"Switch to visual editor\"\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        aria-label=\"Switch to text editor\"\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { ResultFormat } from '../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import React from 'react';\n\nimport { TextArea, InlineFormLabel, Input, Select, HorizontalGroup } from '@grafana/ui';\n\nimport { InfluxQuery } from '../types';\n\nimport { RESULT_FORMATS, DEFAULT_RESULT_FORMAT } from './constants';\nimport { useShadowedState } from './useShadowedState';\nimport { useUniqueId } from './useUniqueId';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useUniqueId();\n  const selectElementId = useUniqueId();\n\n  const resultFormat = query.resultFormat ?? DEFAULT_RESULT_FORMAT;\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n      resultFormat,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <div>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <HorizontalGroup>\n        <InlineFormLabel htmlFor={selectElementId}>Format as</InlineFormLabel>\n        <Select\n          inputId={selectElementId}\n          onChange={(v) => {\n            onChange({ ...query, resultFormat: v.value });\n            onRunQuery();\n          }}\n          value={resultFormat}\n          options={RESULT_FORMATS}\n        />\n        <InlineFormLabel htmlFor={aliasElementId}>Alias by</InlineFormLabel>\n        <Input\n          id={aliasElementId}\n          type=\"text\"\n          spellCheck={false}\n          placeholder=\"Naming pattern\"\n          onBlur={applyDelayedChangesAndRunQuery}\n          onChange={(e) => {\n            setCurrentAlias(e.currentTarget.value);\n          }}\n          value={currentAlias ?? ''}\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n","import { reduce } from 'lodash';\n\nimport { escapeRegex } from '@grafana/data';\n\nfunction renderTagCondition(tag: { operator: any; value: string; condition: any; key: string }, index: number) {\n  // FIXME: merge this function with influx_query_model/renderTagCondition\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or empty-string\n  // Influx versions before 0.13 had inconsistent requirements on if (numeric) tags are quoted or not.\n  if (value === '' || (operator !== '=~' && operator !== '!~')) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target: { measurement: any; tags: any; policy?: any }, private database?: string) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string): string {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + escapeRegex(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n\n          // value operators not supported in these types of queries\n          if (tag.operator === '>' || tag.operator === '<') {\n            return memo;\n          }\n\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        [] as string[]\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n}\n","import InfluxDatasource from './datasource';\nimport { InfluxQueryBuilder } from './query_builder';\nimport { InfluxQueryTag } from './types';\n\nconst runExploreQuery = (\n  type: string,\n  withKey: string | undefined,\n  withMeasurementFilter: string | undefined,\n  target: { measurement: string | undefined; tags: InfluxQueryTag[]; policy: string | undefined },\n  datasource: InfluxDatasource\n): Promise<Array<{ text: string }>> => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  const options = { policy: target.policy };\n  return datasource.metricFindQuery(q, options);\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const target = { tags: [], measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurementsForTags(\n  measurementFilter: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeysForMeasurementAndTags(\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  tagKey: string,\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeysForMeasurement(\n  measurement: string,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { Select } from '@grafana/ui';\n\nimport { ResultFormat } from '../../types';\nimport { RESULT_FORMATS } from '../constants';\n\nimport { paddingRightClass } from './styles';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  inputId?: string;\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, inputId, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      inputId={inputId}\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport debouncePromise from 'debounce-promise';\nimport React, { useEffect, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect, InlineLabel, Input, Select } from '@grafana/ui';\n\nimport { useShadowedState } from '../useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad('');\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen={!loadState.loading}\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","import React from 'react';\n\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\n\nconst DEFAULT_POLICY = 'default';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === 'default')\n      ? allPolicies\n      : [DEFAULT_POLICY, ...allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { useShadowedState } from '../useShadowedState';\n\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx(isWide ?? false ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { paddingRightClass } from './styles';\nimport { unwrap } from './unwrap';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n  inputId?: string;\n};\n\nexport const OrderByTimeSection = ({ value, onChange, inputId }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        inputId={inputId}\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import { cx, css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { MenuItem, WithContextMenu, MenuGroup, useTheme2 } from '@grafana/ui';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst renderRemovableNameMenuItems = (onClick: () => void) => {\n  return (\n    <MenuGroup label=\"\">\n      <MenuItem label=\"remove\" onClick={onClick} />\n    </MenuGroup>\n  );\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\nconst RemovableName = ({ name, onRemove }: { name: string; onRemove: () => void }) => {\n  return (\n    <WithContextMenu renderMenuItems={() => renderRemovableNameMenuItems(onRemove)}>\n      {({ openMenu }) => (\n        <button className={cx('gf-form-label', noRightMarginPaddingClass)} onClick={openMenu}>\n          {name}\n        </button>\n      )}\n    </WithContextMenu>\n  );\n};\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange, onRemove }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <RemovableName name={name} onRemove={onRemove} />(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <React.Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </React.Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Part\n          key={index}\n          name={part.name}\n          params={part.params}\n          onRemove={() => {\n            onRemovePart(index);\n          }}\n          onChange={(pars) => {\n            onChange(index, pars);\n          }}\n        />\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : tag.condition ?? 'AND';\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { InfluxQueryTag } from '../../types';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { toSelectableValue } from './toSelectableValue';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '=~' | '!~';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '=~', '!~'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions()\n      .catch((err) => {\n        // in this UI element we add a special item to the list of options,\n        // that is used to remove the element.\n        // this causes a problem: if `getTagKeyOptions` fails with an error,\n        // the remove-filter option is never added to the list,\n        // and the UI element can not be removed.\n        // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n        // log the error, and pretend that the list of options is an empty list.\n        // this way the remove-item option can always be added to the list.\n        console.error(err);\n        return [];\n      })\n      .then((tags) => [{ label: '-- remove filter --', value: undefined }, ...tags.map(toSelectableValue)]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { QueryPartDef } from 'app/features/alerting/state/query_part';\n\nimport InfluxQueryModel from '../../influx_query_model';\nimport queryPart from '../../query_part';\nimport { InfluxQuery, InfluxQueryPart } from '../../types';\n\nimport { PartParams } from './PartListSection';\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { InlineLabel, SegmentSection, useStyles2 } from '@grafana/ui';\n\nimport InfluxDatasource from '../../datasource';\nimport {\n  getAllMeasurementsForTags,\n  getAllPolicies,\n  getFieldKeysForMeasurement,\n  getTagKeysForMeasurementAndTags,\n  getTagValues,\n} from '../../influxQLMetadataQuery';\nimport {\n  addNewGroupByPart,\n  addNewSelectPart,\n  changeGroupByPart,\n  changeSelectPart,\n  normalizeQuery,\n  removeGroupByPart,\n  removeSelectPart,\n} from '../../queryUtils';\nimport { InfluxQuery, InfluxQueryTag } from '../../types';\nimport { DEFAULT_RESULT_FORMAT } from '../constants';\nimport { useUniqueId } from '../useUniqueId';\n\nimport { FormatAsSection } from './FormatAsSection';\nimport { FromSection } from './FromSection';\nimport { InputSection } from './InputSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { PartListSection } from './PartListSection';\nimport { TagsSection } from './TagsSection';\nimport { getNewGroupByPartOptions, getNewSelectPartOptions, makePartList } from './partListUtils';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nfunction getTemplateVariableOptions() {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map((v) => `/^$${v.name}$/`)\n  );\n}\n\n// helper function to make it easy to call this from the widget-render-code\nfunction withTemplateVariableOptions(optionsPromise: Promise<string[]>, filter?: string): Promise<string[]> {\n  let templateVariableOptions = getTemplateVariableOptions();\n  if (filter) {\n    templateVariableOptions = templateVariableOptions.filter((tvo) => tvo.indexOf(filter) > -1);\n  }\n  return optionsPromise.then((options) => [...templateVariableOptions, ...options]);\n}\n\n// it is possible to add fields into the `InfluxQueryTag` structures, and they do work,\n// but in some cases, when we do metadata queries, we have to remove them from the queries.\nfunction filterTags(parts: InfluxQueryTag[], allTagKeys: Set<string>): InfluxQueryTag[] {\n  return parts.filter((t) => allTagKeys.has(t.key));\n}\n\nexport const Editor = (props: Props): JSX.Element => {\n  const uniqueId = useUniqueId();\n  const formatAsId = `influxdb-qe-format-as-${uniqueId}`;\n  const orderByTimeId = `influxdb-qe-order-by${uniqueId}`;\n\n  const styles = useStyles2(getStyles);\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const allTagKeys = useMemo(() => {\n    return getTagKeysForMeasurementAndTags(measurement, policy, [], datasource).then((tags) => {\n      return new Set(tags);\n    });\n  }, [measurement, policy, datasource]);\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined\n            ? getFieldKeysForMeasurement(measurement, policy, datasource)\n            : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getTagKeys = useMemo(() => {\n    return () =>\n      allTagKeys.then((keys) =>\n        getTagKeysForMeasurementAndTags(measurement, policy, filterTags(query.tags ?? [], keys), datasource)\n      );\n  }, [measurement, policy, query.tags, datasource, allTagKeys]);\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SegmentSection label=\"FROM\" fill={true}>\n        <FromSection\n          policy={policy}\n          measurement={measurement}\n          getPolicyOptions={() => getAllPolicies(datasource)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) =>\n                getAllMeasurementsForTags(\n                  filter === '' ? undefined : filter,\n                  filterTags(query.tags ?? [], keys),\n                  datasource\n                )\n              ),\n              filter\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          WHERE\n        </InlineLabel>\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getTagKeys}\n          getTagValueOptions={(key: string) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) =>\n                getTagValues(key, measurement, policy, filterTags(query.tags ?? [], keys), datasource)\n              )\n            )\n          }\n        />\n      </SegmentSection>\n      {selectLists.map((sel, index) => (\n        <SegmentSection key={index} label={index === 0 ? 'SELECT' : ''} fill={true}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SegmentSection>\n      ))}\n      <SegmentSection label=\"GROUP BY\" fill={true}>\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection label=\"TIMEZONE\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <InlineLabel htmlFor={orderByTimeId} width=\"auto\" className={styles.inlineLabel}>\n          ORDER BY TIME\n        </InlineLabel>\n        <OrderByTimeSection\n          inputId={orderByTimeId}\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SegmentSection>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be applied,\n          as long as you do not edit that query. */}\n      <SegmentSection label=\"LIMIT\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          SLIMIT\n        </InlineLabel>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection htmlFor={formatAsId} label=\"FORMAT AS\" fill={true}>\n        <FormatAsSection\n          inputId={formatAsId}\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n              ALIAS\n            </InlineLabel>\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SegmentSection>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    inlineLabel: css`\n      color: ${theme.colors.primary.text};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport InfluxDatasource from '../datasource';\nimport { buildRawQuery } from '../queryUtils';\nimport { InfluxOptions, InfluxQuery } from '../types';\n\nimport { FluxQueryEditor } from './FluxQueryEditor';\nimport { QueryEditorModeSwitcher } from './QueryEditorModeSwitcher';\nimport { RawInfluxQLEditor } from './RawInfluxQLEditor';\nimport { Editor as VisualInfluxQLEditor } from './VisualInfluxQLEditor/Editor';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource, range, data }: Props): JSX.Element => {\n  if (datasource.isFlux) {\n    return (\n      <div className=\"gf-form-query-content\">\n        <FluxQueryEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={css({ display: 'flex' })}>\n      <div className={css({ flexGrow: 1 })}>\n        {query.rawQuery ? (\n          <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        ) : (\n          <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n        )}\n      </div>\n      <QueryEditorModeSwitcher\n        isRaw={query.rawQuery ?? false}\n        onChange={(value) => {\n          onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n          onRunQuery();\n        }}\n      />\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\n\nimport InfluxDatasource from '../datasource';\n\nimport { FluxQueryEditor } from './FluxQueryEditor';\n\ninterface Props {\n  query: string; // before flux, it was always a string\n  onChange: (query?: string) => void;\n  datasource: InfluxDatasource;\n}\n\nexport default class VariableQueryEditor extends PureComponent<Props> {\n  onRefresh = () => {\n    // noop\n  };\n\n  render() {\n    let { query, datasource, onChange } = this.props;\n    if (datasource.isFlux) {\n      return (\n        <FluxQueryEditor\n          datasource={datasource}\n          query={{\n            refId: 'A',\n            query,\n          }}\n          onRunQuery={this.onRefresh}\n          onChange={(v) => onChange(v.query)}\n        />\n      );\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <InlineFormLabel width={10}>Query</InlineFormLabel>\n        <div className=\"gf-form-inline gf-form--grow\">\n          <TextArea\n            defaultValue={query || ''}\n            placeholder=\"metric name or tags query\"\n            rows={1}\n            className=\"gf-form-input\"\n            onBlur={(e) => onChange(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel, Input } from '@grafana/ui';\n\nimport { InfluxQuery, InfluxOptions } from '../types';\n\nimport InfluxDatasource from './../datasource';\n\nexport const AnnotationEditor = (props: QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>) => {\n  const { query, onChange } = props;\n  const [eventQuery, setEventQuery] = useState<string>(query.query ?? '');\n\n  const [textColumn, setTextColumn] = useState<string>(query.textColumn ?? '');\n  const [tagsColumn, setTagsColumn] = useState<string>(query.tagsColumn ?? '');\n  const [timeEndColumn, setTimeEndColumn] = useState<string>(query?.timeEndColumn ?? '');\n  const [titleColumn] = useState<string>(query?.titleColumn ?? '');\n  const updateValue = <K extends keyof InfluxQuery, V extends InfluxQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      fromAnnotations: true,\n      textEditor: true,\n    });\n  };\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>InfluxQL Query</InlineFormLabel>\n        <Input\n          value={eventQuery}\n          onChange={(e) => setEventQuery(e.currentTarget.value ?? '')}\n          onBlur={() => updateValue('query', eventQuery)}\n          placeholder=\"select text from events where $timeFilter limit 1000\"\n        />\n      </div>\n      <InlineFormLabel\n        width={12}\n        tooltip={\n          <div>\n            If your influxdb query returns more than one field you need to specify the column names below. An annotation\n            event is composed of a title, tags, and an additional text field. Optionally you can map the timeEnd column\n            for region annotation usage.\n          </div>\n        }\n      >\n        Field mappings\n      </InlineFormLabel>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel width={12}>Text</InlineFormLabel>\n            <Input\n              value={textColumn}\n              onChange={(e) => setTextColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('textColumn', textColumn)}\n            />\n          </div>\n          <div className=\"gf-form\">\n            <InlineFormLabel width={12}>Tags</InlineFormLabel>\n            <Input\n              value={tagsColumn}\n              onChange={(e) => setTagsColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('tagsColumn', tagsColumn)}\n            />\n          </div>\n          <div className=\"gf-form\">\n            <InlineFormLabel width={12}>TimeEnd</InlineFormLabel>\n            <Input\n              value={timeEndColumn}\n              onChange={(e) => setTimeEndColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('timeEndColumn', timeEndColumn)}\n            />\n          </div>\n          <div className=\"gf-form ng-hide\">\n            <InlineFormLabel width={12}>Title</InlineFormLabel>\n            <Input defaultValue={titleColumn} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","type LegacyAnnotation = {\n  query?: string;\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n};\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  return {\n    query: json.query ?? '',\n    queryType: 'tags',\n    fromAnnotations: true,\n    tagsColumn: json.tagsColumn ?? '',\n    textColumn: json.textColumn ?? '',\n    timeEndColumn: json.timeEndColumn ?? '',\n    titleColumn: json.titleColumn ?? '',\n    name: json.name ?? '',\n  };\n};\n\n// eslint-ignore-next-line\nexport const prepareAnnotation = (json: any) => {\n  json.target = json.target ?? migrateLegacyAnnotation(json);\n\n  return json;\n};\n","import { each, flatten, groupBy, isArray } from 'lodash';\n\nimport { AnnotationEvent, DataFrame, DataQuery, FieldType, QueryResultMeta } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport TableModel from 'app/core/TableModel';\n\nimport { InfluxQuery } from './types';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n\n  getTable(dfs: DataFrame[], target: InfluxQuery, meta: QueryResultMeta): TableModel {\n    let table = new TableModel();\n\n    if (dfs.length > 0) {\n      table.meta = {\n        ...meta,\n        executedQueryString: dfs[0].meta?.executedQueryString,\n      };\n\n      table.refId = target.refId;\n      table = getTableCols(dfs, table, target);\n\n      // if group by tag(s) added\n      if (dfs[0].fields[1] && dfs[0].fields[1].labels) {\n        let dfsByLabels: any = groupBy(dfs, (df: DataFrame) =>\n          df.fields[1].labels ? Object.values(df.fields[1].labels!) : null\n        );\n        const labels = Object.keys(dfsByLabels);\n        dfsByLabels = Object.values(dfsByLabels);\n\n        for (let i = 0; i < dfsByLabels.length; i++) {\n          table = getTableRows(dfsByLabels[i], table, [...labels[i].split(',')]);\n        }\n      } else {\n        table = getTableRows(dfs, table, []);\n      }\n    }\n\n    return table;\n  }\n\n  async transformAnnotationResponse(annotation: any, data: any, target: InfluxQuery): Promise<AnnotationEvent[]> {\n    const rsp = toDataQueryResponse(data, [target] as DataQuery[]);\n\n    if (rsp) {\n      const table = this.getTable(rsp.data, target, {});\n      const list: any[] = [];\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(table.columns, (column, index) => {\n        if (column.text.toLowerCase() === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column.text === annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (colContainsTag(column.text, annotation.tagsColumn)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column.text.includes(annotation.textColumn)) {\n          textCol = index;\n          return;\n        }\n        if (column.text === annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(table.rows, (value) => {\n        const data = {\n          annotation: annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n\n      return list;\n    }\n    return [];\n  }\n}\n\nfunction colContainsTag(colText: string, tagsColumn: string): boolean {\n  const tags = (tagsColumn || '').replace(' ', '').split(',');\n  for (const tag of tags) {\n    if (colText.includes(tag)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getTableCols(dfs: DataFrame[], table: TableModel, target: InfluxQuery): TableModel {\n  const selectedParams = getSelectedParams(target);\n\n  dfs[0].fields.forEach((field) => {\n    // Time col\n    if (field.name === 'time') {\n      table.columns.push({ text: 'Time', type: FieldType.time });\n    }\n\n    // Group by (label) column(s)\n    else if (field.name === 'value') {\n      if (field.labels) {\n        Object.keys(field.labels).forEach((key) => {\n          table.columns.push({ text: key });\n        });\n      }\n    }\n  });\n\n  // Get cols for annotationQuery\n  if (dfs[0].refId === 'metricFindQuery') {\n    dfs.forEach((field) => {\n      if (field.name) {\n        table.columns.push({ text: field.name });\n      }\n    });\n  }\n\n  // Select (metric) column(s)\n  for (let i = 0; i < selectedParams.length; i++) {\n    table.columns.push({ text: selectedParams[i] });\n  }\n\n  return table;\n}\n\nfunction getTableRows(dfs: DataFrame[], table: TableModel, labels: string[]): TableModel {\n  const values = dfs[0].fields[0].values.toArray();\n\n  for (let i = 0; i < values.length; i++) {\n    const time = values[i];\n    const metrics = dfs.map((df: DataFrame) => {\n      return df.fields[1] ? df.fields[1].values.toArray()[i] : null;\n    });\n    if (metrics.indexOf(null) < 0) {\n      table.rows.push([time, ...labels, ...metrics]);\n    }\n  }\n  return table;\n}\n\nexport function getSelectedParams(target: InfluxQuery): string[] {\n  let allParams: string[] = [];\n  target.select?.forEach((select) => {\n    const selector = select.filter((x) => x.type !== 'field');\n    if (selector.length > 0) {\n      allParams.push(selector[0].type);\n    } else {\n      if (select[0] && select[0].params && select[0].params[0]) {\n        allParams.push(select[0].params[0].toString());\n      }\n    }\n  });\n\n  let uniqueParams: string[] = [];\n  allParams.forEach((param) => {\n    uniqueParams.push(incrementName(param, param, uniqueParams, 0));\n  });\n\n  return uniqueParams;\n}\n\nfunction incrementName(name: string, nameIncremenet: string, params: string[], index: number): string {\n  if (params.indexOf(nameIncremenet) > -1) {\n    index++;\n    return incrementName(name, name + '_' + index, params, index);\n  }\n  return nameIncremenet;\n}\n\nfunction addUnique(s: Set<string>, value: string | number) {\n  s.add(value.toString());\n}\n","import { extend, groupBy, has, isString, omit, pick, reduce } from 'lodash';\nimport { lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  dateMath,\n  MetricFindValue,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  DataSourceWithBackend,\n  FetchResponse,\n  frameToMetricFindValue,\n  getBackendSrv,\n} from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { AnnotationEditor } from './components/AnnotationEditor';\nimport { FluxQueryEditor } from './components/FluxQueryEditor';\nimport { BROWSER_MODE_DISABLED_MESSAGE } from './constants';\nimport InfluxQueryModel from './influx_query_model';\nimport { prepareAnnotation } from './migrations';\nimport { buildRawQuery } from './queryUtils';\nimport { InfluxQueryBuilder } from './query_builder';\nimport ResponseParser from './response_parser';\nimport { InfluxOptions, InfluxQuery, InfluxVersion } from './types';\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  access: 'direct' | 'proxy';\n  interval: any;\n  responseParser: any;\n  httpMode: string;\n  isFlux: boolean;\n  isProxyAccess: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.access = instanceSettings.access;\n    const settingsData = instanceSettings.jsonData || ({} as InfluxOptions);\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.isFlux = settingsData.version === InfluxVersion.Flux;\n    this.isProxyAccess = instanceSettings.access === 'proxy';\n\n    if (this.isFlux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    } else {\n      this.annotations = {\n        QueryEditor: AnnotationEditor,\n        prepareAnnotation,\n      };\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (!this.isProxyAccess) {\n      const error = new Error(BROWSER_MODE_DISABLED_MESSAGE);\n      return throwError(() => error);\n    }\n    // for not-flux queries we call `this.classicQuery`, and that\n    // handles the is-hidden situation.\n    // for the flux-case, we do the filtering here\n    const filteredRequest = {\n      ...request,\n      targets: request.targets.filter((t) => t.hide !== true),\n    };\n\n    if (this.isFlux) {\n      return super.query(filteredRequest);\n    }\n\n    if (filteredRequest.targets.some((target: InfluxQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const target of filteredRequest.targets) {\n        if (target.query) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvents(filteredRequest, target)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => subscriber.error(new Error(ex)))\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    return super.query(filteredRequest).pipe(\n      map((res) => {\n        if (res.error) {\n          throw {\n            message: 'InfluxDB Error: ' + res.error.message,\n            res,\n          };\n        }\n\n        const seriesList: any[] = [];\n\n        const groupedFrames = groupBy(res.data, (x) => x.refId);\n        if (Object.keys(groupedFrames).length > 0) {\n          filteredRequest.targets.forEach((target) => {\n            const filteredFrames = groupedFrames[target.refId] ?? [];\n            switch (target.resultFormat) {\n              case 'logs':\n              case 'table':\n                seriesList.push(\n                  this.responseParser.getTable(filteredFrames, target, {\n                    preferredVisualisationType: target.resultFormat,\n                  })\n                );\n                break;\n              default: {\n                for (let i = 0; i < filteredFrames.length; i++) {\n                  seriesList.push(filteredFrames[i]);\n                }\n                break;\n              }\n            }\n          });\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    if (this.isFlux) {\n      return query.query;\n    }\n    return new InfluxQueryModel(query).render(false);\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.isFlux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  applyTemplateVariables(query: InfluxQuery, scopedVars: ScopedVars): Record<string, any> {\n    // We want to interpolate these variables on backend\n    const { __interval, __interval_ms, ...rest } = scopedVars;\n\n    if (this.isFlux) {\n      return {\n        ...query,\n        query: this.templateSrv.replace(query.query ?? '', rest), // The raw query text\n      };\n    }\n\n    query = this.applyVariables(query, scopedVars, rest);\n\n    return query;\n  }\n\n  async annotationEvents(options: DataQueryRequest, annotation: InfluxQuery): Promise<AnnotationEvent[]> {\n    if (this.isFlux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    // We want to send our query to the backend as a raw query\n    const target: InfluxQuery = {\n      refId: 'metricFindQuery',\n      datasource: this.getRef(),\n      query: this.templateSrv.replace(annotation.query, undefined, 'regex'),\n      rawQuery: true,\n    };\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          headers: this.getRequestHeaders(),\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: [target],\n          },\n          requestId: annotation.name,\n        })\n        .pipe(\n          map(\n            async (res: FetchResponse<BackendDataSourceResponse>) =>\n              await this.responseParser.transformAnnotationResponse(annotation, res, target)\n          )\n        )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    // for flux-mode we just take target.query,\n    // for influxql-mode we use InfluxQueryModel to create the text-representation\n    const queryText = this.isFlux ? target.query : buildRawQuery(target);\n\n    return this.templateSrv.containsTemplate(queryText);\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      if (this.isFlux) {\n        return {\n          ...query,\n          datasource: this.getRef(),\n          query: this.templateSrv.replace(query.query ?? '', scopedVars, 'regex'), // The raw query text\n        };\n      }\n\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: InfluxQuery, scopedVars: ScopedVars, rest: ScopedVars) {\n    const expandedQuery = { ...query };\n    if (query.groupBy) {\n      expandedQuery.groupBy = query.groupBy.map((groupBy) => {\n        return {\n          ...groupBy,\n          params: groupBy.params?.map((param) => {\n            return this.templateSrv.replace(param.toString(), undefined, 'regex');\n          }),\n        };\n      });\n    }\n\n    if (query.select) {\n      expandedQuery.select = query.select.map((selects) => {\n        return selects.map((select: any) => {\n          return {\n            ...select,\n            params: select.params?.map((param: any) => {\n              return this.templateSrv.replace(param.toString(), undefined, 'regex');\n            }),\n          };\n        });\n      });\n    }\n\n    if (query.tags) {\n      expandedQuery.tags = query.tags.map((tag) => {\n        return {\n          ...tag,\n          value: this.templateSrv.replace(tag.value, scopedVars, 'regex'),\n        };\n      });\n    }\n\n    return {\n      ...expandedQuery,\n      adhocFilters: this.templateSrv.getAdhocFilters(this.name) ?? [],\n      query: this.templateSrv.replace(query.query ?? '', rest, 'regex'), // The raw query text\n      alias: this.templateSrv.replace(query.alias ?? '', scopedVars),\n      limit: this.templateSrv.replace(query.limit?.toString() ?? '', scopedVars, 'regex'),\n      measurement: this.templateSrv.replace(query.measurement ?? '', scopedVars, 'regex'),\n      policy: this.templateSrv.replace(query.policy ?? '', scopedVars, 'regex'),\n      slimit: this.templateSrv.replace(query.slimit?.toString() ?? '', scopedVars, 'regex'),\n      tz: this.templateSrv.replace(query.tz ?? '', scopedVars),\n    };\n  }\n\n  async metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    if (this.isFlux) {\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        query,\n        rawQuery: true,\n      };\n      return lastValueFrom(\n        super.query({\n          ...options, // includes 'range'\n          targets: [target],\n        } as DataQueryRequest)\n      ).then((rsp) => {\n        if (rsp.data?.length) {\n          return frameToMetricFindValue(rsp.data[0]);\n        }\n        return [];\n      });\n    }\n\n    const interpolated = this.templateSrv.replace(query, undefined, 'regex');\n\n    return lastValueFrom(this._seriesQuery(interpolated, options)).then((resp) => {\n      return this.responseParser.parse(query, resp);\n    });\n  }\n\n  getTagKeys(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      [] as string[]\n    ).join('&');\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (options?.policy) {\n      params.rp = options.policy;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: any) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: any) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: any, roundUp: any, timezone: any) {\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport ConfigEditor from './components/ConfigEditor';\nimport InfluxStartPage from './components/InfluxStartPage';\nimport { QueryEditor } from './components/QueryEditor';\nimport VariableQueryEditor from './components/VariableQueryEditor';\nimport InfluxDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n"],"names":["BROWSER_MODE_DISABLED_MESSAGE","InfluxVersion","Input","SecretFormField","httpModes","versions","ConfigEditor","props","selected","options","onOptionsChange","copy","secureJsonFields","secureJsonData","htmlPrefix","InfoBox","Select","httpMode","isDirectAccess","Alert","DataSourceHttpSettings","config","SecureSocksProxySettings","InlineField","event","val","CHEAT_SHEET_ITEMS","item","InfluxStartPage","index","categories","createPart","part","def","register","groupByTimeFunctions","aliasRenderer","innerExpr","fieldRenderer","replaceAggregationAddStrategy","selectParts","partModel","i","morePartsAvailable","addTransformationStrategy","addMathStrategy","partCount","addAliasStrategy","addFieldStrategy","query","parts","InfluxQueryModel","target","templateSrv","scopedVars","g","value","stringParts","typePart","arg","modelsIndex","partIndex","type","tag","interpolate","str","operator","policy","measurement","variable","defaultFormatFn","y","selectText","conditions","groupBySection","filters","buildRawQuery","queryCopy","normalizeQuery","addNewSelectPart","model","removeSelectPart","selectModel","changeSelectPart","listIndex","newParams","newSel","addNewGroupByPart","removeGroupByPart","changeGroupByPart","newGroupBy","samples","UnthemedFluxQueryEditor","sugs","label","editor","theme","styles","getStyles","helpTooltip","CodeEditor","Segment","FluxQueryEditor","QueryEditorModeSwitcher","isRaw","onChange","isModalOpen","setModalOpen","Button","ConfirmModal","RESULT_FORMATS","DEFAULT_RESULT_FORMAT","useShadowedState","outsideVal","currentVal","setCurrentVal","prevOutsideVal","usePrevious","RawInfluxQLEditor","onRunQuery","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","useUniqueId","selectElementId","resultFormat","applyDelayedChangesAndRunQuery","TextArea","e","v","renderTagCondition","InfluxQueryBuilder","database","withKey","withMeasurementFilter","whereConditions","memo","runExploreQuery","datasource","q","getAllPolicies","getAllMeasurementsForTags","measurementFilter","tags","getTagKeysForMeasurementAndTags","getTagValues","tagKey","getFieldKeysForMeasurement","paddingRightClass","unwrap","className","FormatAsSection","format","inputId","selectClass","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","SelSingleLoad","loadState","doLoad","useAsyncFn","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","defaultButtonClass","Seg","buttonClassName","isOpen","setOpen","InlineLabel","toSelectableValue","t","DEFAULT_POLICY","FromSection","getPolicyOptions","getMeasurementOptions","handlePolicyLoadOptions","allPolicies","p","handleMeasurementLoadOptions","filter","InputSection","isWide","placeholder","onBlur","OPTIONS","OrderByTimeSection","AddButton","onAdd","renderRemovableNameMenuItems","onClick","MenuGroup","MenuItem","noRightMarginPaddingClass","RemovableName","name","onRemove","WithContextMenu","openMenu","noHorizMarginPaddingClass","getPartClass","Part","params","partClass","onParamChange","par","isLast","items","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","isRegex","text","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","knownOperators","knownConditions","operatorOptions","condititonOptions","loadConditionOptions","loadOperatorOptions","Tag","getTagKeyOptions","getTagValueOptions","condition","getTagKeySegmentOptions","err","getTagValueSegmentOptions","op","TagsSection","onTagChange","newTag","newTags","onTagRemove","addNewTag","minimalTag","newT","getNewSelectPartOptions","key","children","x","getNewGroupByPartOptions","getTagKeys","tagKeys","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","getTemplateVariableOptions","withTemplateVariableOptions","optionsPromise","templateVariableOptions","tvo","filterTags","allTagKeys","Editor","uniqueId","formatAsId","orderByTimeId","selectLists","dynamicSelectPartOptions","sel","keys","groupByList","dynamicGroupByPartOptions","onAppliedChange","newQuery","handleFromSectionChange","m","handleTagsSectionChange","SegmentSection","tz","limit","slimit","alias","QueryEditor","range","data","VariableQueryEditor","AnnotationEditor","eventQuery","setEventQuery","textColumn","setTextColumn","tagsColumn","setTagsColumn","timeEndColumn","setTimeEndColumn","titleColumn","updateValue","migrateLegacyAnnotation","json","prepareAnnotation","ResponseParser","results","influxResults","normalizedQuery","isValueFirst","res","serie","addUnique","dfs","meta","table","TableModel","getTableCols","dfsByLabels","df","labels","getTableRows","annotation","rsp","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","column","colContainsTag","colText","selectedParams","getSelectedParams","field","values","time","metrics","allParams","select","selector","uniqueParams","param","incrementName","nameIncremenet","s","InfluxDatasource","DataSourceWithBackend","instanceSettings","url","settingsData","request","error","throwError","filteredRequest","streams","Observable","subscriber","events","ex","merge","map","seriesList","groupedFrames","filteredFrames","__interval","__interval_ms","rest","lastValueFrom","queryText","queries","expandedQuery","groupBy","selects","interpolated","resp","of","timeFilter","method","currentUrl","req","result","errors","elem","catchError","from","until","date","roundUp","timezone","amount","unit"],"sourceRoot":""}