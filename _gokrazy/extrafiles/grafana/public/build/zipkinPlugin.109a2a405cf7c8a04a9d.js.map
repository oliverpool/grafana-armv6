{"version":3,"file":"zipkinPlugin.109a2a405cf7c8a04a9d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/KeyValueInput.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/TraceToLogsSettings.tsx","webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/datasource.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/module.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/transforms.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/3/opt/drone/yarncache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import React from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme, KeyValue } from '@grafana/data';\nimport { SegmentInput, useStyles, InlineLabel, Icon } from '@grafana/ui';\nimport React from 'react';\n\nconst EQ_WIDTH = 3; // = 24px in inline label\n\ninterface Props {\n  values: Array<KeyValue<string>>;\n  onChange: (values: Array<KeyValue<string>>) => void;\n  id?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n}\n\nconst KeyValueInput = ({\n  values,\n  onChange,\n  id,\n  keyPlaceholder = 'Key',\n  valuePlaceholder = 'Value (optional)',\n}: Props) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {values.length ? (\n        values.map((value, idx) => (\n          <div className={styles.pair} key={idx}>\n            <SegmentInput\n              id={`${id}-key-${idx}`}\n              placeholder={keyPlaceholder}\n              value={value.key}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.key = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <InlineLabel aria-label=\"equals\" className={styles.operator} width={EQ_WIDTH}>\n              =\n            </InlineLabel>\n            <SegmentInput\n              id={`${id}-value-${idx}`}\n              placeholder={valuePlaceholder}\n              value={value.value}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.value = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <button\n              onClick={() => onChange([...values.slice(0, idx), ...values.slice(idx + 1)])}\n              className=\"gf-form-label query-part\"\n              aria-label=\"Remove tag\"\n            >\n              <Icon name=\"times\" />\n            </button>\n            {idx === values.length - 1 ? (\n              <button\n                onClick={() => onChange([...values, { key: '', value: '' }])}\n                className=\"gf-form-label query-part\"\n                aria-label=\"Add tag\"\n              >\n                <Icon name=\"plus\" />\n              </button>\n            ) : null}\n          </div>\n        ))\n      ) : (\n        <button\n          onClick={() => onChange([...values, { key: '', value: '' }])}\n          className=\"gf-form-label query-part\"\n          aria-label=\"Add tag\"\n        >\n          <Icon name=\"plus\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing.xs} 0;\n  `,\n  pair: css`\n    display: flex;\n    justify-content: start;\n    align-items: center;\n  `,\n  operator: css`\n    color: ${theme.palette.orange};\n  `,\n});\n","import { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\nimport React from 'react';\nimport KeyValueInput from './KeyValueInput';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: Array<KeyValue<string>>;\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean;\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            pluginId=\"loki\"\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToLogs?.mapTagNamesEnabled ? (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <KeyValueInput\n              keyPlaceholder=\"Tag\"\n              values={\n                options.jsonData.tracesToLogs?.mappedTags ??\n                options.jsonData.tracesToLogs?.tags?.map((tag) => ({ key: tag })) ??\n                []\n              }\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  mappedTags: v,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <TagsInput\n              tags={options.jsonData.tracesToLogs?.tags}\n              width={40}\n              onChange={(tags) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  tags: tags,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Map tag names\"\n          labelWidth={26}\n          grow\n          tooltip=\"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\"\n        >\n          <InlineSwitch\n            id=\"mapTagNames\"\n            value={options.jsonData.tracesToLogs?.mapTagNamesEnabled ?? false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                mapTagNamesEnabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField label=\"Loki Search\" labelWidth={26} grow tooltip=\"Use this logs data source to search for traces.\">\n          <InlineSwitch\n            id=\"lokiSearch\"\n            defaultChecked={true}\n            value={options.jsonData.tracesToLogs?.lokiSearch}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                lokiSearch: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]] as Array<[number, number]>;\n  }, [] as Array<[number, number]>);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are it's children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined): {\n  [id: string]: { span: T; children: string[] };\n} {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\nimport { ZipkinSpan } from '../types';\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../../core/utils/tracing';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: ZipkinSpan[]): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(spans: ZipkinSpan[]): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(spans);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= spans.length) {\n      return undefined;\n    }\n    return {\n      span: spans[index],\n      id: spans[index].id,\n      parentIds: spans[index].parentId ? [spans[index].parentId!] : [],\n    };\n  });\n\n  for (const span of spans) {\n    const ranges: Array<[number, number]> = spanMap[span.id].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.timestamp, span.timestamp + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.id,\n      [Fields.title]: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n      [Fields.subTitle]: span.name,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    if (span.parentId && spanMap[span.parentId].span) {\n      edges.push({\n        [Fields.id]: span.parentId + '--' + span.id,\n        [Fields.target]: span.id,\n        [Fields.source]: span.parentId,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: ZipkinSpan[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.timestamp < traceStartTime) {\n      traceStartTime = span.timestamp;\n    }\n\n    if (span.timestamp + span.duration > traceEndTime) {\n      traceEndTime = span.timestamp + span.duration;\n    }\n  }\n  return traceEndTime - traceStartTime;\n}\n","import { lastValueFrom, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\n\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { apiPrefix } from './constants';\nimport { ZipkinQuery, ZipkinSpan } from './types';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\n\nexport interface ZipkinJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery, ZipkinJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  constructor(private instanceSettings: DataSourceInstanceSettings<ZipkinJsonData>) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const target = options.targets[0];\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string);\n        return of(responseToDataQueryResponse({ data: traceData }, this.nodeGraph?.enabled));\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Zipkin format' }, data: [] });\n      }\n    }\n\n    if (target.query) {\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(target.query)}`).pipe(\n        map((res) => responseToDataQueryResponse(res, this.nodeGraph?.enabled))\n      );\n    }\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this.request(url, params, { hideFromInspector: true }));\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }, nodeGraph = false): DataQueryResponse {\n  let data = response?.data ? [transformResponse(response?.data)] : [];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response?.data));\n  }\n  return {\n    data,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'zipkin',\n        },\n      },\n    }),\n  ],\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport {\n  ButtonCascader,\n  CascaderOption,\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  RadioButtonGroup,\n  useTheme2,\n  QueryField,\n  useStyles2,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport { fromPairs } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsyncFn, useMount, useMountedState } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsyncFn';\nimport { apiPrefix } from './constants';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQuery, ZipkinQueryType, ZipkinSpan } from './types';\n\ntype Props = QueryEditorProps<ZipkinDatasource, ZipkinQuery>;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tracesCascader: css({\n      label: 'tracesCascader',\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n\nexport const ZipkinQueryField = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  const serviceOptions = useServices(datasource);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { onLoadOptions, allOptions } = useLoadOptions(datasource);\n\n  const onSelectTrace = useCallback(\n    (values: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 3) {\n        const traceID = selectedOptions[2].value;\n        onChange({ ...query, query: traceID });\n        onRunQuery();\n      }\n    },\n    [onChange, onRunQuery, query]\n  );\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  let cascaderOptions = useMapToCascaderOptions(serviceOptions, allOptions);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\">\n          <RadioButtonGroup<ZipkinQueryType>\n            options={[\n              { value: 'traceID', label: 'TraceID' },\n              { value: 'upload', label: 'JSON file' },\n            ]}\n            value={query.queryType || 'traceID'}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                queryType: v,\n              })\n            }\n            size=\"md\"\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {query.queryType === 'upload' ? (\n        <div className={css({ padding: theme.spacing(2) })}>\n          <FileDropzone\n            options={{ multiple: false }}\n            onLoad={(result) => {\n              datasource.uploadedJson = result;\n              onRunQuery();\n            }}\n          />\n        </div>\n      ) : (\n        <InlineFieldRow>\n          <ButtonCascader\n            options={cascaderOptions}\n            onChange={onSelectTrace}\n            loadData={onLoadOptions}\n            variant=\"secondary\"\n            buttonProps={{ className: styles.tracesCascader }}\n          >\n            Traces\n          </ButtonCascader>\n          <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n            <QueryField\n              query={query.query}\n              onChange={onChangeQuery}\n              onRunQuery={onRunQuery}\n              placeholder={'Insert Trace ID (run with Shift+Enter)'}\n              portalOrigin=\"zipkin\"\n            />\n          </div>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\n// Exported for tests\nexport function useServices(datasource: ZipkinDatasource): AsyncState<CascaderOption[]> {\n  const url = `${apiPrefix}/services`;\n\n  const [servicesOptions, fetch] = useAsyncFn(async (): Promise<CascaderOption[]> => {\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (services) {\n        return services.sort().map((service) => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n      }\n      return [];\n    } catch (error) {\n      dispatch(notifyApp(createErrorNotification('Failed to load services from Zipkin', error)));\n      throw error;\n    }\n  }, [datasource]);\n\n  useMount(() => {\n    // We should probably call this periodically to get new services after mount.\n    fetch();\n  });\n\n  return servicesOptions;\n}\n\ntype OptionsState = {\n  [serviceName: string]: {\n    [spanName: string]: {\n      [traceId: string]: string;\n    };\n  };\n};\n\n// Exported for tests\nexport function useLoadOptions(datasource: ZipkinDatasource) {\n  const isMounted = useMountedState();\n  const [allOptions, setAllOptions] = useState({} as OptionsState);\n\n  const [, fetchSpans] = useAsyncFn(\n    async function findSpans(service: string): Promise<void> {\n      const url = `${apiPrefix}/spans`;\n      try {\n        // The response of this should have been full ZipkinSpan objects based on API docs but is just list\n        // of span names.\n        // TODO: check if this is some issue of version used or something else\n        const response: string[] = await datasource.metadataRequest(url, { serviceName: service });\n        if (isMounted()) {\n          setAllOptions((state) => {\n            const spanOptions = fromPairs(response.map((span: string) => [span, undefined]));\n            return {\n              ...state,\n              [service]: spanOptions as any,\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource, allOptions]\n  );\n\n  const [, fetchTraces] = useAsyncFn(\n    async function findTraces(serviceName: string, spanName: string): Promise<void> {\n      const url = `${apiPrefix}/traces`;\n      const search = {\n        serviceName,\n        spanName,\n        // See other params and default here https://zipkin.io/zipkin-api/#/default/get_traces\n      };\n      try {\n        // This should return just root traces as there isn't any nesting\n        const traces: ZipkinSpan[][] = await datasource.metadataRequest(url, search);\n        if (isMounted()) {\n          const newTraces = traces.length\n            ? fromPairs(\n                traces.map((trace) => {\n                  const rootSpan = trace.find((span) => !span.parentId)!;\n\n                  return [`${rootSpan.name} [${Math.floor(rootSpan.duration / 1000)} ms]`, rootSpan.traceId];\n                })\n              )\n            : noTracesOptions;\n\n          setAllOptions((state) => {\n            const spans = state[serviceName];\n            return {\n              ...state,\n              [serviceName]: {\n                ...spans,\n                [spanName]: newTraces,\n              },\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource]\n  );\n\n  const onLoadOptions = useCallback(\n    (selectedOptions: CascaderOption[]) => {\n      const service = selectedOptions[0].value;\n      if (selectedOptions.length === 1) {\n        fetchSpans(service);\n      } else if (selectedOptions.length === 2) {\n        const spanName = selectedOptions[1].value;\n        fetchTraces(service, spanName);\n      }\n    },\n    [fetchSpans, fetchTraces]\n  );\n\n  return {\n    onLoadOptions,\n    allOptions,\n  };\n}\n\nfunction useMapToCascaderOptions(services: AsyncState<CascaderOption[]>, allOptions: OptionsState) {\n  return useMemo(() => {\n    let cascaderOptions: CascaderOption[] = [];\n\n    if (services.value && services.value.length) {\n      cascaderOptions = services.value.map((services) => {\n        return {\n          ...services,\n          children:\n            allOptions[services.value] &&\n            Object.keys(allOptions[services.value]).map((spanName) => {\n              return {\n                label: spanName,\n                value: spanName,\n                isLeaf: false,\n                children:\n                  allOptions[services.value][spanName] &&\n                  Object.keys(allOptions[services.value][spanName]).map((traceName) => {\n                    return {\n                      label: traceName,\n                      value: allOptions[services.value][spanName][traceName],\n                    };\n                  }),\n              };\n            }),\n        };\n      });\n    } else if (services.value && !services.value.length) {\n      cascaderOptions = noTracesFoundOptions;\n    }\n\n    return cascaderOptions;\n  }, [services, allOptions]);\n}\n\nconst NO_TRACES_KEY = '__NO_TRACES__';\nconst noTracesFoundOptions = [\n  {\n    label: 'No traces found',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nconst noTracesOptions = {\n  '[No traces in time range]': NO_TRACES_KEY,\n};\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9411\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(ZipkinDatasource)\n  .setQueryEditor(ZipkinQueryField)\n  .setConfigEditor(ConfigEditor);\n","import { identity } from 'lodash';\nimport { ZipkinAnnotation, ZipkinEndpoint, ZipkinSpan } from '../types';\nimport { DataFrame, FieldType, MutableDataFrame, TraceKeyValuePair, TraceLog, TraceSpanRow } from '@grafana/data';\n\n/**\n * Transforms response to Grafana trace data frame.\n */\nexport function transformResponse(zSpans: ZipkinSpan[]): DataFrame {\n  const spanRows = zSpans.map(transformSpan);\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'zipkin',\n      },\n    },\n  });\n\n  for (const span of spanRows) {\n    frame.add(span);\n  }\n\n  return frame;\n}\n\nfunction transformSpan(span: ZipkinSpan): TraceSpanRow {\n  const row = {\n    traceID: span.traceId,\n    spanID: span.id,\n    parentSpanID: span.parentId,\n    operationName: span.name,\n    serviceName: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n    serviceTags: serviceTags(span),\n    startTime: span.timestamp / 1000,\n    duration: span.duration / 1000,\n    logs: span.annotations?.map(transformAnnotation) ?? [],\n    tags: Object.keys(span.tags || {}).reduce<TraceKeyValuePair[]>((acc, key) => {\n      // If tag is error we remap it to simple boolean so that the trace ui will show an error icon.\n      if (key === 'error') {\n        acc.push({\n          key: 'error',\n          value: true,\n        });\n\n        acc.push({\n          key: 'errorValue',\n          value: span.tags!['error'],\n        });\n        return acc;\n      }\n      acc.push({ key, value: span.tags![key] });\n      return acc;\n    }, []),\n  };\n\n  if (span.kind) {\n    row.tags = [\n      {\n        key: 'kind',\n        value: span.kind,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  if (span.shared) {\n    row.tags = [\n      {\n        key: 'shared',\n        value: span.shared,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  return row;\n}\n\n/**\n * Maps annotations as a log as that seems to be the closest thing.\n * See https://zipkin.io/zipkin-api/#/default/get_trace__traceId_\n */\nfunction transformAnnotation(annotation: ZipkinAnnotation): TraceLog {\n  return {\n    timestamp: annotation.timestamp,\n    fields: [\n      {\n        key: 'annotation',\n        value: annotation.value,\n      },\n    ],\n  };\n}\n\nfunction serviceTags(span: ZipkinSpan): TraceKeyValuePair[] {\n  const endpoint = span.localEndpoint || span.remoteEndpoint;\n  if (!endpoint) {\n    return [];\n  }\n  return [\n    valueToTag('ipv4', endpoint.ipv4),\n    valueToTag('ipv6', endpoint.ipv6),\n    valueToTag('port', endpoint.port),\n    valueToTag('endpointType', span.localEndpoint ? 'local' : 'remote'),\n  ].filter(identity) as TraceKeyValuePair[];\n}\n\nfunction valueToTag<T>(key: string, value: T): TraceKeyValuePair<T> | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return {\n    key,\n    value,\n  };\n}\n\n/**\n * Transforms data frame to Zipkin response\n */\nexport const transformToZipkin = (data: MutableDataFrame): ZipkinSpan[] => {\n  let response: ZipkinSpan[] = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n    response.push({\n      traceId: span.traceID,\n      parentId: span.parentSpanID,\n      name: span.operationName,\n      id: span.spanID,\n      timestamp: span.startTime * 1000,\n      duration: span.duration * 1000,\n      ...getEndpoint(span),\n      annotations: span.logs.length\n        ? span.logs.map((l: TraceLog) => ({ timestamp: l.timestamp, value: l.fields[0].value }))\n        : undefined,\n      tags: span.tags.length\n        ? span.tags\n            .filter((t: TraceKeyValuePair) => t.key !== 'kind' && t.key !== 'endpointType' && t.key !== 'shared')\n            .reduce((tags: { [key: string]: string }, t: TraceKeyValuePair) => {\n              if (t.key === 'error') {\n                return {\n                  ...tags,\n                  [t.key]: span.tags.find((t: TraceKeyValuePair) => t.key === 'errorValue').value || '',\n                };\n              }\n              return { ...tags, [t.key]: t.value };\n            }, {})\n        : undefined,\n      kind: span.tags.find((t: TraceKeyValuePair) => t.key === 'kind')?.value,\n      shared: span.tags.find((t: TraceKeyValuePair) => t.key === 'shared')?.value,\n    });\n  }\n\n  return response;\n};\n\n// Returns remote or local endpoint object\nconst getEndpoint = (span: any): { [key: string]: ZipkinEndpoint } | undefined => {\n  const key =\n    span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'endpointType')?.value === 'local'\n      ? 'localEndpoint'\n      : 'remoteEndpoint';\n  return span.serviceName !== 'unknown'\n    ? {\n        [key]: {\n          serviceName: span.serviceName,\n          ipv4: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv4')?.value,\n          ipv6: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv6')?.value,\n          port: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'port')?.value,\n        },\n      }\n    : undefined;\n};\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","useStyles","getStyles","className","container","InlineFieldRow","row","InlineField","tooltip","label","labelWidth","InlineSwitch","id","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","theme","css","values","keyPlaceholder","valuePlaceholder","wrapper","length","map","idx","pair","SegmentInput","placeholder","key","e","v","i","String","InlineLabel","operator","width","onClick","slice","Icon","name","spacing","xs","palette","orange","TraceToLogsSettings","infoText","DataSourcePicker","inputId","pluginId","current","tracesToLogs","datasourceUid","noDefault","ds","uid","tags","mapTagNamesEnabled","mappedTags","tag","TagsInput","grow","Input","type","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","defaultChecked","lokiSearch","md","colors","textSemiWeak","getNonOverlappingDuration","ranges","sort","a","b","reduce","acc","range","tail","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","children","parentId","parentIds","push","undefined","getStats","duration","traceDuration","selfDuration","main","toFixedNoTrailingZeros","secondary","n","parseFloat","toFixed","makeFrames","MutableDataFrame","fields","Fields","FieldType","config","displayName","color","mode","meta","preferredVisualisationType","createGraphFrames","data","nodes","edges","spans","traceEndTime","traceStartTime","Infinity","timestamp","findTraceDuration","c","childrenDuration","stats","localEndpoint","serviceName","remoteEndpoint","convertTraceToGraph","nodesFrame","edgesFrame","node","add","edge","ZipkinDatasource","DataSourceApi","constructor","instanceSettings","super","this","query","target","targets","queryType","uploadedJson","of","traceData","JSON","parse","responseToDataQueryResponse","error","message","request","encodeURIComponent","pipe","res","emptyDataQueryResponse","url","params","lastValueFrom","hideFromInspector","metadataRequest","status","getQueryDisplayText","apiUrl","serializeParams","req","getBackendSrv","fetch","response","transformResponse","custom","traceFormat","tracesCascader","marginRight","noTracesFoundOptions","isLeaf","noTracesOptions","plugin","DataSourcePlugin","setQueryEditor","onRunQuery","datasource","serviceOptions","servicesOptions","useAsyncFn","async","services","service","dispatch","notifyApp","createErrorNotification","useMount","useServices","useTheme2","useStyles2","onLoadOptions","allOptions","isMounted","useMountedState","setAllOptions","useState","fetchSpans","state","spanOptions","fromPairs","fetchTraces","spanName","search","traces","newTraces","trace","rootSpan","find","Math","floor","traceId","useCallback","selectedOptions","useLoadOptions","onSelectTrace","traceID","cascaderOptions","useMemo","Object","keys","traceName","useMapToCascaderOptions","RadioButtonGroup","size","padding","FileDropzone","multiple","onLoad","result","ButtonCascader","loadData","variant","buttonProps","QueryField","nextQuery","portalOrigin","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","zSpans","spanRows","transformSpan","frame","spanID","parentSpanID","operationName","serviceTags","startTime","logs","annotations","transformAnnotation","kind","shared","annotation","endpoint","valueToTag","ipv4","ipv6","port","filter","identity","transformToZipkin","get","getEndpoint","l","t","fn"],"sourceRoot":""}