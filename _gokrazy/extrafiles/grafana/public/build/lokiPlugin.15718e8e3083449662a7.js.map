{"version":3,"file":"lokiPlugin.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/components/LokiOptionFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/add_label_to_query.ts","webpack://grafana/../../opt/drone/yarncache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/parse.js","webpack://grafana/../../opt/drone/yarncache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/sha1.js","webpack://grafana/../../opt/drone/yarncache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/v5.js","webpack://grafana/../../opt/drone/yarncache/uuid-npm-8.3.2-eca0baba53-5575a8a75c.zip/node_modules/uuid/dist/esm-browser/v35.js","webpack://grafana/./public/app/plugins/datasource/loki/query_utils.ts","webpack://grafana/./public/app/plugins/datasource/loki/result_transformer.ts","webpack://grafana/./public/app/plugins/datasource/loki/makeTableFrames.ts","webpack://grafana/./public/app/plugins/datasource/loki/makeIdField.ts","webpack://grafana/./public/app/plugins/datasource/loki/backendResultTransformer.ts","webpack://grafana/../../opt/drone/yarncache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/observable/dom/WebSocketSubject.js","webpack://grafana/./public/app/plugins/datasource/loki/live_streams.ts","webpack://grafana/../../opt/drone/yarncache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/observable/dom/webSocket.js","webpack://grafana/./public/app/plugins/datasource/loki/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/loki/streaming.ts","webpack://grafana/./public/app/plugins/datasource/loki/datasource.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiExploreQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/types.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/binaryScalarOperations.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operations.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/LokiQueryModeller.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderExplaind.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryCodeEditor.tsx","webpack://grafana/./.yarn/__virtual__/@grafana-lezer-logql-virtual-9250dbecf8/3/opt/drone/yarncache/@grafana-lezer-logql-npm-0.0.11-d7d249e74a-0427e59528.zip/node_modules/@grafana/lezer-logql/index.es.js","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/parsing.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/loki/LokiAnnotationsQueryCtrl.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/MaxLinesField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/module.ts","webpack://grafana/./public/app/plugins/datasource/loki/types.ts"],"sourcesContent":["// Libraries\nimport React, { memo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { map } from 'lodash';\n\n// Types\nimport { InlineFormLabel, RadioButtonGroup, InlineField, Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nexport interface LokiOptionFieldsProps {\n  lineLimitValue: string;\n  resolution: number;\n  query: LokiQuery;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  runOnBlur?: boolean;\n}\n\nexport const queryTypeOptions: Array<SelectableValue<LokiQueryType>> = [\n  { value: LokiQueryType.Range, label: 'Range', description: 'Run query over a range of time.' },\n  {\n    value: LokiQueryType.Instant,\n    label: 'Instant',\n    description: 'Run query against a single point in time. For this query, the \"To\" time is used.',\n  },\n];\n\nif (config.featureToggles.lokiLive) {\n  queryTypeOptions.push({\n    value: LokiQueryType.Stream,\n    label: 'Stream',\n    description: 'Run a query and keep sending results on an interval',\n  });\n}\n\nexport const DEFAULT_RESOLUTION: SelectableValue<number> = {\n  value: 1,\n  label: '1/1',\n};\n\nexport const RESOLUTION_OPTIONS: Array<SelectableValue<number>> = [DEFAULT_RESOLUTION].concat(\n  map([2, 3, 4, 5, 10], (value: number) => ({\n    value,\n    label: '1/' + value,\n  }))\n);\n\nexport function LokiOptionFields(props: LokiOptionFieldsProps) {\n  const { lineLimitValue, resolution, onRunQuery, runOnBlur, onChange } = props;\n  const query = props.query ?? {};\n  let queryType = query.queryType ?? (query.instant ? LokiQueryType.Instant : LokiQueryType.Range);\n\n  function onChangeQueryLimit(value: string) {\n    const nextQuery = { ...query, maxLines: preprocessMaxLines(value) };\n    onChange(nextQuery);\n  }\n\n  function onQueryTypeChange(queryType: LokiQueryType) {\n    const { instant, range, ...rest } = query;\n    onChange({ ...rest, queryType });\n  }\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (query.maxLines !== preprocessMaxLines(e.currentTarget.value)) {\n      onChangeQueryLimit(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      onRunQuery();\n    }\n  }\n\n  function onResolutionChange(option: SelectableValue<number>) {\n    const nextQuery = { ...query, resolution: option.value };\n    onChange(nextQuery);\n  }\n\n  return (\n    <div aria-label=\"Loki extra field\" className=\"gf-form-inline\">\n      {/*Query type field*/}\n      <div\n        data-testid=\"queryTypeField\"\n        className={cx(\n          'gf-form explore-input-margin',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={queryTypeOptions}\n          value={queryType}\n          onChange={(type: LokiQueryType) => {\n            onQueryTypeChange(type);\n            if (runOnBlur) {\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      {/*Line limit field*/}\n      <div\n        data-testid=\"lineLimitField\"\n        className={cx(\n          'gf-form',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Line limit field\"\n      >\n        <InlineField label=\"Line limit\" tooltip={'Upper limit for number of log lines returned by query.'}>\n          <Input\n            className=\"width-4\"\n            placeholder=\"auto\"\n            type=\"number\"\n            min={0}\n            onChange={onMaxLinesChange}\n            onKeyDown={onReturnKeyDown}\n            value={lineLimitValue}\n            onBlur={() => {\n              if (runOnBlur) {\n                onRunQuery();\n              }\n            }}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Resolution\"\n          tooltip={\n            'Resolution 1/1 sets step parameter of Loki metrics range queries such that each pixel corresponds to one data point. For better performance, lower resolutions can be picked. 1/2 only retrieves a data point for every other pixel, and 1/10 retrieves one data point per 10 pixels.'\n          }\n        >\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={resolution}\n            aria-label=\"Select resolution\"\n            menuShouldPortal\n          />\n        </InlineField>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(LokiOptionFields);\n\nexport function preprocessMaxLines(value: string): number {\n  if (value.length === 0) {\n    // empty input - falls back to dataSource.maxLines limit\n    return NaN;\n  } else if (value.length > 0 && (isNaN(+value) || +value < 0)) {\n    // input with at least 1 character and that is either incorrect (value in the input field is not a number) or negative\n    // falls back to the limit of 0 lines\n    return 0;\n  } else {\n    // default case - correct input\n    return +value;\n  }\n}\n","import { chain, isEqual } from 'lodash';\nimport { LOKI_KEYWORDS } from './syntax';\nimport { PROM_KEYWORDS, OPERATORS, LOGICAL_OPERATORS } from 'app/plugins/datasource/prometheus/promql';\n\nconst builtInWords = [...PROM_KEYWORDS, ...OPERATORS, ...LOGICAL_OPERATORS, ...LOKI_KEYWORDS];\n\n// We want to extract all possible metrics and also keywords\nconst metricsAndKeywordsRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\]{=!\",])/g;\n\nexport function addLabelToQuery(\n  query: string,\n  key: string,\n  value: string | number,\n  operator?: string,\n  hasNoMetrics?: boolean\n): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n\n  // Add empty selectors to bare metric names\n  let previousWord: string;\n\n  query = query.replace(metricsAndKeywordsRegexp, (match, word, offset) => {\n    const isMetric = isWordMetric(query, word, offset, previousWord, hasNoMetrics);\n    previousWord = word;\n\n    return isMetric ? `${word}{}` : word;\n  });\n\n  //This is a RegExp for stream selector - e.g. {job=\"grafana\"}\n  const selectorRegexp = /(\\$)?{([^{]*)}/g;\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  let match = selectorRegexp.exec(query);\n  /* \n    There are 2 possible false positive scenarios: \n    \n    1. We match Grafana's variables with ${ syntax - such as${__rate_s}. To filter these out we could use negative lookbehind,\n    but Safari browser currently doesn't support it. Therefore we need to hack this by creating 2 matching groups. \n    (\\$) is for the Grafana's variables and if we match it, we know this is not a stream selector and we don't want to add label.\n\n    2. Log queries can include {{.label}} syntax when line_format is used. We need to filter these out by checking\n    if match starts with \"{.\"\n  */\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    lastIndex = match.index + match[2].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n\n    // Filtering our false positives\n    if (match[0].startsWith('{.') || match[1]) {\n      parts.push(prefix);\n      parts.push(match[0]);\n    } else {\n      // If we didn't match first group, we are inside selector and we want to add labels\n      const selector = match[2];\n      const selectorWithLabel = addLabelToSelector(selector, key, transformedValue, operator);\n      parts.push(prefix, selectorWithLabel);\n    }\n\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nexport function addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  const formatted = chain(parsedLabels)\n    .uniqWith(isEqual)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n\n  return `{${formatted}}`;\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nfunction isWordMetric(query: string, word: string, offset: number, previousWord: string, hasNoMetrics?: boolean) {\n  const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n  // Handle \"sum by (key) (metric)\"\n  const previousWordIsKeyWord = previousWord && OPERATORS.indexOf(previousWord) > -1;\n  // Check for colon as as \"word boundary\" symbol\n  const isColonBounded = word.endsWith(':');\n  // Check for words that start with \" which means that they are not metrics\n  const startsWithQuote = query[offset - 1] === '\"';\n  // Check for template variables\n  const isTemplateVariable = query[offset - 1] === '$';\n  // Check for time units\n  const isTimeUnit = ['s', 'm', 'h', 'd', 'w'].includes(word) && Boolean(Number(query[offset - 1]));\n\n  if (\n    !hasNoMetrics &&\n    !insideSelector &&\n    !isColonBounded &&\n    !previousWordIsKeyWord &&\n    !startsWithQuote &&\n    !isTemplateVariable &&\n    !isTimeUnit &&\n    builtInWords.indexOf(word) === -1\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default addLabelToQuery;\n","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import { escapeRegExp } from 'lodash';\nimport { PIPE_PARSERS } from './syntax';\nimport { LokiQuery, LokiQueryType } from './types';\n\nexport function formatQuery(selector: string | undefined): string {\n  return `${selector || ''}`.trim();\n}\n\n/**\n * Returns search terms from a LogQL query.\n * E.g., `{} |= foo |=bar != baz` returns `['foo', 'bar']`.\n */\nexport function getHighlighterExpressionsFromQuery(input: string): string[] {\n  let expression = input;\n  const results = [];\n\n  // Consume filter expression from left to right\n  while (expression) {\n    const filterStart = expression.search(/\\|=|\\|~|!=|!~/);\n    // Nothing more to search\n    if (filterStart === -1) {\n      break;\n    }\n    // Drop terms for negative filters\n    const filterOperator = expression.slice(filterStart, filterStart + 2);\n    const skip = expression.slice(filterStart).search(/!=|!~/) === 0;\n    expression = expression.slice(filterStart + 2);\n    if (skip) {\n      continue;\n    }\n    // Check if there is more chained\n    const filterEnd = expression.search(/\\|=|\\|~|!=|!~/);\n    let filterTerm;\n    if (filterEnd === -1) {\n      filterTerm = expression.trim();\n    } else {\n      filterTerm = expression.slice(0, filterEnd).trim();\n      expression = expression.slice(filterEnd);\n    }\n\n    const quotedTerm = filterTerm.match(/\"(.*?)\"/);\n    const backtickedTerm = filterTerm.match(/`(.*?)`/);\n    const term = quotedTerm || backtickedTerm;\n\n    if (term) {\n      const unwrappedFilterTerm = term[1];\n      const regexOperator = filterOperator === '|~';\n\n      // Only filter expressions with |~ operator are treated as regular expressions\n      if (regexOperator) {\n        // When using backticks, Loki doesn't require to escape special characters and we can just push regular expression to highlights array\n        // When using quotes, we have extra backslash escaping and we need to replace \\\\ with \\\n        results.push(backtickedTerm ? unwrappedFilterTerm : unwrappedFilterTerm.replace(/\\\\\\\\/g, '\\\\'));\n      } else {\n        // We need to escape this string so it is not matched as regular expression\n        results.push(escapeRegExp(unwrappedFilterTerm));\n      }\n    } else {\n      return results;\n    }\n  }\n\n  return results;\n}\n\nexport function queryHasPipeParser(expr: string): boolean {\n  const parsers = PIPE_PARSERS.map((parser) => `${parser.label}`).join('|');\n  const regexp = new RegExp(`\\\\\\|\\\\\\s?(${parsers})`);\n  return regexp.test(expr);\n}\n\nexport function addParsedLabelToQuery(expr: string, key: string, value: string | number, operator: string) {\n  return expr + ` | ${key}${operator}\"${value.toString()}\"`;\n}\n\n// we are migrating from `.instant` and `.range` to `.queryType`\n// this function returns a new query object that:\n// - has `.queryType`\n// - does not have `.instant`\n// - does not have `.range`\nexport function getNormalizedLokiQuery(query: LokiQuery): LokiQuery {\n  // if queryType exists, it is respected\n  if (query.queryType !== undefined) {\n    const { instant, range, ...rest } = query;\n    return rest;\n  }\n\n  // if no queryType, and instant===true, it's instant\n  if (query.instant === true) {\n    const { instant, range, ...rest } = query;\n    return { ...rest, queryType: LokiQueryType.Instant };\n  }\n\n  // otherwise it is range\n  const { instant, range, ...rest } = query;\n  return { ...rest, queryType: LokiQueryType.Range };\n}\n","import { capitalize, groupBy, isEmpty } from 'lodash';\nimport { v5 as uuidv5 } from 'uuid';\nimport { of } from 'rxjs';\n\nimport {\n  FieldType,\n  TimeSeries,\n  Labels,\n  DataFrame,\n  ArrayVector,\n  MutableDataFrame,\n  findUniqueLabels,\n  DataFrameView,\n  DataLink,\n  Field,\n  QueryResultMetaStat,\n  QueryResultMeta,\n  TimeSeriesValue,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { getTemplateSrv, getDataSourceSrv } from '@grafana/runtime';\nimport TableModel from 'app/core/table_model';\nimport { formatQuery, getHighlighterExpressionsFromQuery } from './query_utils';\nimport {\n  LokiRangeQueryRequest,\n  LokiResponse,\n  LokiMatrixResult,\n  LokiVectorResult,\n  TransformerOptions,\n  LokiResultType,\n  LokiStreamResult,\n  LokiTailResponse,\n  LokiQuery,\n  LokiOptions,\n  DerivedFieldConfig,\n  LokiStreamResponse,\n  LokiStats,\n} from './types';\nimport { renderLegendFormat } from '../prometheus/legend';\n\nconst UUID_NAMESPACE = '6ec946da-0f49-47a8-983a-1d76d17e7c92';\n\n/**\n * Transforms LokiStreamResult structure into a dataFrame. Used when doing standard queries and newer version of Loki.\n */\nexport function lokiStreamResultToDataFrame(stream: LokiStreamResult, reverse?: boolean, refId?: string): DataFrame {\n  const labels: Labels = stream.stream;\n  const labelsString = Object.entries(labels)\n    .map(([key, val]) => `${key}=\"${val}\"`)\n    .sort()\n    .join('');\n\n  const times = new ArrayVector<string>([]);\n  const timesNs = new ArrayVector<string>([]);\n  const lines = new ArrayVector<string>([]);\n  const uids = new ArrayVector<string>([]);\n\n  // We need to store and track all used uids to ensure that uids are unique\n  const usedUids: { string?: number } = {};\n\n  for (const [ts, line] of stream.values) {\n    // num ns epoch in string, we convert it to iso string here so it matches old format\n    times.add(new Date(parseInt(ts.slice(0, -6), 10)).toISOString());\n    timesNs.add(ts);\n    lines.add(line);\n    uids.add(createUid(ts, labelsString, line, usedUids, refId));\n  }\n\n  return constructDataFrame(times, timesNs, lines, uids, labels, reverse, refId);\n}\n\n/**\n * Constructs dataFrame with supplied fields and other data. Also makes sure it is properly reversed if needed.\n */\nfunction constructDataFrame(\n  times: ArrayVector<string>,\n  timesNs: ArrayVector<string>,\n  lines: ArrayVector<string>,\n  uids: ArrayVector<string>,\n  labels: Labels,\n  reverse?: boolean,\n  refId?: string\n) {\n  const dataFrame = {\n    refId,\n    fields: [\n      { name: 'ts', type: FieldType.time, config: { displayName: 'Time' }, values: times }, // Time\n      { name: 'line', type: FieldType.string, config: {}, values: lines, labels }, // Line - needs to be the first field with string type\n      { name: 'id', type: FieldType.string, config: {}, values: uids },\n      { name: 'tsNs', type: FieldType.time, config: { displayName: 'Time ns' }, values: timesNs }, // Time\n    ],\n    length: times.length,\n  };\n\n  if (reverse) {\n    const mutableDataFrame = new MutableDataFrame(dataFrame);\n    mutableDataFrame.reverse();\n    return mutableDataFrame;\n  }\n\n  return dataFrame;\n}\n\n/**\n * Transform LokiResponse data and appends it to MutableDataFrame. Used for streaming where the dataFrame can be\n * a CircularDataFrame creating a fixed size rolling buffer.\n * TODO: Probably could be unified with the logStreamToDataFrame function.\n * @param response\n * @param data Needs to have ts, line, labels, id as fields\n */\nexport function appendResponseToBufferedData(response: LokiTailResponse, data: MutableDataFrame) {\n  // Should we do anything with: response.dropped_entries?\n\n  const streams: LokiStreamResult[] = response.streams;\n  if (!streams || !streams.length) {\n    return;\n  }\n\n  let baseLabels: Labels = {};\n  for (const f of data.fields) {\n    if (f.type === FieldType.string) {\n      if (f.labels) {\n        baseLabels = f.labels;\n      }\n      break;\n    }\n  }\n\n  const tsField = data.fields[0];\n  const tsNsField = data.fields[1];\n  const lineField = data.fields[2];\n  const labelsField = data.fields[3];\n  const idField = data.fields[4];\n\n  // We are comparing used ids only within the received stream. This could be a problem if the same line + labels + nanosecond timestamp came in 2 separate batches.\n  // As this is very unlikely, and the result would only affect live-tailing css animation we have decided to not compare all received uids from data param as this would slow down processing.\n  const usedUids: { string?: number } = {};\n\n  for (const stream of streams) {\n    // Find unique labels\n    const unique = findUniqueLabels(stream.stream, baseLabels);\n    const allLabelsString = Object.entries(stream.stream)\n      .map(([key, val]) => `${key}=\"${val}\"`)\n      .sort()\n      .join('');\n\n    // Add each line\n    for (const [ts, line] of stream.values) {\n      tsField.values.add(new Date(parseInt(ts.slice(0, -6), 10)).toISOString());\n      tsNsField.values.add(ts);\n      lineField.values.add(line);\n      labelsField.values.add(unique);\n      idField.values.add(createUid(ts, allLabelsString, line, usedUids, data.refId));\n    }\n  }\n}\n\nfunction createUid(ts: string, labelsString: string, line: string, usedUids: any, refId?: string): string {\n  // Generate id as hashed nanosecond timestamp, labels and line (this does not have to be unique)\n  let id = uuidv5(`${ts}_${labelsString}_${line}`, UUID_NAMESPACE);\n\n  // Check if generated id is unique\n  // If not and we've already used it, append it's count after it\n  if (id in usedUids) {\n    // Increase the count\n    const newCount = usedUids[id] + 1;\n    usedUids[id] = newCount;\n    // Append count to generated id to make it unique\n    id = `${id}_${newCount}`;\n  } else {\n    // If id is unique and wasn't used, add it to usedUids and start count at 0\n    usedUids[id] = 0;\n  }\n  // Return unique id\n  if (refId) {\n    return `${id}_${refId}`;\n  }\n  return id;\n}\n\nfunction lokiMatrixToTimeSeries(matrixResult: LokiMatrixResult, options: TransformerOptions): TimeSeries {\n  const name = createMetricLabel(matrixResult.metric, options);\n  return {\n    target: name,\n    title: name,\n    datapoints: lokiPointsToTimeseriesPoints(matrixResult.values),\n    tags: matrixResult.metric,\n    meta: options.meta,\n    refId: options.refId,\n  };\n}\n\nfunction parsePrometheusFormatSampleValue(value: string): number {\n  switch (value) {\n    case '+Inf':\n      return Number.POSITIVE_INFINITY;\n    case '-Inf':\n      return Number.NEGATIVE_INFINITY;\n    default:\n      return parseFloat(value);\n  }\n}\n\nexport function lokiPointsToTimeseriesPoints(data: Array<[number, string]>): TimeSeriesValue[][] {\n  const datapoints: TimeSeriesValue[][] = [];\n\n  for (const [time, value] of data) {\n    let datapointValue: TimeSeriesValue = parsePrometheusFormatSampleValue(value);\n\n    if (isNaN(datapointValue)) {\n      datapointValue = null;\n    }\n\n    const timestamp = time * 1000;\n\n    datapoints.push([datapointValue, timestamp]);\n  }\n\n  return datapoints;\n}\n\nexport function lokiResultsToTableModel(\n  lokiResults: Array<LokiMatrixResult | LokiVectorResult>,\n  resultCount: number,\n  refId: string,\n  meta: QueryResultMeta,\n  valueWithRefId?: boolean\n): TableModel {\n  if (!lokiResults || lokiResults.length === 0) {\n    return new TableModel();\n  }\n\n  // Collect all labels across all metrics\n  const metricLabels: Set<string> = new Set<string>(\n    lokiResults.reduce((acc, cur) => acc.concat(Object.keys(cur.metric)), [] as string[])\n  );\n\n  // Sort metric labels, create columns for them and record their index\n  const sortedLabels = [...metricLabels.values()].sort();\n  const table = new TableModel();\n  table.refId = refId;\n  table.meta = meta;\n  table.columns = [\n    { text: 'Time', type: FieldType.time },\n    ...sortedLabels.map((label) => ({ text: label, filterable: true, type: FieldType.string })),\n    { text: resultCount > 1 || valueWithRefId ? `Value #${refId}` : 'Value', type: FieldType.number },\n  ];\n\n  // Populate rows, set value to empty string when label not present.\n  lokiResults.forEach((series) => {\n    const newSeries: LokiMatrixResult = {\n      metric: series.metric,\n      values: (series as LokiVectorResult).value\n        ? [(series as LokiVectorResult).value]\n        : (series as LokiMatrixResult).values,\n    };\n\n    if (!newSeries.values) {\n      return;\n    }\n\n    if (!newSeries.metric) {\n      table.rows.concat(newSeries.values.map(([a, b]) => [a * 1000, parseFloat(b)]));\n    } else {\n      table.rows.push(\n        ...newSeries.values.map(([a, b]) => [\n          a * 1000,\n          ...sortedLabels.map((label) => newSeries.metric[label] || ''),\n          parseFloat(b),\n        ])\n      );\n    }\n  });\n\n  return table;\n}\n\nexport function createMetricLabel(labelData: { [key: string]: string }, options?: TransformerOptions) {\n  let label =\n    options === undefined || isEmpty(options.legendFormat)\n      ? getOriginalMetricName(labelData)\n      : renderLegendFormat(getTemplateSrv().replace(options.legendFormat ?? '', options.scopedVars), labelData);\n\n  if (!label && options) {\n    label = options.query;\n  }\n  return label;\n}\n\nfunction getOriginalMetricName(labelData: { [key: string]: string }) {\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `{${labelPart}}`;\n}\n\nexport function decamelize(s: string): string {\n  return s.replace(/[A-Z]/g, (m) => ` ${m.toLowerCase()}`);\n}\n\n// Turn loki stats { metric: value } into meta stat { title: metric, value: value }\nfunction lokiStatsToMetaStat(stats: LokiStats | undefined): QueryResultMetaStat[] {\n  const result: QueryResultMetaStat[] = [];\n\n  if (!stats) {\n    return result;\n  }\n\n  for (const section in stats) {\n    const values = stats[section];\n    for (const label in values) {\n      const value = values[label];\n      let unit;\n      if (/time/i.test(label) && value) {\n        unit = 's';\n      } else if (/bytes.*persecond/i.test(label)) {\n        unit = 'Bps';\n      } else if (/bytes/i.test(label)) {\n        unit = 'decbytes';\n      }\n      const title = `${capitalize(section)}: ${decamelize(label)}`;\n      result.push({ displayName: title, value, unit });\n    }\n  }\n\n  return result;\n}\n\nexport function lokiStreamsToDataFrames(\n  response: LokiStreamResponse,\n  target: { refId: string; expr?: string },\n  limit: number,\n  config: LokiOptions,\n  reverse = false\n): DataFrame[] {\n  const data = limit > 0 ? response.data.result : [];\n  const stats: QueryResultMetaStat[] = lokiStatsToMetaStat(response.data.stats);\n  // Use custom mechanism to identify which stat we want to promote to label\n  const custom = {\n    lokiQueryStatKey: 'Summary: total bytes processed',\n  };\n\n  const meta: QueryResultMeta = {\n    searchWords: getHighlighterExpressionsFromQuery(formatQuery(target.expr)),\n    limit,\n    stats,\n    custom,\n    preferredVisualisationType: 'logs',\n  };\n\n  const series: DataFrame[] = data.map((stream) => {\n    const dataFrame = lokiStreamResultToDataFrame(stream, reverse, target.refId);\n    enhanceDataFrame(dataFrame, config);\n\n    if (meta.custom && dataFrame.fields.some((f) => f.labels && Object.keys(f.labels).some((l) => l === '__error__'))) {\n      meta.custom.error = 'Error when parsing some of the logs';\n    }\n\n    return {\n      ...dataFrame,\n      refId: target.refId,\n      meta,\n    };\n  });\n\n  if (stats.length && !data.length) {\n    return [\n      {\n        fields: [],\n        length: 0,\n        refId: target.refId,\n        meta,\n      },\n    ];\n  }\n\n  return series;\n}\n\n/**\n * Adds new fields and DataLinks to DataFrame based on DataSource instance config.\n */\nexport const enhanceDataFrame = (dataFrame: DataFrame, config: LokiOptions | null): void => {\n  if (!config) {\n    return;\n  }\n\n  const derivedFields = config.derivedFields ?? [];\n  if (!derivedFields.length) {\n    return;\n  }\n  const derivedFieldsGrouped = groupBy(derivedFields, 'name');\n\n  const newFields = Object.values(derivedFieldsGrouped).map(fieldFromDerivedFieldConfig);\n\n  const view = new DataFrameView(dataFrame);\n  view.forEach((row: { line: string }) => {\n    for (const field of newFields) {\n      const logMatch = row.line.match(derivedFieldsGrouped[field.name][0].matcherRegex);\n      field.values.add(logMatch && logMatch[1]);\n    }\n  });\n\n  dataFrame.fields = [...dataFrame.fields, ...newFields];\n};\n\n/**\n * Transform derivedField config into dataframe field with config that contains link.\n */\nfunction fieldFromDerivedFieldConfig(derivedFieldConfigs: DerivedFieldConfig[]): Field<any, ArrayVector> {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const dataLinks = derivedFieldConfigs.reduce((acc, derivedFieldConfig) => {\n    // Having field.datasourceUid means it is an internal link.\n    if (derivedFieldConfig.datasourceUid) {\n      const dsSettings = dataSourceSrv.getInstanceSettings(derivedFieldConfig.datasourceUid);\n\n      acc.push({\n        // Will be filled out later\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        url: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        internal: {\n          query: { query: derivedFieldConfig.url },\n          datasourceUid: derivedFieldConfig.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    } else if (derivedFieldConfig.url) {\n      acc.push({\n        // We do not know what title to give here so we count on presentation layer to create a title from metadata.\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        url: derivedFieldConfig.url,\n      });\n    }\n    return acc;\n  }, [] as DataLink[]);\n\n  return {\n    name: derivedFieldConfigs[0].name,\n    type: FieldType.string,\n    config: {\n      links: dataLinks,\n    },\n    // We are adding values later on\n    values: new ArrayVector<string>([]),\n  };\n}\n\nfunction rangeQueryResponseToTimeSeries(\n  response: LokiResponse,\n  query: LokiRangeQueryRequest,\n  target: LokiQuery,\n  responseListLength: number,\n  scopedVars: ScopedVars\n): TimeSeries[] {\n  /** Show results of Loki metric queries only in graph */\n  const meta: QueryResultMeta = {\n    preferredVisualisationType: 'graph',\n  };\n  const transformerOptions: TransformerOptions = {\n    format: target.format,\n    legendFormat: target.legendFormat ?? '',\n    start: query.start!,\n    end: query.end!,\n    step: query.step!,\n    query: query.query,\n    responseListLength,\n    refId: target.refId,\n    meta,\n    valueWithRefId: target.valueWithRefId,\n    scopedVars,\n  };\n\n  switch (response.data.resultType) {\n    case LokiResultType.Vector:\n      return response.data.result.map((vecResult) =>\n        lokiMatrixToTimeSeries({ metric: vecResult.metric, values: [vecResult.value] }, transformerOptions)\n      );\n    case LokiResultType.Matrix:\n      return response.data.result.map((matrixResult) => lokiMatrixToTimeSeries(matrixResult, transformerOptions));\n    default:\n      return [];\n  }\n}\n\nexport function rangeQueryResponseToDataFrames(\n  response: LokiResponse,\n  query: LokiRangeQueryRequest,\n  target: LokiQuery,\n  responseListLength: number,\n  scopedVars: ScopedVars\n): DataFrame[] {\n  const series = rangeQueryResponseToTimeSeries(response, query, target, responseListLength, scopedVars);\n  const frames = series.map((s) => toDataFrame(s));\n\n  const { step } = query;\n\n  if (step != null) {\n    const intervalMs = step * 1000;\n\n    frames.forEach((frame) => {\n      frame.fields.forEach((field) => {\n        if (field.type === FieldType.time) {\n          field.config.interval = intervalMs;\n        }\n      });\n    });\n  }\n\n  return frames;\n}\n\nexport function processRangeQueryResponse(\n  response: LokiResponse,\n  target: LokiQuery,\n  query: LokiRangeQueryRequest,\n  responseListLength: number,\n  limit: number,\n  config: LokiOptions,\n  scopedVars: ScopedVars,\n  reverse = false\n) {\n  switch (response.data.resultType) {\n    case LokiResultType.Stream:\n      return of({\n        data: lokiStreamsToDataFrames(response as LokiStreamResponse, target, limit, config, reverse),\n        key: `${target.refId}_log`,\n      });\n\n    case LokiResultType.Vector:\n    case LokiResultType.Matrix:\n      return of({\n        data: rangeQueryResponseToDataFrames(\n          response,\n          query,\n          {\n            ...target,\n            format: 'time_series',\n          },\n          responseListLength,\n          scopedVars\n        ),\n        key: target.refId,\n      });\n    default:\n      throw new Error(`Unknown result type \"${(response.data as any).resultType}\".`);\n  }\n}\n","import { DataFrame, Field, FieldType, ArrayVector } from '@grafana/data';\nimport { groupBy } from 'lodash';\n\nexport function makeTableFrames(instantMetricFrames: DataFrame[]): DataFrame[] {\n  // first we remove frames that have no refId\n  // (we will group them by refId, so we need it to be set)\n  const framesWithRefId = instantMetricFrames.filter((f) => f.refId !== undefined);\n\n  const framesByRefId = groupBy(framesWithRefId, (frame) => frame.refId);\n\n  return Object.entries(framesByRefId).map(([refId, frames]) => makeTableFrame(frames, refId));\n}\n\ntype NumberField = Field<number, ArrayVector<number>>;\ntype StringField = Field<string, ArrayVector<string>>;\n\nfunction makeTableFrame(instantMetricFrames: DataFrame[], refId: string): DataFrame {\n  const tableTimeField: NumberField = { name: 'Time', config: {}, values: new ArrayVector(), type: FieldType.time };\n  const tableValueField: NumberField = {\n    name: `Value #${refId}`,\n    config: {},\n    values: new ArrayVector(),\n    type: FieldType.number,\n  };\n\n  // Sort metric labels, create columns for them and record their index\n  const allLabelNames = new Set(\n    instantMetricFrames.map((frame) => frame.fields.map((field) => Object.keys(field.labels ?? {})).flat()).flat()\n  );\n\n  const sortedLabelNames = Array.from(allLabelNames).sort();\n\n  const labelFields: StringField[] = sortedLabelNames.map((labelName) => ({\n    name: labelName,\n    config: { filterable: true },\n    values: new ArrayVector(),\n    type: FieldType.string,\n  }));\n\n  instantMetricFrames.forEach((frame) => {\n    const timeField = frame.fields.find((field) => field.type === FieldType.time);\n    const valueField = frame.fields.find((field) => field.type === FieldType.number);\n    if (timeField == null || valueField == null) {\n      return;\n    }\n\n    const timeArray = timeField.values.toArray();\n    const valueArray = valueField.values.toArray();\n\n    for (let x of timeArray) {\n      tableTimeField.values.add(x);\n    }\n\n    for (let x of valueArray) {\n      tableValueField.values.add(x);\n    }\n\n    const labels = valueField.labels ?? {};\n\n    for (let f of labelFields) {\n      const text = labels[f.name] ?? '';\n      // we insert the labels as many times as we have values\n      for (let i = 0; i < valueArray.length; i++) {\n        f.values.add(text);\n      }\n    }\n  });\n\n  return {\n    fields: [tableTimeField, ...labelFields, tableValueField],\n    refId,\n    meta: { preferredVisualisationType: 'table' },\n    length: tableTimeField.values.length,\n  };\n}\n","import { v5 as uuidv5 } from 'uuid';\n\nimport { ArrayVector, DataFrame, Field, FieldType, Labels } from '@grafana/data';\n\nconst UUID_NAMESPACE = '6ec946da-0f49-47a8-983a-1d76d17e7c92';\n\nfunction createUid(text: string, usedUids: Map<string, number>, refId?: string): string {\n  const id = uuidv5(text, UUID_NAMESPACE);\n\n  // check how many times have we seen this id before,\n  // set the count to zero, if never.\n  const count = usedUids.get(id) ?? 0;\n\n  // if we have seen this id before, we need to make\n  // it unique by appending the seen-count\n  // (starts with 1, and goes up)\n  const uniqueId = count > 0 ? `${id}_${count}` : id;\n\n  // we increment the counter for this id, to be used when we are called the next time\n  usedUids.set(id, count + 1);\n\n  // we add refId to the end, if it is available\n  return refId !== undefined ? `${uniqueId}_${refId}` : uniqueId;\n}\n\nexport function makeIdField(frame: DataFrame): Field {\n  const allLabels: Labels = {};\n\n  // collect labels from every field\n  frame.fields.forEach((field) => {\n    Object.assign(allLabels, field.labels);\n  });\n\n  const labelsString = Object.entries(allLabels)\n    .map(([key, val]) => `${key}=\"${val}\"`)\n    .sort()\n    .join('');\n\n  const usedUids = new Map<string, number>();\n\n  const { length } = frame;\n\n  const uids: string[] = new Array(length);\n\n  // we need to go through the dataframe \"row by row\"\n  for (let i = 0; i < length; i++) {\n    const row = frame.fields.map((f) => String(f.values.get(i)));\n    const text = `${labelsString}_${row.join('_')}`;\n    const uid = createUid(text, usedUids, frame.refId);\n    uids[i] = uid;\n  }\n\n  return { name: 'id', type: FieldType.string, config: {}, values: new ArrayVector(uids) };\n}\n","import { DataQueryRequest, DataQueryResponse, DataFrame, isDataFrame, FieldType, QueryResultMeta } from '@grafana/data';\nimport { LokiQuery, LokiQueryType } from './types';\nimport { makeTableFrames } from './makeTableFrames';\nimport { formatQuery, getHighlighterExpressionsFromQuery } from './query_utils';\nimport { makeIdField } from './makeIdField';\n\nfunction isMetricFrame(frame: DataFrame): boolean {\n  return frame.fields.every((field) => field.type === FieldType.time || field.type === FieldType.number);\n}\n\n// returns a new frame, with meta merged with it's original meta\nfunction setFrameMeta(frame: DataFrame, meta: QueryResultMeta): DataFrame {\n  const { meta: oldMeta, ...rest } = frame;\n  // meta maybe be undefined, we need to handle that\n  const newMeta = { ...oldMeta, ...meta };\n  return {\n    ...rest,\n    meta: newMeta,\n  };\n}\n\nfunction processStreamFrame(frame: DataFrame, query: LokiQuery | undefined): DataFrame {\n  const meta: QueryResultMeta = {\n    preferredVisualisationType: 'logs',\n    searchWords: query !== undefined ? getHighlighterExpressionsFromQuery(formatQuery(query.expr)) : undefined,\n    custom: {\n      // used by logs_model\n      lokiQueryStatKey: 'Summary: total bytes processed',\n    },\n  };\n  const newFrame = setFrameMeta(frame, meta);\n  const newFields = frame.fields.map((field) => {\n    // the nanosecond-timestamp field must have a type-time\n    if (field.name === 'tsNs') {\n      return {\n        ...field,\n        type: FieldType.time,\n      };\n    } else {\n      return field;\n    }\n  });\n\n  // we add a calculated id-field\n  newFields.push(makeIdField(frame));\n\n  return {\n    ...newFrame,\n    fields: newFields,\n  };\n}\n\nfunction processStreamsFrames(frames: DataFrame[], queryMap: Map<string, LokiQuery>): DataFrame[] {\n  return frames.map((frame) => {\n    const query = frame.refId !== undefined ? queryMap.get(frame.refId) : undefined;\n    return processStreamFrame(frame, query);\n  });\n}\n\nfunction processMetricInstantFrames(frames: DataFrame[]): DataFrame[] {\n  return frames.length > 0 ? makeTableFrames(frames) : [];\n}\n\nfunction processMetricRangeFrames(frames: DataFrame[]): DataFrame[] {\n  const meta: QueryResultMeta = { preferredVisualisationType: 'graph' };\n  return frames.map((frame) => setFrameMeta(frame, meta));\n}\n\n// we split the frames into 3 groups, because we will handle\n// each group slightly differently\nfunction groupFrames(\n  frames: DataFrame[],\n  queryMap: Map<string, LokiQuery>\n): {\n  streamsFrames: DataFrame[];\n  metricInstantFrames: DataFrame[];\n  metricRangeFrames: DataFrame[];\n} {\n  const streamsFrames: DataFrame[] = [];\n  const metricInstantFrames: DataFrame[] = [];\n  const metricRangeFrames: DataFrame[] = [];\n\n  frames.forEach((frame) => {\n    if (!isMetricFrame(frame)) {\n      streamsFrames.push(frame);\n    } else {\n      const isInstantFrame = frame.refId != null && queryMap.get(frame.refId)?.queryType === LokiQueryType.Instant;\n      if (isInstantFrame) {\n        metricInstantFrames.push(frame);\n      } else {\n        metricRangeFrames.push(frame);\n      }\n    }\n  });\n\n  return { streamsFrames, metricInstantFrames, metricRangeFrames };\n}\n\nexport function transformBackendResult(\n  response: DataQueryResponse,\n  request: DataQueryRequest<LokiQuery>\n): DataQueryResponse {\n  const { data, ...rest } = response;\n\n  // in the typescript type, data is an array of basically anything.\n  // we do know that they have to be dataframes, so we make a quick check,\n  // this way we can be sure, and also typescript is happy.\n  const dataFrames = data.map((d) => {\n    if (!isDataFrame(d)) {\n      throw new Error('transformation only supports dataframe responses');\n    }\n    return d;\n  });\n\n  const queryMap = new Map(request.targets.map((query) => [query.refId, query]));\n\n  const { streamsFrames, metricInstantFrames, metricRangeFrames } = groupFrames(dataFrames, queryMap);\n\n  return {\n    ...rest,\n    data: [\n      ...processMetricRangeFrames(metricRangeFrames),\n      ...processMetricInstantFrames(metricInstantFrames),\n      ...processStreamsFrames(streamsFrames, queryMap),\n    ],\n  };\n}\n","import { __assign, __extends } from \"tslib\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: function (e) { return JSON.parse(e.data); },\n    serializer: function (value) { return JSON.stringify(value); },\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        var _this = _super.call(this) || this;\n        _this._socket = null;\n        if (urlConfigOrSource instanceof Observable) {\n            _this.destination = destination;\n            _this.source = urlConfigOrSource;\n        }\n        else {\n            var config = (_this._config = __assign({}, DEFAULT_WEBSOCKET_CONFIG));\n            _this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (var key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            _this.destination = new ReplaySubject();\n        }\n        return _this;\n    }\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    };\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable(function (observer) {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            var subscription = self.subscribe({\n                next: function (x) {\n                    try {\n                        if (messageFilter(x)) {\n                            observer.next(x);\n                        }\n                    }\n                    catch (err) {\n                        observer.error(err);\n                    }\n                },\n                error: function (err) { return observer.error(err); },\n                complete: function () { return observer.complete(); },\n            });\n            return function () {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription(function () {\n            _this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (evt) {\n            var _socket = _this._socket;\n            if (!_socket) {\n                socket.close();\n                _this._resetState();\n                return;\n            }\n            var openObserver = _this._config.openObserver;\n            if (openObserver) {\n                openObserver.next(evt);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber.create(function (x) {\n                if (socket.readyState === 1) {\n                    try {\n                        var serializer = _this._config.serializer;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        _this.destination.error(e);\n                    }\n                }\n            }, function (err) {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (err && err.code) {\n                    socket.close(err.code, err.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            if (socket === _this._socket) {\n                _this._resetState();\n            }\n            var closeObserver = _this._config.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            try {\n                var deserializer = _this._config.deserializer;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(function () {\n            var _socket = _this._socket;\n            if (_this._output.observers.length === 0) {\n                if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n                    _socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscriber;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _socket = this._socket;\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n            _socket.close();\n        }\n        this._resetState();\n        _super.prototype.unsubscribe.call(this);\n    };\n    return WebSocketSubject;\n}(AnonymousSubject));\nexport { WebSocketSubject };\n//# sourceMappingURL=WebSocketSubject.js.map","import { DataFrame, FieldType, parseLabels, KeyValue, CircularDataFrame } from '@grafana/data';\nimport { Observable, throwError, timer } from 'rxjs';\nimport { webSocket } from 'rxjs/webSocket';\nimport { LokiTailResponse } from './types';\nimport { finalize, map, retryWhen, mergeMap } from 'rxjs/operators';\nimport { appendResponseToBufferedData } from './result_transformer';\n\n/**\n * Maps directly to a query in the UI (refId is key)\n */\nexport interface LokiLiveTarget {\n  query: string;\n  url: string;\n  refId: string;\n  size: number;\n}\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  private streams: KeyValue<Observable<DataFrame[]>> = {};\n\n  getStream(target: LokiLiveTarget, retryInterval = 5000): Observable<DataFrame[]> {\n    let stream = this.streams[target.url];\n\n    if (stream) {\n      return stream;\n    }\n\n    const data = new CircularDataFrame({ capacity: target.size });\n    data.addField({ name: 'ts', type: FieldType.time, config: { displayName: 'Time' } });\n    data.addField({ name: 'tsNs', type: FieldType.time, config: { displayName: 'Time ns' } });\n    data.addField({ name: 'line', type: FieldType.string }).labels = parseLabels(target.query);\n    data.addField({ name: 'labels', type: FieldType.other }); // The labels for each line\n    data.addField({ name: 'id', type: FieldType.string });\n    data.meta = { ...data.meta, preferredVisualisationType: 'logs' };\n    data.refId = target.refId;\n\n    stream = webSocket<LokiTailResponse>(target.url).pipe(\n      map((response: LokiTailResponse) => {\n        appendResponseToBufferedData(response, data);\n        return [data];\n      }),\n      retryWhen((attempts: Observable<any>) =>\n        attempts.pipe(\n          mergeMap((error, i) => {\n            const retryAttempt = i + 1;\n            // Code 1006 is used to indicate that a connection was closed abnormally.\n            // Added hard limit of 30 on number of retries.\n            // If connection was closed abnormally, and we wish to retry, otherwise throw error.\n            if (error.code === 1006 && retryAttempt < 30) {\n              if (retryAttempt > 10) {\n                // If more than 10 times retried, consol.warn, but keep reconnecting\n                console.warn(\n                  `Websocket connection is being disrupted. We keep reconnecting but consider starting new live tailing again. Error: ${error.reason}`\n                );\n              }\n              // Retry every 5s\n              return timer(retryInterval);\n            }\n            return throwError(error);\n          })\n        )\n      ),\n      finalize(() => {\n        delete this.streams[target.url];\n      })\n    );\n    this.streams[target.url] = stream;\n\n    return stream;\n  }\n}\n","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map","// Libraries\nimport { chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\n\n// Services & Utils\nimport {\n  extractLabelMatchers,\n  parseSelector,\n  processLabels,\n  toPromLikeExpr,\n} from 'app/plugins/datasource/prometheus/language_utils';\nimport syntax, { FUNCTIONS, PIPE_PARSERS, PIPE_OPERATORS } from './syntax';\n\n// Types\nimport { LokiQuery, LokiQueryType } from './types';\nimport { dateTime, AbsoluteTimeRange, LanguageProvider, HistoryItem, AbstractQuery } from '@grafana/data';\n\nimport { LokiDatasource } from './datasource';\nimport { CompletionItem, TypeaheadInput, TypeaheadOutput, CompletionItemGroup } from '@grafana/ui';\nimport Prism, { Grammar } from 'prismjs';\n\nconst DEFAULT_KEYS = ['job', 'namespace'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 10;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\nconst NS_IN_MS = 1000000;\n\n// When changing RATE_RANGES, check if Prometheus/PromQL ranges should be changed too\n// @see public/app/plugins/datasource/prometheus/promql.ts\nconst RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '$__range', sortValue: '$__range' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const LABEL_REFRESH_INTERVAL = 1000 * 30; // 30sec\n\nconst wrapLabel = (label: string) => ({ label, filterText: `\\\"${label}\\\"` });\n\nexport type LokiHistoryItem = HistoryItem<LokiQuery>;\n\ntype TypeaheadContext = {\n  history?: LokiHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: LokiHistoryItem[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query.expr === item.label);\n  let hint = `Queried ${historyForItem.length} times in the last 24h.`;\n  const recent = historyForItem[0];\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nexport default class LokiLanguageProvider extends LanguageProvider {\n  labelKeys: string[];\n  labelFetchTs: number;\n  started = false;\n  datasource: LokiDatasource;\n  lookupsDisabled = false; // Dynamically set to true for big/slow instances\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private seriesCache = new LRU<string, Record<string, string[]>>({ max: 10 });\n  private labelsCache = new LRU<string, string[]>({ max: 10 });\n\n  constructor(datasource: LokiDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    this.labelKeys = [];\n    this.labelFetchTs = 0;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%\\|]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = async (url: string, params?: any): Promise<any> => {\n    try {\n      return await this.datasource.metadataRequest(url, params);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Initialise the language provider by fetching set of labels. Without this initialisation the provider would return\n   * just a set of hardcoded default labels on provideCompletionItems or a recent queries from history.\n   */\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchLabels().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { wrapperClasses, value, prefix, text } = input;\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value?.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^['\"~=\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for {|} and {foo=|}\n      return await this.getLabelCompletionItems(input);\n    } else if (wrapperClasses.includes('context-pipe')) {\n      return this.getPipeCompletionItem();\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  }\n\n  getBeginningCompletionItems = (context?: TypeaheadContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems(context?: TypeaheadContext): TypeaheadOutput {\n    const history = context?.history;\n    const suggestions = [];\n\n    if (history?.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        prefixMatch: true,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  }\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      prefixMatch: true,\n      label: 'Functions',\n      items: FUNCTIONS.map((suggestion) => ({ ...suggestion, kind: 'function' })),\n    });\n\n    return { suggestions };\n  };\n\n  getPipeCompletionItem = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      label: 'Operators',\n      items: PIPE_OPERATORS.map((suggestion) => ({ ...suggestion, kind: 'operators' })),\n    });\n\n    suggestions.push({\n      label: 'Parsers',\n      items: PIPE_PARSERS.map((suggestion) => ({ ...suggestion, kind: 'parsers' })),\n    });\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  async getLabelCompletionItems({ text, wrapperClasses, labelKey, value }: TypeaheadInput): Promise<TypeaheadOutput> {\n    let context = 'context-labels';\n    const suggestions: CompletionItemGroup[] = [];\n    if (!value) {\n      return { context, suggestions: [] };\n    }\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    if (!labelKey && selector === EMPTY_SELECTOR) {\n      // start task gets all labels\n      await this.start();\n      const allLabels = this.getLabelKeys();\n      return { context, suggestions: [{ label: `Labels`, items: allLabels.map(wrapLabel) }] };\n    }\n\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let labelValues;\n    // Query labels for selector\n    if (selector) {\n      if (selector === EMPTY_SELECTOR && labelKey) {\n        const labelValuesForKey = await this.getLabelValues(labelKey);\n        labelValues = { [labelKey]: labelValuesForKey };\n      } else {\n        labelValues = await this.getSeriesLabels(selector);\n      }\n    }\n\n    if (!labelValues) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { context, suggestions };\n    }\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && labelValues[labelKey]) {\n        context = 'context-label-values';\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"`,\n          // Filter to prevent previously selected values from being repeatedly suggested\n          items: labelValues[labelKey].map(wrapLabel).filter(({ filterText }) => filterText !== text),\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = labelValues ? Object.keys(labelValues) : DEFAULT_KEYS;\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const newSuggestion: CompletionItemGroup = { label: `Labels`, items: newItems };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  }\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): LokiQuery {\n    return {\n      refId: labelBasedQuery.refId,\n      expr: toPromLikeExpr(labelBasedQuery),\n      queryType: LokiQueryType.Range,\n    };\n  }\n\n  exportToAbstractQuery(query: LokiQuery): AbstractQuery {\n    const lokiQuery = query.expr;\n    if (!lokiQuery || lokiQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(lokiQuery, syntax);\n    return {\n      refId: query.refId,\n      labelMatchers: extractLabelMatchers(tokens),\n    };\n  }\n\n  async getSeriesLabels(selector: string) {\n    if (this.lookupsDisabled) {\n      return undefined;\n    }\n    try {\n      return await this.fetchSeriesLabels(selector);\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/loki/api/v1/label';\n    const timeRange = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, timeRange);\n    if (Array.isArray(res)) {\n      const labels = res\n        .slice()\n        .sort()\n        .filter((label) => label !== '__name__');\n      this.labelKeys = labels;\n    }\n\n    return [];\n  }\n\n  async refreshLogLabels(forceRefresh?: boolean) {\n    if ((this.labelKeys && Date.now().valueOf() - this.labelFetchTs > LABEL_REFRESH_INTERVAL) || forceRefresh) {\n      await this.fetchLabels();\n    }\n  }\n\n  /**\n   * Fetch labels for a selector. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   */\n  fetchSeriesLabels = async (match: string): Promise<Record<string, string[]>> => {\n    const interpolatedMatch = this.datasource.interpolateString(match);\n    const url = '/loki/api/v1/series';\n    const { start, end } = this.datasource.getTimeRangeParams();\n\n    const cacheKey = this.generateCacheKey(url, start, end, interpolatedMatch);\n    let value = this.seriesCache.get(cacheKey);\n    if (!value) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.seriesCache.set(cacheKey, {});\n      const params = { 'match[]': interpolatedMatch, start, end };\n      const data = await this.request(url, params);\n      const { values } = processLabels(data);\n      value = values;\n      this.seriesCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/loki/api/v1/series';\n    const { start, end } = this.datasource.getTimeRangeParams();\n    const params = { 'match[]': match, start, end };\n    return await this.request(url, params);\n  };\n\n  // Cache key is a bit different here. We round up to a minute the intervals.\n  // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n  // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n  // when user does not the newest values for a minute if already cached.\n  generateCacheKey(url: string, start: number, end: number, param: string): string {\n    return [url, this.roundTime(start), this.roundTime(end), param].join();\n  }\n\n  // Round nanos epoch to nearest 5 minute interval\n  roundTime(nanos: number): number {\n    return nanos ? Math.floor(nanos / NS_IN_MS / 1000 / 60 / 5) : 0;\n  }\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  async fetchLabelValues(key: string): Promise<string[]> {\n    const interpolatedKey = this.datasource.interpolateString(key);\n    const url = `/loki/api/v1/label/${interpolatedKey}/values`;\n    const rangeParams = this.datasource.getTimeRangeParams();\n    const { start, end } = rangeParams;\n\n    const cacheKey = this.generateCacheKey(url, start, end, interpolatedKey);\n    const params = { start, end };\n\n    let labelValues = this.labelsCache.get(cacheKey);\n    if (!labelValues) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.labelsCache.set(cacheKey, []);\n      const res = await this.request(url, params);\n      if (Array.isArray(res)) {\n        labelValues = res.slice().sort();\n        this.labelsCache.set(cacheKey, labelValues);\n      }\n    }\n\n    return labelValues ?? [];\n  }\n}\n","import { DataFrameJSON, DataQueryRequest, DataQueryResponse, LiveChannelScope, LoadingState } from '@grafana/data';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\nimport { map, Observable, defer, mergeMap } from 'rxjs';\nimport { LokiDatasource } from './datasource';\nimport { LokiQuery } from './types';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\n/**\n * Calculate a unique key for the query.  The key is used to pick a channel and should\n * be unique for each distinct query execution plan.  This key is not secure and is only picked to avoid\n * possible collisions\n */\nexport async function getLiveStreamKey(query: LokiQuery): Promise<string> {\n  const str = JSON.stringify({ expr: query.expr });\n\n  const msgUint8 = new TextEncoder().encode(str); // encode as (utf-8) Uint8Array\n  const hashBuffer = await crypto.subtle.digest('SHA-1', msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer.slice(0, 8))); // first 8 bytes\n  return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n}\n\n// This will get both v1 and v2 result formats\nexport function doLokiChannelStream(\n  query: LokiQuery,\n  ds: LokiDatasource,\n  options: DataQueryRequest<LokiQuery>\n): Observable<DataQueryResponse> {\n  // maximum time to keep values\n  const range = options.range;\n  const maxDelta = range.to.valueOf() - range.from.valueOf() + 1000;\n  let maxLength = options.maxDataPoints ?? 1000;\n  if (maxLength > 100) {\n    // for small buffers, keep them small\n    maxLength *= 2;\n  }\n\n  let frame: StreamingDataFrame | undefined = undefined;\n  const updateFrame = (msg: any) => {\n    if (msg?.message) {\n      const p = msg.message as DataFrameJSON;\n      if (!frame) {\n        frame = StreamingDataFrame.fromDataFrameJSON(p, {\n          maxLength,\n          maxDelta,\n          displayNameFormat: query.legendFormat,\n        });\n      } else {\n        frame.push(p);\n      }\n    }\n    return frame;\n  };\n\n  return defer(() => getLiveStreamKey(query)).pipe(\n    mergeMap((key) => {\n      return getGrafanaLiveSrv()\n        .getStream<any>({\n          scope: LiveChannelScope.DataSource,\n          namespace: ds.uid,\n          path: `tail/${key}`,\n          data: {\n            ...query,\n            timeRange: {\n              from: range.from.valueOf().toString(),\n              to: range.to.valueOf().toString(),\n            },\n          },\n        })\n        .pipe(\n          map((evt) => {\n            const frame = updateFrame(evt);\n            return {\n              data: frame ? [frame] : [],\n              state: LoadingState.Streaming,\n            };\n          })\n        );\n    })\n  );\n}\n","// Libraries\nimport { cloneDeep, isEmpty, map as lodashMap } from 'lodash';\nimport { lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport Prism from 'prismjs';\n\n// Types\nimport {\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  CoreApp,\n  DataFrame,\n  DataFrameView,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  DataSourceWithLogsVolumeSupport,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateMath,\n  DateTime,\n  FieldCache,\n  AbstractQuery,\n  FieldType,\n  getLogLevelFromKey,\n  Labels,\n  LoadingState,\n  LogLevel,\n  LogRowModel,\n  QueryResultMeta,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { BackendSrvRequest, FetchError, getBackendSrv, config, DataSourceWithBackend } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { addLabelToQuery } from './add_label_to_query';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { convertToWebSocketUrl } from 'app/core/utils/explore';\nimport {\n  lokiResultsToTableModel,\n  lokiStreamResultToDataFrame,\n  lokiStreamsToDataFrames,\n  processRangeQueryResponse,\n} from './result_transformer';\nimport { transformBackendResult } from './backendResultTransformer';\nimport { addParsedLabelToQuery, getNormalizedLokiQuery, queryHasPipeParser } from './query_utils';\n\nimport {\n  LokiOptions,\n  LokiQuery,\n  LokiQueryType,\n  LokiRangeQueryRequest,\n  LokiResultType,\n  LokiStreamResponse,\n  LokiStreamResult,\n} from './types';\nimport { LiveStreams, LokiLiveTarget } from './live_streams';\nimport LanguageProvider from './language_provider';\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport syntax from './syntax';\nimport { DEFAULT_RESOLUTION } from './components/LokiOptionFields';\nimport { queryLogsVolume } from 'app/core/logs_model';\nimport { doLokiChannelStream } from './streaming';\nimport { renderLegendFormat } from '../prometheus/legend';\n\nexport type RangeQueryOptions = DataQueryRequest<LokiQuery> | AnnotationQueryRequest<LokiQuery>;\nexport const DEFAULT_MAX_LINES = 1000;\nexport const LOKI_ENDPOINT = '/loki/api/v1';\nconst NS_IN_MS = 1000000;\n\nconst RANGE_QUERY_ENDPOINT = `${LOKI_ENDPOINT}/query_range`;\nconst INSTANT_QUERY_ENDPOINT = `${LOKI_ENDPOINT}/query`;\n\nconst DEFAULT_QUERY_PARAMS: Partial<LokiRangeQueryRequest> = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_MAX_LINES,\n  query: '',\n};\n\nexport class LokiDatasource\n  extends DataSourceWithBackend<LokiQuery, LokiOptions>\n  implements\n    DataSourceWithLogsContextSupport,\n    DataSourceWithLogsVolumeSupport<LokiQuery>,\n    DataSourceWithQueryImportSupport<LokiQuery>,\n    DataSourceWithQueryExportSupport<LokiQuery>\n{\n  private streams = new LiveStreams();\n  languageProvider: LanguageProvider;\n  maxLines: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<LokiOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n\n    this.languageProvider = new LanguageProvider(this);\n    const settingsData = instanceSettings.jsonData || {};\n    this.maxLines = parseInt(settingsData.maxLines ?? '0', 10) || DEFAULT_MAX_LINES;\n  }\n\n  _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}${params.length ? `?${params}` : ''}`;\n    if (this.instanceSettings.withCredentials || this.instanceSettings.basicAuth) {\n      options = { ...options, withCredentials: true };\n      if (this.instanceSettings.basicAuth) {\n        options.headers = { ...options.headers, Authorization: this.instanceSettings.basicAuth };\n      }\n    }\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<Record<string, any>>(req);\n  }\n\n  getLogsVolumeDataProvider(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> | undefined {\n    const isLogsVolumeAvailable = request.targets.some((target) => target.expr && !isMetricsQuery(target.expr));\n    if (!isLogsVolumeAvailable) {\n      return undefined;\n    }\n\n    const logsVolumeRequest = cloneDeep(request);\n    logsVolumeRequest.targets = logsVolumeRequest.targets\n      .filter((target) => target.expr && !isMetricsQuery(target.expr))\n      .map((target) => {\n        return {\n          ...target,\n          instant: false,\n          volumeQuery: true,\n          expr: `sum by (level) (count_over_time(${target.expr}[$__interval]))`,\n        };\n      });\n\n    return queryLogsVolume(this, logsVolumeRequest, {\n      extractLevel,\n      range: request.range,\n      targets: request.targets,\n    });\n  }\n\n  query(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const scopedVars = {\n      ...request.scopedVars,\n      ...this.getRangeScopedVars(request.range),\n    };\n\n    const shouldRunBackendQuery = config.featureToggles.lokiBackendMode && request.app === CoreApp.Explore;\n\n    if (shouldRunBackendQuery) {\n      // we \"fix\" the loki queries to have `.queryType` and not have `.instant` and `.range`\n      const fixedRequest = {\n        ...request,\n        targets: request.targets.map(getNormalizedLokiQuery),\n      };\n      return super.query(fixedRequest).pipe(map((response) => transformBackendResult(response, fixedRequest)));\n    }\n\n    const filteredTargets = request.targets\n      .filter((target) => target.expr && !target.hide)\n      .map((target) => {\n        const expr = this.addAdHocFilters(target.expr);\n        return {\n          ...target,\n          expr: this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr),\n        };\n      });\n\n    for (const target of filteredTargets) {\n      if (target.instant || target.queryType === LokiQueryType.Instant) {\n        subQueries.push(this.runInstantQuery(target, request, filteredTargets.length));\n      } else if (\n        config.featureToggles.lokiLive &&\n        target.queryType === LokiQueryType.Stream &&\n        request.rangeRaw?.to === 'now'\n      ) {\n        subQueries.push(doLokiChannelStream(target, this, request));\n      } else {\n        subQueries.push(this.runRangeQuery(target, request, filteredTargets.length));\n      }\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(subQueries)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...subQueries);\n  }\n\n  runInstantQuery = (\n    target: LokiQuery,\n    options: DataQueryRequest<LokiQuery>,\n    responseListLength = 1\n  ): Observable<DataQueryResponse> => {\n    const timeNs = this.getTime(options.range.to, true);\n    const queryLimit = isMetricsQuery(target.expr) ? options.maxDataPoints : target.maxLines;\n    const query = {\n      query: target.expr,\n      time: `${timeNs + (1e9 - (timeNs % 1e9))}`,\n      limit: Math.min(queryLimit || Infinity, this.maxLines),\n    };\n\n    /** Used only for results of metrics instant queries */\n    const meta: QueryResultMeta = {\n      preferredVisualisationType: 'table',\n    };\n\n    return this._request(INSTANT_QUERY_ENDPOINT, query).pipe(\n      map((response) => {\n        if (response.data.data.resultType === LokiResultType.Stream) {\n          return {\n            data: response.data\n              ? lokiStreamsToDataFrames(\n                  response.data as LokiStreamResponse,\n                  target,\n                  query.limit,\n                  this.instanceSettings.jsonData\n                )\n              : [],\n            key: `${target.refId}_instant`,\n          };\n        }\n\n        return {\n          data: [lokiResultsToTableModel(response.data.data.result, responseListLength, target.refId, meta, true)],\n          key: `${target.refId}_instant`,\n        };\n      }),\n      catchError((err) => throwError(() => this.processError(err, target)))\n    );\n  };\n\n  createRangeQuery(target: LokiQuery, options: RangeQueryOptions, limit: number): LokiRangeQueryRequest {\n    const query = target.expr;\n    let range: { start?: number; end?: number; step?: number } = {};\n    if (options.range) {\n      const startNs = this.getTime(options.range.from, false);\n      const endNs = this.getTime(options.range.to, true);\n      const rangeMs = Math.ceil((endNs - startNs) / 1e6);\n\n      const resolution = target.resolution || (DEFAULT_RESOLUTION.value as number);\n\n      const adjustedInterval =\n        this.adjustInterval((options as DataQueryRequest<LokiQuery>).intervalMs || 1000, resolution, rangeMs) / 1000;\n      // We want to ceil to 3 decimal places\n      const step = Math.ceil(adjustedInterval * 1000) / 1000;\n\n      range = {\n        start: startNs,\n        end: endNs,\n        step,\n      };\n    }\n\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      ...range,\n      query,\n      limit,\n    };\n  }\n\n  /**\n   * Attempts to send a query to /loki/api/v1/query_range\n   */\n  runRangeQuery = (\n    target: LokiQuery,\n    options: RangeQueryOptions,\n    responseListLength = 1\n  ): Observable<DataQueryResponse> => {\n    // For metric query we use maxDataPoints from the request options which should be something like width of the\n    // visualisation in pixels. In case of logs request we either use lines limit defined in the query target or\n    // global limit defined for the data source which ever is lower.\n    let maxDataPoints = isMetricsQuery(target.expr)\n      ? // We fallback to maxLines here because maxDataPoints is defined as possibly undefined. Not sure that can\n        // actually happen both Dashboards and Explore should send some value here. If not maxLines does not make that\n        // much sense but nor any other arbitrary value.\n        (options as DataQueryRequest<LokiQuery>).maxDataPoints || this.maxLines\n      : // If user wants maxLines 0 we still fallback to data source limit. I think that makes sense as why would anyone\n        // want to do a query and not see any results?\n        target.maxLines || this.maxLines;\n\n    if ((options as DataQueryRequest<LokiQuery>).liveStreaming) {\n      return this.runLiveQuery(target, maxDataPoints);\n    }\n    const query = this.createRangeQuery(target, options, maxDataPoints);\n\n    const headers = target.volumeQuery ? { 'X-Query-Tags': 'Source=logvolhist' } : undefined;\n\n    return this._request(RANGE_QUERY_ENDPOINT, query, { headers }).pipe(\n      catchError((err) => throwError(() => this.processError(err, target))),\n      switchMap((response) =>\n        processRangeQueryResponse(\n          response.data,\n          target,\n          query,\n          responseListLength,\n          maxDataPoints,\n          this.instanceSettings.jsonData,\n          (options as DataQueryRequest<LokiQuery>).scopedVars,\n          (options as DataQueryRequest<LokiQuery>).reverse\n        )\n      )\n    );\n  };\n\n  createLiveTarget(target: LokiQuery, maxDataPoints: number): LokiLiveTarget {\n    const query = target.expr;\n    const baseUrl = this.instanceSettings.url;\n    const params = serializeParams({ query });\n\n    return {\n      query,\n      url: convertToWebSocketUrl(`${baseUrl}/loki/api/v1/tail?${params}`),\n      refId: target.refId,\n      size: maxDataPoints,\n    };\n  }\n\n  /**\n   * Runs live queries which in this case means creating a websocket and listening on it for new logs.\n   * This returns a bit different dataFrame than runQueries as it returns single dataframe even if there are multiple\n   * Loki streams, sets only common labels on dataframe.labels and has additional dataframe.fields.labels for unique\n   * labels per row.\n   */\n  runLiveQuery = (target: LokiQuery, maxDataPoints: number): Observable<DataQueryResponse> => {\n    const liveTarget = this.createLiveTarget(target, maxDataPoints);\n\n    return this.streams.getStream(liveTarget).pipe(\n      map((data) => ({\n        data: data || [],\n        key: `loki-${liveTarget.refId}`,\n        state: LoadingState.Streaming,\n      })),\n      catchError((err: any) => {\n        return throwError(() => `Live tailing was stopped due to following error: ${err.reason}`);\n      })\n    );\n  };\n\n  getRangeScopedVars(range: TimeRange = this.timeSrv.timeRange()) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  interpolateVariablesInQueries(queries: LokiQuery[], scopedVars: ScopedVars): LokiQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => ({\n        ...query,\n        datasource: this.getRef(),\n        expr: this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr),\n      }));\n    }\n\n    return expandedQueries;\n  }\n\n  getQueryDisplayText(query: LokiQuery) {\n    return query.expr;\n  }\n\n  getTimeRangeParams() {\n    const timeRange = this.timeSrv.timeRange();\n    return { start: timeRange.from.valueOf() * NS_IN_MS, end: timeRange.to.valueOf() * NS_IN_MS };\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<LokiQuery[]> {\n    await this.languageProvider.start();\n    const existingKeys = this.languageProvider.labelKeys;\n\n    if (existingKeys && existingKeys.length) {\n      abstractQueries = abstractQueries.map((abstractQuery) => {\n        abstractQuery.labelMatchers = abstractQuery.labelMatchers.filter((labelMatcher) => {\n          return existingKeys.includes(labelMatcher.name);\n        });\n        return abstractQuery;\n      });\n    }\n\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: LokiQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  async metadataRequest(url: string, params?: Record<string, string | number>) {\n    const res = await lastValueFrom(this._request(url, params, { hideFromInspector: true }));\n    return res.data.data || res.data.values || [];\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const interpolated = this.templateSrv.replace(query, {}, this.interpolateQueryExpr);\n    return await this.processMetricFindQuery(interpolated);\n  }\n\n  async processMetricFindQuery(query: string) {\n    const labelNamesRegex = /^label_names\\(\\)\\s*$/;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n\n    const labelNames = query.match(labelNamesRegex);\n    if (labelNames) {\n      return await this.labelNamesQuery();\n    }\n\n    const labelValues = query.match(labelValuesRegex);\n    if (labelValues) {\n      // If we have query expr, use /series endpoint\n      if (labelValues[1]) {\n        return await this.labelValuesSeriesQuery(labelValues[1], labelValues[2]);\n      }\n      return await this.labelValuesQuery(labelValues[2]);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async labelNamesQuery() {\n    const url = `${LOKI_ENDPOINT}/label`;\n    const params = this.getTimeRangeParams();\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  async labelValuesQuery(label: string) {\n    const params = this.getTimeRangeParams();\n    const url = `${LOKI_ENDPOINT}/label/${label}/values`;\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  async labelValuesSeriesQuery(expr: string, label: string) {\n    const timeParams = this.getTimeRangeParams();\n    const params = {\n      ...timeParams,\n      'match[]': expr,\n    };\n    const url = `${LOKI_ENDPOINT}/series`;\n    const streams = new Set();\n    const result = await this.metadataRequest(url, params);\n    result.forEach((stream: { [key: string]: string }) => {\n      if (stream[label]) {\n        streams.add({ text: stream[label] });\n      }\n    });\n\n    return Array.from(streams);\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filtters functionality\n  async getTagKeys() {\n    return await this.labelNamesQuery();\n  }\n\n  async getTagValues(options: any = {}) {\n    return await this.labelValuesQuery(options.key);\n  }\n\n  interpolateQueryExpr(value: any, variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return lokiRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return lokiSpecialRegexEscape(value);\n    }\n\n    const escapedValues = lodashMap(value, lokiSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  modifyQuery(query: LokiQuery, action: any): LokiQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        expression = this.addLabelToQuery(expression, action.key, action.value, '=');\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        expression = this.addLabelToQuery(expression, action.key, action.value, '!=');\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  getTime(date: string | DateTime, roundUp: boolean) {\n    if (typeof date === 'string') {\n      date = dateMath.parse(date, roundUp)!;\n    }\n\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  getLogRowContext = (row: LogRowModel, options?: RowContextOptions): Promise<{ data: DataFrame[] }> => {\n    const target = this.prepareLogRowContextQueryTarget(\n      row,\n      (options && options.limit) || 10,\n      (options && options.direction) || 'BACKWARD'\n    );\n\n    const reverse = options && options.direction === 'FORWARD';\n    return lastValueFrom(\n      this._request(RANGE_QUERY_ENDPOINT, target).pipe(\n        catchError((err) => {\n          const error: DataQueryError = {\n            message: 'Error during context query. Please check JS console logs.',\n            status: err.status,\n            statusText: err.statusText,\n          };\n          throw error;\n        }),\n        switchMap((res) =>\n          of({\n            data: res.data\n              ? res.data.data.result.map((stream: LokiStreamResult) => lokiStreamResultToDataFrame(stream, reverse))\n              : [],\n          })\n        )\n      )\n    );\n  };\n\n  prepareLogRowContextQueryTarget = (row: LogRowModel, limit: number, direction: 'BACKWARD' | 'FORWARD') => {\n    const labels = this.languageProvider.getLabelKeys();\n    const query = Object.keys(row.labels)\n      .map((label: string) => {\n        if (labels.includes(label)) {\n          // escape backslashes in label as users can't escape them by themselves\n          return `${label}=\"${row.labels[label].replace(/\\\\/g, '\\\\\\\\')}\"`;\n        }\n        return '';\n      })\n      // Filter empty strings\n      .filter((label) => !!label)\n      .join(',');\n\n    const contextTimeBuffer = 2 * 60 * 60 * 1000; // 2h buffer\n    const commonTargetOptions = {\n      limit,\n      query: `{${query}}`,\n      expr: `{${query}}`,\n      direction,\n    };\n\n    const fieldCache = new FieldCache(row.dataFrame);\n    const nsField = fieldCache.getFieldByName('tsNs')!;\n    const nsTimestamp = nsField.values.get(row.rowIndex);\n\n    if (direction === 'BACKWARD') {\n      return {\n        ...commonTargetOptions,\n        // convert to ns, we loose some precision here but it is not that important at the far points of the context\n        start: row.timeEpochMs - contextTimeBuffer + '000000',\n        end: nsTimestamp,\n        direction,\n      };\n    } else {\n      return {\n        ...commonTargetOptions,\n        // start param in Loki API is inclusive so we'll have to filter out the row that this request is based from\n        // and any other that were logged in the same ns but before the row. Right now these rows will be lost\n        // because the are before but came it he response that should return only rows after.\n        start: nsTimestamp,\n        // convert to ns, we loose some precision here but it is not that important at the far points of the context\n        end: row.timeEpochMs + contextTimeBuffer + '000000',\n      };\n    }\n  };\n\n  testDatasource() {\n    // Consider only last 10 minutes otherwise request takes too long\n    const startMs = Date.now() - 10 * 60 * 1000;\n    const start = `${startMs}000000`; // API expects nanoseconds\n    return lastValueFrom(\n      this._request(`${LOKI_ENDPOINT}/label`, { start }).pipe(\n        map((res) => {\n          const values: any[] = res?.data?.data || res?.data?.values || [];\n          const testResult =\n            values.length > 0\n              ? { status: 'success', message: 'Data source connected and labels found.' }\n              : {\n                  status: 'error',\n                  message:\n                    'Data source connected, but no labels received. Verify that Loki and Promtail is configured properly.',\n                };\n          return testResult;\n        }),\n        catchError((err: any) => {\n          let message = 'Loki: ';\n          if (err.statusText) {\n            message += err.statusText;\n          } else {\n            message += 'Cannot connect to Loki';\n          }\n\n          if (err.status) {\n            message += `. ${err.status}`;\n          }\n\n          if (err.data && err.data.message) {\n            message += `. ${err.data.message}`;\n          } else if (err.data) {\n            message += `. ${err.data}`;\n          }\n          return of({ status: 'error', message: message });\n        })\n      )\n    );\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    const {\n      expr,\n      maxLines,\n      instant,\n      stepInterval,\n      tagKeys = '',\n      titleFormat = '',\n      textFormat = '',\n    } = options.annotation;\n\n    if (!expr) {\n      return [];\n    }\n\n    const interpolatedExpr = this.templateSrv.replace(expr, {}, this.interpolateQueryExpr);\n    const query = {\n      refId: `annotation-${options.annotation.name}`,\n      expr: interpolatedExpr,\n      maxLines,\n      instant,\n      stepInterval,\n      queryType: instant ? LokiQueryType.Instant : LokiQueryType.Range,\n    };\n    const { data } = instant\n      ? await lastValueFrom(this.runInstantQuery(query, options as any))\n      : await lastValueFrom(this.runRangeQuery(query, options as any));\n\n    const annotations: AnnotationEvent[] = [];\n    const splitKeys: string[] = tagKeys.split(',').filter((v: string) => v !== '');\n\n    for (const frame of data) {\n      const labels: { [key: string]: string } = {};\n      for (const field of frame.fields) {\n        if (field.labels) {\n          for (const [key, value] of Object.entries(field.labels)) {\n            labels[key] = String(value).trim();\n          }\n        }\n      }\n\n      const tags: string[] = [\n        ...new Set(\n          Object.entries(labels).reduce((acc: string[], [key, val]) => {\n            if (val === '') {\n              return acc;\n            }\n            if (splitKeys.length && !splitKeys.includes(key)) {\n              return acc;\n            }\n            acc.push.apply(acc, [val]);\n            return acc;\n          }, [])\n        ),\n      ];\n\n      const view = new DataFrameView<{ ts: string; line: string }>(frame);\n\n      view.forEach((row) => {\n        annotations.push({\n          time: new Date(row.ts).valueOf(),\n          title: renderLegendFormat(titleFormat, labels),\n          text: renderLegendFormat(textFormat, labels) || row.line,\n          tags,\n        });\n      });\n    }\n\n    return annotations;\n  }\n\n  showContextToggle(row?: LogRowModel): boolean {\n    return (row && row.searchWords && row.searchWords.length > 0) === true;\n  }\n\n  processError(err: FetchError, target: LokiQuery) {\n    let error = cloneDeep(err);\n    if (err.data.message.includes('escape') && target.expr.includes('\\\\')) {\n      error.data.message = `Error: ${err.data.message}. Make sure that all special characters are escaped with \\\\. For more information on escaping of special characters visit LogQL documentation at https://grafana.com/docs/loki/latest/logql/.`;\n    }\n    return error;\n  }\n\n  adjustInterval(dynamicInterval: number, resolution: number, range: number) {\n    // Loki will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    let safeInterval = range / 11000;\n    if (safeInterval > 1) {\n      safeInterval = Math.ceil(safeInterval);\n    }\n\n    let adjustedInterval = Math.max(resolution * dynamicInterval, safeInterval);\n    return adjustedInterval;\n  }\n\n  addAdHocFilters(queryExpr: string) {\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    let expr = queryExpr;\n\n    expr = adhocFilters.reduce((acc: string, filter: { key?: any; operator?: any; value?: any }) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = lokiRegularEscape(value);\n      }\n\n      return this.addLabelToQuery(acc, key, value, operator, true);\n    }, expr);\n\n    return expr;\n  }\n\n  addLabelToQuery(\n    queryExpr: string,\n    key: string,\n    value: string | number,\n    operator: string,\n    // Override to make sure that we use label as actual label and not parsed label\n    notParsedLabelOverride?: boolean\n  ) {\n    if (queryHasPipeParser(queryExpr) && !isMetricsQuery(queryExpr) && !notParsedLabelOverride) {\n      // If query has parser, we treat all labels as parsed and use | key=\"value\" syntax\n      return addParsedLabelToQuery(queryExpr, key, value, operator);\n    } else {\n      return addLabelToQuery(queryExpr, key, value, operator, true);\n    }\n  }\n\n  // Used when running queries through backend\n  filterQuery(query: LokiQuery): boolean {\n    if (query.hide || query.expr === '') {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries through backend\n  applyTemplateVariables(target: LokiQuery, scopedVars: ScopedVars): Record<string, any> {\n    // We want to interpolate these variables on backend\n    const { __interval, __interval_ms, ...rest } = scopedVars;\n\n    return {\n      ...target,\n      legendFormat: this.templateSrv.replace(target.legendFormat, rest),\n      expr: this.templateSrv.replace(target.expr, rest, this.interpolateQueryExpr),\n    };\n  }\n\n  interpolateString(string: string) {\n    return this.templateSrv.replace(string, undefined, this.interpolateQueryExpr);\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n}\n\nexport function lokiRegularEscape(value: any) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function lokiSpecialRegexEscape(value: any) {\n  if (typeof value === 'string') {\n    return lokiRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()|]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\n/**\n * Checks if the query expression uses function and so should return a time series instead of logs.\n * Sometimes important to know that before we actually do the query.\n */\nexport function isMetricsQuery(query: string): boolean {\n  if (!query) {\n    return false;\n  }\n  const tokens = Prism.tokenize(query, syntax);\n  return tokens.some((t) => {\n    // Not sure in which cases it can be string maybe if nothing matched which means it should not be a function\n    return typeof t !== 'string' && t.type === 'function';\n  });\n}\n\nfunction extractLevel(dataFrame: DataFrame): LogLevel {\n  let valueField;\n  try {\n    valueField = new FieldCache(dataFrame).getFirstFieldOfType(FieldType.number);\n  } catch {}\n  return valueField?.labels ? getLogLevelFromLabels(valueField.labels) : LogLevel.unknown;\n}\n\nfunction getLogLevelFromLabels(labels: Labels): LogLevel {\n  const labelNames = ['level', 'lvl', 'loglevel'];\n  let levelLabel;\n  for (let labelName of labelNames) {\n    if (labelName in labels) {\n      levelLabel = labelName;\n      break;\n    }\n  }\n  return levelLabel ? getLogLevelFromKey(labels[levelLabel]) : LogLevel.unknown;\n}\n","import React, { PureComponent } from 'react';\nimport { shuffle } from 'lodash';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport LokiLanguageProvider from '../language_provider';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, filters out logs that don’t contain the word \"metrics\" and parses each log line to extract more labels and filters with them.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: NodeJS.Timeout;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n\n    return (\n      <div className=\"cheat-sheet-item__example\" key={expr} onClick={(e) => onClickExample({ refId: 'A', expr })}>\n        <code>{expr}</code>\n      </div>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Log browser, or alternatively you can write a stream selector into\n            the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React from 'react';\n\n// Types\nimport { InlineFormLabel } from '@grafana/ui';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditor(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, range } = props;\n\n  const onLegendChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const nextQuery = { ...query, legendFormat: e.currentTarget.value };\n    onChange(nextQuery);\n  };\n\n  const legendField = (\n    <div className=\"gf-form-inline\">\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          width={6}\n          tooltip=\"Controls the name of the time series, using name or pattern. For example\n        {{hostname}} will be replaced with label value for the label hostname. The legend only applies to metric queries.\"\n        >\n          Legend\n        </InlineFormLabel>\n        <input\n          type=\"text\"\n          className=\"gf-form-input\"\n          placeholder=\"legend format\"\n          value={query.legendFormat || ''}\n          onChange={onLegendChange}\n          onBlur={onRunQuery}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      data-testid={testIds.editor}\n      range={range}\n      ExtraFieldElement={\n        <>\n          <LokiOptionFields\n            lineLimitValue={query?.maxLines?.toString() || ''}\n            resolution={query?.resolution || 1}\n            query={query}\n            onRunQuery={onRunQuery}\n            onChange={onChange}\n            runOnBlur={true}\n          />\n          {legendField}\n        </>\n      }\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import React from 'react';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","// Libraries\nimport React, { memo } from 'react';\n\n// Types\nimport { QueryEditorProps } from '@grafana/data';\nimport { LokiDatasource } from '../datasource';\nimport { LokiQuery, LokiOptions } from '../types';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiOptionFields } from './LokiOptionFields';\n\ntype Props = QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions>;\n\nexport const LokiExploreQueryEditor = memo((props: Props) => {\n  const { query, data, datasource, history, onChange, onRunQuery, range } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onBlur={() => {}}\n      onRunQuery={onRunQuery}\n      history={history}\n      data={data}\n      range={range}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <LokiOptionFields\n          lineLimitValue={query?.maxLines?.toString() || ''}\n          resolution={query.resolution || 1}\n          query={query}\n          onRunQuery={onRunQuery}\n          onChange={onChange}\n        />\n      }\n    />\n  );\n});\n\nLokiExploreQueryEditor.displayName = 'LokiExploreQueryEditor';\n\nexport const testIds = {\n  editor: 'loki-editor-explore',\n};\n","import { VisualQueryBinary } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\n\n/**\n * Visual query model\n */\nexport interface LokiVisualQuery {\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: LokiVisualQueryBinary[];\n}\n\nexport type LokiVisualQueryBinary = VisualQueryBinary<LokiVisualQuery>;\n\nexport interface LokiQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n}\n\nexport enum LokiVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  Formats = 'Formats',\n  LineFilters = 'Line filters',\n  LabelFilters = 'Label filters',\n  BinaryOps = 'Binary operations',\n}\n\nexport enum LokiOperationId {\n  Json = 'json',\n  Logfmt = 'logfmt',\n  Regexp = 'regexp',\n  Pattern = 'pattern',\n  Unpack = 'unpack',\n  LineFormat = 'line_format',\n  LabelFormat = 'label_format',\n  Rate = 'rate',\n  CountOverTime = 'count_over_time',\n  SumOverTime = 'sum_over_time',\n  AvgOverTime = 'avg_over_time',\n  MaxOverTime = 'max_over_time',\n  MinOverTime = 'min_over_time',\n  FirstOverTime = 'first_over_time',\n  LastOverTime = 'last_over_time',\n  StdvarOverTime = 'stdvar_over_time',\n  StddevOverTime = 'stddev_over_time',\n  QuantileOverTime = 'quantile_over_time',\n  BytesRate = 'bytes_rate',\n  BytesOverTime = 'bytes_over_time',\n  AbsentOverTime = 'absent_over_time',\n  Sum = 'sum',\n  Avg = 'avg',\n  Min = 'min',\n  Max = 'max',\n  Stddev = 'stddev',\n  Stdvar = 'stdvar',\n  Count = 'count',\n  TopK = 'topk',\n  BottomK = 'bottomk',\n  LineContains = '__line_contains',\n  LineContainsNot = '__line_contains_not',\n  LineMatchesRegex = '__line_matches_regex',\n  LineMatchesRegexNot = '__line_matches_regex_not',\n  LabelFilter = '__label_filter',\n  LabelFilterNoErrors = '__label_filter_no_errors',\n  Unwrap = 'unwrap',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport enum LokiOperationOrder {\n  LineFilters = 1,\n  LineFormats = 2,\n  LabelFilters = 3,\n  Unwrap = 4,\n  NoErrors = 5,\n  RangeVectorFunction = 5,\n  Last = 6,\n}\n\nexport function getDefaultEmptyQuery(): LokiVisualQuery {\n  return {\n    labels: [],\n    operations: [{ id: '__line_contains', params: [''] }],\n  };\n}\n","import { defaultAddOperationHandler } from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n} from '../../prometheus/querybuilder/shared/types';\nimport { LokiOperationId, LokiVisualQueryOperationCategory } from './types';\n\nexport const binaryScalarDefs = [\n  {\n    id: LokiOperationId.Addition,\n    name: 'Add scalar',\n    sign: '+',\n  },\n  {\n    id: LokiOperationId.Subtraction,\n    name: 'Subtract scalar',\n    sign: '-',\n  },\n  {\n    id: LokiOperationId.MultiplyBy,\n    name: 'Multiply by scalar',\n    sign: '*',\n  },\n  {\n    id: LokiOperationId.DivideBy,\n    name: 'Divide by scalar',\n    sign: '/',\n  },\n  {\n    id: LokiOperationId.Modulo,\n    name: 'Modulo by scalar',\n    sign: '%',\n  },\n  {\n    id: LokiOperationId.Exponent,\n    name: 'Exponent',\n    sign: '^',\n  },\n  {\n    id: LokiOperationId.EqualTo,\n    name: 'Equal to',\n    sign: '==',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.NotEqualTo,\n    name: 'Not equal to',\n    sign: '!=',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.GreaterThan,\n    name: 'Greater than',\n    sign: '>',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.LessThan,\n    name: 'Less than',\n    sign: '<',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.GreaterOrEqual,\n    name: 'Greater or equal to',\n    sign: '>=',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.LessOrEqual,\n    name: 'Less or equal to',\n    sign: '<=',\n    comparison: true,\n  },\n];\n\n// Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\nexport const binaryScalarOperations: QueryBuilderOperationDef[] = binaryScalarDefs.map((opDef) => {\n  const params: QueryBuilderOperationParamDef[] = [{ name: 'Value', type: 'number' }];\n  const defaultParams: any[] = [2];\n  if (opDef.comparison) {\n    params.unshift({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.',\n    });\n    defaultParams.unshift(false);\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: LokiVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler,\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator: string) {\n  return function binaryRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    let param = model.params[0];\n    let bool = '';\n    if (model.params.length === 2) {\n      param = model.params[1];\n      bool = model.params[0] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}\n","import {\n  createAggregationOperation,\n  createAggregationOperationWithParam,\n  getPromAndLokiOperationDisplayName,\n} from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  VisualQueryModeller,\n} from '../../prometheus/querybuilder/shared/types';\nimport { FUNCTIONS } from '../syntax';\nimport { binaryScalarOperations } from './binaryScalarOperations';\nimport { LokiOperationId, LokiOperationOrder, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefinitions(): QueryBuilderOperationDef[] {\n  const aggregations = [\n    LokiOperationId.Sum,\n    LokiOperationId.Min,\n    LokiOperationId.Max,\n    LokiOperationId.Avg,\n    LokiOperationId.Stddev,\n    LokiOperationId.Stdvar,\n    LokiOperationId.Count,\n  ].flatMap((opId) =>\n    createAggregationOperation(opId, {\n      addOperationHandler: addLokiOperation,\n      orderRank: LokiOperationOrder.Last,\n    })\n  );\n\n  const aggregationsWithParam = [LokiOperationId.TopK, LokiOperationId.BottomK].flatMap((opId) => {\n    return createAggregationOperationWithParam(\n      opId,\n      {\n        params: [{ name: 'K-value', type: 'number' }],\n        defaultParams: [5],\n      },\n      {\n        addOperationHandler: addLokiOperation,\n        orderRank: LokiOperationOrder.Last,\n      }\n    );\n  });\n\n  const list: QueryBuilderOperationDef[] = [\n    createRangeOperation(LokiOperationId.Rate),\n    createRangeOperation(LokiOperationId.CountOverTime),\n    createRangeOperation(LokiOperationId.SumOverTime),\n    createRangeOperation(LokiOperationId.BytesRate),\n    createRangeOperation(LokiOperationId.BytesOverTime),\n    createRangeOperation(LokiOperationId.AbsentOverTime),\n    createRangeOperation(LokiOperationId.AvgOverTime),\n    createRangeOperation(LokiOperationId.MaxOverTime),\n    createRangeOperation(LokiOperationId.MinOverTime),\n    createRangeOperation(LokiOperationId.FirstOverTime),\n    createRangeOperation(LokiOperationId.LastOverTime),\n    createRangeOperation(LokiOperationId.StdvarOverTime),\n    createRangeOperation(LokiOperationId.StddevOverTime),\n    createRangeOperation(LokiOperationId.QuantileOverTime),\n    ...aggregations,\n    ...aggregationsWithParam,\n    {\n      id: LokiOperationId.Json,\n      name: 'Json',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n    },\n    {\n      id: LokiOperationId.Logfmt,\n      name: 'Logfmt',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will extract all keys and values from a [logfmt](https://grafana.com/docs/loki/latest/logql/log_queries/#logfmt) formatted log line as labels. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Regexp,\n      name: 'Regexp',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: '<re>',\n          description: 'The regexp expression that matches the structure of a log line.',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: (model, def, innerExpr) => `${innerExpr} | regexp \\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `The [regexp parser](https://grafana.com/docs/loki/latest/logql/log_queries/#regular-expression) takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Pattern,\n      name: 'Pattern',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: '<pattern-expression>',\n          description: 'The expression that matches the structure of a log line.',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: (model, def, innerExpr) => `${innerExpr} | pattern \\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `The [pattern parser](https://grafana.com/docs/loki/latest/logql/log_queries/#pattern) allows the explicit extraction of fields from log lines by defining a pattern expression (| pattern \\`<pattern-expression>\\`). The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Unpack,\n      name: 'Unpack',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will extract all keys and values from a JSON log line, [unpacking](https://grafana.com/docs/loki/latest/logql/log_queries/#unpack) all embedded labels in the pack stage. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.LineFormat,\n      name: 'Line format',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: '{{.status_code}}',\n          description: 'A line template that can refer to stream labels and extracted labels.',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: (model, def, innerExpr) => `${innerExpr} | line_format \\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will replace log line using a specified template. The template can refer to stream labels and extracted labels.\n\n        Example: \\`{{.status_code}} - {{.message}}\\`\n\n        [Read the docs](https://grafana.com/docs/loki/latest/logql/log_queries/#line-format-expression) for more.\n        `,\n    },\n    {\n      id: LokiOperationId.LabelFormat,\n      name: 'Label format',\n      params: [\n        { name: 'Label', type: 'string' },\n        { name: 'Rename', type: 'string' },\n      ],\n      defaultParams: ['', ''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.LineFormats,\n      renderer: (model, def, innerExpr) => `${innerExpr} | label_format ${model.params[1]}=\\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will change name of label to desired new label. In the example below, label \"error_level\" will be renamed to \"level\".\n\n        Example: error_level=\\`level\\`\n\n        [Read the docs](https://grafana.com/docs/loki/latest/logql/log_queries/#labels-format-expression) for more.\n        `,\n    },\n\n    {\n      id: LokiOperationId.LineContains,\n      name: 'Line contains',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Text to find',\n          description: 'Find log lines that contains this text',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('|='),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that contain string \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineContainsNot,\n      name: 'Line does not contain',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Text to exclude',\n          description: 'Find log lines that does not contain this text',\n          minWidth: 26,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('!='),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that does not contain string \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineMatchesRegex,\n      name: 'Line contains regex match',\n      params: [\n        {\n          name: 'Regex',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Pattern to match',\n          description: 'Find log lines that match this regex pattern',\n          minWidth: 30,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('|~'),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that match regex \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineMatchesRegexNot,\n      name: 'Line does not match regex',\n      params: [\n        {\n          name: 'Regex',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Pattern to exclude',\n          description: 'Find log lines that does not match this regex pattern',\n          minWidth: 30,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('!~'),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that does not match regex \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LabelFilter,\n      name: 'Label filter expression',\n      params: [\n        { name: 'Label', type: 'string' },\n        { name: 'Operator', type: 'string', options: ['=', '!=', '>', '<', '>=', '<='] },\n        { name: 'Value', type: 'string' },\n      ],\n      defaultParams: ['', '=', ''],\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      orderRank: LokiOperationOrder.LabelFilters,\n      renderer: labelFilterRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `Label expression filter allows filtering using original and extracted labels.`,\n    },\n    {\n      id: LokiOperationId.LabelFilterNoErrors,\n      name: 'No pipeline errors',\n      params: [],\n      defaultParams: [],\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      orderRank: LokiOperationOrder.NoErrors,\n      renderer: (model, def, innerExpr) => `${innerExpr} | __error__=\\`\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `Filter out all formatting and parsing errors.`,\n    },\n    {\n      id: LokiOperationId.Unwrap,\n      name: 'Unwrap',\n      params: [{ name: 'Identifier', type: 'string', hideName: true, minWidth: 16, placeholder: 'Label key' }],\n      defaultParams: [''],\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Unwrap,\n      renderer: (op, def, innerExpr) => `${innerExpr} | unwrap ${op.params[0]}`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => {\n        let label = String(op.params[0]).length > 0 ? op.params[0] : '<label>';\n        return `Use the extracted label \\`${label}\\` as sample values instead of log lines for the subsequent range aggregation.`;\n      },\n    },\n    ...binaryScalarOperations,\n    {\n      id: LokiOperationId.NestedQuery,\n      name: 'Binary operation with query',\n      params: [],\n      defaultParams: [],\n      category: LokiVisualQueryOperationCategory.BinaryOps,\n      renderer: (model, def, innerExpr) => innerExpr,\n      addOperationHandler: addNestedQueryHandler,\n    },\n  ];\n\n  return list;\n}\n\nfunction createRangeOperation(name: string): QueryBuilderOperationDef {\n  const params = [getRangeVectorParamDef()];\n  const defaultParams = ['$__interval'];\n  let renderer = operationWithRangeVectorRenderer;\n\n  if (name === LokiOperationId.QuantileOverTime) {\n    defaultParams.push('0.95');\n    params.push({\n      name: 'Quantile',\n      type: 'number',\n    });\n    renderer = operationWithRangeVectorRendererAndParam;\n  }\n\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params,\n    defaultParams,\n    alternativesKey: 'range function',\n    category: LokiVisualQueryOperationCategory.RangeFunctions,\n    orderRank: LokiOperationOrder.RangeVectorFunction,\n    renderer,\n    addOperationHandler: addLokiOperation,\n    explainHandler: (op, def) => {\n      let opDocs = FUNCTIONS.find((x) => x.insertText === op.id)?.documentation ?? '';\n\n      if (op.params[0] === '$__interval') {\n        return `${opDocs} \\`$__interval\\` is variable that will be replaced with a calculated interval based on **Max data points**,  **Min interval** and query time range. You find these options you find under **Query options** at the right of the data source select dropdown.`;\n      } else {\n        return `${opDocs} The [range vector](https://grafana.com/docs/loki/latest/logql/metric_queries/#range-vector-aggregation) is set to \\`${op.params[0]}\\`.`;\n      }\n    },\n  };\n}\n\nfunction getRangeVectorParamDef(): QueryBuilderOperationParamDef {\n  return {\n    name: 'Range',\n    type: 'string',\n    options: ['$__interval', '$__range', '1m', '5m', '10m', '1h', '24h'],\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '$__interval';\n  return `${def.id}(${innerExpr} [${rangeVector}])`;\n}\n\nfunction operationWithRangeVectorRendererAndParam(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  const params = model.params ?? [];\n  const rangeVector = params[0] ?? '$__interval';\n  const param = params[1];\n  return `${def.id}(${param}, ${innerExpr} [${rangeVector}])`;\n}\n\nfunction getLineFilterRenderer(operation: string) {\n  return function lineFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    if (model.params[0] === '') {\n      return innerExpr;\n    }\n    return `${innerExpr} ${operation} \\`${model.params[0]}\\``;\n  };\n}\n\nfunction labelFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  if (model.params[0] === '') {\n    return innerExpr;\n  }\n\n  if (model.params[1] === '<' || model.params[1] === '>') {\n    return `${innerExpr} | ${model.params[0]} ${model.params[1]} ${model.params[2]}`;\n  }\n\n  return `${innerExpr} | ${model.params[0]}${model.params[1]}\\`${model.params[2]}\\``;\n}\n\nfunction pipelineRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return `${innerExpr} | ${model.id}`;\n}\n\nfunction isRangeVectorFunction(def: QueryBuilderOperationDef) {\n  return def.category === LokiVisualQueryOperationCategory.RangeFunctions;\n}\n\nfunction getIndexOfOrLast(\n  operations: QueryBuilderOperation[],\n  queryModeller: VisualQueryModeller,\n  condition: (def: QueryBuilderOperationDef) => boolean\n) {\n  const index = operations.findIndex((x) => {\n    const opDef = queryModeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return condition(opDef);\n  });\n\n  return index === -1 ? operations.length : index;\n}\n\nexport function addLokiOperation(\n  def: QueryBuilderOperationDef,\n  query: LokiVisualQuery,\n  modeller: VisualQueryModeller\n): LokiVisualQuery {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  const operations = [...query.operations];\n\n  const existingRangeVectorFunction = operations.find((x) => {\n    const opDef = modeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return isRangeVectorFunction(opDef);\n  });\n\n  switch (def.category) {\n    case LokiVisualQueryOperationCategory.Aggregations:\n    case LokiVisualQueryOperationCategory.Functions:\n      // If we are adding a function but we have not range vector function yet add one\n      if (!existingRangeVectorFunction) {\n        const placeToInsert = getIndexOfOrLast(\n          operations,\n          modeller,\n          (def) => def.category === LokiVisualQueryOperationCategory.Functions\n        );\n        operations.splice(placeToInsert, 0, { id: LokiOperationId.Rate, params: ['$__interval'] });\n      }\n      operations.push(newOperation);\n      break;\n    case LokiVisualQueryOperationCategory.RangeFunctions:\n      // If adding a range function and range function is already added replace it\n      if (existingRangeVectorFunction) {\n        const index = operations.indexOf(existingRangeVectorFunction);\n        operations[index] = newOperation;\n        break;\n      }\n\n    // Add range functions after any formats, line filters and label filters\n    default:\n      const placeToInsert = getIndexOfOrLast(\n        operations,\n        modeller,\n        (x) => (def.orderRank ?? 100) < (x.orderRank ?? 100)\n      );\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n  }\n\n  return {\n    ...query,\n    operations,\n  };\n}\n\nfunction addNestedQueryHandler(def: QueryBuilderOperationDef, query: LokiVisualQuery): LokiVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n","import { LokiAndPromQueryModellerBase } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter } from '../../prometheus/querybuilder/shared/types';\nimport { getOperationDefinitions } from './operations';\nimport { LokiOperationId, LokiQueryPattern, LokiVisualQueryOperationCategory } from './types';\n\nexport class LokiQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(getOperationDefinitions);\n\n    this.setOperationCategories([\n      LokiVisualQueryOperationCategory.Aggregations,\n      LokiVisualQueryOperationCategory.RangeFunctions,\n      LokiVisualQueryOperationCategory.Formats,\n      LokiVisualQueryOperationCategory.BinaryOps,\n      LokiVisualQueryOperationCategory.LabelFilters,\n      LokiVisualQueryOperationCategory.LineFilters,\n    ]);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '{}';\n    }\n\n    return super.renderLabels(labels);\n  }\n\n  getQueryPatterns(): LokiQueryPattern[] {\n    return [\n      {\n        name: 'Log query and label filter',\n        operations: [\n          { id: LokiOperationId.LineMatchesRegex, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.LabelFilter, params: ['', '=', ''] },\n        ],\n      },\n      {\n        name: 'Time series query on value inside log line',\n        operations: [\n          { id: LokiOperationId.LineMatchesRegex, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.Unwrap, params: [''] },\n          { id: LokiOperationId.SumOverTime, params: ['$__interval'] },\n          { id: LokiOperationId.Sum, params: [] },\n        ],\n      },\n    ];\n  }\n}\n\nexport const lokiQueryModeller = new LokiQueryModeller();\n","import store from 'app/core/store';\nimport { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\n\nexport function changeEditorMode(query: LokiQuery, editorMode: QueryEditorMode, onChange: (query: LokiQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nexport function getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n    case QueryEditorMode.Explain:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: LokiQuery): LokiQuery {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '' };\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = { ...result, queryType: LokiQueryType.Range };\n  }\n\n  return result;\n}\n","import React from 'react';\nimport { LokiVisualQuery } from '../types';\nimport { useTheme2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport Prism from 'prismjs';\nimport { lokiGrammar } from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\n\nexport interface Props {\n  query: LokiVisualQuery;\n}\n\nexport function QueryPreview({ query }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const hightlighted = Prism.highlight(lokiQueryModeller.renderQuery(query), lokiGrammar, 'lokiql');\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Query text\">\n        <div\n          className={cx(styles.editorField, 'prism-syntax-highlight')}\n          aria-label=\"selector\"\n          dangerouslySetInnerHTML={{ __html: hightlighted }}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      padding: theme.spacing(0.25, 1),\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { IconButton, Select, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { LokiVisualQueryBinary } from '../types';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { AutoSizeInput } from 'app/plugins/datasource/prometheus/querybuilder/shared/AutoSizeInput';\n\nexport interface Props {\n  nestedQuery: LokiVisualQueryBinary;\n  datasource: LokiDatasource;\n  index: number;\n  onChange: (index: number, update: LokiVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<LokiVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <LokiQueryBuilder\n            query={nestedQuery.query}\n            datasource={datasource}\n            nested={true}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import { Stack } from '@grafana/experimental';\nimport React from 'react';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiVisualQuery, LokiVisualQueryBinary } from '../types';\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  onChange: (query: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: LokiVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React from 'react';\nimport { LokiVisualQuery } from '../types';\nimport { LokiDatasource } from '../../datasource';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { QueryBuilderLabelFilter } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { DataSourceApi, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { QueryPreview } from './QueryPreview';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { NestedQueryList } from './NestedQueryList';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n  nested?: boolean;\n}\n\nexport const LokiQueryBuilder = React.memo<Props>(({ datasource, query, nested, onChange, onRunQuery }) => {\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const withTemplateVariableOptions = async (optionsPromise: Promise<string[]>): Promise<SelectableValue[]> => {\n    const options = await optionsPromise;\n    return [...datasource.getVariables(), ...options].map((value) => ({ label: value, value }));\n  };\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<any> => {\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      await datasource.languageProvider.refreshLogLabels();\n      return datasource.languageProvider.getLabelKeys();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const series = await datasource.languageProvider.fetchSeriesLabels(expr);\n    return Object.keys(series).sort();\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    if (labelsToConsider.length === 0) {\n      return await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result[forLabelInterpolated] ?? [];\n  };\n\n  return (\n    <>\n      <EditorRow>\n        <LabelFilters\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n        />\n      </EditorRow>\n      <OperationsEditorRow>\n        <OperationList\n          queryModeller={lokiQueryModeller}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource as DataSourceApi}\n        />\n      </OperationsEditorRow>\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList query={query} datasource={datasource} onChange={onChange} onRunQuery={onRunQuery} />\n      )}\n      {!nested && (\n        <EditorRow>\n          <QueryPreview query={query} />\n        </EditorRow>\n      )}\n    </>\n  );\n});\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n","import React from 'react';\nimport { LokiVisualQuery } from '../types';\nimport { Stack } from '@grafana/experimental';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  nested?: boolean;\n}\n\nexport const LokiQueryBuilderExplained = React.memo<Props>(({ query, nested }) => {\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox stepNumber={1} title={`${lokiQueryModeller.renderLabels(query.labels)}`}>\n        Fetch all log lines matching label filters.\n      </OperationExplainedBox>\n      <OperationListExplained<LokiVisualQuery> stepNumber={2} queryModeller={lokiQueryModeller} query={query} />\n    </Stack>\n  );\n});\n\nLokiQueryBuilderExplained.displayName = 'LokiQueryBuilderExplained';\n","import React from 'react';\nimport { EditorRow, EditorField } from '@grafana/experimental';\nimport { SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup, Select } from '@grafana/ui';\nimport { LokiQuery, LokiQueryType } from '../../types';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { AutoSizeInput } from 'app/plugins/datasource/prometheus/querybuilder/shared/AutoSizeInput';\nimport { isMetricsQuery } from '../../datasource';\n\nexport interface Props {\n  query: LokiQuery;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const LokiQueryBuilderOptions = React.memo<Props>(({ query, onChange, onRunQuery }) => {\n  const onQueryTypeChange = (value: LokiQueryType) => {\n    onChange({ ...query, queryType: value });\n    onRunQuery();\n  };\n\n  const onResolutionChange = (option: SelectableValue<number>) => {\n    onChange({ ...query, resolution: option.value });\n    onRunQuery();\n  };\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, legendFormat: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n    if (query.maxLines !== newMaxLines) {\n      onChange({ ...query, maxLines: newMaxLines });\n      onRunQuery();\n    }\n  }\n\n  let queryType = query.queryType ?? (query.instant ? LokiQueryType.Instant : LokiQueryType.Range);\n  let showMaxLines = !isMetricsQuery(query.expr);\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup title=\"Options\" collapsedInfo={getCollapsedInfo(query, queryType, showMaxLines)}>\n        <EditorField\n          label=\"Legend\"\n          tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        >\n          <AutoSizeInput\n            placeholder=\"{{label}}\"\n            id=\"loki-query-editor-legend-format\"\n            type=\"string\"\n            minWidth={14}\n            defaultValue={query.legendFormat}\n            onCommitChange={onLegendFormatChanged}\n          />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryType} onChange={onQueryTypeChange} />\n        </EditorField>\n        {showMaxLines && (\n          <EditorField label=\"Line limit\" tooltip=\"Upper limit for number of log lines returned by query.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={0}\n              defaultValue={query.maxLines?.toString() ?? ''}\n              onCommitChange={onMaxLinesChange}\n            />\n          </EditorField>\n        )}\n        <EditorField label=\"Resolution\">\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={query.resolution || 1}\n            aria-label=\"Select resolution\"\n            menuShouldPortal\n          />\n        </EditorField>\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction getCollapsedInfo(query: LokiQuery, queryType: LokiQueryType, showMaxLines: boolean): string[] {\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find((x) => x.value === (query.resolution ?? 1));\n\n  const items: string[] = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  if (query.resolution) {\n    items.push(`Resolution: ${resolutionLabel?.label}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel?.label}`);\n\n  if (showMaxLines && query.maxLines) {\n    items.push(`Line limit: ${query.maxLines}`);\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';\n","import React from 'react';\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LokiQueryEditorProps } from '../../components/types';\nimport { LokiQueryField } from '../../components/LokiQueryField';\n\nexport function LokiQueryCodeEditor({ query, datasource, range, onRunQuery, onChange, data }: LokiQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <LokiQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={[]}\n        data={data}\n        data-testid={testIds.editor}\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // This wrapper styling can be removed after the old PromQueryEditor is removed.\n    // This is removing margin bottom on the old legacy inline form styles\n    wrapper: css`\n      .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n  };\n};\n","import { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst Json$1 = 1,\n  Logfmt$1 = 2,\n  Unpack$1 = 3,\n  Pattern$1 = 4,\n  Regexp$1 = 5,\n  Unwrap$1 = 6,\n  Ip$1 = 7,\n  LabelFormat$1 = 8,\n  LineFormat$1 = 9,\n  LabelReplace$1 = 10,\n  Offset$1 = 11,\n  Bool$1 = 12,\n  On$1 = 13,\n  Ignoring$1 = 14,\n  GroupLeft$1 = 15,\n  GroupRight$1 = 16,\n  BytesConv$1 = 17,\n  DurationConv$1 = 18,\n  DurationSecondsConv$1 = 19,\n  By$1 = 20,\n  Without$1 = 21,\n  And$1 = 22,\n  Or$1 = 23,\n  Unless$1 = 24,\n  Sum$1 = 25,\n  Avg$1 = 26,\n  Count$1 = 27,\n  Max$1 = 28,\n  Min$1 = 29,\n  Stddev$1 = 30,\n  Stdvar$1 = 31,\n  Bottomk$1 = 32,\n  Topk$1 = 33;\n\nconst keywordTokens = {\n    json: Json$1,\n    logfmt : Logfmt$1,\n    unpack: Unpack$1,\n    pattern : Pattern$1,\n    regexp : Regexp$1,\n    ip : Ip$1,\n    label_format : LabelFormat$1,\n    line_format : LineFormat$1,\n    label_replace: LabelReplace$1,\n    offset: Offset$1,\n    bool: Bool$1,\n    on: On$1,\n    ignoring: Ignoring$1,\n    group_left: GroupLeft$1,\n    group_right: GroupRight$1,\n    unwrap: Unwrap$1,\n    bytes: BytesConv$1,\n    duration: DurationConv$1,\n    duration_seconds: DurationSecondsConv$1\n};\n\nconst specializeIdentifier = (value, stack) => {\n    return keywordTokens[value.toLowerCase()] || -1;\n};\n\n\nconst contextualKeywordTokens = {\n    by: By$1,\n    without: Without$1,\n    and: And$1,\n    or: Or$1,\n    unless: Unless$1,\n    sum: Sum$1,\n    avg: Avg$1,\n    count: Count$1,\n    max: Max$1,\n    min: Min$1,\n    stddev: Stddev$1,\n    stdvar: Stdvar$1,\n    bottomk: Bottomk$1,\n    topk: Topk$1\n};\n\nconst extendIdentifier = (value, stack) => {\n    return contextualKeywordTokens[value.toLowerCase()] || -1;\n};\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Identifier = {__proto__:null,count_over_time:255, rate:257, bytes_over_time:259, bytes_rate:261, avg_over_time:263, sum_over_time:265, min_over_time:267, max_over_time:269, stddev_over_time:271, stdvar_over_time:273, quantile_over_time:275, first_over_time:277, last_over_time:279, absent_over_time:281};\nconst parser = LRParser.deserialize({\n  version: 13,\n  states: \"@jOYQPOOO#VQPO'#DSO$fQPO'#DROYQPO'#DROOQO'#EO'#EOO$sQPO'#D}OOQO'#Eg'#EgO$xQPO'#EfQ%TQPOOOOQO'#Eu'#EuO&UQPO'#EuO&ZQPO'#EvOOQO'#D|'#D|OOQO'#DQ'#DQOOQO'#EP'#EPOOQO'#EQ'#EQOOQO'#ER'#EROOQO'#ES'#ESOOQO'#ET'#ETOOQO'#EU'#EUOOQO'#EV'#EVOOQO'#EW'#EWOOQO'#EX'#EXOOQO'#EY'#EYOOQO'#EZ'#EZOOQO'#E['#E[OOQO'#E]'#E]OOQO'#E^'#E^O&`QPO'#DUOOQO'#DT'#DTO&nQPO,59nOOQO'#Da'#DaO&vQPO'#D`O'OQPO'#D_OOQO'#D^'#D^O(lQPO'#D^OOQO'#D]'#D]O*hQPO,59mO+vQPO,59mO+}QPO,5:hO,UQPO,5:iO,aQPO'#EdO.`QPO,5;QO.gQPO,5;QO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SOOQO,5;a,5;aOYQPO,5;bO0rQPO,59pO0wQPO1G/YOOQO1G/Y1G/YOOQO'#Dd'#DdOOQO,59z,59zO1PQPO,59zOOQO,59y,59yO1UQPO'#DUO1sQPO'#DfOOQO'#Df'#DfO3dQPO'#DfO3iQPO'#DmOOQO'#Dl'#DlOOQO'#Dj'#DjO)RQPO'#DjO4QQPO,59xO5nQPO'#DxO5sQPO'#DyOOQO,59x,59xOOQO,59w,59wOOQO1G/X1G/XOOQO1G0S1G0SO5xQPO'#E_O,XQPO'#E_O6aQPO1G0TO6fQPO1G0TO6kQPO,5;OO6sQPO1G0lO8OQPO1G0lO8VQPO1G0lO8^QPO'#EjO:`QPO'#EiO:jQPO'#EiOYQPO1G0nOYQPO1G0nOYQPO1G0nOYQPO1G0nOYQPO1G0nOYQPO1G0nO:tQPO1G0|OOQO1G/[1G/[OOQO1G/Z1G/ZOOQO7+$t7+$tO:{QPO1G/fO;QQPO,59pO;WQPO,5:`O;`QPO'#DiO;eQPO'#DhOOQO,5:R,5:ROOQO,5:Q,5:QO=RQPO,5:XO=WQPO,5:UO)RQPO,5:UO)RQPO,5:UOOQO,5:d,5:dO=fQPO'#D{OOQO'#Dz'#DzO=kQPO,5:eO?XQPO'#D^O5xQPO,5:yO?`QPO'#E`O?eQPO'#EbO@OQPO,5:yO6[QPO,5:yO@YQPO,5:yO@aQPO,5:yO@fQPO7+%oO,XQPO7+%oOOQO'#Ee'#EeOAvQPO1G0jOOQO1G0j1G0jOBOQPO7+&WOYQPO7+&WOC`QPO7+&WOCgQPO7+&WOCnQQO'#EkOOQO,5;U,5;UOEpQPO,5;TOEwQPO,5;TOGYQPO7+&YOGaQPO7+&YOOQO7+&Y7+&YOGnQPO7+&YOGuQPO7+&YOHzQPO7+&YOI[QPO7+&hOIaQPO7+%QOIfQPO1G/qOOQO1G/z1G/zOOQO1G/|1G/|OIkQPO,5:TOIpQPO,5:SOOQO1G/s1G/sOOQO1G/p1G/pOIuQPO1G/pOKcQPO,5:gO5sQPO,5:fOKkQPO,5:|OKyQPO1G0eO6[QPO1G0eOLRQPO,5:zO)RQPO,5:|OLWQPO1G0eOL_QPO'#EaOLWQPO1G0eOOQO1G0e1G0eOLdQPO1G0eO6[QPO1G0eOLkQPO1G0eOOQO<<IZ<<IZOLsQPO<<IZOLxQPO,5;POOQO7+&U7+&UOOQO<<Ir<<IrOL}QPO<<IrOYQPO<<IrOOQO'#Em'#EmOMUQPO,5;VOOQO'#El'#ElOOQO,5;V,5;VOOQO1G0o1G0oOM^QPO1G0oO! ZQPO<<JSOOQO<<Hl<<HlO! `QPO7+%]OOQO1G/o1G/oOOQO1G/n1G/nOOQO1G0R1G0ROOQO1G0Q1G0QOOQO'#Ec'#EcOOQO1G0h1G0hO! eQPO1G0hOOQO7+&P7+&POOQO1G0f1G0fO! jQPO1G0hOOQO,5:{,5:{O! {QPO7+&PO6[QPO7+&PO!!SQPO7+&PO!!bQPOAN>uOOQO1G0k1G0kO!#rQPOAN?^O!%SQPOAN?^O!%ZQQO1G0qOOQO1G0q1G0qOOQO7+&Z7+&ZO!%cQPOAN?nO!%hQPO<<HwO!%mQPO7+&SOOQO<<Ik<<IkO!%rQPO<<IkO!%zQPO<<IkO!&VQPO'#EbOOQOG24aG24aOOQOG24xG24xOOQO1G0r1G0rOOQO7+&]7+&]O!&[QPOG25YOOQOAN>cAN>cO!&aQPO<<InOOQOAN?VAN?VO!&fQPOLD*tOOQOAN?YAN?YOOQO,5:e,5:eO!&kQPO!$'N`O!&pQPO!)9CzO!&uQPO!.K9fOOQO!4//Q!4//QO5sQPO'#DyO!&zQPO'#D^O!'lQPO,59mO!'vQPO'#DROYQPO1G0nOYQPO1G0nOYQPO1G0nOYQPO1G0nOYQPO1G0nOYQPO1G0nO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO.lQPO,5;SO!)RQPO7+&YO!)YQPO7+&YO!)gQPO7+&YO!*oQPO7+&YO!*vQPO7+&YO!)nQPO'#Eh\",\n  stateData: \"!+T~O#mOSrOS~OYZOiUOjUOkUOlUOmUOnUOoUOpUOqUO!kXO#cYO#dYO#nPO#qRO#s^O#t_O#u`O#vaO#wbO#xcO#ydO#zeO#{fO#|gO#}hO$OiO$PjO$QkO~OylO~O|oO!OoO!UoO!VoOfuXguXhuX!buX!duX!euX!fuX!guX#cuX#duX#euX#fuX#guX#huX~O!XsO#kuX#ruX~P#[O#qxO~OdyOeyO#qzO~Of}Og|Oh}O|!RO!b!RO!d!RO!e!RO!f!RO!g!RO#c!OO#d!OO#e!PO#f!PO#g!PO#h!QO~O!k!SO~O#q!TO~Oz!UO|!UO}!UO!O!UO~O#o!VO#p!WO~OV!XO{!YO~O|oO!OoO!UoO!VoOf!RXg!RXh!RX!X!RX!b!RX!d!RX!e!RX!f!RX!g!RX#c!RX#d!RX#e!RX#f!RX#g!RX#h!RX#k!RX#r!RXU!RX$R!RX#o!RX~OP!^OQ!_OR!_OS!`OT!`OW!gOX!fOb!aOy!]O#q!dO~O|oO!OoO!UoO!VoOfuaguahua!bua!dua!eua!fua!gua#cua#dua#eua#fua#gua#hua~O!XsO#kua#rua~P)^OftXgtXhtX|tX!btX!dtX!etX!ftX!gtX#ctX#dtX#etX#ftX#gtX#htX~O#r!jO~P*uO#r!kO~P*uO!k!oO#nPO#q!mO~O#q!pO~OYZOiUOjUOkUOlUOmUOnUOoUOpUOqUO#cYO#dYO#nPO#qRO#s^O#t_O#u`O#vaO#wbO#xcO#ydO#zeO#{fO#|gO#}hO$OiO$PjO$QkO~O!k!rO~P,fO#q!sO~O[!vO]!tO^!tOY#]Pi#]Pj#]Pk#]Pl#]Pm#]Pn#]Po#]Pp#]Pq#]P!k#]P#c#]P#d#]P#n#]P#q#]P#s#]P#t#]P#u#]P#v#]P#w#]P#x#]P#y#]P#z#]P#{#]P#|#]P#}#]P$O#]P$P#]P$Q#]P~O{#OO~OylO#p#QO~O#q#RO~Oz#SO|#SO}!UO!O!UO!b#TO!d#TO!e#TO!f#TO!g#TO~Oy#UOf!YXg!YXh!YX|!YX!O!YX!U!YX!V!YX!X!YX!b!YX!d!YX!e!YX!f!YX!g!YX#c!YX#d!YX#e!YX#f!YX#g!YX#h!YX#k!YX#r!YXU!YX$R!YX#o!YX~O{#XO~Oz#YO|#YO!b#YO!d#YO!e#YO!f#YO!g#YO~Of#[Og#]O#o#[Oh!Qa|!Qa!O!Qa!U!Qa!V!Qa!X!Qa!b!Qa!d!Qa!e!Qa!f!Qa!g!Qa#c!Qa#d!Qa#e!Qa#f!Qa#g!Qa#h!Qa#k!Qa#r!QaU!Qa$R!Qa~O{#^O~Oy#_O~OU#eO|oO!OoO!UoO!VoO!X#bO$R#dO~O#r#jO~O#o#kO~Oy#lO#r#nO~O#r#oO~P*uOf#iXg#iXh#iX|#iX!b#iX!d#iX!e#iX!f#iX!g#iX#c#iX#d#iX#e#iX#f#iX#g#iX#h#iX#r#iX~O#o#pO~P6zO!k#rO~P,fO#q#sO~OY#]Xi#]Xj#]Xk#]Xl#]Xm#]Xn#]Xo#]Xp#]Xq#]X!k#]X#c#]X#d#]X#n#]X#q#]X#s#]X#t#]X#u#]X#v#]X#w#]X#x#]X#y#]X#z#]X#{#]X#|#]X#}#]X$O#]X$P#]X$Q#]X~O_#uO`#uO~P8cO]!tO^!tO~P8cO#o#}O~P*uO{$OO~OV$PO{#OO!i$QO!k$RO~Oz$SO~O#o$TOf![Xg![Xh![X|![X!O![X!U![X!V![X!X![X!b![X!d![X!e![X!f![X!g![X#c![X#d![X#e![X#f![X#g![X#h![X#k![X#r![XU![X$R![X~O!c$UO~Of#[Og#]O#o#[O#r$VO~Oz$XO~O#o$YOf!mag!mah!ma|!ma!O!ma!U!ma!V!ma!X!ma!b!ma!d!ma!e!ma!f!ma!g!ma#c!ma#d!ma#e!ma#f!ma#g!ma#h!ma#k!ma#r!maU!ma$R!ma~OU$ZO~P(lO!c$^O~O!X$_O~OU#eO|oO!OoO!UoO!VoO!X#bO~OZ$aO#r#Ra~P?jO#r$eO~P5xO#r$cO~OdyOeyOf!qqg!qqh!qq|!qq!b!qq!d!qq!e!qq!f!qq!g!qq#c!qq#d!qq#e!qq#f!qq#g!qq#h!qq#k!qq#r!qq#o!qq~O#o$iO#r$jO~OdyOeyOf#Yqg#Yqh#Yq|#Yq!b#Yq!d#Yq!e#Yq!f#Yq!g#Yq#c#Yq#d#Yq#e#Yq#f#Yq#g#Yq#h#Yq#k#Yq#r#Yq#o#Yq~O#r$kO~P*uO#o$mO~P6zO#b$nO#r$qO~OY#]ai#]aj#]ak#]al#]am#]an#]ao#]ap#]aq#]a!k#]a#c#]a#d#]a#n#]a#s#]a#t#]a#u#]a#v#]a#w#]a#x#]a#y#]a#z#]a#{#]a#|#]a#}#]a$O#]a$P#]a$Q#]a~O#q#sO~PCvO_$sO`$sO#q#]a~PCvOf}Oh}O|!RO!b!RO!d!RO!e!RO!f!RO!g!RO#c!OO#d!OO#e#[q#f#[q#g#[q#h#[q#k#[q#r#[q~Og#[q~PFUOf#[qg#[qh#[q~PF[Og|O~PFUO#k#[q#r#[q~P%TOf#[qg#[qh#[q|#[q!b#[q!d#[q!e#[q!f#[q!g#[q#e#[q#f#[q#g#[q#h#[q~O#c!OO#d!OO#k#[q#r#[q~PHPO{$tO~O#r$uO~O#q$vO~O{$wO~Oy#UO~Of#[O#o#[Og!^ih!^i|!^i!O!^i!U!^i!V!^i!X!^i!b!^i!d!^i!e!^i!f!^i!g!^i#c!^i#d!^i#e!^i#f!^i#g!^i#h!^i#k!^i#r!^iU!^i$R!^i~Oy$yO{$yO~Oa${Ob${Oc${Oy$|O~OZ$aO#r#Ri~O$S%PO~O#r#Ri~P?jO!c%RO~O#r%TO~P5xO#r%TO$R#dO~O#r%VO~Oy%WO~O#r%XO~P*uO#o%ZO#r%[O~O#q#sOY#]ii#]ij#]ik#]il#]im#]in#]io#]ip#]iq#]i!k#]i#c#]i#d#]i#n#]i#s#]i#t#]i#u#]i#v#]i#w#]i#x#]i#y#]i#z#]i#{#]i#|#]i#}#]i$O#]i$P#]i$Q#]i~O#o%^O~O{%_O~O#q%`O~Of#[Og#]O#o#[O$R#Ui#r#Ui~O#r#Rq~P?jOU#eOZ%cO!X%dO#r#Rq~OdyOeyOf!q!Rg!q!Rh!q!R|!q!R!b!q!R!d!q!R!e!q!R!f!q!R!g!q!R#c!q!R#d!q!R#e!q!R#f!q!R#g!q!R#h!q!R#k!q!R#r!q!R#o!q!R~OdyOeyOf#Y!Rg#Y!Rh#Y!R|#Y!R!b#Y!R!d#Y!R!e#Y!R!f#Y!R!g#Y!R#c#Y!R#d#Y!R#e#Y!R#f#Y!R#g#Y!R#h#Y!R#k#Y!R#r#Y!R#o#Y!R~O#r%fO~P*uO#b$nO#r%hO~O{%iO~O#r%jO~Oy%kO~OZ$aO#r#Ry~OU#eO!X%dO!c%RO~OU$ZO~O#o%mO~O#r%nO~O{%pO~O#o%qO~O{%rO~O#r%sO~OP!^OQ!_OR!_OS!`OT!`OW%tOX!fOb!aOy!]O#q!dO~O!X%uO#oua~P)^O!X%uO#ouX~P#[Of&POh&PO|&TO!b&TO!d&TO!e&TO!f&TO!g&TO#c&QO#d&QO#e#[q#f#[q#g#[q#h#[q#o#[q~Og#[q~P!(QOf#[qg#[qh#[q~P!(WOg&OO~P!(QOf&POg&OOh&PO|&TO!b&TO!d&TO!e&TO!f&TO!g&TO#c&QO#d&QO#e&RO#f&RO#g&RO#h&SO~O#o#[q~P!)nO#c&QO#d&QO#o#[q~PHPO\",\n  goto: \"/Y#kPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP#l$k%S%r%uPPPPPP&U&h&x'W'iPP'xP'{'{(Q(T(Z(l(l(uPPPPPP(uP(lP'{'{)O)U)]*O*e*z*z*z*z*z*z*z*z*z*z*z*z*z*z+a+j+},Z,s,v-V*O-Y*O-o.e.v/P/SPPPPPPP*O*O[WORz!s#p$mQ#w!wQ#x!xS#y!y%zQ#z!zQ#{!{Q#|!|Q&U%xQ&V%yQ&W%{Q&X%|Q&Y%}R&Z!Tt]Oz!T!s!w!x!y!z!{!|#p$m%x%y%z%{%|%}RvRjQORz!T!s!w!x!y!z!{!|#p$mS!lx#kQ#h!m]%w%x%y%z%{%|%}RnPQmP^!cs!d#[#]#b$_%uR#P!VQuQQ#c!lQ$`#fQ$d#hQ%S$bR%v%w[tQ!l#f#h$b%w]!iu#c$`$d%S%virQu!l#c#f#h$`$b$d%S%v%whqQu!l#c#f#h$`$b$d%S%v%wR![qkpQqu!l#c#f#h$`$b$d%S%v%wR!ZpV!hs#b%uR#W!^Q#V!^R$x$TU!es#b%uQ#Z!dQ$V#[Q$W#]R%Q$__!cs!d#[#]#b$_%u_!bs!d#[#]#b$_%uQ#a!gR%o%tS#`!g%tR$z$Yj]O!w!x!y!z!{!|%x%y%z%{%|%}QwRQ!qzQ!}!TQ#q!sQ$l#pR%Y$mw[ORz!T!s!w!x!y!z!{!|#p$m%x%y%z%{%|%}wTORz!T!s!w!x!y!z!{!|#p$m%x%y%z%{%|%}wSORz!T!s!w!x!y!z!{!|#p$m%x%y%z%{%|%}Q!nxQ#i!mR$h#kS#f!l#hW$[#c#g$d$fQ%O$]Q%U$eR%b%TQ$b#fQ%O$[Q%a%UR%l%bQ#g!lS$]#c$dQ$c#fQ$f#hS%O$`$bS%a%S%UR%l%cR$}$ZQ{VQ$g#jQ$k#oQ%e%VR%f%XR#m!pwVORz!T!s!w!x!y!z!{!|#p$m%x%y%z%{%|%}Q!w|Q!x}Q!y!OQ!z!PQ!{!QQ!|!RQ%x&OQ%y&PQ%z&QQ%{&RQ%|&SR%}&Th!u|}!O!P!Q!R&O&P&Q&R&S&TR#v!vQ#t!tQ$r#uR%]$sR$o#sQ$p#sR%g%Z\",\n  nodeNames: \"⚠ Json Logfmt Unpack Pattern Regexp Unwrap Ip LabelFormat LineFormat LabelReplace Offset Bool On Ignoring GroupLeft GroupRight BytesConv DurationConv DurationSecondsConv By Without And Or Unless Sum Avg Count Max Min Stddev Stdvar Bottomk Topk LineComment LogQL Expr LogExpr Selector Matchers Matcher Identifier Eq String Neq Re Nre PipelineExpr PipelineStage LineFilters LineFilter Filter PipeExact PipeMatch FilterOp Pipe LabelParser JsonExpressionParser JsonExpressionList JsonExpression LabelFilter IpLabelFilter UnitFilter DurationFilter Gtr Duration Gte Lss Lte Eql BytesFilter Bytes NumberFilter Number LineFormatExpr LabelFormatExpr LabelsFormat LabelFormatMatcher MetricExpr RangeAggregationExpr RangeOp CountOverTime Rate BytesOverTime BytesRate AvgOverTime SumOverTime MinOverTime MaxOverTime StddevOverTime StdvarOverTime QuantileOverTime FirstOverTime LastOverTime AbsentOverTime LogRangeExpr Range OffsetExpr UnwrapExpr ConvOp Grouping Labels VectorAggregationExpr VectorOp BinOpExpr BinOpModifier OnOrIgnoringModifier GroupingLabels GroupingLabelList GroupingLabel LabelName Add Sub Mul Div Mod Pow LiteralExpr LabelReplaceExpr\",\n  maxTerm: 142,\n  skippedNodes: [0,34],\n  repeatNodeCount: 0,\n  tokenData: \"3{~RwX^#lpq#lqr$ars$tst%huv%swx%xxy&gyz&lz{&q{|&v|}&{}!O'Q!O!P'V!P!Q(V!Q!R([!R![)r![!]0r!^!_1W!_!`1e!`!a1z!c!}2X!}#O2o#P#Q2t#Q#R2y#R#S2X#S#T3O#T#o2X#o#p3[#p#q3a#q#r3v#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~#qY#m~X^#lpq#l#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~$dQ!_!`$j#r#s$o~$oO|~~$tO!O~~$yU{~OY$tZr$trs%]s#O$t#O#P%b#P~$t~%bO{~~%ePO~$t~%mQr~OY%hZ~%h~%xO#g~~%}U{~OY%xZw%xwx%]x#O%x#O#P&a#P~%x~&dPO~%x~&lO#q~~&qO#r~~&vO#e~~&{O#c~~'QO#o~~'VO#d~~'YP!Q![']~'bR!k~!Q![']!g!h'k#X#Y'k~'nR{|'w}!O'w!Q!['}~'zP!Q!['}~(SP!k~!Q!['}~([O#f~~(ae!k~!O!P']!Q![)r!g!h+V!i!j+t!m!n+t!o!p+t!r!s+t!v!w+t#U#V+i#W#X+}#X#Y.P#Z#[.c#[#],f#_#`.c#a#b.l#d#e.c#g#h-n#h#i.c#k#l.}#l#m0W#m#n/i~)wd!k~!O!P']!Q![)r!g!h+V!i!j+t!m!n+t!o!p+t!r!s+t!v!w+t#U#V+i#W#X+}#X#Y.P#Z#[.c#[#],f#_#`.c#a#b.l#d#e.c#g#h-n#h#i.c#k#l.}#m#n/i~+YT{|'w}!O'w!Q!['}!d!e+i#]#^+n~+nO!i~~+qP#U#V+i~+wQ!d!e+i#]#^+n~,SP!c~!Q![,V~,YS!Q![,V#[#],f#a#b,z#g#h-n~,kP!c~!Q![,n~,qR!Q![,n#a#b,z#g#h-n~-PQ!c~!Q![-V#g#h-i~-YR!Q![-V#a#b-c#g#h-n~-fP#g#h-i~-nO!c~~-sP!c~!Q![-v~-yQ!Q![-v#a#b-c~.ST{|'w}!O'w!Q!['}#U#V+i#]#^+n~.fQ#U#V+i#]#^+n~.qS!c~!Q![-V#U#V+i#]#^+n#g#h-i~/SP!c~!Q![/V~/YT!Q![/V#W#X+}#[#],f#a#b,z#g#h-n~/nP!c~!Q![/q~/tU!Q![/q#W#X+}#[#],f#a#b,z#g#h-n#k#l.}~0ZR!Q![0d!c!i0d#T#Z0d~0iR!k~!Q![0d!c!i0d#T#Z0dP0wTyP!Q![0r![!]0r!c!}0r#R#S0r#T#o0r~1]P!e~!_!`1`~1eO!f~~1jQz~!_!`1p#r#s1u~1uO!g~~1zO}~~2PP!b~!_!`2S~2XO!d~R2`TyP#bQ!Q![2X![!]0r!c!}2X#R#S2X#T#o2X~2tO$R~~2yO$S~~3OO#h~~3RRO#S3O#S#T%]#T~3O~3aO#n~~3fQ!X~!_!`3l#r#s3q~3qO!U~~3vO!V~~3{O#p~\",\n  tokenizers: [0, 1],\n  topRules: {\"LogQL\":[0,35]},\n  specialized: [{term: 41, get: (value, stack) => (specializeIdentifier(value) << 1)},{term: 41, get: (value, stack) => (extendIdentifier(value) << 1) | 1},{term: 41, get: value => spec_Identifier[value] || -1}],\n  tokenPrec: 0\n});\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst Json = 1,\n  Logfmt = 2,\n  Unpack = 3,\n  Pattern = 4,\n  Regexp = 5,\n  Unwrap = 6,\n  Ip = 7,\n  LabelFormat = 8,\n  LineFormat = 9,\n  LabelReplace = 10,\n  Offset = 11,\n  Bool = 12,\n  On = 13,\n  Ignoring = 14,\n  GroupLeft = 15,\n  GroupRight = 16,\n  BytesConv = 17,\n  DurationConv = 18,\n  DurationSecondsConv = 19,\n  By = 20,\n  Without = 21,\n  And = 22,\n  Or = 23,\n  Unless = 24,\n  Sum = 25,\n  Avg = 26,\n  Count = 27,\n  Max = 28,\n  Min = 29,\n  Stddev = 30,\n  Stdvar = 31,\n  Bottomk = 32,\n  Topk = 33,\n  LineComment = 34,\n  LogQL = 35,\n  Expr = 36,\n  LogExpr = 37,\n  Selector = 38,\n  Matchers = 39,\n  Matcher = 40,\n  Identifier = 41,\n  Eq = 42,\n  String = 43,\n  Neq = 44,\n  Re = 45,\n  Nre = 46,\n  PipelineExpr = 47,\n  PipelineStage = 48,\n  LineFilters = 49,\n  LineFilter = 50,\n  Filter = 51,\n  PipeExact = 52,\n  PipeMatch = 53,\n  FilterOp = 54,\n  Pipe = 55,\n  LabelParser = 56,\n  JsonExpressionParser = 57,\n  JsonExpressionList = 58,\n  JsonExpression = 59,\n  LabelFilter = 60,\n  IpLabelFilter = 61,\n  UnitFilter = 62,\n  DurationFilter = 63,\n  Gtr = 64,\n  Duration = 65,\n  Gte = 66,\n  Lss = 67,\n  Lte = 68,\n  Eql = 69,\n  BytesFilter = 70,\n  Bytes = 71,\n  NumberFilter = 72,\n  Number = 73,\n  LineFormatExpr = 74,\n  LabelFormatExpr = 75,\n  LabelsFormat = 76,\n  LabelFormatMatcher = 77,\n  MetricExpr = 78,\n  RangeAggregationExpr = 79,\n  RangeOp = 80,\n  CountOverTime = 81,\n  Rate = 82,\n  BytesOverTime = 83,\n  BytesRate = 84,\n  AvgOverTime = 85,\n  SumOverTime = 86,\n  MinOverTime = 87,\n  MaxOverTime = 88,\n  StddevOverTime = 89,\n  StdvarOverTime = 90,\n  QuantileOverTime = 91,\n  FirstOverTime = 92,\n  LastOverTime = 93,\n  AbsentOverTime = 94,\n  LogRangeExpr = 95,\n  Range = 96,\n  OffsetExpr = 97,\n  UnwrapExpr = 98,\n  ConvOp = 99,\n  Grouping = 100,\n  Labels = 101,\n  VectorAggregationExpr = 102,\n  VectorOp = 103,\n  BinOpExpr = 104,\n  BinOpModifier = 105,\n  OnOrIgnoringModifier = 106,\n  GroupingLabels = 107,\n  GroupingLabelList = 108,\n  GroupingLabel = 109,\n  LabelName = 110,\n  Add = 111,\n  Sub = 112,\n  Mul = 113,\n  Div = 114,\n  Mod = 115,\n  Pow = 116,\n  LiteralExpr = 117,\n  LabelReplaceExpr = 118;\n\nexport { AbsentOverTime, Add, And, Avg, AvgOverTime, BinOpExpr, BinOpModifier, Bool, Bottomk, By, Bytes, BytesConv, BytesFilter, BytesOverTime, BytesRate, ConvOp, Count, CountOverTime, Div, Duration, DurationConv, DurationFilter, DurationSecondsConv, Eq, Eql, Expr, Filter, FilterOp, FirstOverTime, GroupLeft, GroupRight, Grouping, GroupingLabel, GroupingLabelList, GroupingLabels, Gte, Gtr, Identifier, Ignoring, Ip, IpLabelFilter, Json, JsonExpression, JsonExpressionList, JsonExpressionParser, LabelFilter, LabelFormat, LabelFormatExpr, LabelFormatMatcher, LabelName, LabelParser, LabelReplace, LabelReplaceExpr, Labels, LabelsFormat, LastOverTime, LineComment, LineFilter, LineFilters, LineFormat, LineFormatExpr, LiteralExpr, LogExpr, LogQL, LogRangeExpr, Logfmt, Lss, Lte, Matcher, Matchers, Max, MaxOverTime, MetricExpr, Min, MinOverTime, Mod, Mul, Neq, Nre, Number, NumberFilter, Offset, OffsetExpr, On, OnOrIgnoringModifier, Or, Pattern, Pipe, PipeExact, PipeMatch, PipelineExpr, PipelineStage, Pow, QuantileOverTime, Range, RangeAggregationExpr, RangeOp, Rate, Re, Regexp, Selector, Stddev, StddevOverTime, Stdvar, StdvarOverTime, String, Sub, Sum, SumOverTime, Topk, UnitFilter, Unless, Unpack, Unwrap, UnwrapExpr, VectorAggregationExpr, VectorOp, Without, parser };\n","import { parser } from '@grafana/lezer-logql';\nimport { SyntaxNode } from '@lezer/common';\nimport {\n  ErrorName,\n  getAllByType,\n  getLeftMostChild,\n  getString,\n  makeBinOp,\n  makeError,\n  replaceVariables,\n} from '../../prometheus/querybuilder/shared/parsingUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\nimport { binaryScalarDefs } from './binaryScalarOperations';\nimport { LokiVisualQuery, LokiVisualQueryBinary } from './types';\n\ninterface Context {\n  query: LokiVisualQuery;\n  errors: ParsingError[];\n}\n\ninterface ParsingError {\n  text: string;\n  from?: number;\n  to?: number;\n  parentType?: string;\n}\n\nexport function buildVisualQueryFromString(expr: string): Context {\n  const replacedExpr = replaceVariables(expr);\n  const tree = parser.parse(replacedExpr);\n  const node = tree.topNode;\n\n  // This will be modified in the handleExpression\n  const visQuery: LokiVisualQuery = {\n    labels: [],\n    operations: [],\n  };\n\n  const context: Context = {\n    query: visQuery,\n    errors: [],\n  };\n\n  try {\n    handleExpression(replacedExpr, node, context);\n  } catch (err) {\n    // Not ideal to log it here, but otherwise we would lose the stack trace.\n    console.error(err);\n    context.errors.push({\n      text: err.message,\n    });\n  }\n\n  // If we have empty query, we want to reset errors\n  if (isEmptyQuery(context.query)) {\n    context.errors = [];\n  }\n  return context;\n}\n\nexport function handleExpression(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  switch (node.name) {\n    case 'Matcher': {\n      visQuery.labels.push(getLabel(expr, node));\n      const err = node.getChild(ErrorName);\n      if (err) {\n        context.errors.push(makeError(expr, err));\n      }\n      break;\n    }\n\n    case 'LineFilter': {\n      const { operation, error } = getLineFilter(expr, node);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      // Show error for query patterns not supported in visual query builder\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n      break;\n    }\n\n    case 'LabelParser': {\n      visQuery.operations.push(getLabelParser(expr, node));\n      break;\n    }\n\n    case 'LabelFilter': {\n      const { operation, error } = getLabelFilter(expr, node);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      // Show error for query patterns not supported in visual query builder\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n      break;\n    }\n\n    case 'JsonExpressionParser': {\n      // JsonExpressionParser is not supported in query builder\n      const error = 'JsonExpressionParser not supported in visual query builder';\n\n      context.errors.push(createNotSupportedError(expr, node, error));\n    }\n\n    case 'LineFormatExpr': {\n      visQuery.operations.push(getLineFormat(expr, node));\n      break;\n    }\n\n    case 'LabelFormatMatcher': {\n      visQuery.operations.push(getLabelFormat(expr, node));\n      break;\n    }\n\n    case 'UnwrapExpr': {\n      const { operation, error } = getUnwrap(expr, node);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      // Show error for query patterns not supported in visual query builder\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n\n      break;\n    }\n\n    case 'RangeAggregationExpr': {\n      visQuery.operations.push(handleRangeAggregation(expr, node, context));\n      break;\n    }\n\n    case 'VectorAggregationExpr': {\n      visQuery.operations.push(handleVectorAggregation(expr, node, context));\n      break;\n    }\n\n    case 'BinOpExpr': {\n      handleBinary(expr, node, context);\n      break;\n    }\n\n    case ErrorName: {\n      if (isIntervalVariableError(node)) {\n        break;\n      }\n      context.errors.push(makeError(expr, node));\n      break;\n    }\n\n    default: {\n      // Any other nodes we just ignore and go to it's children. This should be fine as there are lot's of wrapper\n      // nodes that can be skipped.\n      // TODO: there are probably cases where we will just skip nodes we don't support and we should be able to\n      //  detect those and report back.\n      let child = node.firstChild;\n      while (child) {\n        handleExpression(expr, child, context);\n        child = child.nextSibling;\n      }\n    }\n  }\n}\n\nfunction getLabel(expr: string, node: SyntaxNode): QueryBuilderLabelFilter {\n  const labelNode = node.getChild('Identifier');\n  const label = getString(expr, labelNode);\n  const op = getString(expr, labelNode!.nextSibling);\n  const value = getString(expr, node.getChild('String')).replace(/\"/g, '');\n\n  return {\n    label,\n    op,\n    value,\n  };\n}\n\nfunction getLineFilter(expr: string, node: SyntaxNode): { operation?: QueryBuilderOperation; error?: string } {\n  // Check for nodes not supported in visual builder and return error\n  const ipLineFilter = getAllByType(expr, node, 'Ip');\n  if (ipLineFilter.length > 0) {\n    return {\n      error: 'Matching ip addresses not supported in query builder',\n    };\n  }\n\n  const mapFilter: any = {\n    '|=': '__line_contains',\n    '!=': '__line_contains_not',\n    '|~': '__line_matches_regex',\n    '!~': '\"__line_matches_regex\"_not',\n  };\n  const filter = getString(expr, node.getChild('Filter'));\n  const filterExpr = handleQuotes(getString(expr, node.getChild('String')));\n\n  return {\n    operation: {\n      id: mapFilter[filter],\n      params: [filterExpr],\n    },\n  };\n}\n\nfunction getLabelParser(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const parserNode = node.firstChild;\n  const parser = getString(expr, parserNode);\n\n  const string = handleQuotes(getString(expr, node.getChild('String')));\n  const params = !!string ? [string] : [];\n  return {\n    id: parser,\n    params,\n  };\n}\n\nfunction getLabelFilter(expr: string, node: SyntaxNode): { operation?: QueryBuilderOperation; error?: string } {\n  // Check for nodes not supported in visual builder and return error\n  if (node.getChild('Or') || node.getChild('And') || node.getChild('Comma')) {\n    return {\n      error: 'Label filter with comma, \"and\", \"or\" not supported in query builder',\n    };\n  }\n  if (node.firstChild!.name === 'IpLabelFilter') {\n    return {\n      error: 'IpLabelFilter not supported in query builder',\n    };\n  }\n\n  const id = '__label_filter';\n  if (node.firstChild!.name === 'UnitFilter') {\n    const filter = node.firstChild!.firstChild;\n    const label = filter!.firstChild;\n    const op = label!.nextSibling;\n    const value = op!.nextSibling;\n    const valueString = handleQuotes(getString(expr, value));\n\n    return {\n      operation: {\n        id,\n        params: [getString(expr, label), getString(expr, op), valueString],\n      },\n    };\n  }\n  // In this case it is Matcher or NumberFilter\n  const filter = node.firstChild;\n  const label = filter!.firstChild;\n  const op = label!.nextSibling;\n  const value = op!.nextSibling;\n  const params = [getString(expr, label), getString(expr, op), handleQuotes(getString(expr, value))];\n\n  // Special case of pipe filtering - no errors\n  if (params.join('') === `__error__=`) {\n    return {\n      operation: {\n        id: '__label_filter_no_errors',\n        params: [],\n      },\n    };\n  }\n\n  return {\n    operation: {\n      id,\n      params,\n    },\n  };\n}\n\nfunction getLineFormat(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const id = 'line_format';\n  const string = handleQuotes(getString(expr, node.getChild('String')));\n\n  return {\n    id,\n    params: [string],\n  };\n}\n\nfunction getLabelFormat(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const id = 'label_format';\n  const identifier = node.getChild('Identifier');\n  const op = identifier!.nextSibling;\n  const value = op!.nextSibling;\n\n  let valueString = handleQuotes(getString(expr, value));\n\n  return {\n    id,\n    params: [getString(expr, identifier), valueString],\n  };\n}\n\nfunction getUnwrap(expr: string, node: SyntaxNode): { operation?: QueryBuilderOperation; error?: string } {\n  // Check for nodes not supported in visual builder and return error\n  if (node.getChild('ConvOp')) {\n    return {\n      error: 'Unwrap with conversion operator not supported in query builder',\n    };\n  }\n\n  const id = 'unwrap';\n  const string = getString(expr, node.getChild('Identifier'));\n\n  return {\n    operation: {\n      id,\n      params: [string],\n    },\n  };\n}\n\nfunction handleRangeAggregation(expr: string, node: SyntaxNode, context: Context) {\n  const nameNode = node.getChild('RangeOp');\n  const funcName = getString(expr, nameNode);\n  const number = node.getChild('Number');\n  const logExpr = node.getChild('LogRangeExpr');\n  const params = number !== null && number !== undefined ? [getString(expr, number)] : [];\n\n  let match = getString(expr, node).match(/\\[(.+)\\]/);\n  if (match?.[1]) {\n    params.push(match[1]);\n  }\n\n  const op = {\n    id: funcName,\n    params,\n  };\n\n  if (logExpr) {\n    handleExpression(expr, logExpr, context);\n  }\n\n  return op;\n}\n\nfunction handleVectorAggregation(expr: string, node: SyntaxNode, context: Context) {\n  const nameNode = node.getChild('VectorOp');\n  let funcName = getString(expr, nameNode);\n\n  const grouping = node.getChild('Grouping');\n  const labels: string[] = [];\n\n  if (grouping) {\n    const byModifier = grouping.getChild(`By`);\n    if (byModifier && funcName) {\n      funcName = `__${funcName}_by`;\n    }\n\n    const withoutModifier = grouping.getChild(`Without`);\n    if (withoutModifier) {\n      funcName = `__${funcName}_without`;\n    }\n\n    labels.push(...getAllByType(expr, grouping, 'Identifier'));\n  }\n\n  const metricExpr = node.getChild('MetricExpr');\n  const op: QueryBuilderOperation = { id: funcName, params: labels };\n\n  if (metricExpr) {\n    handleExpression(expr, metricExpr, context);\n  }\n\n  return op;\n}\n\nconst operatorToOpName = binaryScalarDefs.reduce((acc, def) => {\n  acc[def.sign] = {\n    id: def.id,\n    comparison: def.comparison,\n  };\n  return acc;\n}, {} as Record<string, { id: string; comparison?: boolean }>);\n\n/**\n * Right now binary expressions can be represented in 2 way in visual query. As additional operation in case it is\n * just operation with scalar or it creates a binaryQuery when it's 2 queries.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleBinary(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const left = node.firstChild!;\n  const op = getString(expr, left.nextSibling);\n  const binModifier = getBinaryModifier(expr, node.getChild('BinModifiers'));\n\n  const right = node.lastChild!;\n\n  const opDef = operatorToOpName[op];\n\n  const leftNumber = getLastChildWithSelector(left, 'MetricExpr.LiteralExpr.Number');\n  const rightNumber = getLastChildWithSelector(right, 'MetricExpr.LiteralExpr.Number');\n\n  const rightBinary = right.getChild('BinOpExpr');\n\n  if (leftNumber) {\n    // TODO: this should be already handled in case parent is binary expression as it has to be added to parent\n    //  if query starts with a number that isn't handled now.\n  } else {\n    // If this is binary we don't really know if there is a query or just chained scalars. So\n    // we have to traverse a bit deeper to know\n    handleExpression(expr, left, context);\n  }\n\n  if (rightNumber) {\n    visQuery.operations.push(makeBinOp(opDef, expr, right, !!binModifier?.isBool));\n  } else if (rightBinary) {\n    // Due to the way binary ops are parsed we can get a binary operation on the right that starts with a number which\n    // is a factor for a current binary operation. So we have to add it as an operation now.\n    const leftMostChild = getLeftMostChild(right);\n    if (leftMostChild?.name === 'Number') {\n      visQuery.operations.push(makeBinOp(opDef, expr, leftMostChild, !!binModifier?.isBool));\n    }\n\n    // If we added the first number literal as operation here we still can continue and handle the rest as the first\n    // number will be just skipped.\n    handleExpression(expr, right, context);\n  } else {\n    visQuery.binaryQueries = visQuery.binaryQueries || [];\n    const binQuery: LokiVisualQueryBinary = {\n      operator: op,\n      query: {\n        labels: [],\n        operations: [],\n      },\n    };\n    if (binModifier?.isMatcher) {\n      binQuery.vectorMatchesType = binModifier.matchType;\n      binQuery.vectorMatches = binModifier.matches;\n    }\n    visQuery.binaryQueries.push(binQuery);\n    handleExpression(expr, right, {\n      query: binQuery.query,\n      errors: context.errors,\n    });\n  }\n}\n\nfunction getBinaryModifier(\n  expr: string,\n  node: SyntaxNode | null\n):\n  | { isBool: true; isMatcher: false }\n  | { isBool: false; isMatcher: true; matches: string; matchType: 'ignoring' | 'on' }\n  | undefined {\n  if (!node) {\n    return undefined;\n  }\n  if (node.getChild('Bool')) {\n    return { isBool: true, isMatcher: false };\n  } else {\n    const matcher = node.getChild('OnOrIgnoring');\n    if (!matcher) {\n      // Not sure what this could be, maybe should be an error.\n      return undefined;\n    }\n    const labels = getString(expr, matcher.getChild('GroupingLabels')?.getChild('GroupingLabelList'));\n    return {\n      isMatcher: true,\n      isBool: false,\n      matches: labels,\n      matchType: matcher.getChild('On') ? 'on' : 'ignoring',\n    };\n  }\n}\n\nfunction isIntervalVariableError(node: SyntaxNode) {\n  return node?.parent?.name === 'Range';\n}\n\nfunction handleQuotes(string: string) {\n  if (string[0] === `\"` && string[string.length - 1] === `\"`) {\n    return string.replace(/\"/g, '').replace(/\\\\\\\\/g, '\\\\');\n  }\n  return string.replace(/`/g, '');\n}\n\n/**\n * Simple helper to traverse the syntax tree. Instead of node.getChild('foo')?.getChild('bar')?.getChild('baz') you\n * can write getChildWithSelector(node, 'foo.bar.baz')\n * @param node\n * @param selector\n */\nfunction getLastChildWithSelector(node: SyntaxNode, selector: string) {\n  let child: SyntaxNode | null = node;\n  const children = selector.split('.');\n  for (const s of children) {\n    child = child.getChild(s);\n    if (!child) {\n      return null;\n    }\n  }\n  return child;\n}\n\n/**\n * Helper function to enrich error text with information that visual query builder doesn't support that logQL\n * @param expr\n * @param node\n * @param error\n */\nfunction createNotSupportedError(expr: string, node: SyntaxNode, error: string) {\n  const err = makeError(expr, node);\n  err.text = `${error}: ${err.text}`;\n  return err;\n}\n\nfunction isEmptyQuery(query: LokiVisualQuery) {\n  if (query.labels.length === 0 && query.operations.length === 0) {\n    return true;\n  }\n  return false;\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { Button, useStyles2, ConfirmModal } from '@grafana/ui';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\nimport React, { useCallback, useState } from 'react';\nimport { LokiQueryEditorProps } from '../../components/types';\nimport { LokiQuery } from '../../types';\n\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { getQueryWithDefaults } from '../state';\nimport { getDefaultEmptyQuery, LokiVisualQuery } from '../types';\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplaind';\nimport { LokiQueryBuilderOptions } from './LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from './LokiQueryCodeEditor';\nimport { buildVisualQueryFromString } from '../parsing';\n\nexport const LokiQueryEditorSelector = React.memo<LokiQueryEditorProps>((props) => {\n  const { onChange, onRunQuery, data } = props;\n  const styles = useStyles2(getStyles);\n  const query = getQueryWithDefaults(props.query);\n  const [visualQuery, setVisualQuery] = useState<LokiVisualQuery>(query.visualQuery ?? getDefaultEmptyQuery());\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [pendingChange, setPendingChange] = useState<LokiQuery | undefined>(undefined);\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      const change = { ...query, editorMode: newMetricEditorMode };\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr);\n        change.visualQuery = result.query;\n        // If there are errors, give user a chance to decide if they want to go to builder as that can loose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          setPendingChange(change);\n          return;\n        }\n        setVisualQuery(change.visualQuery);\n      }\n      onChange(change);\n    },\n    [onChange, query]\n  );\n\n  const onChangeViewModel = (updatedQuery: LokiVisualQuery) => {\n    setVisualQuery(updatedQuery);\n\n    onChange({\n      ...query,\n      expr: lokiQueryModeller.renderQuery(updatedQuery),\n      visualQuery: updatedQuery,\n      editorMode: QueryEditorMode.Builder,\n    });\n  };\n\n  // If no expr (ie new query) then default to builder\n  const editorMode = query.editorMode ?? (query.expr ? QueryEditorMode.Code : QueryEditorMode.Builder);\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may loose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          setVisualQuery(pendingChange!.visualQuery!);\n          onChange(pendingChange!);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <EditorHeader>\n        <FlexItem grow={1} />\n        <Button\n          className={styles.runQuery}\n          variant=\"secondary\"\n          size=\"sm\"\n          fill=\"outline\"\n          onClick={onRunQuery}\n          icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n          disabled={data?.state === LoadingState.Loading}\n        >\n          Run query\n        </Button>\n        <InlineSelect\n          value={null}\n          placeholder=\"Query patterns\"\n          allowCustomValue\n          onChange={({ value }) => {\n            onChangeViewModel({\n              ...visualQuery,\n              operations: value?.operations!,\n            });\n          }}\n          options={lokiQueryModeller.getQueryPatterns().map((x) => ({ label: x.name, value: x }))}\n        />\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && <LokiQueryCodeEditor {...props} />}\n        {editorMode === QueryEditorMode.Builder && (\n          <LokiQueryBuilder\n            datasource={props.datasource}\n            query={visualQuery}\n            onChange={onChangeViewModel}\n            onRunQuery={props.onRunQuery}\n          />\n        )}\n        {editorMode === QueryEditorMode.Explain && <LokiQueryBuilderExplained query={visualQuery} />}\n        {editorMode !== QueryEditorMode.Explain && (\n          <LokiQueryBuilderOptions query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        )}\n      </EditorRows>\n    </>\n  );\n});\n\nLokiQueryEditorSelector.displayName = 'LokiQueryEditorSelector';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    runQuery: css({\n      color: theme.colors.text.secondary,\n    }),\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import React, { memo } from 'react';\nimport { CoreApp } from '@grafana/data';\nimport { LokiQueryEditorProps } from './types';\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\nimport { LokiExploreQueryEditor } from './LokiExploreQueryEditor';\nimport { LokiQueryEditorSelector } from '../querybuilder/components/LokiQueryEditorSelector';\nimport { config } from '@grafana/runtime';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    case CoreApp.Explore:\n      if (config.featureToggles.lokiQueryBuilder) {\n        return <LokiQueryEditorSelector {...props} />;\n      }\n      return <LokiExploreQueryEditor {...props} />;\n    default:\n      if (config.featureToggles.lokiQueryBuilder) {\n        return <LokiQueryEditorSelector {...props} />;\n      }\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n","import { LokiQuery } from './types';\n/**\n * Just a simple wrapper for a react component that is actually implementing the query editor.\n */\nexport class LokiAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(query: LokiQuery) {\n    this.annotation.expr = query.expr;\n    this.annotation.maxLines = query.maxLines;\n    this.annotation.instant = query.instant;\n  }\n}\n","import React from 'react';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MaxLinesField = (props: Props) => {\n  const { value, onChange } = props;\n  return (\n    <FormField\n      label=\"Maximum lines\"\n      labelWidth={11}\n      inputWidth={20}\n      inputEl={\n        <input\n          type=\"number\"\n          className=\"gf-form-input width-8 gf-form-input--has-help-icon\"\n          value={value}\n          onChange={(event) => onChange(event.currentTarget.value)}\n          spellCheck={false}\n          placeholder=\"1000\"\n        />\n      }\n      tooltip={\n        <>\n          Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit\n          to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when\n          displaying the log results.\n        </>\n      }\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, DataLinkInput, stylesFactory, LegacyForms } from '@grafana/ui';\nimport { VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { DerivedFieldConfig } from '../types';\nimport { usePrevious } from 'react-use';\n\nconst { Switch, FormField } = LegacyForms;\n\nconst getStyles = stylesFactory(() => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  urlField: css`\n    flex: 1;\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n}));\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.row}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={5}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Name\"\n          type=\"text\"\n          value={value.name}\n          onChange={handleChange('name')}\n        />\n        <FormField\n          className={styles.regexField}\n          inputWidth={null}\n          label=\"Regex\"\n          type=\"text\"\n          value={value.matcherRegex}\n          onChange={handleChange('matcherRegex')}\n          tooltip={\n            'Use to parse and capture some part of the log message. You can use the captured groups in the template.'\n          }\n        />\n        <Button\n          variant=\"destructive\"\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n          className={css`\n            margin-left: 8px;\n          `}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <FormField\n          label={showInternalLink ? 'Query' : 'URL'}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={styles.urlField}\n        />\n        <FormField\n          className={styles.urlDisplayLabelField}\n          inputWidth={null}\n          label=\"URL Label\"\n          type=\"text\"\n          value={value.urlDisplayLabel}\n          onChange={handleChange('urlDisplayLabel')}\n          tooltip={'Use to override the button label when this derived field is found in a log.'}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              })\n            }\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { DerivedFieldConfig } from '../types';\nimport { ArrayVector, Field, FieldType, LinkModel } from '@grafana/data';\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={(event) => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: any = field.value;\n          if (field.error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: any;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        return {\n          name: field.name,\n          value: value || '<no match>',\n          href: link && link.href,\n        } as DebugField;\n      } catch (error) {\n        return {\n          name: field.name,\n          error,\n        } as DebugField;\n      }\n    });\n}\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { DerivedFieldConfig } from '../types';\nimport { DerivedField } from './DerivedField';\nimport { DebugSection } from './DebugSection';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from a log message and create a link from its value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DerivedField\n                className={styles.derivedField}\n                key={index}\n                value={field}\n                onChange={(newField) => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1, newField);\n                  onChange(newDerivedFields);\n                }}\n                onDelete={() => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1);\n                  onChange(newDerivedFields);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Exact string captured by the regular expression',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...(value || []), { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value && value.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { AlertingSettings, DataSourceHttpSettings } from '@grafana/ui';\nimport { LokiOptions } from '../types';\nimport { MaxLinesField } from './MaxLinesField';\nimport { DerivedFields } from './DerivedFields';\nimport { getAllAlertmanagerDataSources } from 'app/features/alerting/unified/utils/alertmanager';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const alertmanagers = getAllAlertmanagerDataSources();\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <AlertingSettings<LokiOptions>\n        alertmanagerDataSources={alertmanagers}\n        options={options}\n        onOptionsChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines || ''}\n              onChange={(value) => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { LokiDatasource } from './datasource';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { LokiAnnotationsQueryCtrl } from './LokiAnnotationsQueryCtrl';\nimport { ConfigEditor } from './configuration/ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(LokiDatasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(LokiCheatSheet)\n  .setAnnotationQueryCtrl(LokiAnnotationsQueryCtrl);\n","import { DataQuery, DataSourceJsonData, QueryResultMeta, ScopedVars } from '@grafana/data';\nimport { QueryEditorMode } from '../prometheus/querybuilder/shared/types';\nimport { LokiVisualQuery } from './querybuilder/types';\n\nexport interface LokiInstantQueryRequest {\n  query: string;\n  limit?: number;\n  time?: string;\n  direction?: 'BACKWARD' | 'FORWARD';\n}\n\nexport interface LokiRangeQueryRequest {\n  query: string;\n  limit?: number;\n  start?: number;\n  end?: number;\n  step?: number;\n  direction?: 'BACKWARD' | 'FORWARD';\n}\n\nexport enum LokiResultType {\n  Stream = 'streams',\n  Vector = 'vector',\n  Matrix = 'matrix',\n}\n\nexport enum LokiQueryType {\n  Range = 'range',\n  Instant = 'instant',\n  Stream = 'stream',\n}\n\nexport interface LokiQuery extends DataQuery {\n  queryType?: LokiQueryType;\n  expr: string;\n  query?: string;\n  format?: string;\n  reverse?: boolean;\n  legendFormat?: string;\n  valueWithRefId?: boolean;\n  maxLines?: number;\n  resolution?: number;\n  /** Used in range queries */\n  volumeQuery?: boolean;\n  /* @deprecated now use queryType */\n  range?: boolean;\n  /* @deprecated now use queryType */\n  instant?: boolean;\n  editorMode?: QueryEditorMode;\n  /** Temporary until we have a parser */\n  visualQuery?: LokiVisualQuery;\n}\n\nexport interface LokiOptions extends DataSourceJsonData {\n  maxLines?: string;\n  derivedFields?: DerivedFieldConfig[];\n  alertmanager?: string;\n}\n\nexport interface LokiStats {\n  [component: string]: {\n    [label: string]: number;\n  };\n}\n\nexport interface LokiVectorResult {\n  metric: { [label: string]: string };\n  value: [number, string];\n}\n\nexport interface LokiVectorResponse {\n  status: string;\n  data: {\n    resultType: LokiResultType.Vector;\n    result: LokiVectorResult[];\n    stats?: LokiStats;\n  };\n}\n\nexport interface LokiMatrixResult {\n  metric: Record<string, string>;\n  values: Array<[number, string]>;\n}\n\nexport interface LokiMatrixResponse {\n  status: string;\n  data: {\n    resultType: LokiResultType.Matrix;\n    result: LokiMatrixResult[];\n    stats?: LokiStats;\n  };\n}\n\nexport interface LokiStreamResult {\n  stream: Record<string, string>;\n  values: Array<[string, string]>;\n}\n\nexport interface LokiStreamResponse {\n  status: string;\n  data: {\n    resultType: LokiResultType.Stream;\n    result: LokiStreamResult[];\n    stats?: LokiStats;\n  };\n}\n\nexport interface LokiTailResponse {\n  streams: LokiStreamResult[];\n  dropped_entries?: Array<{\n    labels: Record<string, string>;\n    timestamp: string;\n  }> | null;\n}\n\nexport type LokiResult = LokiVectorResult | LokiMatrixResult | LokiStreamResult;\nexport type LokiResponse = LokiVectorResponse | LokiMatrixResponse | LokiStreamResponse;\n\nexport interface LokiLogsStreamEntry {\n  line: string;\n  ts: string;\n}\n\nexport interface LokiExpression {\n  regexp: string;\n  query: string;\n}\n\nexport type DerivedFieldConfig = {\n  matcherRegex: string;\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport interface TransformerOptions {\n  format?: string;\n  legendFormat?: string;\n  step: number;\n  start: number;\n  end: number;\n  query: string;\n  responseListLength: number;\n  refId: string;\n  scopedVars: ScopedVars;\n  meta?: QueryResultMeta;\n  valueWithRefId?: boolean;\n}\n"],"names":["queryTypeOptions","value","LokiQueryType","label","description","config","push","DEFAULT_RESOLUTION","RESOLUTION_OPTIONS","concat","map","LokiOptionFields","props","lineLimitValue","resolution","onRunQuery","runOnBlur","onChange","query","queryType","instant","onQueryTypeChange","rest","className","cx","css","InlineFormLabel","width","RadioButtonGroup","options","type","InlineField","tooltip","Input","placeholder","min","e","maxLines","preprocessMaxLines","currentTarget","nextQuery","onChangeQueryLimit","onKeyDown","key","onBlur","Select","isSearchable","option","menuShouldPortal","length","NaN","isNaN","builtInWords","PROM_KEYWORDS","OPERATORS","LOGICAL_OPERATORS","LOKI_KEYWORDS","metricsAndKeywordsRegexp","addLabelToQuery","operator","hasNoMetrics","Error","transformedValue","Infinity","toString","previousWord","replace","match","word","offset","isMetric","insideSelector","text","position","openChar","closeChar","nextSelectorStart","slice","indexOf","nextSelectorEnd","isPositionInsideChars","previousWordIsKeyWord","isColonBounded","endsWith","startsWithQuote","isTemplateVariable","isTimeUnit","includes","Boolean","Number","isWordMetric","selectorRegexp","parts","lastIndex","suffix","exec","prefix","index","startsWith","selectorWithLabel","addLabelToSelector","join","labelRegexp","selector","labelKey","labelValue","labelOperator","parsedLabels","operatorForLabelKey","chain","uniqWith","isEqual","compact","sortBy","uuid","validate","TypeError","v","arr","Uint8Array","parseInt","f","s","x","y","z","ROTL","n","v5","name","version","hashfunc","generateUUID","namespace","buf","str","unescape","encodeURIComponent","bytes","i","charCodeAt","stringToBytes","set","stringify","err","DNS","URL","v35","K","H","msg","Array","isArray","prototype","call","l","N","Math","ceil","M","_i","Uint32Array","j","pow","floor","_i2","W","t","_t","a","b","c","d","_t2","T","formatQuery","trim","getHighlighterExpressionsFromQuery","input","expression","results","filterStart","search","filterOperator","skip","filterEnd","filterTerm","quotedTerm","backtickedTerm","term","unwrappedFilterTerm","escapeRegExp","getNormalizedLokiQuery","undefined","lokiStreamResultToDataFrame","stream","reverse","refId","labels","labelsString","Object","entries","val","sort","times","ArrayVector","timesNs","lines","uids","usedUids","ts","line","values","add","Date","toISOString","createUid","dataFrame","fields","FieldType","displayName","mutableDataFrame","MutableDataFrame","constructDataFrame","id","uuidv5","newCount","lokiMatrixToTimeSeries","matrixResult","labelData","isEmpty","legendFormat","labelPart","getOriginalMetricName","renderLegendFormat","getTemplateSrv","scopedVars","createMetricLabel","metric","target","title","datapoints","lokiPointsToTimeseriesPoints","tags","meta","parsePrometheusFormatSampleValue","POSITIVE_INFINITY","NEGATIVE_INFINITY","parseFloat","data","time","datapointValue","timestamp","lokiResultsToTableModel","lokiResults","resultCount","valueWithRefId","TableModel","sortedLabels","Set","reduce","acc","cur","keys","table","columns","filterable","forEach","series","newSeries","rows","lokiStatsToMetaStat","stats","result","section","unit","test","capitalize","m","toLowerCase","lokiStreamsToDataFrames","response","limit","custom","lokiQueryStatKey","searchWords","expr","preferredVisualisationType","enhanceDataFrame","some","error","derivedFields","derivedFieldsGrouped","groupBy","newFields","fieldFromDerivedFieldConfig","DataFrameView","row","field","logMatch","matcherRegex","derivedFieldConfigs","dataSourceSrv","getDataSourceSrv","dataLinks","derivedFieldConfig","datasourceUid","dsSettings","getInstanceSettings","urlDisplayLabel","url","internal","datasourceName","links","rangeQueryResponseToDataFrames","responseListLength","transformerOptions","format","start","end","step","resultType","LokiResultType","vecResult","rangeQueryResponseToTimeSeries","frames","toDataFrame","intervalMs","frame","interval","processRangeQueryResponse","of","makeTableFrames","instantMetricFrames","framesWithRefId","filter","framesByRefId","tableTimeField","tableValueField","allLabelNames","flat","labelFields","from","labelName","timeField","find","valueField","timeArray","toArray","valueArray","makeTableFrame","count","get","uniqueId","setFrameMeta","oldMeta","newMeta","processStreamFrame","newFrame","allLabels","assign","Map","String","uid","makeIdField","processStreamsFrames","queryMap","processMetricRangeFrames","groupFrames","streamsFrames","metricInstantFrames","metricRangeFrames","every","isMetricFrame","DEFAULT_WEBSOCKET_CONFIG","deserializer","JSON","parse","serializer","WebSocketSubject","_super","urlConfigOrSource","destination","_this","this","_socket","Observable","source","_config","__assign","_output","Subject","hasOwnProperty","WebSocketCtor","WebSocket","ReplaySubject","__extends","lift","sock","_resetState","multiplex","subMsg","unsubMsg","messageFilter","self","observer","next","subscription","subscribe","complete","unsubscribe","_connectSocket","_a","protocol","binaryType","socket","Subscription","readyState","close","onopen","evt","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","LiveStreams","getStream","retryInterval","streams","CircularDataFrame","capacity","size","addField","parseLabels","pipe","baseLabels","tsField","tsNsField","lineField","labelsField","idField","unique","findUniqueLabels","allLabelsString","appendResponseToBufferedData","retryWhen","attempts","mergeMap","retryAttempt","console","warn","timer","throwError","finalize","DEFAULT_KEYS","EMPTY_SELECTOR","RATE_RANGES","sortValue","wrapLabel","filterText","LokiLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","LRU","max","async","params","metadataRequest","startTask","fetchLabels","then","started","context","suggestions","getEmptyCompletionItems","getTermCompletionItems","prefixMatch","items","FUNCTIONS","suggestion","kind","PIPE_OPERATORS","PIPE_PARSERS","interpolatedMatch","interpolateString","getTimeRangeParams","cacheKey","generateCacheKey","seriesCache","request","processLabels","labelKeys","labelFetchTs","getSyntax","syntax","getLabelKeys","wrapperClasses","emptyResult","empty","document","selectedLines","getTextsAtRange","selection","currentLine","first","getText","nextCharacter","anchor","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","isNextOperand","getRangeCompletionItems","getLabelCompletionItems","getPipeCompletionItem","getBeginningCompletionItems","history","historyItems","h","uniq","take","item","cutoffTs","now","historyForItem","hint","recent","dateTime","fromNow","documentation","addHistoryMetadata","skipSort","anchorBlock","cursorOffset","isValueStart","parsedSelector","parseSelector","existingKeys","labelValues","getLabelValues","getSeriesLabels","possibleKeys","difference","newSuggestion","importFromAbstractQuery","labelBasedQuery","toPromLikeExpr","exportToAbstractQuery","lokiQuery","labelMatchers","tokens","Prism","extractLabelMatchers","lookupsDisabled","fetchSeriesLabels","timeRange","valueOf","res","forceRefresh","param","roundTime","nanos","fetchLabelValues","interpolatedKey","rangeParams","labelsCache","doLokiChannelStream","ds","range","maxDelta","to","maxLength","maxDataPoints","updateFrame","message","p","StreamingDataFrame","displayNameFormat","defer","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","padStart","getLiveStreamKey","getGrafanaLiveSrv","scope","LiveChannelScope","path","state","LoadingState","NS_IN_MS","RANGE_QUERY_ENDPOINT","INSTANT_QUERY_ENDPOINT","DEFAULT_QUERY_PARAMS","direction","LokiDatasource","DataSourceWithBackend","instanceSettings","templateSrv","timeSrv","getTimeSrv","timeNs","getTime","queryLimit","isMetricsQuery","_request","jsonData","catchError","processError","liveStreaming","runLiveQuery","createRangeQuery","headers","volumeQuery","switchMap","liveTarget","createLiveTarget","prepareLogRowContextQueryTarget","lastValueFrom","status","statusText","languageProvider","contextTimeBuffer","commonTargetOptions","nsTimestamp","FieldCache","getFieldByName","rowIndex","timeEpochMs","settingsData","apiUrl","baseUrl","serializeParams","withCredentials","basicAuth","Authorization","req","getBackendSrv","fetch","getLogsVolumeDataProvider","targets","logsVolumeRequest","cloneDeep","queryLogsVolume","extractLevel","subQueries","getRangeScopedVars","app","CoreApp","fixedRequest","dataFrames","isDataFrame","transformBackendResult","filteredTargets","hide","addAdHocFilters","interpolateQueryExpr","runInstantQuery","rangeRaw","runRangeQuery","merge","startNs","endNs","rangeMs","adjustedInterval","adjustInterval","convertToWebSocketUrl","msRange","diff","sRange","round","__range_ms","__range_s","__range","interpolateVariablesInQueries","queries","expandedQueries","getRef","getQueryDisplayText","abstractQueries","abstractQuery","labelMatcher","hideFromInspector","Promise","resolve","interpolated","processMetricFindQuery","labelNamesQuery","labelValuesSeriesQuery","labelValuesQuery","timeParams","variable","multi","includeAll","lokiRegularEscape","lokiSpecialRegexEscape","lodashMap","modifyQuery","action","date","roundUp","dateMath","testDatasource","stepInterval","tagKeys","titleFormat","textFormat","annotation","interpolatedExpr","annotations","splitKeys","split","apply","showContextToggle","dynamicInterval","safeInterval","queryExpr","getAdhocFilters","notParsedLabelOverride","parsers","parser","RegExp","queryHasPipeParser","addParsedLabelToQuery","filterQuery","applyTemplateVariables","string","getVariables","getFirstFieldOfType","labelNames","levelLabel","getLogLevelFromKey","LogLevel","getLogLevelFromLabels","DEFAULT_EXAMPLES","PREFERRED_LABELS","LOGQL_EXAMPLES","LokiCheatSheet","PureComponent","userExamples","provider","preferredLabel","shuffle","setState","scheduleUserLabelChecking","componentDidMount","componentWillUnmount","clearTimeout","userLabelTimer","setTimeout","checkUserLabels","renderExpression","onClickExample","onClick","render","hasUserExamples","example","href","LokiQueryEditor","legendField","LokiQueryField","testIds","editor","ExtraFieldElement","LokiQueryEditorForAlerting","LokiExploreQueryEditor","memo","LokiVisualQueryOperationCategory","LokiOperationId","LokiOperationOrder","binaryScalarDefs","Addition","sign","Subtraction","MultiplyBy","DivideBy","Modulo","Exponent","EqualTo","comparison","NotEqualTo","GreaterThan","LessThan","GreaterOrEqual","LessOrEqual","binaryScalarOperations","opDef","defaultParams","unshift","alternativesKey","category","BinaryOps","renderer","model","def","innerExpr","bool","addOperationHandler","defaultAddOperationHandler","getOperationDefinitions","aggregations","Sum","Min","Max","Avg","Stddev","Stdvar","Count","flatMap","opId","createAggregationOperation","addLokiOperation","orderRank","Last","aggregationsWithParam","TopK","BottomK","createAggregationOperationWithParam","createRangeOperation","Rate","CountOverTime","SumOverTime","BytesRate","BytesOverTime","AbsentOverTime","AvgOverTime","MaxOverTime","MinOverTime","FirstOverTime","LastOverTime","StdvarOverTime","StddevOverTime","QuantileOverTime","Json","Formats","LineFormats","pipelineRenderer","Logfmt","explainHandler","Regexp","hideName","minWidth","Pattern","Unpack","LineFormat","LabelFormat","LineContains","LineFilters","getLineFilterRenderer","op","LineContainsNot","LineMatchesRegex","LineMatchesRegexNot","LabelFilter","LabelFilters","labelFilterRenderer","LabelFilterNoErrors","NoErrors","Unwrap","NestedQuery","addNestedQueryHandler","operationWithRangeVectorRenderer","operationWithRangeVectorRendererAndParam","getPromAndLokiOperationDisplayName","RangeFunctions","RangeVectorFunction","opDocs","insertText","rangeVector","operation","getIndexOfOrLast","operations","queryModeller","condition","findIndex","getOperationDef","modeller","newOperation","existingRangeVectorFunction","isRangeVectorFunction","Aggregations","Functions","placeToInsert","splice","binaryQueries","LokiQueryModeller","LokiAndPromQueryModellerBase","setOperationCategories","renderLabels","getQueryPatterns","lokiQueryModeller","queryEditorModeDefaultLocalStorageKey","getDefaultEditorMode","QueryEditorMode","store","QueryPreview","theme","useTheme2","styles","getStyles","hightlighted","renderQuery","lokiGrammar","EditorFieldGroup","EditorField","editorField","dangerouslySetInnerHTML","__html","padding","spacing","fontFamily","typography","fontFamilyMonospace","fontSize","bodySmall","React","nestedQuery","onRemove","useStyles2","card","header","operators","toOption","vectorMatchWrapper","vectorMatchesType","allowCustomValue","AutoSizeInput","vectorMatchInput","defaultValue","vectorMatches","onCommitChange","FlexItem","grow","IconButton","body","EditorRows","LokiQueryBuilder","nested","update","display","flexDirection","gap","alignItems","whiteSpace","paddingLeft","marginLeft","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","Stack","withTemplateVariableOptions","optionsPromise","EditorRow","onGetLabelNames","forLabel","labelsToConsider","refreshLogLabels","onGetLabelValues","labelsFilters","OperationsEditorRow","OperationList","LokiQueryBuilderExplained","OperationExplainedBox","stepNumber","OperationListExplained","LokiQueryBuilderOptions","showMaxLines","QueryOptionGroup","collapsedInfo","getCollapsedInfo","newMaxLines","queryTypeLabel","resolutionLabel","LokiQueryCodeEditor","wrapper","keywordTokens","json","logfmt","unpack","pattern","regexp","ip","label_format","line_format","label_replace","on","ignoring","group_left","group_right","unwrap","duration","duration_seconds","contextualKeywordTokens","by","without","and","or","unless","sum","avg","stddev","stdvar","bottomk","topk","spec_Identifier","__proto__","count_over_time","rate","bytes_over_time","bytes_rate","avg_over_time","sum_over_time","min_over_time","max_over_time","stddev_over_time","stdvar_over_time","quantile_over_time","first_over_time","last_over_time","absent_over_time","states","stateData","goto","nodeNames","maxTerm","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","specialized","stack","specializeIdentifier","extendIdentifier","tokenPrec","handleExpression","node","visQuery","labelNode","getChild","getString","nextSibling","getLabel","ErrorName","errors","makeError","getAllByType","mapFilter","filterExpr","handleQuotes","getLineFilter","createNotSupportedError","parserNode","firstChild","getLabelParser","valueString","getLabelFilter","getLineFormat","identifier","getLabelFormat","getUnwrap","nameNode","funcName","number","logExpr","handleRangeAggregation","grouping","metricExpr","handleVectorAggregation","left","binModifier","isBool","isMatcher","matcher","matches","matchType","getBinaryModifier","right","lastChild","operatorToOpName","leftNumber","getLastChildWithSelector","rightNumber","rightBinary","makeBinOp","leftMostChild","getLeftMostChild","binQuery","handleBinary","parent","isIntervalVariableError","child","children","LokiQueryEditorSelector","editorMode","getQueryWithDefaults","visualQuery","setVisualQuery","useState","parseModalOpen","setParseModalOpen","pendingChange","setPendingChange","onEditorModeChange","useCallback","newMetricEditorMode","change","replacedExpr","replaceVariables","topNode","isEmptyQuery","buildVisualQueryFromString","onChangeViewModel","updatedQuery","ConfirmModal","isOpen","confirmText","onConfirm","onDismiss","EditorHeader","Button","runQuery","variant","fill","icon","disabled","InlineSelect","QueryEditorModeToggle","mode","Space","color","colors","secondary","switchLabel","LokiQueryEditorByApp","LokiAnnotationsQueryCtrl","$scope","ctrl","onQueryChange","bind","FormField","LegacyForms","MaxLinesField","labelWidth","inputWidth","inputEl","event","spellCheck","Switch","stylesFactory","nameField","regexField","urlField","urlDisplayLabelField","DerivedField","onDelete","showInternalLink","setShowInternalLink","previousUid","usePrevious","useEffect","handleChange","preventDefault","DataLinkInput","newValue","checked","DataSourcePicker","tracing","current","DebugSection","debugText","setDebugText","debugFields","testMatch","link","getFieldLinksForExplore","makeDebugFields","DebugFields","DerivedFields","infoText","derivedField","showDebug","setShowDebug","newField","newDerivedFields","DataLinkBuiltInVars","origin","VariableOrigin","makeJsonUpdater","setMaxLines","setDerivedFields","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor","onOptionsChange","alertmanagers","getAllAlertmanagerDataSources","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","AlertingSettings","alertmanagerDataSources","setQueryEditorHelp","setAnnotationQueryCtrl"],"sourceRoot":""}