{"version":3,"file":"TeamPages.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/core/components/Upgrade/UpgradeBox.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { t, Trans } from '@lingui/macro';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  weekStart: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone, weekStart } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone, weekStart });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardId, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" data-testid={selectors.components.UserProfile.preferencesSaveButton}>\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { config } from '@grafana/runtime/src';\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { LegacyForms, DeleteButton } from '@grafana/ui';\nconst { Select } = LegacyForms;\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                menuShouldPortal\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={(item) => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            aria-label={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label=\"Remove team member\"\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, OrgUser } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","import React from 'react';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { AccessControlAction, Team } from '../../types';\nimport { contextSrv } from 'app/core/services/context_srv';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canListUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"Members\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canListUsers={canListUsers}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { AccessControlAction, Team } from 'app/types';\nimport { contextSrv } from 'app/core/core';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"Team settings\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n          disabled={!canWriteTeamSettings}\n        >\n          {({ register }) => (\n            <>\n              <Field label=\"Name\" disabled={!canWriteTeamSettings}>\n                <Input {...register('name', { required: true })} id=\"name-input\" />\n              </Field>\n\n              <Field\n                label=\"Email\"\n                description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n                disabled={!canWriteTeamSettings}\n              >\n                <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n              </Field>\n              <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n                Update\n              </Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import React, { HTMLAttributes, useEffect } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Button, Icon, LinkButton, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime/src';\n\ntype ComponentSize = 'sm' | 'md';\n\nexport interface Props extends HTMLAttributes<HTMLOrSVGElement> {\n  featureName: string;\n  size?: ComponentSize;\n  text?: string;\n  eventVariant?: string;\n  featureId: string;\n}\n\nexport const UpgradeBox = ({\n  featureName,\n  className,\n  children,\n  text,\n  featureId,\n  eventVariant = '',\n  size = 'md',\n  ...htmlProps\n}: Props) => {\n  const styles = useStyles2((theme) => getUpgradeBoxStyles(theme, size));\n\n  useEffect(() => {\n    reportExperimentView(`feature-highlights-${featureId}`, 'test', eventVariant);\n  }, [eventVariant, featureId]);\n\n  return (\n    <div className={cx(styles.box, className)} {...htmlProps}>\n      <Icon name={'rocket'} className={styles.icon} />\n      <div className={styles.inner}>\n        <p className={styles.text}>\n          You’ve discovered a Pro feature! {text || `Get the Grafana Pro plan to access ${featureName}.`}\n        </p>\n        <LinkButton\n          variant=\"secondary\"\n          size={size}\n          className={styles.button}\n          href=\"https://grafana.com/profile/org/subscription\"\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Upgrade\n        </LinkButton>\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeBoxStyles = (theme: GrafanaTheme2, size: ComponentSize) => {\n  const borderRadius = theme.shape.borderRadius(2);\n  const fontBase = size === 'md' ? 'body' : 'bodySmall';\n\n  return {\n    box: css`\n      display: flex;\n      align-items: center;\n      position: relative;\n      border-radius: ${borderRadius};\n      background: ${theme.colors.success.transparent};\n      padding: ${theme.spacing(2)};\n      color: ${theme.colors.success.text};\n      font-size: ${theme.typography[fontBase].fontSize};\n      text-align: left;\n      line-height: 16px;\n      margin: ${theme.spacing(0, 'auto', 3, 'auto')};\n      max-width: ${theme.breakpoints.values.xxl}px;\n      width: 100%;\n    `,\n    inner: css`\n      display: flex;\n      align-items: center;\n      width: 100%;\n      justify-content: space-between;\n    `,\n    text: css`\n      margin: 0;\n    `,\n    button: css`\n      background-color: ${theme.colors.success.main};\n      font-weight: ${theme.typography.fontWeightLight};\n      color: white;\n\n      &:hover {\n        background-color: ${theme.colors.success.main};\n      }\n\n      &:focus-visible {\n        box-shadow: none;\n        color: ${theme.colors.text.primary};\n        outline: 2px solid ${theme.colors.primary.main};\n      }\n    `,\n    icon: css`\n      margin: ${theme.spacing(0.5, 1, 0.5, 0.5)};\n    `,\n  };\n};\n\nexport interface UpgradeContentProps {\n  image: string;\n  featureUrl?: string;\n  featureName: string;\n  description?: string;\n  listItems: string[];\n  caption?: string;\n  action?: {\n    text: string;\n    link?: string;\n    onClick?: () => void;\n  };\n}\n\nexport const UpgradeContent = ({\n  listItems,\n  image,\n  featureUrl,\n  featureName,\n  description,\n  caption,\n  action,\n}: UpgradeContentProps) => {\n  const styles = useStyles2(getUpgradeContentStyles);\n  return (\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <h3 className={styles.title}>Get started with {featureName}</h3>\n        {description && <h6 className={styles.description}>{description}</h6>}\n        <ul className={styles.list}>\n          {listItems.map((item, index) => (\n            <li key={index}>\n              <Icon name={'check'} size={'xl'} className={styles.icon} /> {item}\n            </li>\n          ))}\n        </ul>\n        {action?.link && (\n          <LinkButton variant={'primary'} href={action.link}>\n            {action.text}\n          </LinkButton>\n        )}\n        {action?.onClick && (\n          <Button variant={'primary'} onClick={action.onClick}>\n            {action.text}\n          </Button>\n        )}\n        {featureUrl && (\n          <LinkButton fill={'text'} href={featureUrl} className={styles.link} target=\"_blank\" rel=\"noreferrer noopener\">\n            Learn more\n          </LinkButton>\n        )}\n      </div>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n        {caption && <p className={styles.caption}>{caption}</p>}\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeContentStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      justify-content: space-between;\n    `,\n    content: css`\n      width: 45%;\n      margin-right: ${theme.spacing(4)};\n    `,\n    media: css`\n      width: 55%;\n\n      img {\n        width: 100%;\n      }\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    list: css`\n      list-style: none;\n      margin: ${theme.spacing(4, 0, 2, 0)};\n\n      li {\n        display: flex;\n        align-items: flex-start;\n        color: ${theme.colors.text.primary};\n        padding: ${theme.spacing(1, 0)};\n      }\n    `,\n    icon: css`\n      color: ${theme.colors.success.main};\n      margin-right: ${theme.spacing(1)};\n    `,\n    link: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    caption: css`\n      font-weight: ${theme.typography.fontWeightLight};\n      margin: ${theme.spacing(1, 0, 0)};\n    `,\n  };\n};\n\nexport const UpgradeContentVertical = ({\n  featureName,\n  description,\n  featureUrl,\n  image,\n}: Omit<UpgradeContentProps, 'listItems' | 'caption'>) => {\n  const styles = useStyles2(getContentVerticalStyles);\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Get started with {featureName}</h3>\n      {description && <h6 className={styles.description}>{description}</h6>}\n      <LinkButton fill={'text'} href={featureUrl} target=\"_blank\" rel=\"noreferrer noopener\">\n        Learn more\n      </LinkButton>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n      </div>\n    </div>\n  );\n};\n\nconst getContentVerticalStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      overflow: auto;\n      height: 100%;\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    media: css`\n      width: 100%;\n      margin-top: ${theme.spacing(2)};\n\n      img {\n        width: 100%;\n      }\n    `,\n  };\n};\n\nconst getImgUrl = (urlOrId: string) => {\n  if (urlOrId.startsWith('http')) {\n    return urlOrId;\n  }\n\n  return '/public/img/enterprise/highlights/' + urlOrId;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { LegacyForms, Tooltip, Icon, Button, useTheme2 } from '@grafana/ui';\nconst { Input } = LegacyForms;\n\nimport { StoreState, TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button size=\"sm\" variant=\"destructive\" onClick={() => this.onRemoveGroup(group)} disabled={isReadOnly}>\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                  disabled={isReadOnly}\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()}>\n                  Add group\n                </Button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://docs.grafana.org/auth/enhanced_ldap/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { includes } from 'lodash';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams>, Themeable2 {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With FGAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return navModel;\n    }\n\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(withTheme2(TeamPages));\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { contextSrv } from 'app/core/core';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\nimport { featureEnabled } from '@grafana/runtime';\nimport { NavModelItem, NavModel } from '@grafana/data';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With FGAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With FGAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and FGAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With FGAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["themes","value","label","id","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","weekStart","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","Button","variant","stylesFactory","css","highlightTrial","expiry","config","trialExpiry","isTrial","WithFeatureToggle","featureToggle","children","LegacyForms","mapDispatchToProps","removeTeamMember","updateTeamMember","connector","connect","TeamMemberRow","member","permission","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","userId","editorsCanAdmin","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","onPermissionChange","labels","map","TagBadge","removeIcon","count","onClick","syncEnabled","src","avatarUrl","login","email","DeleteButton","size","onConfirm","addTeamMember","setSearchMemberQuery","searchMemberQuery","getSearchMemberQuery","team","signedInUser","contextSrv","TeamMembers","isAdding","user","newTeamMember","members","isTeamAdmin","isSignedInUserTeamAdmin","FilterInput","onSearchQueryChange","onToggleAdding","SlideDown","in","CloseButton","UserPicker","onSelected","onUserSelected","onAddUserToTeam","style","width","canListUsers","AccessControlAction","canSetPermissions","P","addPermissionTitle","buttonLabel","resource","resourceId","updateTeam","canWriteTeamSettings","VerticalGroup","defaultValues","formTeam","register","Input","required","description","UpgradeBox","featureName","text","featureId","eventVariant","htmlProps","useStyles2","getUpgradeBoxStyles","useEffect","reportExperimentView","cx","box","icon","inner","LinkButton","button","href","target","rel","borderRadius","shape","fontBase","colors","success","transparent","spacing","typography","fontSize","breakpoints","values","xxl","main","fontWeightLight","primary","UpgradeContent","listItems","image","featureUrl","caption","action","getUpgradeContentStyles","container","list","index","link","fill","media","getImgUrl","alt","maxContrast","urlOrId","startsWith","mapStateToProps","groups","getTeamGroups","loadTeamGroups","addTeamGroup","removeTeamGroup","headerTooltip","TeamGroupSync","event","newGroupId","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","isReadOnly","onRemoveGroup","placement","onAddGroup","onNewGroupIdChanged","TeamSyncUpgradeContent","EmptyListCTA","buttonIcon","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","buttonDisabled","useTheme2","isLight","PageTypes","loadTeam","loadTeamMembers","teamId","parseInt","match","params","getTeam","defaultPage","pageName","page","teamLoadingNav","getTeamLoadingNav","navModel","getNavModel","navIndex","getTeamMembers","TeamPages","text1","text2","toLocaleLowerCase","filter","navItem","textsAreEqual","Members","hideFromTabs","isLoading","isSyncEnabled","featureEnabled","fetchTeam","getCurrentPage","pages","currentPage","includes","renderPage","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","Settings","GroupSync","Page","hideTabsFromNonTeamAdmin","Object","keys","withTheme2","loadTeams","dispatch","teamsLoaded","response","getBackendSrv","get","accessControlQueryParam","perpage","teams","teamLoaded","updateNavIndex","buildNavModel","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","loadingTeam","memberCount","TeamPermissionLevel","img","subTitle","breadcrumbs","active","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","node","child","indexOf","getSearchQuery","searchQuery","getTeamsCount","getTeamsSearchPage","searchPage","currentTeamId","getTeams","regex","RegExp","test","userInMembers","m","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}