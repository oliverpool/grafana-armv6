{"version":3,"file":"cloudwatchPlugin.109a2a405cf7c8a04a9d.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/XrayLinkConfig.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/tokenUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/LinkedToken.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/linkedTokenBuilder.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/datalinks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/logsRetry.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/annotations_query_ctrl.ts","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaLists/commaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/html/html.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLine/oneLine.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/module.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetaInspector.tsx"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { DataSourcePicker } from '@grafana/runtime';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n","import { monacoTypes } from '@grafana/ui';\n\nexport interface TokenTypes {\n  Parenthesis: string;\n  Whitespace: string;\n  Keyword: string;\n  Delimiter: string;\n  Operator: string;\n  Identifier: string;\n  Type: string;\n  Function: string;\n  Number: string;\n  String: string;\n  Variable: string;\n}\n\nexport enum StatementPosition {\n  Unknown,\n  // sql\n  SelectKeyword,\n  AfterSelectKeyword,\n  AfterSelectFuncFirstArgument,\n  AfterFromKeyword,\n  SchemaFuncFirstArgument,\n  SchemaFuncExtraArgument,\n  FromKeyword,\n  AfterFrom,\n  WhereKey,\n  WhereComparisonOperator,\n  WhereValue,\n  AfterWhereValue,\n  AfterGroupByKeywords,\n  AfterGroupBy,\n  AfterOrderByKeywords,\n  AfterOrderByFunction,\n  AfterOrderByDirection,\n  // metric math\n  PredefinedFunction,\n  SearchFuncSecondArg,\n  SearchFuncThirdArg,\n  PredefinedFuncSecondArg,\n  AfterFunction,\n  WithinString,\n}\n\nexport enum SuggestionKind {\n  SelectKeyword,\n  FunctionsWithArguments,\n  Metrics,\n  FromKeyword,\n  SchemaKeyword,\n  Namespaces,\n  LabelKeys,\n  WhereKeyword,\n  GroupByKeywords,\n  OrderByKeywords,\n  FunctionsWithoutArguments,\n  LimitKeyword,\n  SortOrderDirectionKeyword,\n  ComparisonOperators,\n  LabelValues,\n  LogicalOperators,\n\n  // metricmath,\n  KeywordArguments,\n  Operators,\n  Statistic,\n  Period,\n}\n\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport interface Editor {\n  tokenize: (value: string, languageId: string) => monacoTypes.Token[][];\n}\n\nexport interface Range {\n  containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => boolean;\n  fromPositions: (start: monacoTypes.IPosition, end?: monacoTypes.IPosition) => monacoTypes.Range;\n}\n\nexport interface Languages {\n  CompletionItemInsertTextRule: {\n    InsertAsSnippet: 4;\n  };\n  CompletionItemKind: {\n    Function: 1;\n  };\n}\nexport interface Monaco {\n  editor: Editor;\n  Range: Range;\n  languages: Languages;\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.sql',\n  Whitespace: 'white.sql',\n  Keyword: 'keyword.sql',\n  Delimiter: 'delimiter.sql',\n  Operator: 'operator.sql',\n  Identifier: 'identifier.sql',\n  Type: 'type.sql',\n  Function: 'predefined.sql',\n  Number: 'number.sql',\n  String: 'string.sql',\n  Variable: 'variable.sql',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { FROM, SCHEMA, SELECT } from '../language';\nimport { SQLTokenTypes } from './types';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(SQLTokenTypes.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(SQLTokenTypes.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(SQLTokenTypes.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\n","import { monacoTypes } from '@grafana/ui';\nimport { TokenTypes } from './types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null,\n    public tokenTypes: TokenTypes\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === this.tokenTypes.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === this.tokenTypes.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === this.tokenTypes.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === this.tokenTypes.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === this.tokenTypes.String;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === this.tokenTypes.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === this.tokenTypes.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === this.tokenTypes.Function;\n  }\n\n  isNumber(): boolean {\n    return this.type === this.tokenTypes.Number;\n  }\n\n  is(type: string, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n    return value !== undefined ? isType && this.value === value : isType;\n  }\n\n  endsWith(value: string | number | boolean): boolean {\n    return this.value === value || this.value[this.value.length - 1] === value;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { CloudWatchDatasource } from '../datasource';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\n\nimport { LinkedToken } from './LinkedToken';\nimport { LanguageDefinition } from './register';\nimport { StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider {\n  templateVariables: string[];\n  datasource: CloudWatchDatasource;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.templateVariables = this.datasource.getVariables();\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import type { monacoTypes } from '@grafana/ui';\n\nimport { LinkedToken } from './LinkedToken';\nimport { Monaco, TokenTypes } from './types';\nimport { LanguageDefinition } from './register';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  language: LanguageDefinition,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  tokenTypes: TokenTypes\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', language.id);\n\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: tokenTypes.Whitespace,\n        language: language.id,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const newToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null, tokenTypes);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = newToken;\n      }\n\n      if (previous) {\n        previous.next = newToken;\n      }\n      previous = newToken;\n    }\n  }\n\n  return current;\n}\n","import { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterSelectFuncFirstArgument:\n      return [SuggestionKind.Metrics];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.Namespaces, SuggestionKind.SchemaKeyword];\n    case StatementPosition.SchemaFuncFirstArgument:\n      return [SuggestionKind.Namespaces];\n    case StatementPosition.SchemaFuncExtraArgument:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterFrom:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.LabelValues];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.FunctionsWithoutArguments];\n    case StatementPosition.AfterOrderByFunction:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n  }\n\n  return [];\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\nimport { uniq } from 'lodash';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport { SQLTokenTypes } from './types';\nimport {\n  BY,\n  FROM,\n  GROUP,\n  LIMIT,\n  ORDER,\n  SCHEMA,\n  SELECT,\n  ASC,\n  DESC,\n  WHERE,\n  COMPARISON_OPERATORS,\n  LOGICAL_OPERATORS,\n  STATISTICS,\n} from '../language';\nimport { getMetricNameToken, getNamespaceToken } from './tokenUtils';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class SQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(datasource, templateSrv);\n    this.region = datasource.getActualRegion();\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n  }\n\n  setRegion(region: string) {\n    this.region = region;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FunctionsWithoutArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}() `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.Metrics:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              // if a namespace is specified, only suggest metrics for the namespace\n              const metrics = await this.datasource.getMetrics(\n                this.templateSrv.replace(namespaceToken?.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region)\n              );\n              metrics.map((m) => addSuggestion(m.value));\n            } else {\n              // If no namespace is specified in the query, just list all metrics\n              const metrics = await this.datasource.getAllMetrics(this.templateSrv.replace(this.region));\n              uniq(metrics.map((m) => m.metricName)).map((m) => addSuggestion(m, { insertText: m }));\n            }\n          }\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SchemaKeyword:\n          addSuggestion(SCHEMA, {\n            sortText: CompletionItemPriority.High,\n            insertText: `${SCHEMA}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Function,\n          });\n          break;\n\n        case SuggestionKind.Namespaces:\n          const metricNameToken = getMetricNameToken(currentToken);\n          let namespaces = [];\n          if (metricNameToken?.value) {\n            // if a metric is specified, only suggest namespaces that actually have that metric\n            const metrics = await this.datasource.getAllMetrics(this.region);\n            const metricName = this.templateSrv.replace(metricNameToken.value);\n            namespaces = metrics.filter((m) => m.metricName === metricName).map((m) => m.namespace);\n          } else {\n            // if no metric is specified, just suggest all namespaces\n            const ns = await this.datasource.getNamespaces();\n            namespaces = ns.map((n) => n.value);\n          }\n          namespaces.map((n) => addSuggestion(`\"${n}\"`, { insertText: `\"${n}\"` }));\n          break;\n\n        case SuggestionKind.LabelKeys:\n          {\n            const metricNameToken = getMetricNameToken(currentToken);\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              let dimensionFilter = {};\n              let labelKeyTokens;\n              if (statementPosition === StatementPosition.SchemaFuncExtraArgument) {\n                labelKeyTokens = namespaceToken?.getNextUntil(this.tokenTypes.Parenthesis, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              } else if (statementPosition === StatementPosition.AfterGroupByKeywords) {\n                labelKeyTokens = currentToken?.getPreviousUntil(this.tokenTypes.Keyword, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              }\n              dimensionFilter = (labelKeyTokens || []).reduce((acc, curr) => {\n                return { ...acc, [curr.value]: null };\n              }, {});\n              const keys = await this.datasource.getDimensionKeys(\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region),\n                dimensionFilter,\n                metricNameToken?.value ?? ''\n              );\n              keys.map((m) => {\n                const key = /[\\s\\.-]/.test(m.value) ? `\"${m.value}\"` : m.value;\n                addSuggestion(key);\n              });\n            }\n          }\n          break;\n\n        case SuggestionKind.LabelValues:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            const metricNameToken = getMetricNameToken(currentToken);\n            const labelKey = currentToken?.getPreviousNonWhiteSpaceToken()?.getPreviousNonWhiteSpaceToken();\n            if (namespaceToken?.value && labelKey?.value && metricNameToken?.value) {\n              const values = await this.datasource.getDimensionValues(\n                this.templateSrv.replace(this.region),\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(metricNameToken.value),\n                this.templateSrv.replace(labelKey.value),\n                {}\n              );\n              values.map((o) =>\n                addSuggestion(`'${o.value}'`, { insertText: `'${o.value}' `, command: TRIGGER_SUGGEST })\n              );\n            }\n          }\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          COMPARISON_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} `, sortText: CompletionItemPriority.MediumLow });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateVariables.map((v) => {\n      addSuggestion(v, {\n        range,\n        label: v,\n        insertText: v,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href=\"https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#service-quotas\"\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { sortedUniq } from 'lodash';\nimport { lastValueFrom } from 'rxjs';\nimport Prism, { Grammar } from 'prismjs';\nimport { AbsoluteTimeRange, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItemGroup, SearchFunctionType, Token, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport syntax, {\n  AGGREGATION_FUNCTIONS_STATS,\n  BOOLEAN_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  FIELD_AND_FILTER_FUNCTIONS,\n  IP_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  QUERY_COMMANDS,\n  STRING_FUNCTIONS,\n} from './syntax';\nimport { CloudWatchQuery, TSDBResponse } from './types';\nimport { CloudWatchDatasource } from './datasource';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroupNames?: string[];\n  region: string;\n};\n\nexport class CloudWatchLanguageProvider extends LanguageProvider {\n  started = false;\n  declare initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<TSDBResponse> => {\n    return lastValueFrom(this.datasource.awsRequest(url, params));\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      (token) =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchedFieldsCache:\n    | {\n        time: number;\n        logGroups: string[];\n        fields: string[];\n      }\n    | undefined;\n\n  private fetchFields = async (logGroups: string[], region: string): Promise<string[]> => {\n    if (\n      this.fetchedFieldsCache &&\n      Date.now() - this.fetchedFieldsCache.time < 30 * 1000 &&\n      sortedUniq(this.fetchedFieldsCache.logGroups).join('|') === sortedUniq(logGroups).join('|')\n    ) {\n      return this.fetchedFieldsCache.fields;\n    }\n\n    const results = await Promise.all(\n      logGroups.map((logGroup) => this.datasource.getLogGroupFields({ logGroupName: logGroup, region }))\n    );\n\n    const fields = [\n      ...new Set<string>(\n        results.reduce((acc: string[], cur) => acc.concat(cur.logGroupFields?.map((f) => f.name) as string[]), [])\n      ).values(),\n    ];\n\n    this.fetchedFieldsCache = {\n      time: Date.now(),\n      logGroups,\n      fields,\n    };\n\n    return fields;\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    const functionSuggestions: CompletionItemGroup[] = [\n      {\n        searchFunctionType: SearchFunctionType.Prefix,\n        label: 'Functions',\n        items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS),\n      },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(\n        context?.logGroupNames ?? [],\n        context?.region || 'default'\n      );\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach((group) => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            searchFunctionType: SearchFunctionType.Prefix,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(\n      context?.logGroupNames ?? [],\n      context?.region || 'default'\n    );\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [{ searchFunctionType: SearchFunctionType.Prefix, label: 'Commands', items: QUERY_COMMANDS }],\n    };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS },\n      ],\n    };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS },\n      ],\n    };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (logGroups: string[], region: string): Promise<TypeaheadOutput> => {\n    const fields = await this.fetchFields(logGroups, region);\n\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map((field) => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map((funcName) => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import { TokenTypes } from '../../monarch/types';\n\nexport const MetricMathTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.cloudwatch-MetricMath',\n  Whitespace: 'white.cloudwatch-MetricMath',\n  Keyword: 'keyword.cloudwatch-MetricMath',\n  Delimiter: 'delimiter.cloudwatch-MetricMath',\n  Operator: 'operator.cloudwatch-MetricMath',\n  Identifier: 'identifier.cloudwatch-MetricMath',\n  Type: 'type.cloudwatch-MetricMath',\n  Function: 'predefined.cloudwatch-MetricMath',\n  Number: 'number.cloudwatch-MetricMath',\n  String: 'string.cloudwatch-MetricMath',\n  Variable: 'variable.cloudwatch-MetricMath',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { MetricMathTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n\n  if (currentToken && currentToken.isString()) {\n    return StatementPosition.WithinString;\n  }\n\n  if (currentToken && previousNonWhiteSpace) {\n    const currentFunction = currentToken.getPreviousOfType(MetricMathTokenTypes.Function);\n    const isAfterComma = previousNonWhiteSpace.is(MetricMathTokenTypes.Delimiter, ',');\n    const isWithinSearch = currentFunction && currentFunction.value === 'SEARCH';\n    const allTokensAfterStartOfSearch =\n      currentToken.getPreviousUntil(MetricMathTokenTypes.Function, [], 'SEARCH') || [];\n\n    if (isWithinSearch) {\n      // if there's only one ' then we're still within the first arg\n      if (allTokensAfterStartOfSearch.filter(({ value }) => value === \"'\").length === 1) {\n        return StatementPosition.WithinString;\n      }\n\n      // if there was a , before the last , and it happened after the start of SEARCH\n      const lastComma = previousNonWhiteSpace.getPreviousOfType(MetricMathTokenTypes.Delimiter, ',');\n      if (lastComma) {\n        const lastCommaIsAfterSearch =\n          lastComma.range.startColumn > currentFunction.range.startColumn &&\n          lastComma.range.startLineNumber >= currentFunction.range.startLineNumber;\n        if (lastCommaIsAfterSearch) {\n          return StatementPosition.SearchFuncThirdArg;\n        }\n      }\n\n      // otherwise assume it's the second arg\n      return StatementPosition.SearchFuncSecondArg;\n    }\n\n    if (!isWithinSearch && isAfterComma) {\n      return StatementPosition.PredefinedFuncSecondArg;\n    }\n  }\n\n  if (previousNonWhiteSpace?.endsWith(')')) {\n    return StatementPosition.AfterFunction;\n  }\n\n  if (!currentToken || !currentToken.isString()) {\n    return StatementPosition.PredefinedFunction;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.PredefinedFunction:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.PredefinedFuncSecondArg:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.KeywordArguments];\n    case StatementPosition.AfterFunction:\n      return [SuggestionKind.Operators];\n    case StatementPosition.SearchFuncSecondArg:\n      return [SuggestionKind.Statistic];\n    case StatementPosition.SearchFuncThirdArg:\n      return [SuggestionKind.Period];\n  }\n\n  return [];\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport {\n  METRIC_MATH_FNS,\n  METRIC_MATH_KEYWORDS,\n  METRIC_MATH_OPERATORS,\n  METRIC_MATH_PERIODS,\n  METRIC_MATH_STATISTIC_KEYWORD_STRINGS,\n} from '../language';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { MetricMathTokenTypes } from './types';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class MetricMathCompletionItemProvider extends CompletionItemProvider {\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(datasource, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = MetricMathTokenTypes;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.FunctionsWithArguments:\n          METRIC_MATH_FNS.map((f) =>\n            addSuggestion(f, {\n              insertText: f === 'SEARCH' ? `${f}('$0')` : `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.KeywordArguments:\n          METRIC_MATH_KEYWORDS.map((s) =>\n            addSuggestion(s, {\n              insertText: s,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.Statistic:\n          METRIC_MATH_STATISTIC_KEYWORD_STRINGS.map((s) =>\n            addSuggestion(s, {\n              insertText: `'${s}', `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Operators:\n          METRIC_MATH_OPERATORS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Period:\n          METRIC_MATH_PERIODS.map((s, idx) =>\n            addSuggestion(s.toString(), {\n              kind: monaco.languages.CompletionItemKind.Value,\n              sortText: String.fromCharCode(97 + idx), // converts index 0, 1 to \"a\", \"b\", etc needed to show the time periods in numerical order\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateVariables.map((v) => {\n      addSuggestion(v, {\n        range,\n        label: v,\n        insertText: v,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  range: TimeRange,\n  replaceFn: ReplaceFn,\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, true, fieldName);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string) {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  } as DataLink;\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string\n) {\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = target.logGroupNames?.map((logGroup: string) => replace(logGroup, 'log groups')) ?? [];\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n","import { Observable, Subscription } from 'rxjs';\nimport { FetchError, toDataQueryResponse } from '@grafana/runtime';\nimport { StartQueryRequest } from '../types';\nimport { DataFrame, DataFrameJSON, DataQueryError } from '@grafana/data';\n\ntype Result = { frames: DataFrameJSON[]; error?: string };\n\nconst defaultTimeout = 30_000;\n\n/**\n * A retry strategy specifically for cloud watch logs query. Cloud watch logs queries need first starting the query\n * and the polling for the results. The start query can fail because of the concurrent queries rate limit,\n * and so we hove to retry the start query call if there is already lot of queries running.\n *\n * As we send multiple queries in single request some can fail and some can succeed and we have to also handle those\n * cases by only retrying the failed queries. We retry the failed queries until we hit the time limit or all queries\n * succeed and only then we pass the data forward. This means we wait longer but makes the code a bit simpler as we\n * can treat starting the query and polling as steps in a pipeline.\n * @param queryFun\n * @param targets\n * @param options\n */\nexport function runWithRetry(\n  queryFun: (targets: StartQueryRequest[]) => Observable<DataFrame[]>,\n  targets: StartQueryRequest[],\n  options: {\n    timeout?: number;\n    timeoutFunc?: (retry: number, startTime: number) => boolean;\n    retryWaitFunc?: (retry: number) => number;\n  } = {}\n): Observable<{ frames: DataFrame[]; error?: DataQueryError }> {\n  const startTime = new Date();\n  let retries = 0;\n  let timerID: any;\n  let subscription: Subscription;\n  let collected = {};\n\n  const timeoutFunction = options.timeoutFunc\n    ? options.timeoutFunc\n    : (retry: number, startTime: number) => {\n        return Date.now() >= startTime + (options.timeout === undefined ? defaultTimeout : options.timeout);\n      };\n\n  const retryWaitFunction = options.retryWaitFunc\n    ? options.retryWaitFunc\n    : (retry: number) => {\n        return Math.pow(2, retry) * 1000 + Math.random() * 100;\n      };\n\n  return new Observable((observer) => {\n    // Run function is where the logic takes place. We have it in a function so we can call it recursively.\n    function run(currentQueryParams: StartQueryRequest[]) {\n      subscription = queryFun(currentQueryParams).subscribe({\n        next(frames) {\n          // In case we successfully finished, merge the current response with whatever we already collected.\n          const collectedPreviously = toDataQueryResponse({ data: { results: collected } }).data || [];\n          observer.next({ frames: [...collectedPreviously, ...frames] });\n          observer.complete();\n        },\n        error(error: FetchError<{ results?: Record<string, Result> }> | string) {\n          // In case of error we first try to figure out what kind of error it is\n\n          // This means it was a generic 500 error probably so we just pass it on\n          if (typeof error === 'string') {\n            observer.error(error);\n            return;\n          }\n\n          // In case of multiple queries this some can error while some may be ok\n          const errorData = splitErrorData(error);\n\n          if (!errorData) {\n            // Not sure what happened but the error structure wasn't what we expected\n            observer.error(error);\n            return;\n          }\n\n          if (!errorData!.errors.length) {\n            // So there is no limit error but some other errors so nothing to retry so we just pass it as it would be\n            // otherwise.\n            observer.error(error);\n            return;\n          }\n\n          if (timeoutFunction(retries, startTime.valueOf())) {\n            // We timed out but we could have started some queries\n            if (Object.keys(collected).length || Object.keys(errorData.good).length) {\n              const dataResponse = toDataQueryResponse({\n                data: {\n                  results: {\n                    ...(errorData.good ?? {}),\n                    ...(collected ?? {}),\n                  },\n                },\n              });\n              dataResponse.error = {\n                ...(dataResponse.error ?? {}),\n                message: `Some queries timed out: ${errorData.errorMessage}`,\n              };\n              // So we consider this a partial success and pass the data forward but also with error to be shown to\n              // the user.\n              observer.next({\n                error: dataResponse.error,\n                frames: dataResponse.data,\n              });\n              observer.complete();\n            } else {\n              // So we timed out and there was no data to pass forward so we just pass the error\n              const dataResponse = toDataQueryResponse({ data: { results: error.data?.results ?? {} } });\n              observer.error(dataResponse.error);\n            }\n            return;\n          }\n\n          collected = {\n            ...collected,\n            ...errorData!.good,\n          };\n\n          timerID = setTimeout(\n            () => {\n              retries++;\n              console.log(`Attempt ${retries}`);\n              run(errorData!.errors);\n            },\n            // We want to know how long to wait for the next retry. First time this will be 0.\n            retryWaitFunction(retries + 1)\n          );\n        },\n      });\n    }\n    run(targets);\n    return () => {\n      // We clear only the latest timer and subscription but the observable should complete after one response so\n      // there should not be more things running at the same time.\n      clearTimeout(timerID);\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction splitErrorData(error: FetchError<{ results?: Record<string, Result> }>) {\n  const results = error.data?.results;\n  if (!results) {\n    return undefined;\n  }\n  return Object.keys(results).reduce<{\n    errors: StartQueryRequest[];\n    good: Record<string, Result>;\n    errorMessage: string;\n  }>(\n    (acc, refId) => {\n      if (results[refId].error?.startsWith('LimitExceededException')) {\n        acc.errorMessage = results[refId].error!;\n        acc.errors.push(error.config.data.queries.find((q: any) => q.refId === refId));\n      } else {\n        acc.good[refId] = results[refId];\n      }\n      return acc;\n    },\n    { errors: [], good: {}, errorMessage: '' }\n  );\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>((subscriber) => {\n    const state: IntervalState = {\n      subscriber,\n      counter: 0,\n      period: startPeriod,\n      step,\n      endPeriod,\n    };\n\n    subscriber.add(scheduler.schedule(dispatch, startPeriod, state));\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state?: IntervalState) {\n  if (!state) {\n    return;\n  }\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import {\n  DataFrame,\n  DataQueryError,\n  DataQueryErrorType,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  dateMath,\n  FieldType,\n  LoadingState,\n  LogRowModel,\n  rangeUtil,\n  ScopedVars,\n  TableData,\n  TimeRange,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { DataSourceWithBackend, FetchError, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\nimport { cloneDeep, find, findLast, isEmpty, isString, set } from 'lodash';\nimport React from 'react';\nimport { from, lastValueFrom, merge, Observable, of, throwError, zip } from 'rxjs';\nimport { catchError, concatMap, finalize, map, mergeMap, repeat, scan, share, takeWhile, tap } from 'rxjs/operators';\n\nimport { SQLCompletionItemProvider } from './cloudwatch-sql/completion/CompletionItemProvider';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport { CloudWatchLanguageProvider } from './language_provider';\nimport memoizedDebounce from './memoizedDebounce';\nimport { MetricMathCompletionItemProvider } from './metric-math/completion/CompletionItemProvider';\nimport {\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchLogsRequest,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  DescribeLogGroupsRequest,\n  Dimensions,\n  GetLogEventsRequest,\n  GetLogGroupFieldsRequest,\n  GetLogGroupFieldsResponse,\n  isCloudWatchLogsQuery,\n  LogAction,\n  MetricEditorMode,\n  MetricFindSuggestData,\n  MetricQuery,\n  MetricQueryType,\n  MetricRequest,\n  StartQueryRequest,\n  TSDBResponse,\n} from './types';\nimport { addDataLinksToLogsResponse } from './utils/datalinks';\nimport { runWithRetry } from './utils/logsRetry';\nimport { increasingInterval } from './utils/rxjs/increasingInterval';\n\nconst DS_QUERY_ENDPOINT = '/api/ds/query';\n\n// Constants also defined in tsdb/cloudwatch/cloudwatch.go\nconst LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nconst LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport const MAX_ATTEMPTS = 5;\n\nexport class CloudWatchDatasource\n  extends DataSourceWithBackend<CloudWatchQuery, CloudWatchJsonData>\n  implements DataSourceWithLogsContextSupport\n{\n  proxyUrl: any;\n  defaultRegion: any;\n  datasourceName: string;\n  languageProvider: CloudWatchLanguageProvider;\n  sqlCompletionItemProvider: SQLCompletionItemProvider;\n\n  metricMathCompletionItemProvider: MetricMathCompletionItemProvider;\n\n  tracingDataSourceUid?: string;\n  logsTimeout: string;\n\n  type = 'cloudwatch';\n  standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n\n  debouncedAlert: (datasourceName: string, region: string) => void = memoizedDebounce(\n    displayAlert,\n    AppNotificationTimeout.Error\n  );\n  debouncedCustomAlert: (title: string, message: string) => void = memoizedDebounce(\n    displayCustomError,\n    AppNotificationTimeout.Error\n  );\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }> = {};\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.languageProvider = new CloudWatchLanguageProvider(this);\n    this.tracingDataSourceUid = instanceSettings.jsonData.tracingDatasourceUid;\n    this.logsTimeout = instanceSettings.jsonData.logsTimeout || '15m';\n    this.sqlCompletionItemProvider = new SQLCompletionItemProvider(this, this.templateSrv);\n    this.metricMathCompletionItemProvider = new MetricMathCompletionItemProvider(this, this.templateSrv);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = cloneDeep(options);\n\n    let queries = options.targets.filter((item) => item.id !== '' || item.hide !== true);\n    const { logQueries, metricsQueries } = this.getTargetsByQueryMode(queries);\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length > 0) {\n      dataQueryResponses.push(this.handleLogQueries(logQueries, options));\n    }\n\n    if (metricsQueries.length > 0) {\n      dataQueryResponses.push(this.handleMetricQueries(metricsQueries, options));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  /**\n   * Handle log query. The log query works by starting the query on the CloudWatch and then periodically polling for\n   * results.\n   * @param logQueries\n   * @param options\n   */\n  handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validLogQueries = logQueries.filter((item) => item.logGroupNames?.length);\n    if (logQueries.length > validLogQueries.length) {\n      return of({ data: [], error: { message: 'Log group is required' } });\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validLogQueries)) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const queryParams = logQueries.map((target: CloudWatchLogsQuery) => ({\n      queryString: target.expression || '',\n      refId: target.refId,\n      logGroupNames: target.logGroupNames,\n      region: this.replace(this.getActualRegion(target.region), options.scopedVars, true, 'region'),\n    }));\n\n    return runWithRetry(\n      (targets: StartQueryRequest[]) => {\n        return this.makeLogActionRequest('StartQuery', targets, {\n          makeReplacements: true,\n          scopedVars: options.scopedVars,\n          skipCache: true,\n        });\n      },\n      queryParams,\n      {\n        timeout: rangeUtil.intervalToMs(this.logsTimeout),\n      }\n    ).pipe(\n      mergeMap(({ frames, error }: { frames: DataFrame[]; error?: DataQueryError }) =>\n        // This queries for the results\n        this.logsQuery(\n          frames.map((dataFrame) => ({\n            queryId: dataFrame.fields[0].values.get(0),\n            region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n            refId: dataFrame.refId!,\n            statsGroups: (logQueries.find((target) => target.refId === dataFrame.refId)! as CloudWatchLogsQuery)\n              .statsGroups,\n          }))\n        ).pipe(\n          map((response: DataQueryResponse) => {\n            if (!response.error && error) {\n              response.error = error;\n            }\n            return response;\n          })\n        )\n      ),\n      mergeMap((dataQueryResponse) => {\n        return from(\n          (async () => {\n            await addDataLinksToLogsResponse(\n              dataQueryResponse,\n              options,\n              this.timeSrv.timeRange(),\n              this.replace.bind(this),\n              this.getActualRegion.bind(this),\n              this.tracingDataSourceUid\n            );\n\n            return dataQueryResponse;\n          })()\n        );\n      })\n    );\n  };\n\n  filterMetricQuery({\n    region,\n    metricQueryType,\n    metricEditorMode,\n    expression,\n    metricName,\n    namespace,\n    sqlExpression,\n    statistic,\n    dimensions,\n    ...rest\n  }: CloudWatchMetricsQuery): boolean {\n    if (!region) {\n      return false;\n    }\n\n    if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Builder) {\n      return !!namespace && !!metricName && !!statistic;\n    } else if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Code) {\n      return !!expression;\n    } else if (metricQueryType === MetricQueryType.Query) {\n      // still TBD how to validate the visual query builder for SQL\n      return !!sqlExpression;\n    }\n\n    throw new Error('invalid metric editor mode');\n  }\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validMetricsQueries = metricQueries\n      .filter(this.filterMetricQuery)\n      .map((item: CloudWatchMetricsQuery): MetricQuery => {\n        item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\n        item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n        item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n        item.dimensions = this.convertDimensionFormat(item.dimensions ?? {}, options.scopedVars);\n        item.statistic = this.templateSrv.replace(item.statistic, options.scopedVars);\n        item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n        item.id = this.templateSrv.replace(item.id, options.scopedVars);\n        item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n        item.sqlExpression = this.templateSrv.replace(item.sqlExpression, options.scopedVars, 'raw');\n\n        return {\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          ...item,\n          type: 'timeSeriesQuery',\n          datasource: this.getRef(),\n        };\n      });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request = {\n      from: options?.range?.from.valueOf().toString(),\n      to: options?.range?.to.valueOf().toString(),\n      queries: validMetricsQueries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  };\n\n  /**\n   * Checks progress and polls data of a started logs query with some retry logic.\n   * @param queryParams\n   */\n  logsQuery(\n    queryParams: Array<{\n      queryId: string;\n      refId: string;\n      limit?: number;\n      region: string;\n      statsGroups?: string[];\n    }>\n  ): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach((param) => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0 ?? false,\n      };\n    });\n\n    const dataFrames = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap((_) => this.makeLogActionRequest('GetQueryResults', queryParams, { skipCache: true })),\n      repeat(),\n      share()\n    );\n\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(\n        ({ failures, prevRecordsMatched }, frames) => {\n          failures++;\n          for (const frame of frames) {\n            const recordsMatched = frame.meta?.stats?.find((stat) => stat.displayName === 'Records scanned')?.value!;\n            if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n              failures = 0;\n            }\n            prevRecordsMatched[frame.refId!] = recordsMatched;\n          }\n\n          return { failures, prevRecordsMatched };\n        },\n        { failures: 0, prevRecordsMatched: {} as Record<string, number> }\n      ),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        if (failedAttempts >= MAX_ATTEMPTS) {\n          for (const frame of dataFrames) {\n            set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every((dataFrame) =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          error:\n            failedAttempts >= MAX_ATTEMPTS\n              ? {\n                  message: `error: query timed out after ${MAX_ATTEMPTS} attempts`,\n                  type: DataQueryErrorType.Timeout,\n                }\n              : undefined,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries());\n  }\n\n  stopQueries() {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map((logQuery) => ({ queryId: logQuery.id, region: logQuery.region })),\n        {\n          makeReplacements: false,\n          skipCache: true,\n        }\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  async describeLogGroups(params: DescribeLogGroupsRequest): Promise<string[]> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('DescribeLogGroups', [params]));\n\n    const logGroupNames = dataFrames[0]?.fields[0]?.values.toArray() ?? [];\n    return logGroupNames;\n  }\n\n  async getLogGroupFields(params: GetLogGroupFieldsRequest): Promise<GetLogGroupFieldsResponse> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogGroupFields', [params]));\n\n    const fieldNames = dataFrames[0].fields[0].values.toArray();\n    const fieldPercentages = dataFrames[0].fields[1].values.toArray();\n    const getLogGroupFieldsResponse = {\n      logGroupFields: fieldNames.map((val, i) => ({ name: val, percent: fieldPercentages[i] })) ?? [],\n    };\n\n    return getLogGroupFieldsResponse;\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = 'BACKWARD' }: RowContextOptions = {}\n  ): Promise<{ data: DataFrame[] }> => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      limit,\n      startFromHead: direction !== 'BACKWARD',\n      logGroupName: parseLogGroupName(logField!.values.get(row.rowIndex)),\n      logStreamName: logStreamField!.values.get(row.rowIndex),\n    };\n\n    if (direction === 'BACKWARD') {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogEvents', [requestParams]));\n\n    return {\n      data: dataFrames,\n    };\n  };\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, options: any) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars) as any;\n    if (period && period.toLowerCase() !== 'auto') {\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (period < 1) {\n        period = 1;\n      }\n    }\n\n    return period || '';\n  }\n\n  performTimeSeriesQuery(request: MetricRequest, { from, to }: TimeRange): Observable<any> {\n    return this.awsRequest(DS_QUERY_ENDPOINT, request).pipe(\n      map((res) => {\n        const dataframes: DataFrame[] = toDataQueryResponse({ data: res }).data;\n        if (!dataframes || dataframes.length <= 0) {\n          return { data: [] };\n        }\n\n        const lastError = findLast(res.results, (v) => !!v.error);\n\n        dataframes.forEach((frame) => {\n          frame.fields.forEach((field) => {\n            if (field.type === FieldType.time) {\n              // field.config.interval is populated in order for Grafana to fill in null values at frame intervals\n              field.config.interval = frame.meta?.custom?.period * 1000;\n            }\n          });\n        });\n\n        return {\n          data: dataframes,\n          error: lastError ? { message: lastError.error } : null,\n        };\n      }),\n      catchError((err) => {\n        const isFrameError = err.data.results;\n\n        // Error is not frame specific\n        if (!isFrameError && err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.message = err.data.error;\n          return throwError(() => err);\n        }\n\n        // The error is either for a specific frame or for all the frames\n        const results: Array<{ error?: string }> = Object.values(err.data.results);\n        const firstErrorResult = results.find((r) => r.error);\n        if (firstErrorResult) {\n          err.message = firstErrorResult.error;\n        }\n\n        if (results.some((r) => r.error && /^Throttling:.*/.test(r.error))) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }) =>\n              (refId && !failedRedIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n          regionsAffected.forEach((region) => {\n            const actualRegion = this.getActualRegion(region);\n            if (actualRegion) {\n              this.debouncedAlert(this.datasourceName, actualRegion);\n            }\n          });\n        }\n\n        return throwError(() => err);\n      })\n    );\n  }\n\n  transformSuggestDataFromDataframes(suggestData: TSDBResponse): MetricFindSuggestData[] {\n    const frames = toDataQueryResponse({ data: suggestData }).data as DataFrame[];\n    const table = toLegacyResponseData(frames[0]) as TableData;\n\n    return table.rows.map(([text, value]) => ({\n      text,\n      value,\n      label: value,\n    }));\n  }\n\n  doMetricQueryRequest(subtype: string, parameters: any): Promise<MetricFindSuggestData[]> {\n    const range = this.timeSrv.timeRange();\n    return lastValueFrom(\n      this.awsRequest(DS_QUERY_ENDPOINT, {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasource: this.getRef(),\n            type: 'metricFindQuery',\n            subtype: subtype,\n            ...parameters,\n          },\n        ],\n      }).pipe(\n        map((r) => {\n          return this.transformSuggestDataFromDataframes(r);\n        })\n      )\n    );\n  }\n\n  makeLogActionRequest(\n    subtype: LogAction,\n    queryParams: CloudWatchLogsRequest[],\n    options: {\n      scopedVars?: ScopedVars;\n      makeReplacements?: boolean;\n      skipCache?: boolean;\n    } = {\n      makeReplacements: true,\n      skipCache: false,\n    }\n  ): Observable<DataFrame[]> {\n    const range = this.timeSrv.timeRange();\n\n    const requestParams = {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: queryParams.map((param: CloudWatchLogsRequest) => ({\n        refId: (param as StartQueryRequest).refId || 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasource: this.getRef(),\n        type: 'logAction',\n        subtype: subtype,\n        ...param,\n      })),\n    };\n\n    if (options.makeReplacements) {\n      requestParams.queries.forEach((query: CloudWatchLogsRequest) => {\n        const fieldsToReplace: Array<\n          keyof (GetLogEventsRequest & StartQueryRequest & DescribeLogGroupsRequest & GetLogGroupFieldsRequest)\n        > = ['queryString', 'logGroupNames', 'logGroupName', 'logGroupNamePrefix'];\n\n        const anyQuery: any = query;\n        for (const fieldName of fieldsToReplace) {\n          if (query.hasOwnProperty(fieldName)) {\n            if (Array.isArray(anyQuery[fieldName])) {\n              anyQuery[fieldName] = anyQuery[fieldName].map((val: string) =>\n                this.replace(val, options.scopedVars, true, fieldName)\n              );\n            } else {\n              anyQuery[fieldName] = this.replace(anyQuery[fieldName], options.scopedVars, true, fieldName);\n            }\n          }\n        }\n        // TODO: seems to be some sort of bug that we don't really send region with all queries. This means\n        //  if you select different than default region in editor you will get results for autocomplete from wrong\n        //  region.\n        if (anyQuery.region) {\n          anyQuery.region = this.replace(anyQuery.region, options.scopedVars, true, 'region');\n          anyQuery.region = this.getActualRegion(anyQuery.region);\n        }\n      });\n    }\n\n    const resultsToDataFrames = (val: any): DataFrame[] => toDataQueryResponse(val).data || [];\n    let headers = {};\n    if (options.skipCache) {\n      headers = {\n        'X-Cache-Skip': true,\n      };\n    }\n\n    return this.awsRequest(DS_QUERY_ENDPOINT, requestParams, headers).pipe(\n      map((response) => resultsToDataFrames({ data: response })),\n      catchError((err: FetchError) => {\n        if (err.status === 400) {\n          throw err;\n        }\n\n        if (err.data?.error) {\n          throw err.data.error;\n        } else if (err.data?.message) {\n          // In PROD we do not supply .error\n          throw err.data.message;\n        }\n\n        throw err;\n      })\n    );\n  }\n\n  getRegions(): Promise<Array<{ label: string; value: string; text: string }>> {\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  async getMetrics(namespace: string | undefined, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getAllMetrics(region: string): Promise<Array<{ metricName: string; namespace: string }>> {\n    const values = await this.doMetricQueryRequest('all_metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n    });\n\n    return values.map((v) => ({ metricName: v.label, namespace: v.text }));\n  }\n\n  async getDimensionKeys(\n    namespace: string | undefined,\n    region: string,\n    dimensionFilters: Dimensions = {},\n    metricName = ''\n  ) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      dimensionFilters: this.convertDimensionFormat(dimensionFilters, {}),\n      metricName,\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string | undefined,\n    metricName: string | undefined,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  async metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    const statsQuery = query.match(/^statistics\\(\\)/);\n    if (statsQuery) {\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistic = this.templateSrv.replace(annotation.statistic);\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistic: statistic,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return lastValueFrom(\n      this.awsRequest(DS_QUERY_ENDPOINT, {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: [\n          {\n            refId: 'annotationQuery',\n            datasource: this.getRef(),\n            type: 'annotationQuery',\n            ...parameters,\n          },\n        ],\n      }).pipe(\n        map((r) => {\n          const frames = toDataQueryResponse({ data: r }).data as DataFrame[];\n          const table = toLegacyResponseData(frames[0]) as TableData;\n          return table.rows.map((v) => ({\n            annotation: annotation,\n            time: Date.parse(v[0]),\n            title: v[1],\n            tags: [v[2]],\n            text: v[3],\n          }));\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      this.templateSrv.variableExists(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.variableExists(logGroup)) ||\n      find(target.dimensions, (v, k) => this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v))\n    );\n  }\n\n  async testDatasource() {\n    // use billing metrics for test\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    try {\n      await this.getDimensionValues(region ?? '', namespace, metricName, 'ServiceName', dimensions);\n      return {\n        status: 'success',\n        message: 'Data source is working',\n      };\n    } catch (error) {\n      return toTestingStatus(error);\n    }\n  }\n\n  awsRequest(url: string, data: MetricRequest, headers: Record<string, any> = {}): Observable<TSDBResponse> {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n      headers,\n    };\n\n    return getBackendSrv()\n      .fetch<TSDBResponse>(options)\n      .pipe(map((result) => result.data));\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  showContextToggle() {\n    return true;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: Dimensions, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      if (!value) {\n        return { ...result, [key]: null };\n      }\n\n      const valueVar = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if ((valueVar as unknown as VariableWithMultiSupport).multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && !!target) {\n      const variable = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && (variable as unknown as VariableWithMultiSupport).multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (query.queryMode === 'Logs') {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  getTargetsByQueryMode = (targets: CloudWatchQuery[]) => {\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n\n    targets.forEach((query) => {\n      const mode = query.queryMode ?? 'Metrics';\n      if (mode === 'Logs') {\n        logQueries.push(query as CloudWatchLogsQuery);\n      } else {\n        metricsQueries.push(query as CloudWatchMetricsQuery);\n      }\n    });\n\n    return {\n      logQueries,\n      metricsQueries,\n    };\n  };\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      region: this.getActualRegion(this.replace(query.region, scopedVars)),\n      expression: this.replace(query.expression, scopedVars),\n\n      ...(!isCloudWatchLogsQuery(query) && this.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<CloudWatchMetricsQuery, 'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions' | 'sqlExpression'> {\n    return {\n      alias: this.replace(query.alias, scopedVars),\n      metricName: this.replace(query.metricName, scopedVars),\n      namespace: this.replace(query.namespace, scopedVars),\n      period: this.replace(query.period, scopedVars),\n      sqlExpression: this.replace(query.sqlExpression, scopedVars),\n      dimensions: Object.entries(query.dimensions ?? {}).reduce((prev, [key, value]) => {\n        if (Array.isArray(value)) {\n          return { ...prev, [key]: value };\n        }\n\n        return { ...prev, [this.replace(key, scopedVars)]: this.replace(value, scopedVars) };\n      }, {}),\n    };\n  }\n}\n\nfunction withTeardown<T = any>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const innerSub = observable.subscribe({\n      next: (val) => subscriber.next(val),\n      error: (err) => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.substr(colonIndex + 1);\n}\n","import { defaultsDeep } from 'lodash';\nimport { CloudWatchAnnotationQuery } from './types';\n\nexport class CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n\n    defaultsDeep(this.annotation, {\n      namespace: '',\n      metricName: '',\n      expression: '',\n      dimensions: {},\n      region: 'default',\n      id: '',\n      alias: '',\n      statistic: 'Average',\n      matchExact: true,\n      prefixMatching: false,\n      actionPrefix: '',\n      alarmNamePrefix: '',\n    });\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(query: CloudWatchAnnotationQuery) {\n    Object.assign(this.annotation, query);\n  }\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import React, { PureComponent } from 'react';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport Prism from 'prismjs';\nimport tokenizer from '../syntax';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\nimport { css, cx } from '@emotion/css';\nimport { CloudWatchQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudWatchQuery>,\n  { userExamples: string[] }\n> {\n  onClickExample(query: CloudWatchQuery) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={(e) =>\n          this.onClickExample({ refId: 'A', expression: expr, queryMode: 'Logs', region: 'default', id: 'A' })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </div>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`${cat.category}-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>CloudWatch Logs cheat sheet</h3>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { CloudWatchAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\nimport { CloudWatchLogsQueryEditor } from './components/LogsQueryEditor';\nimport { PanelQueryEditor } from './components/PanelQueryEditor';\nimport { MetaInspector } from './components/MetaInspector';\nimport LogsCheatSheet from './components/LogsCheatSheet';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setQueryEditorHelp(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(PanelQueryEditor)\n  .setMetadataInspector(MetaInspector)\n  .setExploreMetricsQueryField(PanelQueryEditor)\n  .setExploreLogsQueryField(CloudWatchLogsQueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n","import React, { FC, useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { Input, InlineField } from '@grafana/ui';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConnectionConfig } from '@grafana/aws-sdk';\n\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\n\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\nimport { CloudWatchDatasource } from '../datasource';\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport const ConfigEditor: FC<Props> = (props: Props) => {\n  const { options } = props;\n\n  const datasource = useDatasource(options.name);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(props.options.jsonData.logsTimeout);\n\n  return (\n    <>\n      <ConnectionConfig\n        {...props}\n        loadRegions={\n          datasource &&\n          (() => datasource!.getRegions().then((r) => r.filter((r) => r.value !== 'default').map((v) => v.value)))\n        }\n      >\n        <InlineField label=\"Namespaces of Custom Metrics\" labelWidth={28} tooltip=\"Namespaces of Custom Metrics.\">\n          <Input\n            width={60}\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </InlineField>\n      </ConnectionConfig>\n\n      <h3 className=\"page-heading\">CloudWatch Logs</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Timeout\"\n          labelWidth={28}\n          tooltip='Custom timout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            width={60}\n            placeholder=\"15m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </InlineField>\n      </div>\n\n      <XrayLinkConfig\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </>\n  );\n};\n\nfunction useAuthenticationWarning(jsonData: CloudWatchJsonData) {\n  const addWarning = (message: string) => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning(\n        'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles'\n      );\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(datasourceName: string) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    getDatasourceSrv()\n      .loadDatasource(datasourceName)\n      .then((datasource) => {\n        // It's really difficult to type .loadDatasource() because it's inherently untyped as it involves two JSON.parse()'s\n        // So a \"as\" type assertion here is a necessary evil.\n        setDatasource(datasource as CloudWatchDatasource);\n      });\n  }, [datasourceName]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          setErr(e.toString());\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n","import React, { useMemo } from 'react';\nimport { MetadataInspectorProps } from '@grafana/data';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../types';\nimport { groupBy } from 'lodash';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n"],"names":["METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","language","id","ignoreCase","brackets","open","close","token","tokenizer","root","include","nonNestableStates","keywords","map","escapeRegExp","join","operators","builtInFunctions","variables","whitespace","assignment","numbers","strings","next","string","string_double","nestedCurly","nestedParens","conf","autoClosingPairs","surroundingPairs","replace","getStyles","theme","infoText","css","spacing","colors","text","secondary","xRayDsId","XrayLinkConfig","datasourceUid","onChange","hasXrayDatasource","Boolean","getDatasourceSrv","getList","pluginId","length","styles","useStyles2","className","Alert","title","severity","InlineField","htmlFor","label","labelWidth","tooltip","DataSourcePicker","ds","uid","current","noDefault","StatementPosition","SuggestionKind","CompletionItemPriority","SQLTokenTypes","Parenthesis","Whitespace","Keyword","Delimiter","Operator","Identifier","Type","Function","Number","String","Variable","getSelectToken","currentToken","getPreviousOfType","SELECT","getMetricNameToken","assumedMetricNameToken","assumedStatisticToken","getNextNonWhiteSpaceToken","isVariable","isFunction","getSelectStatisticToken","isIdentifier","getNamespaceToken","fromToken","selectToken","getNextOfType","FROM","getFromKeywordToken","nextNonWhiteSpace","isDoubleQuotedString","value","toUpperCase","SCHEMA","isKeyword","is","assumedNamespaceToken","LinkedToken","constructor","type","range","previous","tokenTypes","this","isWhiteSpace","isParenthesis","isString","isNumber","isType","undefined","endsWith","getPreviousNonWhiteSpaceToken","curr","getPreviousUntil","ignoreTypes","tokens","some","t","push","getNextUntil","getPreviousKeyword","CompletionItemProvider","datasource","templateSrv","getTemplateSrv","templateVariables","getVariables","getStatementPosition","Unknown","getSuggestionKinds","position","getSuggestions","monaco","suggestionKinds","statementPosition","Promise","reject","getCompletionProvider","languageDefinition","triggerCharacters","provideCompletionItems","async","model","tokensPerLine","editor","tokenize","getValue","lineIndex","offset","_tokenBrand","columnIndex","endColumn","getLineLength","startLineNumber","startColumn","endLineNumber","getValueInRange","newToken","Range","containsPosition","linkedTokenBuilder","suggestions","previousNonWhiteSpace","previousKeyword","previousIsSlash","SelectKeyword","AfterSelectKeyword","AfterSelectFuncFirstArgument","FromKeyword","AfterFromKeyword","SchemaFuncFirstArgument","SchemaFuncExtraArgument","AfterFrom","WHERE","AND","WhereKey","WhereComparisonOperator","EQUALS","NOT_EQUALS","WhereValue","AfterWhereValue","BY","GROUP","AfterGroupByKeywords","AfterGroupBy","ORDER","AfterOrderByKeywords","AfterOrderByFunction","DESC","ASC","AfterOrderByDirection","FunctionsWithArguments","Metrics","Namespaces","SchemaKeyword","LabelKeys","WhereKeyword","GroupByKeywords","OrderByKeywords","LimitKeyword","ComparisonOperators","LabelValues","LogicalOperators","FunctionsWithoutArguments","SortOrderDirectionKeyword","SQLCompletionItemProvider","super","region","getActualRegion","setRegion","fromPositions","toCompletionItem","rest","item","insertText","kind","languages","CompletionItemKind","Field","sortText","Medium","addSuggestion","suggestion","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","command","TRIGGER_SUGGEST","STATISTICS","s","namespaceToken","getMetrics","m","metrics","getAllMetrics","uniq","metricName","High","metricNameToken","namespaces","filter","namespace","getNamespaces","n","labelKeyTokens","dimensionFilter","reduce","acc","getDimensionKeys","test","labelKey","getDimensionValues","o","LOGICAL_OPERATORS","MediumHigh","COMPARISON_OPERATORS","LIMIT","MediumLow","v","Low","ThrottlingErrorMessage","target","rel","href","CloudWatchLanguageProvider","LanguageProvider","initialValues","trim","url","params","lastValueFrom","awsRequest","startTask","resolve","then","started","logGroups","fetchedFieldsCache","Date","now","time","sortedUniq","fields","results","all","logGroup","getLogGroupFields","logGroupName","Set","cur","concat","logGroupFields","f","name","values","suggs","getFieldCompletionItems","context","logGroupNames","functionSuggestions","searchFunctionType","SearchFunctionType","items","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","commandToken","curToken","queryCommand","content","toLowerCase","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","handleSortCommand","currentTokenIsAfterCommandAndEmpty","isTokenType","currentTokenIsAfterCommand","types","includes","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","typeaheadOutput","getFieldAndFilterFunctionCompletionItems","getStatsAggCompletionItems","forEach","group","skipFilter","sugg","boolFuncs","getBoolFuncCompletionItems","fieldsSuggestions","comparisonSuggestions","getComparisonCompletionItems","QUERY_COMMANDS","FIELD_AND_FILTER_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","BOOLEAN_FUNCTIONS","NUMERIC_OPERATORS","fetchFields","field","match","Object","assign","getSyntax","syntax","isStatsQuery","query","grammar","Prism","find","toString","input","data","get","offsets","start","selection","end","isFirstToken","prev","getCommandCompletionItems","parenthesisToken","maybeFunctionToken","funcsWithFieldArgs","isInsideFunctionParenthesis","keyword","maybeKeyword","getPreviousTokenExcluding","isAfterKeyword","handleKeyword","handleComparison","startToken","thisToken","previousCommandToken","handleCommand","isFirstArgument","funcName","exclude","main","func","wait","mem","memoize","debounce","leading","args","JSON","stringify","MetricMathTokenTypes","WithinString","currentFunction","isAfterComma","isWithinSearch","allTokensAfterStartOfSearch","lastComma","SearchFuncThirdArg","SearchFuncSecondArg","PredefinedFuncSecondArg","AfterFunction","PredefinedFunction","KeywordArguments","Operators","Statistic","Period","MetricMathCompletionItemProvider","idx","Value","fromCharCode","createInternalXrayLink","getDataSourceSrv","e","console","error","internal","queryType","datasourceName","createAwsConsoleLink","interpolatedExpression","expression","interpolatedGroups","urlProps","to","toISOString","from","timeType","tz","editorString","isLiveTail","source","encodeUrl","targetBlank","splitErrorData","keys","refId","startsWith","errorMessage","errors","config","queries","q","good","dispatch","state","subscriber","counter","period","step","endPeriod","newPeriod","Math","min","schedule","DS_QUERY_ENDPOINT","LOG_IDENTIFIER_INTERNAL","LOGSTREAM_IDENTIFIER_INTERNAL","displayAlert","store","notifyApp","createErrorNotification","React","displayCustomError","message","CloudWatchDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","memoizedDebounce","AppNotificationTimeout","logQueries","options","validLogQueries","of","isEmpty","LoadingState","queryFun","targets","startTime","timerID","subscription","retries","collected","timeoutFunction","timeoutFunc","retry","timeout","retryWaitFunction","retryWaitFunc","pow","random","Observable","observer","run","currentQueryParams","subscribe","frames","collectedPreviously","toDataQueryResponse","complete","errorData","valueOf","dataResponse","setTimeout","log","clearTimeout","unsubscribe","runWithRetry","makeLogActionRequest","makeReplacements","scopedVars","skipCache","queryString","rangeUtil","logsTimeout","pipe","mergeMap","logsQuery","dataFrame","queryId","meta","custom","statsGroups","response","dataQueryResponse","request","replaceFn","getRegion","tracingDatasourceUid","fieldName","curTarget","interpolatedRegion","xrayLink","links","addDataLinksToLogsResponse","timeRange","bind","tracingDataSourceUid","metricQueries","validMetricsQueries","filterMetricQuery","dimensions","convertDimensionFormat","statistic","getPeriod","sqlExpression","intervalMs","maxDataPoints","getRef","performTimeSeriesQuery","row","limit","direction","logStreamField","logField","requestParams","startFromHead","parseLogGroupName","rowIndex","logStreamName","endTime","timeEpochMs","dataFrames","metricsQueries","queryMode","proxyUrl","defaultRegion","jsonData","languageProvider","sqlCompletionItemProvider","metricMathCompletionItemProvider","cloneDeep","hide","getTargetsByQueryMode","dataQueryResponses","handleLogQueries","handleMetricQueries","merge","metricQueryType","metricEditorMode","MetricQueryType","MetricEditorMode","Error","queryParams","param","statsQuery","startPeriod","scheduler","asyncScheduler","add","increasingInterval","concatMap","_","repeat","share","consecutiveFailedAttempts","scan","failures","prevRecordsMatched","frame","recordsMatched","stats","stat","displayName","queryResponse","zip","tap","CloudWatchLogsQueryStatus","hasOwnProperty","failedAttempts","set","key","every","DataQueryErrorType","takeWhile","observable","onUnsubscribe","stopQueries","innerSub","val","err","logQuery","finalize","toArray","fieldNames","fieldPercentages","i","percent","parseInt","res","dataframes","lastError","findLast","FieldType","interval","catchError","throwError","firstErrorResult","r","failedRedIds","actualRegion","debouncedAlert","transformSuggestDataFromDataframes","suggestData","toLegacyResponseData","rows","doMetricQueryRequest","subtype","parameters","fieldsToReplace","anyQuery","Array","isArray","headers","resultsToDataFrames","status","getRegions","regions","dimensionFilters","dimensionKey","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filters","getResourceARNs","resourceType","tags","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","parse","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","resourceARNsQuery","tagsJSON","standardStatistics","annotationQuery","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","targetContainsTemplate","variableExists","k","toTestingStatus","method","getBackendSrv","fetch","result","getDefaultRegion","showContextToggle","convertToCloudWatchTime","date","roundUp","dateMath","round","entries","valueVar","getVariableName","multi","split","displayErrorIfIsMultiTemplateVariable","variable","debouncedCustomAlert","getQueryDisplayText","interpolateVariablesInQueries","isCloudWatchLogsQuery","interpolateMetricsQueryVariables","alias","logIdentifier","colonIndex","lastIndexOf","substr","CloudWatchAnnotationsQueryCtrl","$scope","ctrl","defaultsDeep","matchExact","raw","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","_classCallCheck","instance","TypeError","TemplateTag","_this","_len","arguments","transformers","_key","tag","_len2","expressions","_key2","interimTag","transformEndResult","transformString","processSubstitutions","transformer","previousTag","template","_len3","substitutions","_key3","apply","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","transform","onString","onSubstitution","endResult","onEndResult","defaults","separator","conjunction","serial","opts","arrayLength","indent","separatorIndex","slice","_toConsumableArray","arr","arr2","el","regexp","RegExp","side","splitBy","isValidValue","x","isNaN","replaceWhat","replaceWith","CLIQ_EXAMPLES","category","examples","expr","stripIndents","stripIndent","renderHighlightedMarkup","code","keyPrefix","spans","flattenTokens","aliases","exampleCategory","LogsCheatSheet","PureComponent","onClickExample","renderExpression","onClick","renderLogsCheatSheet","cat","cx","j","render","plugin","DataSourcePlugin","setQueryEditorHelp","setConfigEditor","setDatasource","useState","useEffect","loadDatasource","useDatasource","addWarning","createWarningNotification","authType","profile","database","useAuthenticationWarning","logsTimeoutError","setErr","useDebounce","useTimoutValidation","ConnectionConfig","loadRegions","Input","width","placeholder","customMetricsNamespaces","onUpdateDatasourceJsonDataOption","invalid","updateDatasourcePluginJsonDataOption","setQueryEditor","PanelQueryEditor","setMetadataInspector","useMemo","groupBy","executedQueryString","setExploreMetricsQueryField","setExploreLogsQueryField","CloudWatchLogsQueryEditor","setAnnotationQueryCtrl"],"sourceRoot":""}