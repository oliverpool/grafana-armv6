{"version":3,"file":"opentsdbPlugin.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/angular/AngularLocationWrapper.ts","webpack://grafana/./public/app/angular/panel/metrics_panel_ctrl.ts","webpack://grafana/./public/app/angular/panel/panel_ctrl.ts","webpack://grafana/./public/app/angular/panel/query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbDetails.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/module.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/sdk.ts"],"sourcesContent":["import { locationSearchToObject, locationService, navigationLogger } from '@grafana/runtime';\nimport { deprecationWarning, urlUtil } from '@grafana/data';\n\n// Ref: https://github.com/angular/angular.js/blob/ae8e903edf88a83fedd116ae02c0628bf72b150c/src/ng/location.js#L5\nconst DEFAULT_PORTS: Record<string, number> = { http: 80, https: 443, ftp: 21 };\n\nexport class AngularLocationWrapper {\n  constructor() {\n    this.absUrl = this.wrapInDeprecationWarning(this.absUrl);\n    this.hash = this.wrapInDeprecationWarning(this.hash);\n    this.host = this.wrapInDeprecationWarning(this.host);\n    this.path = this.wrapInDeprecationWarning(this.path);\n    this.port = this.wrapInDeprecationWarning(this.port, 'window.location');\n    this.protocol = this.wrapInDeprecationWarning(this.protocol, 'window.location');\n    this.replace = this.wrapInDeprecationWarning(this.replace);\n    this.search = this.wrapInDeprecationWarning(this.search);\n    this.state = this.wrapInDeprecationWarning(this.state);\n    this.url = this.wrapInDeprecationWarning(this.url);\n  }\n\n  wrapInDeprecationWarning(fn: Function, replacement?: string) {\n    let self = this;\n\n    return function wrapper() {\n      deprecationWarning('$location', fn.name, replacement || 'locationService');\n      return fn.apply(self, arguments);\n    };\n  }\n\n  absUrl(): string {\n    return `${window.location.origin}${this.url()}`;\n  }\n\n  hash(newHash?: string | null) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: hash');\n\n    if (!newHash) {\n      return locationService.getLocation().hash.slice(1);\n    } else {\n      throw new Error('AngularLocationWrapper method not implemented.');\n    }\n  }\n\n  host(): string {\n    return new URL(window.location.href).hostname;\n  }\n\n  path(pathname?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: path');\n\n    const location = locationService.getLocation();\n\n    if (pathname !== undefined && pathname !== null) {\n      let parsedPath = String(pathname);\n      parsedPath = parsedPath.startsWith('/') ? parsedPath : `/${parsedPath}`;\n      const url = new URL(`${window.location.origin}${parsedPath}`);\n\n      locationService.push({\n        pathname: url.pathname,\n        search: url.search.length > 0 ? url.search : location.search,\n        hash: url.hash.length > 0 ? url.hash : location.hash,\n      });\n      return this;\n    }\n\n    if (pathname === null) {\n      locationService.push('/');\n      return this;\n    }\n\n    return location.pathname;\n  }\n\n  port(): number | null {\n    const url = new URL(window.location.href);\n    return parseInt(url.port, 10) || DEFAULT_PORTS[url.protocol] || null;\n  }\n\n  protocol(): string {\n    return new URL(window.location.href).protocol.slice(0, -1);\n  }\n\n  replace() {\n    throw new Error('AngularLocationWrapper method not implemented.');\n  }\n\n  search(search?: any, paramValue?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: search');\n    if (!search) {\n      return locationService.getSearchObject();\n    }\n\n    if (search && arguments.length > 1) {\n      locationService.partial({\n        [search]: paramValue,\n      });\n\n      return this;\n    }\n\n    if (search) {\n      let newQuery;\n\n      if (typeof search === 'object') {\n        newQuery = { ...search };\n      } else {\n        newQuery = locationSearchToObject(search);\n      }\n\n      for (const key of Object.keys(newQuery)) {\n        // removing params with null | undefined\n        if (newQuery[key] === null || newQuery[key] === undefined) {\n          delete newQuery[key];\n        }\n      }\n\n      const updatedUrl = urlUtil.renderUrl(locationService.getLocation().pathname, newQuery);\n      locationService.push(updatedUrl);\n    }\n\n    return this;\n  }\n\n  state(state?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: state');\n    throw new Error('AngularLocationWrapper method not implemented.');\n  }\n\n  url(newUrl?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: url');\n\n    if (newUrl !== undefined) {\n      if (newUrl.startsWith('#')) {\n        locationService.push({ ...locationService.getLocation(), hash: newUrl });\n      } else if (newUrl.startsWith('?')) {\n        locationService.push({ ...locationService.getLocation(), search: newUrl });\n      } else if (newUrl.trim().length === 0) {\n        locationService.push('/');\n      } else {\n        locationService.push(newUrl);\n      }\n\n      return locationService;\n    }\n\n    const location = locationService.getLocation();\n    return `${location.pathname}${location.search}${location.hash}`;\n  }\n}\n","import { isArray } from 'lodash';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport {\n  DataFrame,\n  DataQueryResponse,\n  DataSourceApi,\n  LegacyResponseData,\n  LoadingState,\n  PanelData,\n  PanelEvents,\n  TimeRange,\n  toDataFrameDTO,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { Unsubscribable } from 'rxjs';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { PanelQueryRunner } from '../../features/query/state/PanelQueryRunner';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  declare datasource: DataSourceApi;\n  declare range: TimeRange;\n\n  contextSrv: ContextSrv;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo?: string;\n  skipDataOnInit = false;\n  dataList: LegacyResponseData[] = [];\n  querySubscription?: Unsubscribable | null;\n  useDataFrames = false;\n  panelData?: PanelData;\n\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.panel.datasource = this.panel.datasource || null;\n\n    this.events.on(PanelEvents.refresh, this.onMetricsPanelRefresh.bind(this));\n    this.events.on(PanelEvents.panelTeardown, this.onPanelTearDown.bind(this));\n    this.events.on(PanelEvents.componentDidMount, this.onMetricsPanelMounted.bind(this));\n  }\n\n  private onMetricsPanelMounted() {\n    const queryRunner = this.panel.getQueryRunner() as PanelQueryRunner;\n    this.querySubscription = queryRunner\n      .getData({ withTransforms: true, withFieldConfig: true })\n      .subscribe(this.panelDataObserver);\n  }\n\n  private onPanelTearDown() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!isArray(data)) {\n        data = data.data;\n      }\n\n      this.panelData = {\n        state: LoadingState.Done,\n        series: data,\n        timeRange: this.range,\n      };\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit(PanelEvents.dataSnapshotLoad, data);\n      });\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    return this.datasourceSrv\n      .get(this.panel.datasource, this.panel.scopedVars)\n      .then(this.issueQueries.bind(this))\n      .catch((err: any) => {\n        this.processDataError(err);\n      });\n  }\n\n  processDataError(err: any) {\n    // if canceled  keep loading set to true\n    if (err.cancelled) {\n      console.log('Panel request cancelled', err);\n      return;\n    }\n\n    this.error = err.message || 'Request Error';\n\n    if (err.data) {\n      if (err.data.message) {\n        this.error = err.data.message;\n      } else if (err.data.error) {\n        this.error = err.data.error;\n      }\n    }\n\n    this.angularDirtyCheck();\n  }\n\n  angularDirtyCheck() {\n    if (!this.$scope.$root.$$phase) {\n      this.$scope.$digest();\n    }\n  }\n\n  // Updates the response with information from the stream\n  panelDataObserver = {\n    next: (data: PanelData) => {\n      this.panelData = data;\n\n      if (data.state === LoadingState.Error) {\n        this.loading = false;\n        this.processDataError(data.error);\n      }\n\n      // Ignore data in loading state\n      if (data.state === LoadingState.Loading) {\n        this.loading = true;\n        this.angularDirtyCheck();\n        return;\n      }\n\n      if (data.request) {\n        const { timeInfo } = data.request;\n        if (timeInfo) {\n          this.timeInfo = timeInfo;\n        }\n      }\n\n      if (data.timeRange) {\n        this.range = data.timeRange;\n      }\n\n      if (this.useDataFrames) {\n        this.handleDataFrames(data.series);\n      } else {\n        // Make the results look as if they came directly from a <6.2 datasource request\n        const legacy = data.series.map((v) => toLegacyResponseData(v));\n        this.handleQueryResult({ data: legacy });\n      }\n\n      this.angularDirtyCheck();\n    },\n  };\n\n  updateTimeRange(datasource?: DataSourceApi) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    const newTimeData = applyPanelTimeOverrides(this.panel, this.range);\n    this.timeInfo = newTimeData.timeInfo;\n    this.range = newTimeData.timeRange;\n  }\n\n  issueQueries(datasource: DataSourceApi) {\n    this.updateTimeRange(datasource);\n\n    this.datasource = datasource;\n\n    const panel = this.panel as PanelModel;\n    const queryRunner = panel.getQueryRunner();\n\n    return queryRunner.run({\n      datasource: panel.datasource,\n      queries: panel.targets,\n      panelId: panel.id,\n      dashboardId: this.dashboard.id,\n      timezone: this.dashboard.getTimezone(),\n      timeInfo: this.timeInfo,\n      timeRange: this.range,\n      maxDataPoints: panel.maxDataPoints || this.width,\n      minInterval: panel.interval,\n      scopedVars: panel.scopedVars,\n      cacheTimeout: panel.cacheTimeout,\n      transformations: panel.transformations,\n    });\n  }\n\n  handleDataFrames(data: DataFrame[]) {\n    this.loading = false;\n\n    if (this.dashboard && this.dashboard.snapshot) {\n      this.panel.snapshotData = data.map((frame) => toDataFrameDTO(frame));\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataFramesReceived, data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n\n  handleQueryResult(result: DataQueryResponse) {\n    this.loading = false;\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataReceived, result.data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import { isString } from 'lodash';\nimport config from 'app/core/config';\nimport { profiler } from 'app/core/core';\nimport { auto } from 'angular';\nimport {\n  AppEvent,\n  PanelEvents,\n  PanelPluginMeta,\n  AngularPanelMenuItem,\n  EventBusExtended,\n  EventBusSrv,\n} from '@grafana/data';\nimport { DashboardModel } from '../../features/dashboard/state';\nimport { AngularLocationWrapper } from 'app/angular/AngularLocationWrapper';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  declare dashboard: DashboardModel;\n  pluginName = '';\n  pluginId = '';\n  editorTabs: any;\n  $scope: any;\n  $injector: auto.IInjectorService;\n  $timeout: any;\n  editModeInitiated = false;\n  declare height: number;\n  declare width: number;\n  containerHeight: any;\n  events: EventBusExtended;\n  loading = false;\n  timing: any;\n  $location: AngularLocationWrapper;\n\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    this.panel = this.panel ?? $scope.$parent.panel;\n    this.dashboard = this.dashboard ?? $scope.$parent.dashboard;\n    this.$injector = $injector;\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabs = [];\n    this.$location = new AngularLocationWrapper();\n    this.events = new EventBusSrv();\n    this.timing = {}; // not used but here to not break plugins\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on(PanelEvents.componentDidMount.name, () => this.panelDidMount());\n  }\n\n  panelDidMount() {\n    this.events.emit(PanelEvents.componentDidMount);\n    this.events.emit(PanelEvents.initialized);\n    this.dashboard.panelInitialized(this.panel);\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted();\n  }\n\n  refresh() {\n    this.panel.refresh();\n  }\n\n  publishAppEvent<T>(event: AppEvent<T>, payload?: T) {\n    this.$scope.$root.appEvent(event, payload);\n  }\n\n  initEditMode() {\n    if (!this.editModeInitiated) {\n      this.editModeInitiated = true;\n      this.events.emit(PanelEvents.editModeInitialized);\n    }\n  }\n\n  addEditorTab(title: string, directiveFn: any, index?: number, icon?: any) {\n    const editorTab = { title, directiveFn, icon };\n\n    if (isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return { templateUrl: directiveFn };\n      };\n    }\n\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getExtendedMenu() {\n    const menu: AngularPanelMenuItem[] = [];\n    this.events.emit(PanelEvents.initPanelActions, menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  async getAdditionalMenuItems(): Promise<any[]> {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.otherPanelInFullscreen(this.panel);\n  }\n\n  render(payload?: any) {\n    this.events.emit(PanelEvents.render, payload);\n  }\n\n  // overriden from react\n  onPluginTypeChange = (plugin: PanelPluginMeta) => {};\n}\n","import { indexOf } from 'lodash';\nimport { auto } from 'angular';\n\nexport class QueryCtrl<T = any> {\n  target!: T;\n  datasource!: any;\n  panelCtrl!: any;\n  panel: any;\n  hasRawMode!: boolean;\n  error?: string | null;\n  isLastQuery: boolean;\n\n  constructor(public $scope: any, public $injector: auto.IInjectorService) {\n    this.panelCtrl = this.panelCtrl ?? $scope.ctrl.panelCtrl;\n    this.target = this.target ?? $scope.ctrl.target;\n    this.datasource = this.datasource ?? $scope.ctrl.datasource;\n    this.panel = this.panelCtrl?.panel ?? $scope.ctrl.panelCtrl.panel;\n    this.isLastQuery = indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\n  }\n\n  refresh() {\n    this.panelCtrl.refresh();\n  }\n}\n","import angular from 'angular';\nimport {\n  clone,\n  compact,\n  each,\n  every,\n  filter,\n  findIndex,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map as _map,\n  toPairs,\n} from 'lodash';\nimport { lastValueFrom, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport {\n  AnnotationEvent,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  dateMath,\n  ScopedVars,\n} from '@grafana/data';\n\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { OpenTsdbOptions, OpenTsdbQuery } from './types';\n\nexport default class OpenTsDatasource extends DataSourceApi<OpenTsdbQuery, OpenTsdbOptions> {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  lookupLimit: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  constructor(instanceSettings: any, private readonly templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.lookupLimit = instanceSettings.jsonData.lookupLimit || 1000;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n  }\n\n  // Called once per panel (graph)\n  query(options: DataQueryRequest<OpenTsdbQuery>): Observable<DataQueryResponse> {\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs: any[] = [];\n\n    each(options.targets, (target) => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(queries)) {\n      return of({ data: [] });\n    }\n\n    const groupByTags: any = {};\n    each(queries, (query) => {\n      if (query.filters && query.filters.length > 0) {\n        each(query.filters, (val) => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = filter(options.targets, (query) => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).pipe(\n      catchError((err) => {\n        // Throw the error message here instead of the whole object to workaround the error parsing error.\n        throw err?.data?.error?.message || 'Error performing time series query.';\n      }),\n      map((response) => {\n        const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n        const result = _map(response.data, (metricData: any, index: number) => {\n          index = metricToTargetMapping[index];\n          if (index === -1) {\n            index = 0;\n          }\n          this._saveTagKeys(metricData);\n\n          return this.transformMetricData(\n            metricData,\n            groupByTags,\n            options.targets[index],\n            options,\n            this.tsdbResolution\n          );\n        });\n        return { data: result };\n      })\n    );\n  }\n\n  annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true, options.timezone);\n    const qs = [];\n    const eventList: any[] = [];\n\n    qs.push({ aggregator: 'sum', metric: options.annotation.target });\n\n    const queries = compact(qs);\n\n    return lastValueFrom(\n      this.performTimeSeriesQuery(queries, start, end).pipe(\n        map((results) => {\n          if (results.data[0]) {\n            let annotationObject = results.data[0].annotations;\n            if (options.annotation.isGlobal) {\n              annotationObject = results.data[0].globalAnnotations;\n            }\n            if (annotationObject) {\n              each(annotationObject, (annotation) => {\n                const event = {\n                  text: annotation.description,\n                  time: Math.floor(annotation.startTime) * 1000,\n                  annotation: options.annotation,\n                };\n\n                eventList.push(event);\n              });\n            }\n          }\n          return eventList;\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.containsTemplate(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.containsTemplate(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries: any[], start: any, end: any): Observable<FetchResponse> {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return getBackendSrv().fetch(options);\n  }\n\n  suggestTagKeys(metric: string | number) {\n    return Promise.resolve(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData: { tags: {}; aggregateTags: any; metric: string | number }) {\n    const tagKeys = Object.keys(metricData.tags);\n    each(metricData.aggregateTags, (tag) => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query: string, type: string): Observable<any> {\n    return this._get('/api/suggest', { type, q: query, max: this.lookupLimit }).pipe(\n      map((result: any) => {\n        return result.data;\n      })\n    );\n  }\n\n  _performMetricKeyValueLookup(metric: string, keys: any): Observable<any[]> {\n    if (!metric || !keys) {\n      return of([]);\n    }\n\n    const keysArray = keys.split(',').map((key: any) => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: this.lookupLimit }).pipe(\n      map((result: any) => {\n        result = result.data.results;\n        const tagvs: any[] = [];\n        each(result, (r) => {\n          if (tagvs.indexOf(r.tags[key]) === -1) {\n            tagvs.push(r.tags[key]);\n          }\n        });\n        return tagvs;\n      })\n    );\n  }\n\n  _performMetricKeyLookup(metric: any): Observable<any[]> {\n    if (!metric) {\n      return of([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).pipe(\n      map((result: any) => {\n        result = result.data.results;\n        const tagks: any[] = [];\n        each(result, (r) => {\n          each(r.tags, (tagv, tagk) => {\n            if (tagks.indexOf(tagk) === -1) {\n              tagks.push(tagk);\n            }\n          });\n        });\n        return tagks;\n      })\n    );\n  }\n\n  _get(\n    relativeUrl: string,\n    params?: { type?: string; q?: string; max?: number; m?: any; limit?: number }\n  ): Observable<FetchResponse> {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return getBackendSrv().fetch(options);\n  }\n\n  _addCredentialOptions(options: any) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const responseTransform = (result: any) => {\n      return _map(result, (value) => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return lastValueFrom(this._performSuggestQuery(metricsQuery[1], 'metrics').pipe(map(responseTransform)));\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return lastValueFrom(this._performMetricKeyLookup(tagNamesQuery[1]).pipe(map(responseTransform)));\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return lastValueFrom(\n        this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).pipe(map(responseTransform))\n      );\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').pipe(map(responseTransform)));\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').pipe(map(responseTransform)));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return lastValueFrom(\n      this._performSuggestQuery('cpu', 'metrics').pipe(\n        map(() => {\n          return { status: 'success', message: 'Data source is working' };\n        })\n      )\n    );\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = lastValueFrom(\n      this._get('/api/aggregators').pipe(\n        map((result: any) => {\n          if (result.data && isArray(result.data)) {\n            return result.data.sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = lastValueFrom(\n      this._get('/api/config/filters').pipe(\n        map((result: any) => {\n          if (result.data) {\n            return Object.keys(result.data).sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md: { dps: any }, groupByTags: any, target: any, options: any, tsdbResolution: number) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps: any[] = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use pairs(invert()) because it stringifies keys/values\n    each(md.dps, (v: any, k: number) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(\n    md: { dps?: any; tags?: any; metric?: any },\n    target: { alias: string },\n    groupByTags: any,\n    options: { scopedVars: any }\n  ) {\n    if (target.alias) {\n      const scopedVars = clone(options.scopedVars || {});\n      each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData: any[] = [];\n\n    if (!isEmpty(md.tags)) {\n      each(toPairs(md.tags), (tag) => {\n        if (has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target: any, options: any, tsdbVersion: number) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = angular.copy(target.filters);\n      if (query.filters) {\n        for (const filterKey in query.filters) {\n          query.filters[filterKey].filter = this.templateSrv.replace(\n            query.filters[filterKey].filter,\n            options.scopedVars,\n            'pipe'\n          );\n        }\n      }\n    } else {\n      query.tags = angular.copy(target.tags);\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  mapMetricsToTargets(metrics: any, options: any, tsdbVersion: number) {\n    let interpolatedTagValue, arrTagV;\n    return _map(metrics, (metricData) => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return findIndex(options.targets as any[], (target) => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  interpolateVariablesInQueries(queries: OpenTsdbQuery[], scopedVars: ScopedVars): OpenTsdbQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      metric: this.templateSrv.replace(query.metric, scopedVars),\n    }));\n  }\n\n  convertToTSDBTime(date: any, roundUp: any, timezone: any) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp, timezone);\n    return date.valueOf();\n  }\n}\n","import { map, size, has } from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { auto } from 'angular';\nimport { textUtil, rangeUtil } from '@grafana/data';\n\nexport class OpenTsQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  aggregators: any;\n  fillPolicies: any;\n  filterTypes: any;\n  tsdbVersion: any;\n  aggregator: any;\n  downsampleInterval: any;\n  downsampleAggregator: any;\n  downsampleFillPolicy: any;\n  errors: any;\n  suggestMetrics: any;\n  suggestTagKeys: any;\n  suggestTagValues: any;\n  addTagMode = false;\n  addFilterMode = false;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    this.errors = this.validateTarget();\n    this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];\n    this.fillPolicies = ['none', 'nan', 'null', 'zero'];\n    this.filterTypes = [\n      'wildcard',\n      'iliteral_or',\n      'not_iliteral_or',\n      'not_literal_or',\n      'iwildcard',\n      'literal_or',\n      'regexp',\n    ];\n\n    this.tsdbVersion = this.datasource.tsdbVersion;\n\n    if (!this.target.aggregator) {\n      this.target.aggregator = 'sum';\n    }\n\n    if (!this.target.downsampleAggregator) {\n      this.target.downsampleAggregator = 'avg';\n    }\n\n    if (!this.target.downsampleFillPolicy) {\n      this.target.downsampleFillPolicy = 'none';\n    }\n\n    this.datasource.getAggregators().then((aggs: { length: number }) => {\n      if (aggs.length !== 0) {\n        this.aggregators = aggs;\n      }\n    });\n\n    this.datasource.getFilterTypes().then((filterTypes: { length: number }) => {\n      if (filterTypes.length !== 0) {\n        this.filterTypes = filterTypes;\n      }\n    });\n\n    // needs to be defined here as it is called from typeahead\n    this.suggestMetrics = (query: string, callback: any) => {\n      this.datasource\n        .metricFindQuery('metrics(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n\n    this.suggestTagKeys = (query: any, callback: any) => {\n      this.datasource.suggestTagKeys(this.target.metric).then(callback);\n    };\n\n    this.suggestTagValues = (query: string, callback: any) => {\n      this.datasource\n        .metricFindQuery('suggest_tagv(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n  }\n\n  targetBlur() {\n    this.errors = this.validateTarget();\n    this.refresh();\n  }\n\n  getTextValues(metricFindResult: any) {\n    return map(metricFindResult, (value) => {\n      return textUtil.escapeHtml(value.text);\n    });\n  }\n\n  addTag() {\n    if (this.target.filters && this.target.filters.length > 0) {\n      this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addTagMode) {\n      this.addTagMode = true;\n      return;\n    }\n\n    if (!this.target.tags) {\n      this.target.tags = {};\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.tags) {\n      this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;\n      this.target.currentTagKey = '';\n      this.target.currentTagValue = '';\n      this.targetBlur();\n    }\n\n    this.addTagMode = false;\n  }\n\n  removeTag(key: string | number) {\n    delete this.target.tags[key];\n    this.targetBlur();\n  }\n\n  editTag(key: string | number, value: any) {\n    this.removeTag(key);\n    this.target.currentTagKey = key;\n    this.target.currentTagValue = value;\n    this.addTag();\n  }\n\n  closeAddTagMode() {\n    this.addTagMode = false;\n    return;\n  }\n\n  addFilter() {\n    if (this.target.tags && size(this.target.tags) > 0) {\n      this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addFilterMode) {\n      this.addFilterMode = true;\n      return;\n    }\n\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n\n    if (!this.target.currentFilterType) {\n      this.target.currentFilterType = 'iliteral_or';\n    }\n\n    if (!this.target.currentFilterGroupBy) {\n      this.target.currentFilterGroupBy = false;\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.filters) {\n      const currentFilter = {\n        type: this.target.currentFilterType,\n        tagk: this.target.currentFilterKey,\n        filter: this.target.currentFilterValue,\n        groupBy: this.target.currentFilterGroupBy,\n      };\n      this.target.filters.push(currentFilter);\n      this.target.currentFilterType = 'literal_or';\n      this.target.currentFilterKey = '';\n      this.target.currentFilterValue = '';\n      this.target.currentFilterGroupBy = false;\n      this.targetBlur();\n    }\n\n    this.addFilterMode = false;\n  }\n\n  removeFilter(index: number) {\n    this.target.filters.splice(index, 1);\n    this.targetBlur();\n  }\n\n  editFilter(fil: { tagk: any; filter: any; type: any; groupBy: any }, index: number) {\n    this.removeFilter(index);\n    this.target.currentFilterKey = fil.tagk;\n    this.target.currentFilterValue = fil.filter;\n    this.target.currentFilterType = fil.type;\n    this.target.currentFilterGroupBy = fil.groupBy;\n    this.addFilter();\n  }\n\n  closeAddFilterMode() {\n    this.addFilterMode = false;\n    return;\n  }\n\n  validateTarget() {\n    const errs: any = {};\n\n    if (this.target.shouldDownsample) {\n      try {\n        if (this.target.downsampleInterval) {\n          rangeUtil.describeInterval(this.target.downsampleInterval);\n        } else {\n          errs.downsampleInterval = \"You must supply a downsample interval (e.g. '1m' or '1h').\";\n        }\n      } catch (err) {\n        errs.downsampleInterval = err.message;\n      }\n    }\n\n    if (this.target.tags && has(this.target.tags, this.target.currentTagKey)) {\n      errs.tags = \"Duplicate tag key '\" + this.target.currentTagKey + \"'.\";\n    }\n\n    return errs;\n  }\n}\n","import React, { SyntheticEvent } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nconst { Select, Input } = LegacyForms;\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { OpenTsdbOptions } from '../types';\nimport { useUniqueId } from '../../influxdb/components/useUniqueId';\n\nconst tsdbVersions = [\n  { label: '<=2.1', value: 1 },\n  { label: '==2.2', value: 2 },\n  { label: '==2.3', value: 3 },\n];\n\nconst tsdbResolutions = [\n  { label: 'second', value: 1 },\n  { label: 'millisecond', value: 2 },\n];\n\ninterface Props {\n  value: DataSourceSettings<OpenTsdbOptions>;\n  onChange: (value: DataSourceSettings<OpenTsdbOptions>) => void;\n}\n\nexport const OpenTsdbDetails = (props: Props) => {\n  const { onChange, value } = props;\n\n  const idSuffix = useUniqueId();\n\n  return (\n    <>\n      <h5>OpenTSDB settings</h5>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`select-version-${idSuffix}`}>\n          Version\n        </InlineFormLabel>\n        <Select\n          inputId={`select-version-${idSuffix}`}\n          menuShouldPortal\n          options={tsdbVersions}\n          value={tsdbVersions.find((version) => version.value === value.jsonData.tsdbVersion) ?? tsdbVersions[0]}\n          onChange={onSelectChangeHandler('tsdbVersion', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`select-resolution-${idSuffix}`}>\n          Resolution\n        </InlineFormLabel>\n        <Select\n          inputId={`select-resolution-${idSuffix}`}\n          menuShouldPortal\n          options={tsdbResolutions}\n          value={\n            tsdbResolutions.find((resolution) => resolution.value === value.jsonData.tsdbResolution) ??\n            tsdbResolutions[0]\n          }\n          onChange={onSelectChangeHandler('tsdbResolution', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`lookup-input-${idSuffix}`}>\n          Lookup limit\n        </InlineFormLabel>\n        <Input\n          id={`lookup-input-${idSuffix}`}\n          type=\"number\"\n          value={value.jsonData.lookupLimit ?? 1000}\n          onChange={onInputChangeHandler('lookupLimit', value, onChange)}\n        />\n      </div>\n    </>\n  );\n};\n\nconst onSelectChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (newValue: SelectableValue) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: newValue.value,\n      },\n    });\n  };\n\nconst onInputChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n","import OpenTsDatasource from './datasource';\nimport { OpenTsQueryCtrl } from './query_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(OpenTsDatasource)\n  .setQueryCtrl(OpenTsQueryCtrl)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(AnnotationsQueryCtrl);\n","import React from 'react';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { OpenTsdbDetails } from './OpenTsdbDetails';\nimport { OpenTsdbOptions } from '../types';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<OpenTsdbOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:4242\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n      />\n      <OpenTsdbDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n","import { makeClassES5Compatible } from '@grafana/data';\nimport { loadPluginCss } from '@grafana/runtime';\nimport { PanelCtrl as PanelCtrlES6 } from 'app/angular/panel/panel_ctrl';\nimport { MetricsPanelCtrl as MetricsPanelCtrlES6 } from 'app/angular/panel/metrics_panel_ctrl';\nimport { QueryCtrl as QueryCtrlES6 } from 'app/angular/panel/query_ctrl';\n\nconst PanelCtrl = makeClassES5Compatible(PanelCtrlES6);\nconst MetricsPanelCtrl = makeClassES5Compatible(MetricsPanelCtrlES6);\nconst QueryCtrl = makeClassES5Compatible(QueryCtrlES6);\n\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, loadPluginCss };\n"],"names":["DEFAULT_PORTS","http","https","ftp","AngularLocationWrapper","constructor","this","absUrl","wrapInDeprecationWarning","hash","host","path","port","protocol","replace","search","state","url","fn","replacement","self","deprecationWarning","name","apply","arguments","window","location","origin","newHash","navigationLogger","Error","locationService","slice","URL","href","hostname","pathname","parsedPath","String","startsWith","length","parseInt","paramValue","newQuery","locationSearchToObject","key","Object","keys","undefined","updatedUrl","urlUtil","newUrl","trim","MetricsPanelCtrl","PanelCtrl","$scope","$injector","super","next","data","panelData","LoadingState","loading","processDataError","error","angularDirtyCheck","request","timeInfo","timeRange","range","useDataFrames","handleDataFrames","series","legacy","map","v","toLegacyResponseData","handleQueryResult","contextSrv","get","datasourceSrv","timeSrv","templateSrv","panel","datasource","events","on","PanelEvents","onMetricsPanelRefresh","bind","onPanelTearDown","onMetricsPanelMounted","queryRunner","getQueryRunner","querySubscription","getData","withTransforms","withFieldConfig","subscribe","panelDataObserver","unsubscribe","otherPanelInFullscreenMode","snapshotData","updateTimeRange","isArray","$timeout","emit","scopedVars","then","issueQueries","catch","err","cancelled","console","log","message","$root","$$phase","$digest","newTimeData","applyPanelTimeOverrides","run","queries","targets","panelId","id","dashboardId","dashboard","timezone","getTimezone","maxDataPoints","width","minInterval","interval","cacheTimeout","transformations","snapshot","frame","toDataFrameDTO","result","plugin","$parent","editorTabs","$location","EventBusSrv","timing","config","type","pluginId","pluginName","$on","panelDidMount","panelInitialized","renderingCompleted","profiler","refresh","publishAppEvent","event","payload","appEvent","initEditMode","editModeInitiated","addEditorTab","title","directiveFn","index","icon","editorTab","isString","templateUrl","splice","push","getExtendedMenu","menu","otherPanelInFullscreen","render","QueryCtrl","panelCtrl","ctrl","target","isLastQuery","indexOf","OpenTsDatasource","DataSourceApi","instanceSettings","getTemplateSrv","withCredentials","basicAuth","jsonData","tsdbVersion","tsdbResolution","lookupLimit","tagKeys","aggregatorsPromise","filterTypesPromise","query","options","start","convertToTSDBTime","raw","from","end","to","qs","each","metric","convertTargetToQuery","compact","isEmpty","of","groupByTags","filters","val","tagk","tags","filter","hide","performTimeSeriesQuery","pipe","catchError","response","metricToTargetMapping","mapMetricsToTargets","_map","metricData","_saveTagKeys","transformMetricData","annotationQuery","rangeRaw","eventList","aggregator","annotation","lastValueFrom","results","annotationObject","annotations","isGlobal","globalAnnotations","text","description","time","Math","floor","startTime","targetContainsTemplate","i","containsTemplate","tagKey","msResolution","reqBody","showQuery","method","_addCredentialOptions","getBackendSrv","fetch","suggestTagKeys","Promise","resolve","aggregateTags","tag","_performSuggestQuery","_get","q","max","_performMetricKeyValueLookup","keysArray","split","keysQuery","join","m","limit","tagvs","r","_performMetricKeyLookup","tagks","tagv","relativeUrl","params","headers","Authorization","metricFindQuery","interpolated","reject","responseTransform","value","metricsQuery","match","tagNamesQuery","tagValuesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","testDatasource","status","getAggregators","sort","getFilterTypes","md","metricLabel","createMetricLabel","dps","k","datapoints","alias","clone","label","tagData","toPairs","has","shouldComputeRate","rate","rateOptions","counter","isCounter","counterMax","counterResetValue","resetValue","dropResets","ResetValue","disableDownsampling","downsampleInterval","parseFloat","downsample","downsampleAggregator","downsampleFillPolicy","angular","filterKey","explicitTags","metrics","interpolatedTagValue","arrTagV","findIndex","every","tagV","tagK","includes","interpolateVariablesInQueries","date","roundUp","dateMath","valueOf","OpenTsQueryCtrl","errors","validateTarget","aggregators","fillPolicies","filterTypes","aggs","suggestMetrics","callback","getTextValues","suggestTagValues","targetBlur","metricFindResult","textUtil","addTag","addTagMode","currentTagKey","currentTagValue","removeTag","editTag","closeAddTagMode","addFilter","size","addFilterMode","currentFilterType","currentFilterGroupBy","currentFilter","currentFilterKey","currentFilterValue","groupBy","removeFilter","editFilter","fil","closeAddFilterMode","errs","shouldDownsample","rangeUtil","Select","Input","LegacyForms","tsdbVersions","tsdbResolutions","OpenTsdbDetails","props","onChange","idSuffix","useUniqueId","className","InlineFormLabel","htmlFor","inputId","menuShouldPortal","find","version","onSelectChangeHandler","resolution","onInputChangeHandler","newValue","currentTarget","AnnotationsQueryCtrl","DataSourcePlugin","setQueryCtrl","setConfigEditor","onOptionsChange","DataSourceHttpSettings","defaultUrl","dataSourceConfig","setAnnotationQueryCtrl","makeClassES5Compatible","PanelCtrlES6","MetricsPanelCtrlES6","QueryCtrlES6"],"sourceRoot":""}