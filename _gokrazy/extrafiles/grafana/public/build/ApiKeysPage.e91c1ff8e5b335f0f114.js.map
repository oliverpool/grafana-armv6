{"version":3,"file":"ApiKeysPage.e91c1ff8e5b335f0f114.js","mappings":"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","sources":["webpack://grafana/./public/app/features/api-keys/APIKeysMigratedCard.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysActionBar.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysAddedModal.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysController.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysForm.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysTable.tsx","webpack://grafana/./public/app/features/api-keys/MigrateToServiceAccountsCard.tsx","webpack://grafana/./public/app/features/api-keys/state/actions.ts","webpack://grafana/./public/app/features/api-keys/state/selectors.ts","webpack://grafana/./public/app/features/api-keys/ApiKeysPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/constants.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, ConfirmModal, useStyles2, Button } from '@grafana/ui';\n\ninterface Props {\n  onHideApiKeys: () => void;\n}\n\nexport const APIKeysMigratedCard = ({ onHideApiKeys }: Props): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Alert title=\"API keys were migrated to Grafana service accounts. This tab is deprecated.\" severity=\"info\">\n      <div className={styles.text}>\n        We have migrated API keys into Grafana service accounts. All API keys are safe and continue working as they used\n        to, you can find them inside the respective service account.\n      </div>\n      <div className={styles.actionRow}>\n        <Button className={styles.actionButton} onClick={() => setIsModalOpen(true)}>\n          Hide API keys page forever\n        </Button>\n        <ConfirmModal\n          title={'Hide API Keys page forever'}\n          isOpen={isModalOpen}\n          body={'Are you sure you want to hide API keys page forever and use service accounts from now on?'}\n          confirmText={'Yes, hide API keys page.'}\n          onConfirm={onHideApiKeys}\n          onDismiss={() => setIsModalOpen(false)}\n        />\n        <a href=\"org/serviceaccounts\">View service accounts page</a>\n      </div>\n    </Alert>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  text: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  actionRow: css`\n    display: flex;\n    align-items: center;\n  `,\n  actionButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { Button, FilterInput } from '@grafana/ui';\n\ninterface Props {\n  searchQuery: string;\n  disabled: boolean;\n  onAddClick: () => void;\n  onSearchChange: (value: string) => void;\n}\n\nexport const ApiKeysActionBar: FC<Props> = ({ searchQuery, disabled, onAddClick, onSearchChange }) => {\n  return (\n    <div className=\"page-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput placeholder=\"Search keys\" value={searchQuery} onChange={onSearchChange} />\n      </div>\n      <Button className=\"pull-right\" onClick={onAddClick} disabled={disabled}>\n        Add API key\n      </Button>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Field, Modal, useStyles2, Input, ClipboardButton } from '@grafana/ui';\n\nexport interface Props {\n  onDismiss: () => void;\n  apiKey: string;\n  rootPath: string;\n}\n\nexport function ApiKeysAddedModal({ onDismiss, apiKey, rootPath }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const getClipboardText = useCallback(() => apiKey, [apiKey]);\n\n  return (\n    <Modal title=\"API Key Created\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <Field label=\"Key\">\n        <Input\n          id=\"Key\"\n          value={apiKey}\n          readOnly\n          addonAfter={\n            <ClipboardButton icon=\"copy\" variant=\"primary\" getText={getClipboardText}>\n              Copy\n            </ClipboardButton>\n          }\n        />\n      </Field>\n      <Alert severity=\"info\" title=\"You will only be able to view this key here once!\">\n        It is not stored in this form, so be sure to copy it now.\n      </Alert>\n\n      <p className=\"text-muted\">You can authenticate a request using the Authorization HTTP header, example:</p>\n      <pre className={styles.small}>\n        curl -H &quot;Authorization: Bearer {apiKey}&quot; {rootPath}/api/dashboards/home\n      </pre>\n    </Modal>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    label: css`\n      padding: ${theme.spacing(1)};\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    small: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.bodySmall.fontWeight};\n    `,\n  };\n}\n","import { FC, useCallback, useState } from 'react';\n\ninterface Api {\n  isAdding: boolean;\n  toggleIsAdding: () => void;\n}\n\ninterface Props {\n  children: (props: Api) => JSX.Element;\n}\n\nexport const ApiKeysController: FC<Props> = ({ children }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false);\n  const toggleIsAdding = useCallback(() => {\n    setIsAdding(!isAdding);\n  }, [isAdding]);\n\n  return children({ isAdding, toggleIsAdding });\n};\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from 'react';\n\nimport { rangeUtil, SelectableValue } from '@grafana/data';\nimport { EventsWithValidation, LegacyForms, ValidationEvents, Button, Select, InlineField } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nimport { SlideDown } from '../../core/components/Animations/SlideDown';\nimport { NewApiKey, OrgRole } from '../../types';\n\nconst { Input } = LegacyForms;\nconst ROLE_OPTIONS: Array<SelectableValue<OrgRole>> = Object.keys(OrgRole).map((role) => ({\n  label: role,\n  value: role as OrgRole,\n}));\n\ninterface Props {\n  show: boolean;\n  onClose: () => void;\n  onKeyAdded: (apiKey: NewApiKey) => void;\n  disabled: boolean;\n}\n\nfunction isValidInterval(value: string): boolean {\n  if (!value) {\n    return true;\n  }\n  try {\n    rangeUtil.intervalToSeconds(value);\n    return true;\n  } catch {}\n  return false;\n}\n\nconst timeRangeValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: isValidInterval,\n      errorMessage: 'Not a valid duration',\n    },\n  ],\n};\n\nconst tooltipText =\n  'The API key life duration. For example, 1d if your key is going to last for one day. Supported units are: s,m,h,d,w,M,y';\n\nexport const ApiKeysForm: FC<Props> = ({ show, onClose, onKeyAdded, disabled }) => {\n  const [name, setName] = useState<string>('');\n  const [role, setRole] = useState<OrgRole>(OrgRole.Viewer);\n  const [secondsToLive, setSecondsToLive] = useState<string>('');\n  useEffect(() => {\n    setName('');\n    setRole(OrgRole.Viewer);\n    setSecondsToLive('');\n  }, [show]);\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (isValidInterval(secondsToLive)) {\n      onKeyAdded({ name, role, secondsToLive });\n      onClose();\n    }\n  };\n  const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n  };\n  const onRoleChange = (role: SelectableValue<OrgRole>) => {\n    setRole(role.value!);\n  };\n  const onSecondsToLiveChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSecondsToLive(event.currentTarget.value);\n  };\n\n  return (\n    <SlideDown in={show}>\n      <div className=\"gf-form-inline cta-form\">\n        <CloseButton onClick={onClose} />\n        <form className=\"gf-form-group\" onSubmit={onSubmit}>\n          <h5>Add API Key</h5>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-21\">\n              <span className=\"gf-form-label\">Key name</span>\n              <Input type=\"text\" className=\"gf-form-input\" value={name} placeholder=\"Name\" onChange={onNameChange} />\n            </div>\n            <div className=\"gf-form\">\n              <InlineField label=\"Role\">\n                <Select inputId=\"role-select\" value={role} onChange={onRoleChange} options={ROLE_OPTIONS} />\n              </InlineField>\n            </div>\n            <div className=\"gf-form max-width-21\">\n              <InlineField tooltip={tooltipText} label=\"Time to live\">\n                <Input\n                  id=\"time-to-live-input\"\n                  type=\"text\"\n                  placeholder=\"1d\"\n                  validationEvents={timeRangeValidationEvents}\n                  value={secondsToLive}\n                  onChange={onSecondsToLiveChange}\n                />\n              </InlineField>\n            </div>\n            <div className=\"gf-form\">\n              <Button type=\"submit\" disabled={disabled}>\n                Add\n              </Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </SlideDown>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\nimport { Button, DeleteButton, HorizontalGroup, Icon, Tooltip, useTheme2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { ApiKey } from '../../types';\n\ninterface Props {\n  apiKeys: ApiKey[];\n  timeZone: TimeZone;\n  onDelete: (apiKey: ApiKey) => void;\n  onMigrate: (apiKey: ApiKey) => void;\n}\n\nexport const ApiKeysTable: FC<Props> = ({ apiKeys, timeZone, onDelete, onMigrate }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className=\"filter-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Role</th>\n          <th>Expires</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      {apiKeys.length > 0 ? (\n        <tbody>\n          {apiKeys.map((key) => {\n            const isExpired = Boolean(key.expiration && Date.now() > new Date(key.expiration).getTime());\n            return (\n              <tr key={key.id} className={styles.tableRow(isExpired)}>\n                <td>{key.name}</td>\n                <td>{key.role}</td>\n                <td>\n                  {formatDate(key.expiration, timeZone)}\n                  {isExpired && (\n                    <span className={styles.tooltipContainer}>\n                      <Tooltip content=\"This API key has expired.\">\n                        <Icon name=\"exclamation-triangle\" />\n                      </Tooltip>\n                    </span>\n                  )}\n                </td>\n                <td>\n                  <HorizontalGroup justify=\"flex-end\">\n                    <Button size=\"sm\" onClick={() => onMigrate(key)}>\n                      Migrate to service account\n                    </Button>\n                    <DeleteButton\n                      aria-label=\"Delete API key\"\n                      size=\"sm\"\n                      onConfirm={() => onDelete(key)}\n                      disabled={!contextSrv.hasPermissionInMetadata(AccessControlAction.ActionAPIKeysDelete, key)}\n                    />\n                  </HorizontalGroup>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      ) : null}\n    </table>\n  );\n};\n\nfunction formatDate(expiration: string | undefined, timeZone: TimeZone): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (isExpired: boolean) => css`\n    color: ${isExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  onMigrate: () => void;\n  disabled?: boolean;\n}\n\nexport const MigrateToServiceAccountsCard = ({ onMigrate, disabled }: Props): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/api-keys/#migrate-api-keys-to-grafana-service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      here.\n    </a>\n  );\n  const migrationBoxDesc = (\n    <span>Are you sure you want to migrate all API keys to service accounts? Find out more {docsLink}</span>\n  );\n\n  return (\n    <Alert title=\"Switch from API keys to service accounts\" severity=\"info\">\n      <div className={styles.text}>\n        Each API key will be automatically migrated into a service account with a token. The service account will be\n        created with the same permission as the API Key and current API Keys will continue to work as they were.\n      </div>\n      <div className={styles.actionRow}>\n        <Button className={styles.actionButton} onClick={() => setIsModalOpen(true)}>\n          Migrate to service accounts now\n        </Button>\n        <ConfirmModal\n          title={'Migrate API keys to service accounts'}\n          isOpen={isModalOpen}\n          body={migrationBoxDesc}\n          confirmText={'Yes, migrate now'}\n          onConfirm={onMigrate}\n          onDismiss={() => setIsModalOpen(false)}\n        />\n      </div>\n    </Alert>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  text: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  actionRow: css`\n    display: flex;\n    align-items: center;\n  `,\n  actionButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import { getBackendSrv } from 'app/core/services/backend_srv';\nimport store from 'app/core/store';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from 'app/features/serviceaccounts/constants';\nimport { ApiKey, ThunkResult } from 'app/types';\n\nimport {\n  apiKeysLoaded,\n  includeExpiredToggled,\n  isFetching,\n  apiKeysMigrationStatusLoaded,\n  setSearchQuery,\n} from './reducers';\n\nexport function addApiKey(apiKey: ApiKey, openModal: (key: string) => void): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys());\n    openModal(result.key);\n  };\n}\n\nexport function loadApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(isFetching());\n    const [keys, keysIncludingExpired] = await Promise.all([\n      getBackendSrv().get('/api/auth/keys?includeExpired=false&accesscontrol=true'),\n      getBackendSrv().get('/api/auth/keys?includeExpired=true&accesscontrol=true'),\n    ]);\n    dispatch(apiKeysLoaded({ keys, keysIncludingExpired }));\n  };\n}\n\nexport function deleteApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    getBackendSrv()\n      .delete(`/api/auth/keys/${id}`)\n      .then(() => dispatch(loadApiKeys()));\n  };\n}\n\nexport function migrateApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/serviceaccounts/migrate/${id}`);\n    } finally {\n      dispatch(loadApiKeys());\n    }\n  };\n}\n\nexport function migrateAll(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post('/api/serviceaccounts/migrate');\n      store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, true);\n    } finally {\n      dispatch(getApiKeysMigrationStatus());\n      dispatch(loadApiKeys());\n    }\n  };\n}\n\nexport function getApiKeysMigrationStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n    dispatch(apiKeysMigrationStatusLoaded(!!result?.migrated));\n  };\n}\n\nexport function hideApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post('/api/serviceaccounts/hideApiKeys');\n  };\n}\n\nexport function toggleIncludeExpired(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(includeExpiredToggled());\n  };\n}\n","import { ApiKeysState } from 'app/types';\n\nexport const getApiKeysCount = (state: ApiKeysState) =>\n  state.includeExpired ? state.keysIncludingExpired.length : state.keys.length;\n\nexport const getApiKeys = (state: ApiKeysState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n  const keysToFilter = state.includeExpired ? state.keysIncludingExpired : state.keys;\n\n  return keysToFilter.filter((key) => {\n    return regex.test(key.name) || regex.test(key.role);\n  });\n};\n\nexport const getIncludeExpired = (state: ApiKeysState) => state.includeExpired;\n\nexport const getIncludeExpiredDisabled = (state: ApiKeysState) =>\n  state.keys.length === 0 && state.keysIncludingExpired.length > 0;\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\n// Utils\nimport { rangeUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { InlineField, InlineSwitch, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { AccessControlAction, ApiKey, NewApiKey, StoreState } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { APIKeysMigratedCard } from './APIKeysMigratedCard';\nimport { ApiKeysActionBar } from './ApiKeysActionBar';\nimport { ApiKeysAddedModal } from './ApiKeysAddedModal';\nimport { ApiKeysController } from './ApiKeysController';\nimport { ApiKeysForm } from './ApiKeysForm';\nimport { ApiKeysTable } from './ApiKeysTable';\nimport { MigrateToServiceAccountsCard } from './MigrateToServiceAccountsCard';\nimport {\n  addApiKey,\n  deleteApiKey,\n  migrateApiKey,\n  migrateAll,\n  loadApiKeys,\n  toggleIncludeExpired,\n  getApiKeysMigrationStatus,\n  hideApiKeys,\n} from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getApiKeys, getApiKeysCount, getIncludeExpired, getIncludeExpiredDisabled } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const canCreate = contextSrv.hasAccess(AccessControlAction.ActionAPIKeysCreate, true);\n\n  return {\n    apiKeys: getApiKeys(state.apiKeys),\n    searchQuery: state.apiKeys.searchQuery,\n    apiKeysCount: getApiKeysCount(state.apiKeys),\n    hasFetched: state.apiKeys.hasFetched,\n    timeZone: getTimeZone(state.user),\n    includeExpired: getIncludeExpired(state.apiKeys),\n    includeExpiredDisabled: getIncludeExpiredDisabled(state.apiKeys),\n    canCreate: canCreate,\n    apiKeysMigrated: state.apiKeys.apiKeysMigrated,\n  };\n}\n\nconst defaultPageProps = {\n  navId: 'apikeys',\n};\n\nconst mapDispatchToProps = {\n  loadApiKeys,\n  deleteApiKey,\n  migrateApiKey,\n  migrateAll,\n  setSearchQuery,\n  toggleIncludeExpired,\n  addApiKey,\n  getApiKeysMigrationStatus,\n  hideApiKeys,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  isAdding: boolean;\n}\n\nexport class ApiKeysPageUnconnected extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.fetchApiKeys();\n    this.props.getApiKeysMigrationStatus();\n  }\n\n  async fetchApiKeys() {\n    await this.props.loadApiKeys();\n  }\n\n  onDeleteApiKey = (key: ApiKey) => {\n    this.props.deleteApiKey(key.id!);\n  };\n\n  onMigrateAll = () => {\n    this.props.migrateAll();\n  };\n\n  onMigrateApiKey = (key: ApiKey) => {\n    this.props.migrateApiKey(key.id!);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onIncludeExpiredChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.toggleIncludeExpired();\n  };\n\n  onAddApiKey = (newApiKey: NewApiKey) => {\n    const openModal = (apiKey: string) => {\n      const rootPath = window.location.origin + config.appSubUrl;\n\n      appEvents.publish(\n        new ShowModalReactEvent({\n          props: {\n            apiKey,\n            rootPath,\n          },\n          component: ApiKeysAddedModal,\n        })\n      );\n    };\n\n    const secondsToLive = newApiKey.secondsToLive;\n    try {\n      const secondsToLiveAsNumber = secondsToLive ? rangeUtil.intervalToSeconds(secondsToLive) : null;\n      const apiKey: ApiKey = {\n        ...newApiKey,\n        secondsToLive: secondsToLiveAsNumber,\n      };\n      this.props.addApiKey(apiKey, openModal);\n      this.setState((prevState: State) => {\n        return {\n          ...prevState,\n          isAdding: false,\n        };\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  onHideApiKeys = async () => {\n    try {\n      await this.props.hideApiKeys();\n      let serviceAccountsUrl = '/org/serviceaccounts';\n      locationService.push(serviceAccountsUrl);\n      window.location.reload();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const {\n      hasFetched,\n      apiKeysCount,\n      apiKeys,\n      searchQuery,\n      timeZone,\n      includeExpired,\n      includeExpiredDisabled,\n      canCreate,\n      apiKeysMigrated,\n    } = this.props;\n\n    if (!hasFetched) {\n      return (\n        <Page {...defaultPageProps}>\n          <Page.Contents isLoading={true}>{}</Page.Contents>\n        </Page>\n      );\n    }\n\n    return (\n      <Page {...defaultPageProps}>\n        <Page.Contents isLoading={false}>\n          <ApiKeysController>\n            {({ isAdding, toggleIsAdding }) => {\n              const showCTA = !isAdding && apiKeysCount === 0 && !apiKeysMigrated;\n              const showTable = apiKeysCount > 0;\n              return (\n                <>\n                  {!apiKeysMigrated && <MigrateToServiceAccountsCard onMigrate={this.onMigrateAll} />}\n                  {apiKeysMigrated && <APIKeysMigratedCard onHideApiKeys={this.onHideApiKeys} />}\n                  {showCTA ? (\n                    <EmptyListCTA\n                      title=\"You haven't added any API keys yet.\"\n                      buttonIcon=\"key-skeleton-alt\"\n                      onClick={toggleIsAdding}\n                      buttonTitle=\"New API key\"\n                      proTip=\"Remember, you can provide view-only API access to other applications.\"\n                      buttonDisabled={!canCreate}\n                    />\n                  ) : null}\n                  {showTable ? (\n                    <ApiKeysActionBar\n                      searchQuery={searchQuery}\n                      disabled={isAdding || !canCreate}\n                      onAddClick={toggleIsAdding}\n                      onSearchChange={this.onSearchQueryChange}\n                    />\n                  ) : null}\n                  <ApiKeysForm\n                    show={isAdding}\n                    onClose={toggleIsAdding}\n                    onKeyAdded={this.onAddApiKey}\n                    disabled={!canCreate}\n                  />\n                  {showTable ? (\n                    <VerticalGroup>\n                      <InlineField disabled={includeExpiredDisabled} label=\"Include expired keys\">\n                        <InlineSwitch id=\"showExpired\" value={includeExpired} onChange={this.onIncludeExpiredChange} />\n                      </InlineField>\n                      <ApiKeysTable\n                        apiKeys={apiKeys}\n                        timeZone={timeZone}\n                        onMigrate={this.onMigrateApiKey}\n                        onDelete={this.onDeleteApiKey}\n                      />\n                    </VerticalGroup>\n                  ) : null}\n                </>\n              );\n            }}\n          </ApiKeysController>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst ApiKeysPage = connector(ApiKeysPageUnconnected);\nexport default ApiKeysPage;\n","export const API_KEYS_MIGRATION_INFO_STORAGE_KEY = 'grafana.serviceaccounts.showApiKeysMigrationInfo';\n"],"names":["APIKeysMigratedCard","onHideApiKeys","isModalOpen","setIsModalOpen","styles","getStyles","Alert","Button","ConfirmModal","theme","ApiKeysActionBar","searchQuery","disabled","onAddClick","onSearchChange","FilterInput","ApiKeysAddedModal","onDismiss","apiKey","rootPath","getClipboardText","Modal","Field","Input","ClipboardButton","ApiKeysController","children","isAdding","setIsAdding","toggleIsAdding","ROLE_OPTIONS","role","isValidInterval","value","timeRangeValidationEvents","tooltipText","ApiKeysForm","show","onClose","onKeyAdded","name","setName","setRole","secondsToLive","setSecondsToLive","onSubmit","event","onNameChange","onRoleChange","onSecondsToLiveChange","SlideDown","CloseButton","InlineField","Select","ApiKeysTable","apiKeys","timeZone","onDelete","onMigrate","key","isExpired","formatDate","Tooltip","Icon","DeleteButton","expiration","MigrateToServiceAccountsCard","docsLink","migrationBoxDesc","addApiKey","openModal","dispatch","result","loadApiKeys","keys","keysIncludingExpired","deleteApiKey","id","migrateApiKey","migrateAll","store","getApiKeysMigrationStatus","hideApiKeys","toggleIncludeExpired","getApiKeysCount","state","getApiKeys","regex","getIncludeExpired","getIncludeExpiredDisabled","mapStateToProps","canCreate","defaultPageProps","mapDispatchToProps","connector","ApiKeysPageUnconnected","props","newApiKey","config","secondsToLiveAsNumber","prevState","err","serviceAccountsUrl","hasFetched","apiKeysCount","includeExpired","includeExpiredDisabled","apiKeysMigrated","Page","showCTA","showTable","EmptyListCTA","API_KEYS_MIGRATION_INFO_STORAGE_KEY"],"sourceRoot":""}