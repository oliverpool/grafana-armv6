{"version":3,"file":"AlertSilences.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchedSilencedRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRuleNamespaces.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  if (contextSrv.hasAccess(permissions.create, contextSrv.isEditor)) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FormEvent, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Label, Icon, Input, Tooltip, RadioButtonGroup, useStyles2, Button, Field } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { debounce, uniqueId } from 'lodash';\nimport { Stack } from '@grafana/experimental';\n\nconst stateOptions: SelectableValue[] = Object.entries(SilenceState).map(([key, value]) => ({\n  label: key,\n  value,\n}));\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const handleSilenceStateChange = (state: string) => {\n    setQueryParams({ silenceState: state });\n  };\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n      <Field className={styles.rowChild} label=\"State\">\n        <RadioButtonGroup options={stateOptions} value={silenceState} onChange={handleSilenceStateChange} />\n      </Field>\n      {(queryString || silenceState) && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    width: 360px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    padding-bottom: ${theme.spacing(2)};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n  rowChild: css`\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: 0;\n    max-height: 52px;\n  `,\n  fieldLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n  `,\n});\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import { Button, ButtonProps } from '@grafana/ui/src/components/Button';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => (\n  <Button variant=\"secondary\" size=\"xs\" className={cx(useStyles(getStyle), className)} {...restProps} />\n);\n\nexport const getStyle = (theme: GrafanaTheme) => css`\n  height: 24px;\n  font-size: ${theme.typography.size.sm};\n`;\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useState } from 'react';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport React from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport SilencedAlertsTable from './SilencedAlertsTable';\n\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div> {duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div> {createdBy}</div>\n      <div className={styles.title}>Affected alerts</div>\n      <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: grid;\n    grid-template-columns: 1fr 9fr;\n    grid-row-gap: 1rem;\n  `,\n  title: css`\n    color: ${theme.colors.text.primary};\n  `,\n  row: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { SilencesFilter } from './SilencesFilter';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { Matchers } from './Matchers';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { useDispatch } from 'react-redux';\nimport { expireSilenceAction } from '../../state/actions';\nimport { SilenceDetails } from './SilenceDetails';\nimport { Stack } from '@grafana/experimental';\nimport { Authorize } from '../Authorize';\nimport { getInstancesPermissions } from '../../utils/access-control';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  const { silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n\n  const showExpiredSilencesBanner =\n    !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n\n  const columns = useColumns(alertManagerSourceName);\n\n  const items = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilences.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <>\n          <SilencesFilter />\n          <Authorize actions={[permissions.create]} fallback={contextSrv.isEditor}>\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          </Authorize>\n          {!!items.length ? (\n            <>\n              <DynamicTable\n                items={items}\n                cols={columns}\n                isExpandable\n                renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n              />\n              {showExpiredSilencesBanner && (\n                <div className={styles.callout}>\n                  <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                  <span>Expired silences are automatically deleted after 5 days.</span>\n                </div>\n              )}\n            </>\n          ) : (\n            'No matching silences found'\n          )}\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nconst useFilteredSilences = (silences: Silence[]) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n        if (!stateMatches) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const showActions = contextSrv.hasAccess(permissions.update, contextSrv.isEditor);\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: '88px',\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 9,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 1,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              <br />\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: '150px',\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <Stack gap={0.5}>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </Stack>\n          );\n        },\n        size: '147px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles, permissions]);\n}\n\nexport default SilencesTable;\n","import React, { FC } from 'react';\nimport { Button, Field, Input, IconButton, InputControl, useStyles2, Select } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { MatcherOperator } from 'app/plugins/datasource/alertmanager/types';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = formApi;\n\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`} data-testid=\"matcher\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <InputControl\n                      control={control}\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          menuShouldPortal\n                          onChange={(value) => onChange(value.value)}\n                          className={styles.matcherOptions}\n                          options={matcherFieldOptions}\n                          aria-label=\"operator\"\n                        />\n                      )}\n                      defaultValue={matcher.operator || matcherFieldOptions[0].value}\n                      name={`matchers.${index}.operator` as const}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher = { name: '', value: '', operator: MatcherOperator.equal };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matcherOptions: css`\n      min-width: 140px;\n    `,\n    matchers: css`\n      max-width: ${theme.breakpoints.values.sm}px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import React, { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\nimport { useDispatch } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { findAlertInstancesWithMatchers } from '../../utils/matchers';\nimport { fetchAllPromAndRulerRulesAction } from '../../state/actions';\nimport { Alert, AlertingRule } from 'app/types/unified-alerting';\nimport { MatcherFieldValue, SilenceFormFields } from '../../types/silence-form';\nimport { isAlertingRule } from '../../utils/rules';\nimport { AlertStateTag } from '../rules/AlertStateTag';\nimport { AlertLabels } from '../AlertLabels';\n\ntype MatchedRulesTableItemProps = DynamicTableItemProps<{\n  matchedInstance: Alert;\n}>;\ntype MatchedRulesTableColumnProps = DynamicTableColumnProps<{ matchedInstance: Alert }>;\n\nexport const MatchedSilencedRules = () => {\n  const [matchedAlertRules, setMatchedAlertRules] = useState<MatchedRulesTableItemProps[]>([]);\n  const formApi = useFormContext<SilenceFormFields>();\n  const dispatch = useDispatch();\n  const { watch } = formApi;\n  const matchers: MatcherFieldValue[] = watch('matchers');\n  const styles = useStyles2(getStyles);\n  const columns = useColumns();\n\n  useEffect(() => {\n    dispatch(fetchAllPromAndRulerRulesAction());\n  }, [dispatch]);\n\n  const combinedNamespaces = useCombinedRuleNamespaces();\n  useDebounce(\n    () => {\n      const matchedInstances = combinedNamespaces.flatMap((namespace) => {\n        return namespace.groups.flatMap((group) => {\n          return group.rules\n            .map((combinedRule) => combinedRule.promRule)\n            .filter((rule): rule is AlertingRule => isAlertingRule(rule))\n            .flatMap((rule) => findAlertInstancesWithMatchers(rule.alerts ?? [], matchers));\n        });\n      });\n      setMatchedAlertRules(matchedInstances);\n    },\n    500,\n    [combinedNamespaces, matchers]\n  );\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Affected alert instances\n        {matchedAlertRules.length > 0 ? (\n          <Badge className={styles.badge} color=\"blue\" text={matchedAlertRules.length} />\n        ) : null}\n      </h4>\n      <div className={styles.table}>\n        {matchers.every((matcher) => !matcher.value && !matcher.name) ? (\n          <span>Add a valid matcher to see affected alerts</span>\n        ) : (\n          <>\n            <DynamicTable items={matchedAlertRules.slice(0, 5) ?? []} isExpandable={false} cols={columns} />\n            {matchedAlertRules.length > 5 && (\n              <div className={styles.moreMatches}>and {matchedAlertRules.length - 5} more</div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useColumns(): MatchedRulesTableColumnProps[] {\n  return [\n    {\n      id: 'state',\n      label: 'State',\n      renderCell: function renderStateTag({ data: { matchedInstance } }) {\n        return <AlertStateTag state={matchedInstance.state} />;\n      },\n      size: '160px',\n    },\n    {\n      id: 'labels',\n      label: 'Labels',\n      renderCell: function renderName({ data: { matchedInstance } }) {\n        return <AlertLabels labels={matchedInstance.labels} />;\n      },\n      size: '250px',\n    },\n    {\n      id: 'created',\n      label: 'Created',\n      renderCell: function renderSummary({ data: { matchedInstance } }) {\n        return (\n          <>\n            {matchedInstance.activeAt.startsWith('0001')\n              ? '-'\n              : dateTime(matchedInstance.activeAt).format('YYYY-MM-DD HH:mm:ss')}\n          </>\n        );\n      },\n      size: '400px',\n    },\n  ];\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    max-width: ${theme.breakpoints.values.lg}px;\n  `,\n  moreMatches: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  title: css`\n    display: flex;\n    align-items: center;\n  `,\n  badge: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { dateTime, GrafanaTheme } from '@grafana/data';\nimport { Field, TimeRangeInput, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n  const styles = useStyles(getStyles);\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n        placeholder={'Select time range'}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  timeRange: css`\n    width: 400px;\n  `,\n});\n","import { MatcherOperator, Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useMemo, useState } from 'react';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport {\n  DefaultTimeZone,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { useDebounce } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { pickBy } from 'lodash';\nimport MatchersField from './MatchersField';\nimport { MatchedSilencedRules } from './MatchedSilencedRules';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { useDispatch } from 'react-redux';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilencePeriod } from './SilencePeriod';\nimport { css, cx } from '@emotion/css';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { makeAMLink } from '../../utils/misc';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\nimport { matcherToMatcherField, matcherFieldToMatcher } from '../../utils/alertmanager';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (searchParams: URLSearchParams): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const comment = searchParams.get('comment');\n  const matchers = searchParams.getAll('matcher');\n\n  const formMatchers = parseQueryParamMatchers(matchers);\n  if (formMatchers.length) {\n    defaults.matchers = formMatchers.map(matcherToMatcherField);\n  }\n\n  if (comment) {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (searchParams: URLSearchParams, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers?.map(matcherToMatcherField) || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: `created ${dateTime().format('YYYY-MM-DD HH:mm')}`,\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', operator: MatcherOperator.equal }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(searchParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [urlSearchParams] = useURLSearchParams();\n\n  const defaultValues = useMemo(() => getDefaultFormValues(urlSearchParams, silence), [silence, urlSearchParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => state.unifiedAlerting.updateSilence);\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers: matchersFields } = data;\n    const matchers = matchersFields.map(matcherFieldToMatcher);\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={cx(styles.flexRow, styles.silencePeriod)}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea\n              {...register('comment', { required: { value: true, message: 'Required.' } })}\n              rows={5}\n              placeholder=\"Details about the silence\"\n            />\n          </Field>\n          <MatchedSilencedRules />\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n  textArea: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n  silencePeriod: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n});\n\nexport default SilencesEditor;\n","import React, { FC, useEffect, useCallback } from 'react';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\n\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\nimport { Authorize } from './components/Authorize';\n\nconst Silences: FC = () => {\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/silences\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\">\n      <Authorize actions={[AccessControlAction.AlertingInstancesExternalRead]}>\n        <AlertManagerPicker disabled={!isRoot} current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      </Authorize>\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && <LoadingPlaceholder text=\"loading silences...\" />}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC } from 'react';\nimport { AccessControlAction } from 'app/types';\nimport { contextSrv } from 'app/core/services/context_srv';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize: FC<Props> = ({ actions, children, fallback = true }) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\nimport React, { FC } from 'react';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import {\n  CombinedRule,\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  Rule,\n  RuleGroup,\n  RuleNamespace,\n  RulesSource,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO, RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\nimport { useMemo, useRef } from 'react';\nimport {\n  getAllRulesSources,\n  getRulesSourceByName,\n  isCloudRulesSource,\n  isGrafanaRulesSource,\n} from '../utils/datasource';\nimport { isAlertingRule, isAlertingRulerRule, isRecordingRulerRule } from '../utils/rules';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface CacheValue {\n  promRules?: RuleNamespace[];\n  rulerRules?: RulerRulesConfigDTO | null;\n  result: CombinedRuleNamespace[];\n}\n\n// this little monster combines prometheus rules and ruler rules to produce a unified data structure\n// can limit to a single rules source\nexport function useCombinedRuleNamespaces(rulesSourceName?: string): CombinedRuleNamespace[] {\n  const promRulesResponses = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesResponses = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  // cache results per rules source, so we only recalculate those for which results have actually changed\n  const cache = useRef<Record<string, CacheValue>>({});\n\n  const rulesSources = useMemo((): RulesSource[] => {\n    if (rulesSourceName) {\n      const rulesSource = getRulesSourceByName(rulesSourceName);\n      if (!rulesSource) {\n        throw new Error(`Unknown rules source: ${rulesSourceName}`);\n      }\n      return [rulesSource];\n    }\n    return getAllRulesSources();\n  }, [rulesSourceName]);\n\n  return useMemo(\n    () =>\n      rulesSources\n        .map((rulesSource): CombinedRuleNamespace[] => {\n          const rulesSourceName = isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n          const promRules = promRulesResponses[rulesSourceName]?.result;\n          const rulerRules = rulerRulesResponses[rulesSourceName]?.result;\n\n          const cached = cache.current[rulesSourceName];\n          if (cached && cached.promRules === promRules && cached.rulerRules === rulerRules) {\n            return cached.result;\n          }\n          const namespaces: Record<string, CombinedRuleNamespace> = {};\n\n          // first get all the ruler rules in\n          Object.entries(rulerRules || {}).forEach(([namespaceName, groups]) => {\n            const namespace: CombinedRuleNamespace = {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            };\n            namespaces[namespaceName] = namespace;\n            addRulerGroupsToCombinedNamespace(namespace, groups);\n          });\n\n          // then correlate with prometheus rules\n          promRules?.forEach(({ name: namespaceName, groups }) => {\n            const ns = (namespaces[namespaceName] = namespaces[namespaceName] || {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            });\n\n            addPromGroupsToCombinedNamespace(ns, groups);\n          });\n\n          const result = Object.values(namespaces);\n\n          cache.current[rulesSourceName] = { promRules, rulerRules, result };\n          return result;\n        })\n        .flat(),\n    [promRulesResponses, rulerRulesResponses, rulesSources]\n  );\n}\n\n// merge all groups in case of grafana managed, essentially treating namespaces (folders) as groups\nexport function flattenGrafanaManagedRules(namespaces: CombinedRuleNamespace[]) {\n  return namespaces.map((namespace) => {\n    const newNamespace: CombinedRuleNamespace = {\n      ...namespace,\n      groups: [],\n    };\n\n    // add default group with ungrouped rules\n    newNamespace.groups.push({\n      name: 'default',\n      rules: sortRulesByName(namespace.groups.flatMap((group) => group.rules)),\n    });\n\n    return newNamespace;\n  });\n}\n\nexport function sortRulesByName(rules: CombinedRule[]) {\n  return rules.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction addRulerGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RulerRuleGroupDTO[]): void {\n  namespace.groups = groups.map((group) => {\n    const combinedGroup: CombinedRuleGroup = {\n      name: group.name,\n      interval: group.interval,\n      source_tenants: group.source_tenants,\n      rules: [],\n    };\n    combinedGroup.rules = group.rules.map((rule) => rulerRuleToCombinedRule(rule, namespace, combinedGroup));\n    return combinedGroup;\n  });\n}\n\nfunction addPromGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RuleGroup[]): void {\n  groups.forEach((group) => {\n    let combinedGroup = namespace.groups.find((g) => g.name === group.name);\n    if (!combinedGroup) {\n      combinedGroup = {\n        name: group.name,\n        rules: [],\n      };\n      namespace.groups.push(combinedGroup);\n    }\n\n    (group.rules ?? []).forEach((rule) => {\n      const existingRule = getExistingRuleInGroup(rule, combinedGroup!, namespace.rulesSource);\n      if (existingRule) {\n        existingRule.promRule = rule;\n      } else {\n        combinedGroup!.rules.push(promRuleToCombinedRule(rule, namespace, combinedGroup!));\n      }\n    });\n  });\n}\n\nfunction promRuleToCombinedRule(rule: Rule, namespace: CombinedRuleNamespace, group: CombinedRuleGroup): CombinedRule {\n  return {\n    name: rule.name,\n    query: rule.query,\n    labels: rule.labels || {},\n    annotations: isAlertingRule(rule) ? rule.annotations || {} : {},\n    promRule: rule,\n    namespace: namespace,\n    group,\n  };\n}\n\nfunction rulerRuleToCombinedRule(\n  rule: RulerRuleDTO,\n  namespace: CombinedRuleNamespace,\n  group: CombinedRuleGroup\n): CombinedRule {\n  return isAlertingRulerRule(rule)\n    ? {\n        name: rule.alert,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : isRecordingRulerRule(rule)\n    ? {\n        name: rule.record,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : {\n        name: rule.grafana_alert.title,\n        query: '',\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      };\n}\n\n// find existing rule in group that matches the given prom rule\nfunction getExistingRuleInGroup(\n  rule: Rule,\n  group: CombinedRuleGroup,\n  rulesSource: RulesSource\n): CombinedRule | undefined {\n  if (isGrafanaRulesSource(rulesSource)) {\n    // assume grafana groups have only the one rule. check name anyway because paranoid\n    return group!.rules.find((existingRule) => existingRule.name === rule.name);\n  }\n  return (\n    // try finding a rule that matches name, labels, annotations and query\n    group!.rules.find(\n      (existingRule) => !existingRule.promRule && isCombinedRuleEqualToPromRule(existingRule, rule, true)\n    ) ??\n    // if that fails, try finding a rule that only matches name, labels and annotations.\n    // loki & prom can sometimes modify the query so it doesnt match, eg `2 > 1` becomes `1`\n    group!.rules.find(\n      (existingRule) => !existingRule.promRule && isCombinedRuleEqualToPromRule(existingRule, rule, false)\n    )\n  );\n}\n\nfunction isCombinedRuleEqualToPromRule(combinedRule: CombinedRule, rule: Rule, checkQuery = true): boolean {\n  if (combinedRule.name === rule.name) {\n    return (\n      JSON.stringify([\n        checkQuery ? hashQuery(combinedRule.query) : '',\n        combinedRule.labels,\n        combinedRule.annotations,\n      ]) ===\n      JSON.stringify([\n        checkQuery ? hashQuery(rule.query) : '',\n        rule.labels || {},\n        isAlertingRule(rule) ? rule.annotations || {} : {},\n      ])\n    );\n  }\n  return false;\n}\n\n// there can be slight differences in how prom & ruler render a query, this will hash them accounting for the differences\nfunction hashQuery(query: string) {\n  // one of them might be wrapped in parens\n  if (query.length > 1 && query[0] === '(' && query[query.length - 1] === ')') {\n    query = query.slice(1, -1);\n  }\n  // whitespace could be added or removed\n  query = query.replace(/\\s|\\n/g, '');\n  // labels matchers can be reordered, so sort the enitre string, esentially comparing just the character counts\n  return query.split('').sort().join('');\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","NoSilencesSplash","alertManagerSourceName","permissions","getInstancesPermissions","contextSrv","create","EmptyListCTA","title","buttonIcon","buttonLink","makeAMLink","buttonTitle","CallToActionCard","callToActionElement","message","stateOptions","Object","entries","SilenceState","map","key","value","label","getQueryStringKey","uniqueId","SilencesFilter","queryStringKey","setQueryStringKey","useState","queryParams","setQueryParams","useQueryParams","queryString","silenceState","getSilenceFiltersFromUrlParams","styles","useStyles2","getStyles","handleQueryStringChange","debounce","e","target","inputInvalid","length","parseMatchers","className","flexRow","Field","rowChild","Label","Stack","gap","Tooltip","content","Icon","name","size","invalid","error","Input","searchInput","prefix","onChange","defaultValue","placeholder","RadioButtonGroup","options","state","Button","variant","icon","onClick","setTimeout","theme","css","spacing","colors","border","strong","fieldLabel","silenceStateToState","SilenceStateTag","StateTag","ActionButton","restProps","cx","useStyles","getStyle","typography","sm","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","alertName","labels","reduce","labelKey","labelValue","CollapseToggle","onToggle","collapsed","AmAlertStateTag","status","colSpan","AlertLabels","tableMargin","colState","colName","silencedAlerts","tableStyles","getAlertTableStyles","table","colExpand","index","evenRow","fingerprint","SilenceDetails","silence","comment","createdBy","dateDisplayFormat","startsAtDate","dateMath","endsAtDate","container","format","text","primary","row","useFilteredSilences","silences","useMemo","silenceIdsString","silenceIds","filter","split","includes","id","every","matcher","matchers","some","isEqual","isRegex","topButtonContainer","addNewSilence","callout","background","secondary","info","calloutIcon","editButton","alertManagerAlerts","filteredSilences","showExpiredSilencesBanner","undefined","columns","handleExpireSilenceClick","expireSilenceAction","renderCell","data","Matchers","update","push","Link","href","ActionIcon","A","to","tooltip","useColumns","items","silencedBy","Authorize","actions","fallback","DynamicTable","cols","isExpandable","renderExpandedContent","wrapper","removeButton","matcherOptions","breakpoints","values","formApi","useFormContext","control","register","formState","errors","fields","append","remove","useFieldArray","required","InputControl","render","field","Select","menuShouldPortal","matcherFieldOptions","operator","rules","IconButton","type","newMatcher","MatcherOperator","MatchedSilencedRules","matchedAlertRules","setMatchedAlertRules","watch","matchedInstance","AlertStateTag","activeAt","startsWith","dateTime","fetchAllPromAndRulerRulesAction","combinedNamespaces","useCombinedRuleNamespaces","useDebounce","matchedInstances","flatMap","namespace","groups","group","combinedRule","promRule","rule","isAlertingRule","findAlertInstancesWithMatchers","alerts","Badge","badge","color","slice","moreMatches","lg","SilencePeriod","getValues","onChangeStartsAt","fieldState","startsAtInvalid","useController","validate","onChangeEndsAt","endsAtInvalid","onChangeTimeZone","timeZone","from","timeRange","TimeRangeInput","raw","newValue","hideTimeZone","hideQuickRanges","getDefaultFormValues","searchParams","now","interval","parse","addDurationToDate","hours","toISOString","matcherToMatcherField","matcherName","matcherValue","DefaultTimeZone","config","defaults","get","getAll","formMatchers","parseQueryParamMatchers","defaultsFromQuery","textArea","silencePeriod","urlSearchParams","useURLSearchParams","defaultValues","formAPI","useForm","loading","useUnifiedAlertingSelector","updateSilence","unifiedAlerting","handleSubmit","setValue","clearErrors","prevDuration","setPrevDuration","isValidDate","parseDuration","startValue","valueOf","nextDuration","onSubmit","matchersFields","matcherFieldToMatcher","payload","pickBy","createOrUpdateSilenceAction","exitOnSave","successMessage","FieldSet","keys","TextArea","rows","disabled","LinkButton","fill","withErrorBoundary","setAlertManagerSourceName","useAlertManagerSourceName","alertsRequests","amAlerts","alertsRequest","initialAsyncRequestState","isRoot","useLocation","pathname","endsWith","fetchAll","fetchSilencesAction","fetchAmAlertsAction","setInterval","SILENCES_POLL_INTERVAL_MS","clearInterval","result","getSilenceById","useCallback","find","AlertingPageWrapper","pageId","AccessControlAction","AlertManagerPicker","Alert","severity","LoadingPlaceholder","exact","path","match","params","style","children","isLoading","navModel","getNavModel","useSelector","navIndex","action","tooltipPlacement","rest","ariaLabel","placement","alertStateToState","AlertState","TagList","tags","matcherToOperator","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","rulesSourceName","promRulesResponses","promRules","rulerRulesResponses","rulerRules","cache","rulesSources","rulesSource","getRulesSourceByName","Error","getAllRulesSources","isCloudRulesSource","cached","namespaces","forEach","namespaceName","combinedGroup","source_tenants","isAlertingRulerRule","query","expr","annotations","rulerRule","isRecordingRulerRule","record","grafana_alert","rulerRuleToCombinedRule","addRulerGroupsToCombinedNamespace","g","existingRule","isGrafanaRulesSource","isCombinedRuleEqualToPromRule","getExistingRuleInGroup","promRuleToCombinedRule","addPromGroupsToCombinedNamespace","flat","flattenGrafanaManagedRules","newNamespace","sort","a","b","localeCompare","checkQuery","JSON","stringify","hashQuery","replace","join","search","URLSearchParams","searchValues","locationService","shape","borderRadius","weak","actionsCell"],"sourceRoot":""}