{"version":3,"file":"AlertAmRoutes.43435d241952ff5b1466.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/AmRoutes.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/GrafanaAppBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/api/onCallApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/onCall.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/usePluginBridge.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/types/pluginBridges.ts"],"sourcesContent":["import { isUndefined, omitBy } from 'lodash';\nimport { Validate } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, Route } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField, parseMatcher } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { parseInterval, timeOptions } from './time';\n\nconst defaultValueAndType: [string, string] = ['', ''];\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    [] as MatcherFieldValue[]\n  );\n\nconst intervalToValueAndType = (\n  strValue: string | undefined,\n  defaultValue?: typeof defaultValueAndType\n): [string, string] => {\n  if (!strValue) {\n    return defaultValue ?? defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder' },\n  { label: 'alertname', value: 'alertname' },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n  muteTimeIntervals: [],\n};\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route) {\n    return [emptyRoute, {}];\n  }\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return [formAmRoute, id2route];\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  // Frontend migration to use object_matchers instead of matchers\n  const matchers = route.matchers\n    ? route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? []\n    : route.object_matchers?.map(\n        (matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] } as MatcherFieldValue)\n      ) ?? [];\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait, ['', 's']);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval, ['', 'm']);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval, ['', 'h']);\n\n  return [\n    {\n      id,\n      object_matchers: [\n        ...matchers,\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      overrideGrouping: Array.isArray(route.group_by) && route.group_by.length !== 0,\n      groupBy: route.group_by ?? [],\n      overrideTimings: [groupWaitValue, groupIntervalValue, repeatIntervalValue].some(Boolean),\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n      muteTimeIntervals: route.mute_time_intervals ?? [],\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string | undefined,\n  formAmRoute: FormAmRoute,\n  id2ExistingRoute: Record<string, Route>\n): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupWaitValueType,\n    groupIntervalValue,\n    groupIntervalValueType,\n    repeatIntervalValue,\n    repeatIntervalValueType,\n  } = formAmRoute;\n\n  const group_by = overrideGrouping && groupBy ? groupBy : [];\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? `${groupWaitValue}${groupWaitValueType}` : undefined;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? `${groupIntervalValue}${groupIntervalValueType}` : undefined;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? `${repeatIntervalValue}${repeatIntervalValueType}` : undefined;\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: formAmRoute.object_matchers.length\n      ? formAmRoute.object_matchers.map((matcher) => [matcher.name, matcher.operator, matcher.value])\n      : undefined,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: formAmRoute.routes.map((subRoute) =>\n      formAmRouteToAmRoute(alertManagerSourceName, subRoute, id2ExistingRoute)\n    ),\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n  };\n\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return omitBy(amRoute, isUndefined);\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","import { cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={{ ...routes, overrideTimings: true, overrideGrouping: true }} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      aria-label=\"Default contact point\"\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link\n                  className={styles.linkText}\n                  href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n                >\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            className={styles.collapse}\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n              data-testid=\"am-group-wait\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder={'30'} />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group wait type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n              data-testid=\"am-group-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder={'5'} />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n              data-testid=\"am-repeat-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder=\"4\" />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Repeat interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nimport { FormAmRoute } from '../../types/amroutes';\n\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { Authorize } from '../../components/Authorize';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n  readOnly?: boolean;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n  readOnly = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  return (\n    <div className={styles.container} data-testid=\"am-root-route-container\">\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && !readOnly && (\n          <Authorize actions={[permissions.update]}>\n            <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n              Edit\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA: FC<EmptyAreaWithCTAProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    button: css`\n      margin: ${theme.spacing(2, 0, 1)};\n    `,\n  };\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AlertmanagerConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { timeIntervalToString } from '../utils/alertmanager';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useAlertManagerSourceName } from './useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  return useMemo(() => {\n    const { result } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n    const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      config?.mute_time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [alertManagerSourceName, amConfigs]);\n}\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n  Badge,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n  const muteTimingOptions = useMuteTimingOptions();\n\n  const receiversWithOnCallOnTop = receivers.sort((receiver1, receiver2) => {\n    if (receiver1.grafanaAppReceiverType === SupportedPlugin.OnCall) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue, watch }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <VerticalGroup justify=\"flex-start\" spacing=\"md\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        const localPath = `object_matchers[${index}]`;\n                        return (\n                          <HorizontalGroup key={field.id} align=\"flex-start\" height=\"auto\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`${localPath}.operator` as const}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton\n                              className={styles.removeButton}\n                              tooltip=\"Remove matcher\"\n                              name={'trash-alt'}\n                              onClick={() => remove(index)}\n                            >\n                              Remove\n                            </IconButton>\n                          </HorizontalGroup>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </VerticalGroup>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receiversWithOnCallOnTop}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n          </Field>\n          {watch().overrideGrouping && (\n            <Field\n              label=\"Group by\"\n              description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n            >\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    aria-label=\"Group by\"\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={[...commonGroupByOptions, ...groupByOptions]}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n          </Field>\n          {watch().overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group wait value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group wait type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Repeat interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Repeat interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, LinkButton, Link, useStyles2, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig, MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport {\n  getTimeString,\n  getWeekdayString,\n  getDaysOfMonthString,\n  getMonthsString,\n  getYearsString,\n} from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { AsyncRequestState, initialAsyncRequestState } from '../../utils/redux';\nimport { DynamicTable, DynamicTableItemProps, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\n\ninterface Props {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable: FC<Props> = ({ alertManagerSourceName, muteTimingNames, hideActions }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const { result }: AsyncRequestState<AlertManagerCortexConfig> =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    const muteTimings = result?.alertmanager_config?.mute_time_intervals ?? [];\n    const muteTimingsProvenances = result?.alertmanager_config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [\n    result?.alertmanager_config?.mute_time_intervals,\n    result?.alertmanager_config?.muteTimeProvenances,\n    muteTimingNames,\n  ]);\n\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName);\n\n  return (\n    <div className={styles.container}>\n      {!hideActions && <h5>Mute timings</h5>}\n      {!hideActions && (\n        <p>\n          Mute timings are a named interval of time that may be referenced in the notification policy tree to mute\n          particular notification policies for specific times of the day.\n        </p>\n      )}\n      {!hideActions && items.length > 0 && (\n        <Authorize actions={[permissions.create]}>\n          <LinkButton\n            className={styles.addMuteButton}\n            icon=\"plus\"\n            variant=\"primary\"\n            href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          >\n            New mute timing\n          </LinkButton>\n        </Authorize>\n      )}\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={contextSrv.hasPermission(permissions.create)}\n        />\n      ) : (\n        <p>No mute timings configured</p>\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName))}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false, setMuteTimingName: (name: string) => void) {\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const userHasEditPermissions = contextSrv.hasPermission(permissions.update);\n  const userHasDeletePermissions = contextSrv.hasPermission(permissions.delete);\n  const showActions = !hideActions && (userHasEditPermissions || userHasDeletePermissions);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => renderTimeIntervals(data.time_intervals),\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data }) {\n          if (data.provenance) {\n            return (\n              <div>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"file-alt\" title=\"View mute timing\" />\n                </Link>\n              </div>\n            );\n          }\n          return (\n            <div>\n              <Authorize actions={[permissions.update]}>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"edit\" title=\"Edit mute timing\" />\n                </Link>\n              </Authorize>\n              <Authorize actions={[permissions.delete]}>\n                <IconButton\n                  name={'trash-alt'}\n                  title=\"Delete mute timing\"\n                  onClick={() => setMuteTimingName(data.name)}\n                />\n              </Authorize>\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, setMuteTimingName, showActions, permissions]);\n}\n\nfunction renderTimeIntervals(timeIntervals: TimeInterval[]) {\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years } = interval;\n    const timeString = getTimeString(times);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  addMuteButton: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { Authorize } from '../Authorize';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { MuteTimingsTable } from './MuteTimingsTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && !readOnly && (\n          <Authorize actions={[permissions.create]}>\n            <Button\n              className={styles.addNestedRoutingBtn}\n              icon=\"plus\"\n              onClick={() => {\n                setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n                setIsAddMode(true);\n              }}\n              variant=\"secondary\"\n              type=\"button\"\n            >\n              Add nested policy\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <div className={gridStyles.titleCell}>Mute timings</div>\n      <div className={gridStyles.valueCell}>\n        <MuteTimingsTable\n          alertManagerSourceName={alertManagerSourceName!}\n          muteTimingNames={routes.muteTimeIntervals}\n          hideActions\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import { intersectionWith, isEqual } from 'lodash';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Button, ConfirmModal, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { matcherFieldToMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyArea } from '../EmptyArea';\nimport { GrafanaAppBadge } from '../receivers/grafanaAppReceivers/GrafanaAppBadge';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\nimport { Matchers } from '../silences/Matchers';\n\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n  filters?: { queryString?: string; contactPoint?: string };\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const getFilteredRoutes = (routes: FormAmRoute[], labelMatcherQuery?: string, contactPointQuery?: string) => {\n  const matchers = parseMatchers(labelMatcherQuery ?? '');\n\n  let filteredRoutes = routes;\n\n  if (matchers.length) {\n    filteredRoutes = routes.filter((route) => {\n      const routeMatchers = route.object_matchers.map(matcherFieldToMatcher);\n      return intersectionWith(routeMatchers, matchers, isEqual).length > 0;\n    });\n  }\n\n  if (contactPointQuery && contactPointQuery.length > 0) {\n    filteredRoutes = filteredRoutes.filter((route) =>\n      route.receiver.toLowerCase().includes(contactPointQuery.toLowerCase())\n    );\n  }\n\n  return filteredRoutes;\n};\n\nexport const updatedRoute = (routes: FormAmRoute[], updatedRoute: FormAmRoute): FormAmRoute[] => {\n  const newRoutes = [...routes];\n  const editIndex = newRoutes.findIndex((route) => route.id === updatedRoute.id);\n\n  if (editIndex >= 0) {\n    newRoutes[editIndex] = {\n      ...newRoutes[editIndex],\n      ...updatedRoute,\n    };\n  }\n  return newRoutes;\n};\n\nexport const deleteRoute = (routes: FormAmRoute[], routeId: string): FormAmRoute[] => {\n  return routes.filter((route) => route.id !== routeId);\n};\n\nexport const getGrafanaAppReceiverType = (receivers: AmRouteReceiver[], receiverName: string) => {\n  return receivers.find((receiver) => receiver.label === receiverName)?.grafanaAppReceiverType;\n};\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  filters,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [deletingRouteId, setDeletingRouteId] = useState<string | undefined>(undefined);\n  const [expandedId, setExpandedId] = useState<string | number>();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n\n  const showActions = !readOnly && (canEditRoutes || canDeleteRoutes);\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => {\n        return item.data.object_matchers.length ? (\n          <Matchers matchers={item.data.object_matchers.map(matcherFieldToMatcher)} />\n        ) : (\n          <span>Matches all alert instances</span>\n        );\n      },\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => (item.data.overrideGrouping && item.data.groupBy.join(', ')) || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => {\n        const type = getGrafanaAppReceiverType(receivers, item.data.receiver);\n        return item.data.receiver ? (\n          <>\n            {item.data.receiver} {type && <GrafanaAppBadge grafanaAppType={type} />}\n          </>\n        ) : (\n          '-'\n        );\n      },\n      size: 5,\n    },\n    {\n      id: 'muteTimings',\n      label: 'Mute timings',\n      renderCell: (item) => item.data.muteTimeIntervals.join(', ') || '-',\n      size: 5,\n    },\n    ...(!showActions\n      ? []\n      : [\n          {\n            id: 'actions',\n            label: 'Actions',\n            // eslint-disable-next-line react/display-name\n            renderCell: (item) => {\n              if (item.renderExpandedContent) {\n                return null;\n              }\n\n              const expandWithCustomContent = () => {\n                expandItem(item);\n                setEditMode(true);\n              };\n\n              return (\n                <>\n                  <HorizontalGroup>\n                    <Button\n                      aria-label=\"Edit route\"\n                      icon=\"pen\"\n                      onClick={expandWithCustomContent}\n                      size=\"sm\"\n                      type=\"button\"\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                    <IconButton\n                      aria-label=\"Delete route\"\n                      name=\"trash-alt\"\n                      onClick={() => {\n                        setDeletingRouteId(item.data.id);\n                      }}\n                      type=\"button\"\n                    />\n                  </HorizontalGroup>\n                </>\n              );\n            },\n            size: '100px',\n          } as RouteTableColumnProps,\n        ]),\n  ];\n\n  const filteredRoutes = useMemo(\n    () => getFilteredRoutes(routes, filters?.queryString, filters?.contactPoint),\n    [routes, filters]\n  );\n\n  const dynamicTableRoutes = useMemo(\n    () => prepareItems(isAddMode ? routes : filteredRoutes),\n    [isAddMode, routes, filteredRoutes]\n  );\n\n  // expand the last item when adding or reset when the length changed\n  useEffect(() => {\n    if (isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(dynamicTableRoutes[dynamicTableRoutes.length - 1].id);\n    }\n    if (!isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(undefined);\n    }\n  }, [isAddMode, dynamicTableRoutes]);\n\n  if (routes.length > 0 && filteredRoutes.length === 0) {\n    return (\n      <EmptyArea>\n        <p>No policies found</p>\n      </EmptyArea>\n    );\n  }\n\n  return (\n    <>\n      <DynamicTable\n        cols={cols}\n        isExpandable={true}\n        items={dynamicTableRoutes}\n        testIdGenerator={() => 'am-routes-row'}\n        onCollapse={collapseItem}\n        onExpand={expandItem}\n        isExpanded={(item) => expandedId === item.id}\n        renderExpandedContent={(item: RouteTableItemProps) =>\n          isAddMode || editMode ? (\n            <AmRoutesExpandedForm\n              onCancel={() => {\n                if (isAddMode) {\n                  onCancelAdd();\n                }\n                setEditMode(false);\n              }}\n              onSave={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n\n                setEditMode(false);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n            />\n          ) : (\n            <AmRoutesExpandedRead\n              onChange={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n              readOnly={readOnly}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          )\n        }\n      />\n      <ConfirmModal\n        isOpen={!!deletingRouteId}\n        title=\"Delete notification policy\"\n        body=\"Deleting this notification policy will permanently remove it. Are you sure you want to delete this policy?\"\n        confirmText=\"Yes, delete\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          if (deletingRouteId) {\n            const newRoutes = deleteRoute(routes, deletingRouteId);\n            onChange(newRoutes);\n            setDeletingRouteId(undefined);\n          }\n        }}\n        onDismiss={() => setDeletingRouteId(undefined)}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Input, Label, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyArrayFieldMatcher, emptyRoute } from '../../utils/amroutes';\nimport { getNotificationPoliciesFilters } from '../../utils/misc';\nimport { EmptyArea } from '../EmptyArea';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { MatcherFilter } from '../alert-groups/MatcherFilter';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { AmRoutesTable } from './AmRoutesTable';\n\nexport interface AmSpecificRoutingProps {\n  alertManagerSourceName: string;\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n}\n\ninterface Filters {\n  queryString?: string;\n  contactPoint?: string;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({\n  alertManagerSourceName,\n  onChange,\n  onRootRouteEdit,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const [actualRoutes, setActualRoutes] = useState([...routes.routes]);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canCreateNotifications = contextSrv.hasPermission(permissions.create);\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n\n  const [filters, setFilters] = useState<Filters>({ queryString, contactPoint });\n\n  useDebounce(\n    () => {\n      setSearchParams({ queryString: filters.queryString, contactPoint: filters.contactPoint });\n    },\n    400,\n    [filters]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setFilters({ queryString: undefined, contactPoint: undefined });\n    setSearchParams({ queryString: undefined, contactPoint: undefined });\n  };\n\n  const addNewRoute = () => {\n    clearFilters();\n    setIsAddMode(true);\n    setActualRoutes(() => [\n      ...routes.routes,\n      {\n        ...emptyRoute,\n        matchers: [emptyArrayFieldMatcher],\n      },\n    ]);\n  };\n\n  const onCancelAdd = () => {\n    setIsAddMode(false);\n    setActualRoutes([...routes.routes]);\n  };\n\n  const onTableRouteChange = (newRoutes: FormAmRoute[]): void => {\n    onChange({\n      ...routes,\n      routes: newRoutes,\n    });\n\n    if (isAddMode) {\n      setIsAddMode(false);\n    }\n  };\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        readOnly ? (\n          <EmptyArea>\n            <p>There is no default contact point configured for the root route.</p>\n          </EmptyArea>\n        ) : (\n          <EmptyAreaWithCTA\n            buttonIcon=\"rocket\"\n            buttonLabel=\"Set a default contact point\"\n            onButtonClick={onRootRouteEdit}\n            text=\"You haven't set a default contact point for the root route yet.\"\n            showButton={canCreateNotifications}\n          />\n        )\n      ) : actualRoutes.length > 0 ? (\n        <>\n          <div>\n            {!isAddMode && (\n              <div className={styles.searchContainer}>\n                <MatcherFilter\n                  onFilterChange={(filter) =>\n                    setFilters((currentFilters) => ({ ...currentFilters, queryString: filter }))\n                  }\n                  defaultQueryString={filters.queryString ?? ''}\n                  className={styles.filterInput}\n                />\n                <div className={styles.filterInput}>\n                  <Label>Search by contact point</Label>\n                  <Input\n                    onChange={({ currentTarget }) =>\n                      setFilters((currentFilters) => ({ ...currentFilters, contactPoint: currentTarget.value }))\n                    }\n                    value={filters.contactPoint ?? ''}\n                    placeholder=\"Search by contact point\"\n                    data-testid=\"search-query-input\"\n                    prefix={<Icon name={'search'} />}\n                  />\n                </div>\n                {(queryString || contactPoint) && (\n                  <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters} className={styles.clearFilterBtn}>\n                    Clear filters\n                  </Button>\n                )}\n              </div>\n            )}\n\n            {!isAddMode && !readOnly && (\n              <Authorize actions={[permissions.create]}>\n                <div className={styles.addMatcherBtnRow}>\n                  <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n                    New policy\n                  </Button>\n                </div>\n              </Authorize>\n            )}\n          </div>\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            readOnly={readOnly}\n            onCancelAdd={onCancelAdd}\n            onChange={onTableRouteChange}\n            receivers={receivers}\n            routes={actualRoutes}\n            filters={{ queryString, contactPoint }}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        </>\n      ) : readOnly ? (\n        <EmptyArea>\n          <p>There are no specific policies configured.</p>\n        </EmptyArea>\n      ) : (\n        <EmptyAreaWithCTA\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n          showButton={canCreateNotifications}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column wrap;\n    `,\n    searchContainer: css`\n      display: flex;\n      flex-flow: row nowrap;\n      padding-bottom: ${theme.spacing(2)};\n      border-bottom: 1px solid ${theme.colors.border.strong};\n    `,\n    clearFilterBtn: css`\n      align-self: flex-end;\n      margin-left: ${theme.spacing(1)};\n    `,\n    filterInput: css`\n      width: 340px;\n      & + & {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    addMatcherBtnRow: css`\n      display: flex;\n      flex-flow: column nowrap;\n      padding: ${theme.spacing(2)} 0;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { MuteTimingsTable } from './components/amroutes/MuteTimingsTable';\nimport { useGetAmRouteReceiverWithGrafanaAppTypes } from './components/receivers/grafanaAppReceivers/grafanaApp';\nimport { AmRouteReceiver } from './components/receivers/grafanaAppReceivers/types';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const { useGetAlertmanagerChoiceQuery } = alertmanagerApi;\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const { currentData: alertmanagerChoice } = useGetAlertmanagerChoiceQuery();\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError,\n  } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers: AmRouteReceiver[] = useGetAmRouteReceiverWithGrafanaAppTypes(config?.receivers ?? []);\n\n  const isProvisioned = useMemo(() => Boolean(config?.route?.provenance), [config?.route]);\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    if (!result) {\n      return;\n    }\n\n    const newData = formAmRouteToAmRoute(\n      alertManagerSourceName,\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"am-routes\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  const readOnly = alertManagerSourceName\n    ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || isProvisioned\n    : true;\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      <GrafanaAlertmanagerDeliveryWarning\n        currentAlertmanager={alertManagerSourceName}\n        alertmanagerChoice={alertmanagerChoice}\n      />\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.RootNotificationPolicy} />}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            readOnly={readOnly}\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            alertManagerSourceName={alertManagerSourceName}\n            onChange={handleSave}\n            readOnly={readOnly}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <MuteTimingsTable alertManagerSourceName={alertManagerSourceName} />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoice: build.query<AlertmanagerChoice, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n      transformResponse: (response: AlertmanagersChoiceResponse) => response.alertmanagersChoice,\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  alertmanagerChoice?: AlertmanagerChoice;\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({\n  alertmanagerChoice,\n  currentAlertmanager,\n}: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  if (currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME) {\n    return null;\n  }\n\n  if (alertmanagerChoice !== AlertmanagerChoice.External) {\n    return null;\n  }\n\n  return (\n    <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n      Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n      will not affect delivery of your alerts!\n      <div className={styles.adminHint}>\n        You can change the configuration on the Alerting Admin page. If you do not have access, contact your\n        Administrator\n      </div>\n    </Alert>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useEffect, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\n\nimport { LogMessages } from '../../Analytics';\n\ninterface Props {\n  className?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, defaultQueryString }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const onSearchInputChanged = useMemo(\n    () =>\n      debounce((e: FormEvent<HTMLInputElement>) => {\n        logInfo(LogMessages.filterByLabel);\n\n        const target = e.target as HTMLInputElement;\n        onFilterChange(target.value);\n      }, 600),\n    [onFilterChange]\n  );\n\n  useEffect(() => onSearchInputChanged.cancel(), [onSearchInputChanged]);\n\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <div className={className}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Search by label</span>\n          <Tooltip\n            content={\n              <div>\n                Filter alerts using label querying, ex:\n                <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        onChange={onSearchInputChanged}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport interface ReceiverWithTypes extends Receiver {\n  grafanaAppReceiverType?: SupportedPlugin;\n}\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from './types';\n\nexport const GrafanaAppBadge = ({ grafanaAppType }: { grafanaAppType: SupportedPlugin }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.wrapper}>\n      <HorizontalGroup align=\"center\" spacing=\"xs\">\n        <img src={GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[grafanaAppType]} alt=\"\" height=\"12px\" />\n        <span>{grafanaAppType}</span>\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    text-align: left;\n    height: 22px;\n    display: inline-flex;\n    padding: 1px 4px;\n    border-radius: 3px;\n    border: 1px solid rgba(245, 95, 62, 1);\n    color: rgba(245, 95, 62, 1);\n    font-weight: ${theme.typography.fontWeightRegular};\n  `,\n});\n","import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { alertingApi } from './alertingApi';\nexport interface OnCallIntegration {\n  integration_url: string;\n}\nexport type OnCallIntegrationsResponse = OnCallIntegration[];\nexport type OnCallIntegrationsUrls = string[];\n\nexport const onCallApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getOnCallIntegrations: build.query<OnCallIntegrationsUrls, void>({\n      queryFn: async () => {\n        const integrations = await fetchOnCallIntegrations();\n        return { data: integrations };\n      },\n      providesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\nexport async function fetchOnCallIntegrations(): Promise<OnCallIntegrationsUrls> {\n  try {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<OnCallIntegrationsResponse>({\n        url: '/api/plugin-proxy/grafana-oncall-app/api/internal/v1/alert_receive_channels/',\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return response.data.map((result) => result.integration_url);\n  } catch (error) {\n    return [];\n  }\n}\nexport const { useGetOnCallIntegrationsQuery } = onCallApi;\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nexport const isInOnCallIntegrations = (url: string, integrationsUrls: string[]) => {\n  return integrationsUrls.includes(url);\n};\n\nexport const isOnCallReceiver = (receiver: Receiver, integrationsUrls: string[]) => {\n  if (!receiver.grafana_managed_receiver_configs) {\n    return false;\n  }\n  // A receiver it's an onCall contact point if it includes only one integration, and this integration it's an onCall\n  // An integration it's an onCall type if it's included in the list of integrations returned by the onCall api endpoint\n  const onlyOneIntegration = receiver.grafana_managed_receiver_configs.length === 1;\n  const isOncall = isInOnCallIntegrations(\n    receiver.grafana_managed_receiver_configs[0]?.settings?.url ?? '',\n    integrationsUrls\n  );\n  return onlyOneIntegration && isOncall;\n};\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useGetOnCallIntegrationsQuery } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver, ReceiverWithTypes } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = useGetOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n\nexport const useGetReceiversWithGrafanaAppTypes = (receivers: Receiver[]): ReceiverWithTypes[] => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  return receivers.map((receiver: Receiver) => {\n    return {\n      ...receiver,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n  });\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { useAsync } from 'react-use';\n\nimport { PluginMeta } from '@grafana/data';\nimport { getPluginSettings } from 'app/features/plugins/pluginSettings';\n\nimport { PluginID } from '../components/PluginBridge';\ninterface PluginBridgeHookResponse {\n  loading: boolean;\n  installed?: boolean;\n  error?: Error;\n  settings?: PluginMeta<{}>;\n}\n\nexport function usePluginBridge(plugin: PluginID): PluginBridgeHookResponse {\n  const { loading, error, value } = useAsync(() => getPluginSettings(plugin, { showErrorAlert: false }));\n\n  const installed = value && !error && !loading;\n  const enabled = value?.enabled;\n  const isLoading = loading && !value;\n\n  if (isLoading) {\n    return { loading: true };\n  }\n\n  if (!installed || !enabled) {\n    return { loading: false, installed: false };\n  }\n\n  return { loading, installed: true, settings: value };\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","export enum SupportedPlugin {\n  Incident = 'grafana-incident-app',\n  OnCall = 'grafana-oncall-app',\n  MachineLearning = 'grafana-ml-app',\n}\n"],"names":["defaultValueAndType","matchersToArrayFieldMatchers","matchers","isRegex","acc","name","value","intervalToValueAndType","strValue","defaultValue","valueType","timeOption","time","opt","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","amRouteToFormAmRoute","route","id","id2route","formRoutes","subRoute","subFormRoute","subId2Route","matcher","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","formAmRouteToAmRoute","alertManagerSourceName","formAmRoute","id2ExistingRoute","existing","overrideGrouping","groupBy","overrideTimings","group_by","group_wait","group_interval","repeat_interval","amRoute","operator","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","getFormStyles","theme","AmRootRouteForm","onCancel","onSave","receivers","routes","styles","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","Form","control","errors","setValue","Field","InputControl","onChange","ref","field","Select","Link","opts","Collapse","invalid","Input","Button","getGridStyles","AmRootRouteRead","receiver","groupWait","groupInterval","repeatInterval","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","readOnly","getStyles","permissions","Authorize","EmptyArea","children","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","commonProps","prepareItems","items","idCreator","item","index","useMuteTimingOptions","alertManagers","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","result","interval","AmRoutesExpandedForm","formStyles","muteTimingOptions","receiversWithOnCallOnTop","receiver1","receiver2","register","watch","FieldArray","fields","append","remove","Badge","localPath","IconButton","Switch","commonSpacing","MuteTimingsTable","muteTimingNames","hideActions","dispatch","muteTimingName","setMuteTimingName","muteTimings","muteTimingsProvenances","mute","columns","useColumns","DynamicTable","ConfirmModal","userHasEditPermissions","userHasDeletePermissions","showActions","data","Provisioning","renderTimeIntervals","timeIntervals","times","weekdays","days_of_month","months","years","timeString","weekdayString","daysString","monthsString","yearsString","AmRoutesExpandedRead","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","newSubroutes","newRoutes","getFilteredRoutes","labelMatcherQuery","contactPointQuery","filteredRoutes","routeMatchers","updatedRoute","editIndex","deleteRoute","routeId","getGrafanaAppReceiverType","receiverName","onCancelAdd","filters","editMode","setEditMode","deletingRouteId","setDeletingRouteId","expandedId","setExpandedId","canEditRoutes","canDeleteRoutes","expandItem","collapseItem","cols","Matchers","type","GrafanaAppBadge","expandWithCustomContent","dynamicTableRoutes","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","canCreateNotifications","searchParams","setSearchParams","useURLSearchParams","queryString","contactPoint","setFilters","useDebounce","clearFilters","addNewRoute","onTableRouteChange","MatcherFilter","filter","currentFilters","Label","currentTarget","Icon","AmRoutes","useGetAlertmanagerChoiceQuery","alertmanagerApi","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","alertmanagerChoice","fetchConfig","resultLoading","resultError","config","rootRoute","isProvisioned","enterRootRouteEditMode","exitRootRouteEditMode","useCleanup","handleSave","newData","AlertingPageWrapper","NoAlertManagerWarning","AlertManagerPicker","Alert","GrafanaAlertmanagerDeliveryWarning","LoadingPlaceholder","build","response","pageId","pageNav","isLoading","actions","fallback","action","currentAlertmanager","NoAlertManagersAvailable","OtherAlertManagersAvailable","availableAlertManagers","_","hasOtherAMs","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","className","onFilterChange","defaultQueryString","onSearchInputChanged","e","target","searchIcon","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE","grafanaAppType","onCallApi","alertingApi","fetchOnCallIntegrations","lastValueFrom","useGetOnCallIntegrationsQuery","isInOnCallIntegrations","url","integrationsUrls","isOnCallReceiver","onlyOneIntegration","isOncall","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","useGetReceiversWithGrafanaAppTypes","useIsAlertManagerAvailable","alertManagerName","am","queryParams","updateQueryParams","isAlertManagerAvailable","update","querySource","storeSource","useAlertManagersByPermission","accessType","plugin","loading","error","installed","enabled","search","searchValues","replace","SupportedPlugin"],"sourceRoot":""}