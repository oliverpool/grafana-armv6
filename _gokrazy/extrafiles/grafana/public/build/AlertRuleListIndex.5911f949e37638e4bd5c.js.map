{"version":3,"file":"AlertRuleListIndex.5911f949e37638e4bd5c.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/components/DeprecationNotice.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import React from 'react';\n\nimport { Modal, VerticalGroup } from '@grafana/ui';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { useCallback } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { Icon, Button, LinkButton, Card } from '@grafana/ui';\n\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text: string) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card>\n      <Card.Heading>{renderText(rule.name)}</Card.Heading>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import React, { FC } from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst DeprecationNotice: FC<{}> = () => (\n  <Alert severity=\"warning\" title=\"Grafana legacy alerting is going away soon\">\n    <p>\n      You are using Grafana legacy alerting, it has been deprecated and will be removed in the next major version of\n      Grafana.\n      <br />\n      We encourage you to upgrade to the new Grafana Alerting experience.\n    </p>\n    <p>\n      See{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/difference-old-new/\">\n        What’s New with Grafana Alerting\n      </a>{' '}\n      to learn more about what&lsquo;s new or learn{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/opt-in/\">\n        how to enable the new Grafana Alerting feature\n      </a>\n      .\n    </p>\n  </Alert>\n);\n\nexport { DeprecationNotice };\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AlertRule, StoreState } from 'app/types';\n\nimport { ShowModalReactEvent } from '../../types/events';\n\nimport { AlertHowToModal } from './AlertHowToModal';\nimport AlertRuleItem from './AlertRuleItem';\nimport { DeprecationNotice } from './components/DeprecationNotice';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navId=\"alert-list\">\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <DeprecationNotice />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React from 'react';\n\nimport { logInfo } from '@grafana/runtime';\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { LogMessages } from '../../Analytics';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n  dsLink: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FC, useCallback, useState } from 'react';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { updateRulesOrder } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isRecordingRule } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ntype CombinedRuleWithUID = { uid: string } & CombinedRule;\n\nexport const ReorderCloudGroupModal: FC<ModalProps> = (props) => {\n  const { group, namespace, onClose } = props;\n  const [pending, setPending] = useState<boolean>(false);\n  const [rulesList, setRulesList] = useState<CombinedRule[]>(group.rules);\n\n  const styles = useStyles2(getStyles);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const sameIndex = result.destination.index === result.source.index;\n      if (sameIndex) {\n        return;\n      }\n\n      const newOrderedRules = reorder(rulesList, result.source.index, result.destination.index);\n      setRulesList(newOrderedRules); // optimistically update the new rules list\n\n      const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n      const rulerRules = compact(newOrderedRules.map((rule) => rule.rulerRule));\n\n      setPending(true);\n      dispatch(\n        updateRulesOrder({\n          namespaceName: namespace.name,\n          groupName: group.name,\n          rulesSourceName: rulesSourceName,\n          newRules: rulerRules,\n        })\n      )\n        .unwrap()\n        .finally(() => {\n          setPending(false);\n        });\n    },\n    [group.name, namespace.name, namespace.rulesSource, rulesList]\n  );\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: CombinedRuleWithUID[] = rulesList.map((rule) => ({\n    ...rule,\n    uid: String(hashRulerRule(rule.rulerRule!)), // TODO fix this coercion?\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <div\n              ref={droppableProvided.innerRef}\n              className={cx(styles.listContainer, pending && styles.disabled)}\n              {...droppableProvided.droppableProps}\n            >\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={pending}>\n                  {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: CombinedRule;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isAlertingRule(rule.promRule) && <AlertStateTag state={rule.promRule.state} />}\n      {isRecordingRule(rule.promRule) && <Badge text={'Recording'} color={'blue'} />}\n      <div className={styles.listItemName}>{rule.name}</div>\n      <Icon name={'draggabledots'} />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader: FC<ModalHeaderProps> = ({ namespace, group }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 640px;\n    max-height: 80%;\n    overflow: hidden;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    gap: ${theme.spacing()};\n\n    background: ${theme.colors.background.primary};\n    color: ${theme.colors.text.secondary};\n\n    border-bottom: solid 1px ${theme.colors.border.medium};\n    padding: ${theme.spacing(1)} ${theme.spacing(2)};\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &.isClone {\n      border: solid 1px ${theme.colors.primary.shade};\n    }\n  `,\n  listContainer: css`\n    user-select: none;\n    border: solid 1px ${theme.colors.border.medium};\n  `,\n  disabled: css`\n    opacity: 0.5;\n    pointer-events: none;\n  `,\n  listItemName: css`\n    flex: 1;\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n\n    gap: ${theme.spacing(1)};\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n  `,\n});\n\nexport function reorder<T>(rules: T[], startIndex: number, endIndex: number): T[] {\n  const result = Array.from(rules);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","import pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Badge } from '@grafana/ui';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  includeTotal?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ group, namespaces, includeTotal }) => {\n  const evaluationInterval = group?.interval;\n\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (ruleHasError(rule)) {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n\n  if (includeTotal) {\n    statsComponents.push(\n      <Fragment key=\"total\">\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </Fragment>\n    );\n  }\n\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <Badge color=\"red\" key=\"firing\" text={`${calculated[PromAlertingRuleState.Firing]} firing`} />\n    );\n  }\n\n  if (calculated.error) {\n    statsComponents.push(<Badge color=\"red\" key=\"errors\" text={`${calculated.error} errors`} />);\n  }\n\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <Badge color={'orange'} key=\"pending\" text={`${calculated[PromAlertingRuleState.Pending]} pending`} />\n    );\n  }\n\n  if (calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <Badge color=\"green\" key=\"inactive\" text={`${calculated[PromAlertingRuleState.Inactive]} normal`} />\n    );\n  }\n\n  if (calculated.recording) {\n    statsComponents.push(<Badge color=\"purple\" key=\"recording\" text={`${calculated.recording} recording`} />);\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return (\n    <Stack direction=\"row\">\n      {hasStats && (\n        <div>\n          <Stack gap={0.5}>{statsComponents}</Stack>\n        </div>\n      )}\n      {evaluationInterval && (\n        <>\n          <div>|</div>\n          <Badge text={evaluationInterval} icon=\"clock-nine\" color={'blue'} />\n        </>\n      )}\n    </Stack>\n  );\n};\n\nfunction ruleHasError(rule: CombinedRule) {\n  return rule.promRule?.health === 'err' || rule.promRule?.health === 'error';\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll, viewMode }) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting =\n    hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"re-order rules\"\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n        }\n      }\n      if (folder?.canAdmin && isListView) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"re-order rules\"\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"re-order rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>\n          {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n        </h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text=\"Provisioned\" />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal\n          groupInterval={group.interval ?? ''}\n          nameSpaceAndGroup={{ group: group, namespace: namespace }}\n          sourceName={getRulesSourceName(namespace.rulesSource)}\n          onClose={() => closeEditModal()}\n        />\n      )}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal group={group} namespace={namespace} onClose={() => setIsReorderingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            Deleting this group will permanently remove the group\n            <br />\n            and {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            <br />\n            Are you sure you want to delete this group?\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    width: 80px;\n    align-items: center;\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  rotate90: css`\n    transform: rotate(90deg);\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => promRules[ds.name]?.result?.length ?? 0 > 0);\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Mimir / Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size={24} className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams['view'] === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size={24} className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import React, { FC, useEffect, useMemo } from 'react';\n\nimport { logInfo } from '@grafana/runtime';\nimport { AccessControlAction } from 'app/types';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces, expandAll }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AccessControlAction.AlertingRuleRead]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AccessControlAction.AlertingRuleExternalRead]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import produce from 'immer';\nimport { compact, isEmpty } from 'lodash';\nimport { useCallback, useEffect, useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { isPromAlertingRuleState, PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { getSearchFilterFromQuery, RulesFilter, applySearchFilterToQuery } from '../search/rulesSearchParser';\nimport { labelsMatchMatchers, matcherToMatcherField, parseMatcher, parseMatchers } from '../utils/alertmanager';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { getRuleHealth, isAlertingRule, isGrafanaRulerRule, isPromRuleType } from '../utils/rules';\n\nimport { useURLSearchParams } from './useURLSearchParams';\n\nexport function useRulesFilter() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const searchQuery = queryParams.get('search') ?? '';\n\n  const filterState = getSearchFilterFromQuery(searchQuery);\n  const hasActiveFilters = Object.values(filterState).some((filter) => !isEmpty(filter));\n\n  const updateFilters = useCallback(\n    (newFilter: RulesFilter) => {\n      const newSearchQuery = applySearchFilterToQuery(searchQuery, newFilter);\n      updateQueryParams({ search: newSearchQuery });\n    },\n    [searchQuery, updateQueryParams]\n  );\n\n  const setSearchQuery = useCallback(\n    (newSearchQuery: string | undefined) => {\n      updateQueryParams({ search: newSearchQuery });\n    },\n    [updateQueryParams]\n  );\n\n  // Handle legacy filters\n  useEffect(() => {\n    const legacyFilters = {\n      dataSource: queryParams.get('dataSource') ?? undefined,\n      alertState: queryParams.get('alertState') ?? undefined,\n      ruleType: queryParams.get('ruleType') ?? undefined,\n      labels: parseMatchers(queryParams.get('queryString') ?? '').map(matcherToMatcherField),\n    };\n\n    const hasLegacyFilters = Object.values(legacyFilters).some((legacyFilter) => !isEmpty(legacyFilter));\n    if (hasLegacyFilters) {\n      updateQueryParams({ dataSource: undefined, alertState: undefined, ruleType: undefined, queryString: undefined });\n      // Existing query filters takes precedence over legacy ones\n      updateFilters(\n        produce(filterState, (draft) => {\n          draft.dataSourceName ??= legacyFilters.dataSource;\n          if (legacyFilters.alertState && isPromAlertingRuleState(legacyFilters.alertState)) {\n            draft.ruleState ??= legacyFilters.alertState;\n          }\n          if (legacyFilters.ruleType && isPromRuleType(legacyFilters.ruleType)) {\n            draft.ruleType ??= legacyFilters.ruleType;\n          }\n          if (draft.labels.length === 0 && legacyFilters.labels.length > 0) {\n            const legacyLabelsAsStrings = legacyFilters.labels.map(\n              ({ name, operator, value }) => `${name}${operator}${value}`\n            );\n            draft.labels.push(...legacyLabelsAsStrings);\n          }\n        })\n      );\n    }\n  }, [queryParams, updateFilters, filterState, updateQueryParams]);\n\n  return { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters };\n}\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[], filterState: RulesFilter) => {\n  return useMemo(() => filterRules(namespaces, filterState), [namespaces, filterState]);\n};\n\nexport const filterRules = (\n  namespaces: CombinedRuleNamespace[],\n  filterState: RulesFilter = { labels: [], freeFormWords: [] }\n): CombinedRuleNamespace[] => {\n  return (\n    namespaces\n      .filter((ns) =>\n        filterState.namespace ? ns.name.toLowerCase().includes(filterState.namespace.toLowerCase()) : true\n      )\n      .filter(({ rulesSource }) =>\n        filterState.dataSourceName && isCloudRulesSource(rulesSource)\n          ? rulesSource.name === filterState.dataSourceName\n          : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filterState), [] as CombinedRuleNamespace[])\n  );\n};\n\nconst reduceNamespaces = (filterStateFilters: RulesFilter) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups\n      .filter((g) =>\n        filterStateFilters.groupName ? g.name.toLowerCase().includes(filterStateFilters.groupName.toLowerCase()) : true\n      )\n      .reduce(reduceGroups(filterStateFilters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filterState: RulesFilter) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filterState.ruleType && filterState.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n\n      const doesNotQueryDs = isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filterState);\n      if (filterState.dataSourceName && doesNotQueryDs) {\n        return false;\n      }\n\n      const ruleNameLc = rule.name?.toLocaleLowerCase();\n      // Free Form Query is used to filter by rule name\n      if (\n        filterState.freeFormWords.length > 0 &&\n        !filterState.freeFormWords.every((w) => ruleNameLc.includes(w.toLocaleLowerCase()))\n      ) {\n        return false;\n      }\n\n      if (filterState.ruleName && !rule.name?.toLocaleLowerCase().includes(filterState.ruleName.toLocaleLowerCase())) {\n        return false;\n      }\n\n      if (filterState.ruleHealth && rule.promRule) {\n        const ruleHealth = getRuleHealth(rule.promRule.health);\n        return filterState.ruleHealth === ruleHealth;\n      }\n\n      // Query strings can match alert name, label keys, and label values\n      if (filterState.labels.length > 0) {\n        // const matchers = parseMatchers(filters.queryString);\n        const matchers = compact(filterState.labels.map(looseParseMatcher));\n\n        const doRuleLabelsMatchQuery = matchers.length > 0 && labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          matchers.length > 0 &&\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filterState.ruleState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filterState.ruleState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nfunction looseParseMatcher(matcherQuery: string): Matcher | undefined {\n  try {\n    return parseMatcher(matcherQuery);\n  } catch {\n    // Try to createa a matcher than matches all values for a given key\n    return { name: matcherQuery, value: '', isRegex: true, isEqual: true };\n  }\n}\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filterState: RulesFilter): boolean => {\n  if (!filterState.dataSourceName) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filterState.dataSourceName;\n  });\n};\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { DataSourcePicker, logInfo } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { LogMessages } from '../../Analytics';\nimport { useRulesFilter } from '../../hooks/useFilteredRules';\nimport { RuleHealth } from '../../search/rulesSearchParser';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { HoverCard } from '../HoverCard';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\ninterface RulesFilerProps {\n  onFilterCleared?: () => void;\n}\n\nconst RulesFilter = ({ onFilterCleared = () => undefined }: RulesFilerProps) => {\n  const [queryParams, setQueryParams] = useQueryParams();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  const styles = useStyles2(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    updateFilters({ ...filterState, dataSourceName: dataSourceValue.name });\n    setFilterKey((key) => key + 1);\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceName: undefined });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setSearchQuery(target.value);\n  }, 600);\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onFilterCleared();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={1}>\n        <Stack direction=\"row\" gap={1}>\n          <Field className={styles.dsPickerContainer} label=\"Search by data source\">\n            <DataSourcePicker\n              key={dataSourceKey}\n              alerting\n              noDefault\n              placeholder=\"All data sources\"\n              current={filterState.dataSourceName}\n              onChange={handleDataSourceChange}\n              onClear={clearDataSource}\n            />\n          </Field>\n          <div>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={filterState.ruleState} onChange={handleAlertStateChange} />\n          </div>\n          <div>\n            <Label>Rule type</Label>\n            <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n          </div>\n          <div>\n            <Label>Health</Label>\n            <RadioButtonGroup\n              options={RuleHealthOptions}\n              value={filterState.ruleHealth}\n              onChange={handleRuleHealthChange}\n            />\n          </div>\n        </Stack>\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <Field\n              className={styles.searchInput}\n              label={\n                <Label>\n                  <Stack gap={0.5}>\n                    <span>Search</span>\n                    <HoverCard content={<SearchQueryHelp />}>\n                      <Icon name=\"info-circle\" size=\"sm\" />\n                    </HoverCard>\n                  </Stack>\n                </Label>\n              }\n            >\n              <Input\n                key={queryStringKey}\n                prefix={searchIcon}\n                onChange={handleQueryStringChange}\n                defaultValue={searchQuery}\n                placeholder=\"Search\"\n                data-testid=\"search-query-input\"\n              />\n            </Field>\n            <div>\n              <Label>View as</Label>\n              <RadioButtonGroup\n                options={ViewOptions}\n                value={String(queryParams['view'] ?? ViewOptions[0].value)}\n                onChange={handleViewChange}\n              />\n            </div>\n          </Stack>\n          {hasActiveFilters && (\n            <div>\n              <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n                Clear filters\n              </Button>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    dsPickerContainer: css`\n      width: 250px;\n      flex-grow: 0;\n      margin: 0;\n    `,\n    searchInput: css`\n      flex: 1;\n      margin: 0;\n    `,\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>Filter type</div>\n        <div>Expression</div>\n        <HelpRow title=\"Datasource\" expr=\"datasource:mimir\" />\n        <HelpRow title=\"Folder/Namespace\" expr=\"namespace:global\" />\n        <HelpRow title=\"Group\" expr=\"group:cpu-usage\" />\n        <HelpRow title=\"Rule\" expr='rule:\"cpu 80%\"' />\n        <HelpRow title=\"Labels\" expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title=\"State\" expr=\"state:firing|normal|pending\" />\n        <HelpRow title=\"Type\" expr=\"type:alerting|recording\" />\n        <HelpRow title=\"Health\" expr=\"health:ok|nodata|error\" />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css`\n    display: grid;\n    grid-template-columns: max-content auto;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n  `,\n  code: css`\n    display: block;\n    text-align: center;\n  `,\n});\n\nexport default RulesFilter;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Button, LinkButton, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../types/unified-alerting';\n\nimport { LogMessages } from './Analytics';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { RuleStats } from './components/rules/RuleStats';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from './hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { getAllRulesSourceNames } from './utils/datasource';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n    const [expandAll, setExpandAll] = useState(false);\n\n    const [queryParams] = useQueryParams();\n    const { filterState, hasActiveFilters } = useRulesFilter();\n\n    const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction());\n      }\n    }, [loading]);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n    }, [dispatch]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet = allPromLoaded && allPromEmpty && promRequests.length > 0;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={false}>\n        <RuleListErrors />\n        <RulesFilter onFilterCleared={() => setExpandAll(false)} />\n        {!hasNoAlertRulesCreatedYet && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && hasActiveFilters && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats namespaces={filteredNamespaces} includeTotal />\n              </div>\n              {(canCreateGrafanaRules || canCreateCloudRules) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                  onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {!hasNoAlertRulesCreatedYet && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["AlertHowToModal","onDismiss","Modal","rule","search","onTogglePause","ruleUrl","renderText","text","Card","Icon","Button","LOCAL_STORAGE_KEY","DeprecationNotice","Alert","getSearchQuery","state","getAlertRuleItems","regex","item","getNotificationChannel","channelId","mapStateToProps","mapDispatchToProps","connector","AlertRuleListUnconnected","option","value","prevProps","alertRules","isLoading","Page","FilterInput","Select","config","getAlertRulesAsync","options","dispatch","rules","togglePauseAlertRule","id","stateFilter","createNotificationChannel","data","error","updateNotificationChannel","testNotificationChannel","getState","channel","loadNotificationTypes","notificationTypes","o1","o2","loadNotificationChannel","notificationChannel","NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","EmptyListCTA","CallToActionCard","RuleListErrors","expanded","setExpanded","closed","setClosed","useLocalStorage","dataSourceConfigRequests","useUnifiedAlertingSelector","promRuleRequests","rulerRuleRequests","styles","getStyles","errors","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","result","dataSource","grafanaPromError","grafanaRulerError","ErrorSummaryButton","idx","count","onClick","Tooltip","theme","ReorderCloudGroupModal","props","group","namespace","onClose","pending","setPending","rulesList","setRulesList","onDragEnd","newOrderedRules","reorder","rulesSourceName","rulerRules","rulesWithUID","ModalHeader","provided","_snapshot","rubric","ListItem","droppableProvided","index","isClone","isDragging","AlertStateTag","Badge","startIndex","endIndex","removed","emptyStats","RuleStats","namespaces","includeTotal","evaluationInterval","calculated","stats","calcRule","ruleHasError","statsComponents","hasStats","RulesGroup","expandAll","viewMode","rulesSource","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRulesLoaded","useHasRuler","rulerRule","folderUID","folder","useFolder","isDeleting","isFederated","isProvisioned","isListView","isGroupView","deleteGroup","actionIcons","Spinner","baseUrl","ActionIcon","groupName","RuleLocation","closeEditModal","saved","CollapseToggle","RulesTable","ConfirmModal","useCombinedGroupNamespace","ns","g","CloudRules","dsConfigs","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","LoadingPlaceholder","Pagination","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","RuleListStateView","filters","groupedRules","useRulesFilter","updateQueryParams","useURLSearchParams","searchQuery","filterState","hasActiveFilters","filter","updateFilters","newFilter","newSearchQuery","setSearchQuery","legacyFilters","legacyFilter","draft","legacyLabelsAsStrings","name","operator","useFilteredRules","filterRules","reduceNamespaces","filterStateFilters","namespaceAcc","groups","reduceGroups","groupAcc","doesNotQueryDs","isQueryingDataSource","ruleNameLc","w","ruleHealth","matchers","looseParseMatcher","doRuleLabelsMatchQuery","doAlertsContainMatchingLabels","alert","matcherQuery","query","ViewOptions","RuleTypeOptions","RuleHealthOptions","RulesFilter","onFilterCleared","setQueryParams","filterKey","setFilterKey","dataSourceKey","queryStringKey","stateOptions","key","handleDataSourceChange","dataSourceValue","clearDataSource","handleQueryStringChange","e","target","handleAlertStateChange","handleViewChange","view","handleRuleTypeChange","ruleType","handleRuleHealthChange","handleClearFiltersClick","searchIcon","Field","DataSourcePicker","Label","RadioButtonGroup","HoverCard","SearchQueryHelp","Input","helpStyles","HelpRow","title","expr","VIEWS","RuleList","rulesDataSourceNames","location","setExpandAll","ViewComponent","promRequests","allPromLoaded","_","allPromEmpty","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","combinedNamespaces","useCombinedRuleNamespaces","filteredNamespaces","AlertingPageWrapper","url","children","pageId","pageNav","actions","fallback","action","tooltip","icon","to","className","tooltipPlacement","rest","ariaLabel","update","searchValues","replace","useRulesAccess","callback","delay","savedCallback","interval_1"],"sourceRoot":""}