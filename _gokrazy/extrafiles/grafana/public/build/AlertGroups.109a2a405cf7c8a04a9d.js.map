{"version":3,"file":"AlertGroups.109a2a405cf7c8a04a9d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails: FC<AmNotificationsAlertDetailsProps> = ({ alert, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <LinkButton\n            href={`${makeAMLink(\n              '/alerting/silences',\n              alertManagerSourceName\n            )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n            className={styles.button}\n            icon={'bell'}\n            size={'sm'}\n          >\n            Manage silences\n          </LinkButton>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <LinkButton\n            href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n            className={styles.button}\n            icon={'bell-slash'}\n            size={'sm'}\n          >\n            Silence\n          </LinkButton>\n        )}\n        {alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useMemo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels className={styles.labels} labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `,\n});\n","import { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useState } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertLabels } from '../AlertLabels';\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <AlertLabels className={styles.headerLabels} labels={group.labels} />\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  headerLabels: css`\n    padding-bottom: 0 !important;\n    margin-bottom: -${theme.spacing(0.5)};\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import React from 'react';\nimport { RadioButtonGroup, Label, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div className={styles.wrapper}>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport React from 'react';\nimport { uniq } from 'lodash';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { MatcherFilter } from './MatcherFilter';\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { css } from '@emotion/css';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          defaultQueryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { fetchAlertGroupsAction } from './state/actions';\n\nimport { initialAsyncRequestState } from './utils/redux';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\n\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { css } from '@emotion/css';\n\nconst AlertGroups = () => {\n  const [alertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const {\n    loading,\n    error,\n    result: results = [],\n  } = alertGroups[alertManagerSourceName || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  return (\n    <AlertingPageWrapper pageId=\"groups\">\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={alertManagerSourceName || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroups;\n","import { useMemo } from 'react';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from '@grafana/data';\nimport { uniqBy } from 'lodash';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]): AlertmanagerGroup[] => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter((group) => Object.keys(group.labels).length === 0);\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({ labels }) => Object.keys(labels));\n            if (!noGroupingGroup) {\n              combinedGroups.push({ alerts: group.alerts, labels: {}, receiver: { name: 'NONE' } });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n          return combinedGroups;\n        }, [] as AlertmanagerGroup[]);\n      } else {\n        return groups;\n      }\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {} as Labels);\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, groupBy]);\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { useMemo } from 'react';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup: AlertmanagerGroup[], group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FormEvent } from 'react';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  className?: string;\n  queryString?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, defaultQueryString, queryString }: Props) => {\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    onFilterChange(target.value);\n  };\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={className}>\n      <Label>\n        <Tooltip\n          content={\n            <div>\n              Filter alerts using label querying, ex:\n              <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n            </div>\n          }\n        >\n          <Icon className={styles.icon} name=\"info-circle\" size=\"xs\" />\n        </Tooltip>\n        Search by label\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        value={queryString}\n        onChange={handleSearchChange}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["AlertDetails","alert","alertManagerSourceName","styles","useStyles2","getStyles","className","actionsRow","status","state","AlertState","LinkButton","href","makeAMLink","silencedBy","join","button","icon","size","makeLabelBasedSilenceLink","labels","generatorURL","Object","entries","annotations","map","annotationKey","annotationValue","AnnotationDetailsField","value","receivers","name","filter","theme","css","spacing","colors","border","medium","AlertGroupAlertsTable","alerts","columns","useMemo","id","label","renderCell","data","AmAlertStateTag","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","AlertLabels","items","fingerprint","tableWrapper","DynamicTableWithGuidelines","cols","isExpandable","renderExpandedContent","breakpoints","up","typography","bodySmall","fontSize","AlertGroup","group","isCollapsed","setIsCollapsed","useState","wrapper","header","CollapseToggle","onToggle","keys","length","headerLabels","AlertGroupHeader","background","secondary","summary","spanElement","error","main","primary","AlertStateFilter","onStateFilterChange","stateFilter","alertStateOptions","sort","labelA","labelB","Label","RadioButtonGroup","options","onChange","GroupBy","groups","groupBy","onGroupingChange","labelKeyOptions","uniq","flatMap","startsWith","endsWith","key","MultiSelect","placeholder","prefix","Icon","AlertGroupFilter","filterKey","setFilterKey","Math","floor","random","queryParams","setQueryParams","useQueryParams","queryString","alertState","getFiltersFromUrlParams","matcherFilterKey","setAlertManagerSourceName","useAlertManagerSourceName","showClearButton","AlertManagerPicker","current","filterSection","MatcherFilter","filterInput","defaultQueryString","onFilterChange","Button","clearButton","variant","onClick","setTimeout","groupingBanner","dispatch","useDispatch","alertGroups","useUnifiedAlertingSelector","amAlertGroups","loading","result","results","initialAsyncRequestState","groupedAlerts","reduce","combinedGroups","noGroupingGroup","find","uniqBy","push","receiver","groupings","every","groupByLabel","includes","existingGrouping","groupKey","acc","useGroupedAlerts","filteredAlertGroups","filters","matchers","parseMatchers","filteredGroup","labelsMatch","labelsMatchMatchers","filtersMatch","unshift","useFilteredAmGroups","useEffect","fetchNotifications","fetchAlertGroupsAction","interval","setInterval","NOTIFICATIONS_POLL_INTERVAL_MS","clearInterval","AlertingPageWrapper","pageId","LoadingPlaceholder","text","Alert","title","severity","message","index","JSON","stringify","children","isLoading","navModel","getNavModel","useSelector","navIndex","props","item","cx","contentGuideline","guideline","undefined","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","down","searchIcon","Tooltip","content","Input","defaultValue","e","target","inputWidth","alertStateToState","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","useCallback","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource"],"sourceRoot":""}