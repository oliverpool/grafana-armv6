{"version":3,"file":"opentsdbPlugin.b8ee3762184556abd06f.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbDetails.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/styles.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/DownSample.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/FilterSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/MetricSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/RateSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/TagSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/module.ts"],"sourcesContent":["import React, { SyntheticEvent } from 'react';\n\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\n\nimport { useUniqueId } from '../../influxdb/components/useUniqueId';\nimport { OpenTsdbOptions } from '../types';\n\nconst { Select, Input } = LegacyForms;\n\nconst tsdbVersions = [\n  { label: '<=2.1', value: 1 },\n  { label: '==2.2', value: 2 },\n  { label: '==2.3', value: 3 },\n];\n\nconst tsdbResolutions = [\n  { label: 'second', value: 1 },\n  { label: 'millisecond', value: 2 },\n];\n\ninterface Props {\n  value: DataSourceSettings<OpenTsdbOptions>;\n  onChange: (value: DataSourceSettings<OpenTsdbOptions>) => void;\n}\n\nexport const OpenTsdbDetails = (props: Props) => {\n  const { onChange, value } = props;\n\n  const idSuffix = useUniqueId();\n\n  return (\n    <>\n      <h5>OpenTSDB settings</h5>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`select-version-${idSuffix}`}>\n          Version\n        </InlineFormLabel>\n        <Select\n          inputId={`select-version-${idSuffix}`}\n          options={tsdbVersions}\n          value={tsdbVersions.find((version) => version.value === value.jsonData.tsdbVersion) ?? tsdbVersions[0]}\n          onChange={onSelectChangeHandler('tsdbVersion', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`select-resolution-${idSuffix}`}>\n          Resolution\n        </InlineFormLabel>\n        <Select\n          inputId={`select-resolution-${idSuffix}`}\n          options={tsdbResolutions}\n          value={\n            tsdbResolutions.find((resolution) => resolution.value === value.jsonData.tsdbResolution) ??\n            tsdbResolutions[0]\n          }\n          onChange={onSelectChangeHandler('tsdbResolution', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`lookup-input-${idSuffix}`}>\n          Lookup limit\n        </InlineFormLabel>\n        <Input\n          id={`lookup-input-${idSuffix}`}\n          type=\"number\"\n          value={value.jsonData.lookupLimit ?? 1000}\n          onChange={onInputChangeHandler('lookupLimit', value, onChange)}\n        />\n      </div>\n    </>\n  );\n};\n\nconst onSelectChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (newValue: SelectableValue) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: newValue.value,\n      },\n    });\n  };\n\nconst onInputChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings, SecureSocksProxySettings } from '@grafana/ui';\n\nimport { OpenTsdbOptions } from '../types';\n\nimport { OpenTsdbDetails } from './OpenTsdbDetails';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<OpenTsdbOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:4242\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n      />\n      {config.featureToggles.secureSocksDatasourceProxy && (\n        <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n      )}\n      <OpenTsdbDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import React from 'react';\n\nimport { toOption } from '@grafana/data';\nimport { InlineLabel, Select, Input, InlineFormLabel, InlineSwitch } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nimport { paddingRightClass } from './styles';\n\nexport interface DownSampleProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  aggregators: string[];\n  fillPolicies: string[];\n  tsdbVersion: number;\n}\n\nexport function DownSample({ query, onChange, onRunQuery, aggregators, fillPolicies, tsdbVersion }: DownSampleProps) {\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n  const fillPolicyOptions = fillPolicies.map((value: string) => toOption(value));\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={\n            <div>\n              Leave interval blank for auto or for example use <code>1m</code>\n            </div>\n          }\n        >\n          Down sample\n        </InlineFormLabel>\n        <Input\n          width={25}\n          className={paddingRightClass}\n          data-testid={testIds.interval}\n          placeholder=\"interval\"\n          value={query.downsampleInterval ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, downsampleInterval: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          className=\"gf-form-input\"\n          value={query.downsampleAggregator ? toOption(query.downsampleAggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, downsampleAggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      {tsdbVersion >= 2 && (\n        <div className=\"gf-form\">\n          <InlineLabel className=\"width-6 query-keyword\">Fill</InlineLabel>\n          <Select\n            inputId=\"opentsdb-fillpolicy-select\"\n            value={query.downsampleFillPolicy ? toOption(query.downsampleFillPolicy) : undefined}\n            options={fillPolicyOptions}\n            onChange={({ value }) => {\n              if (value) {\n                onChange({ ...query, downsampleFillPolicy: value });\n                onRunQuery();\n              }\n            }}\n          />\n        </div>\n      )}\n      <div className=\"gf-form\">\n        <InlineFormLabel className=\"query-keyword\">Disable downsampling</InlineFormLabel>\n        <InlineSwitch\n          value={query.disableDownsampling ?? false}\n          onChange={() => {\n            const disableDownsampling = query.disableDownsampling ?? false;\n            onChange({ ...query, disableDownsampling: !disableDownsampling });\n            onRunQuery();\n          }}\n        />\n      </div>\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-downsample',\n  interval: 'downsample-interval',\n};\n","import { size } from 'lodash';\nimport React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { InlineLabel, Select, InlineFormLabel, InlineSwitch, Icon, clearButtonStyles, useStyles2 } from '@grafana/ui';\n\nimport { OpenTsdbFilter, OpenTsdbQuery } from '../types';\n\nexport interface FilterSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  filterTypes: string[];\n  suggestTagValues: () => Promise<SelectableValue[]>;\n}\n\nexport function FilterSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  filterTypes,\n  suggestTagValues,\n}: FilterSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [tagValues, updTagValues] = useState<Array<SelectableValue<string>>>();\n  const [valueIsLoading, updValueIsLoading] = useState<boolean>();\n\n  const [addFilterMode, updAddFilterMode] = useState<boolean>(false);\n\n  const [curFilterType, updCurFilterType] = useState<string>('iliteral_or');\n  const [curFilterKey, updCurFilterKey] = useState<string>('');\n  const [curFilterValue, updCurFilterValue] = useState<string>('');\n  const [curFilterGroupBy, updCurFilterGroupBy] = useState<boolean>(false);\n\n  const [errors, setErrors] = useState<string>('');\n\n  const filterTypesOptions = filterTypes.map((value: string) => toOption(value));\n\n  function changeAddFilterMode() {\n    updAddFilterMode(!addFilterMode);\n  }\n\n  function addFilter() {\n    if (query.tags && size(query.tags) > 0) {\n      const err = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addFilterMode) {\n      updAddFilterMode(true);\n      return;\n    }\n\n    // Add the filter to the query\n    const currentFilter = {\n      type: curFilterType,\n      tagk: curFilterKey,\n      filter: curFilterValue,\n      groupBy: curFilterGroupBy,\n    };\n\n    // filters may be undefined\n    query.filters = query.filters ? query.filters.concat([currentFilter]) : [currentFilter];\n\n    // reset the inputs\n    updCurFilterType('literal_or');\n    updCurFilterKey('');\n    updCurFilterValue('');\n    updCurFilterGroupBy(false);\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the filter ditor\n    changeAddFilterMode();\n  }\n\n  function removeFilter(index: number) {\n    query.filters?.splice(index, 1);\n    // fire the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editFilter(fil: OpenTsdbFilter, idx: number) {\n    removeFilter(idx);\n    updCurFilterKey(fil.tagk);\n    updCurFilterValue(fil.filter);\n    updCurFilterType(fil.type);\n    updCurFilterGroupBy(fil.groupBy);\n    addFilter();\n  }\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customFilterOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={<div>Filters does not work with tags, either of the two will work but not both.</div>}\n        >\n          Filters\n        </InlineFormLabel>\n        {query.filters &&\n          query.filters.map((fil: OpenTsdbFilter, idx: number) => {\n            return (\n              <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n                {fil.tagk} = {fil.type}({fil.filter}), groupBy = {'' + fil.groupBy}\n                <button type=\"button\" className={buttonStyles} onClick={() => editFilter(fil, idx)}>\n                  <Icon name={'pen'} />\n                </button>\n                <button\n                  type=\"button\"\n                  className={buttonStyles}\n                  onClick={() => removeFilter(idx)}\n                  data-testid={testIds.remove}\n                >\n                  <Icon name={'times'} />\n                </button>\n              </InlineFormLabel>\n            );\n          })}\n        {!addFilterMode && (\n          <button className=\"gf-form-label\" type=\"button\" onClick={changeAddFilterMode} aria-label=\"Add filter\">\n            <Icon name={'plus'} />\n          </button>\n        )}\n      </div>\n      {addFilterMode && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              className=\"gf-form-input\"\n              value={curFilterKey ? toOption(curFilterKey) : undefined}\n              placeholder=\"key\"\n              allowCustomValue\n              filterOption={customFilterOption}\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterKey(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <InlineLabel className=\"width-4 query-keyword\">Type</InlineLabel>\n            <Select\n              inputId=\"opentsdb-aggregator-select\"\n              value={curFilterType ? toOption(curFilterType) : undefined}\n              options={filterTypesOptions}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterType(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagv-select\"\n              className=\"gf-form-input\"\n              value={curFilterValue ? toOption(curFilterValue) : undefined}\n              placeholder=\"filter\"\n              allowCustomValue\n              filterOption={customFilterOption}\n              onOpenMenu={async () => {\n                if (!tagValues) {\n                  updValueIsLoading(true);\n                  const tVs = await suggestTagValues();\n                  updTagValues(tVs);\n                  updValueIsLoading(false);\n                }\n              }}\n              isLoading={valueIsLoading}\n              options={tagValues}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterValue(value);\n                }\n              }}\n            />\n          </div>\n\n          <InlineFormLabel width={5} className=\"query-keyword\">\n            Group by\n          </InlineFormLabel>\n          <InlineSwitch\n            value={curFilterGroupBy}\n            onChange={() => {\n              // DO NOT RUN THE QUERY HERE\n              // OLD FUNCTIONALITY RAN THE QUERY\n              updCurFilterGroupBy(!curFilterGroupBy);\n            }}\n          />\n          <div className=\"gf-form\">\n            {errors && (\n              <div className=\"gf-form-label\" title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </div>\n            )}\n            <div className=\"gf-form-label\">\n              <button type=\"button\" className={buttonStyles} onClick={addFilter}>\n                add filter\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddFilterMode}>\n                <Icon name={'times'} />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-filter',\n  list: 'opentsdb-filter-list',\n  error: 'opentsdb-filter-error',\n  remove: 'opentsdb-filter-remove',\n};\n","import React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select, Input, InlineFormLabel } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface MetricSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestMetrics: () => Promise<SelectableValue[]>;\n  aggregators: string[];\n}\n\nexport function MetricSection({ query, onChange, onRunQuery, suggestMetrics, aggregators }: MetricSectionProps) {\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<string>>;\n    isLoading?: boolean;\n  }>({});\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customFilterOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={8} className=\"query-keyword\">\n          Metric\n        </InlineFormLabel>\n        <Select\n          width={25}\n          inputId=\"opentsdb-metric-select\"\n          className=\"gf-form-input\"\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Metric name\"\n          allowCustomValue\n          filterOption={customFilterOption}\n          onOpenMenu={async () => {\n            if (!state.metrics) {\n              setState({ isLoading: true });\n              const metrics = await suggestMetrics();\n              setState({ metrics, isLoading: undefined });\n            }\n          }}\n          isLoading={state.isLoading}\n          options={state.metrics}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          inputId=\"opentsdb-aggregator-select\"\n          className=\"gf-form-input\"\n          value={query.aggregator ? toOption(query.aggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, aggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      <div className=\"gf-form max-width-20\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={6}\n          tooltip={<div>Use patterns like $tag_tagname to replace part of the alias for a tag value</div>}\n        >\n          Alias\n        </InlineFormLabel>\n        <Input\n          data-testid={testIds.alias}\n          placeholder=\"series alias\"\n          value={query.alias ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, alias: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </div>\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-metricsection',\n  alias: 'metric-alias',\n};\n","import React from 'react';\n\nimport { InlineLabel, Input, InlineFormLabel, InlineSwitch } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface RateSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  tsdbVersion: number;\n}\n\nexport function RateSection({ query, onChange, onRunQuery, tsdbVersion }: RateSectionProps) {\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel className=\"query-keyword\" width={8}>\n          Rate\n        </InlineFormLabel>\n        <InlineSwitch\n          data-testid={testIds.shouldComputeRate}\n          value={query.shouldComputeRate ?? false}\n          onChange={() => {\n            const shouldComputeRate = query.shouldComputeRate ?? false;\n            onChange({ ...query, shouldComputeRate: !shouldComputeRate });\n            onRunQuery();\n          }}\n        />\n      </div>\n      {query.shouldComputeRate && (\n        <div className=\"gf-form\">\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Counter\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.isCounter}\n            value={query.isCounter ?? false}\n            onChange={() => {\n              const isCounter = query.isCounter ?? false;\n              onChange({ ...query, isCounter: !isCounter });\n              onRunQuery();\n            }}\n          />\n        </div>\n      )}\n      {query.shouldComputeRate && query.isCounter && (\n        <div className=\"gf-form\">\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Counter max\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterMax}\n            placeholder=\"max value\"\n            value={query.counterMax ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterMax: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Reset value\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterResetValue}\n            placeholder=\"reset value\"\n            value={query.counterResetValue ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterResetValue: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n        </div>\n      )}\n      {tsdbVersion > 2 && (\n        <div className=\"gf-form\">\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Explicit tags\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.explicitTags}\n            value={query.explicitTags ?? false}\n            onChange={() => {\n              const explicitTags = query.explicitTags ?? false;\n              onChange({ ...query, explicitTags: !explicitTags });\n              onRunQuery();\n            }}\n          />\n        </div>\n      )}\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-rate',\n  shouldComputeRate: 'opentsdb-shouldComputeRate',\n  isCounter: 'opentsdb-is-counter',\n  counterMax: 'opentsdb-counter-max',\n  counterResetValue: 'opentsdb-counter-reset-value',\n  explicitTags: 'opentsdb-explicit-tags',\n};\n","import { has, size } from 'lodash';\nimport React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select, InlineFormLabel, Icon, clearButtonStyles, useStyles2 } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface TagSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  suggestTagValues: () => Promise<SelectableValue[]>;\n  tsdbVersion: number;\n}\n\nexport function TagSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  suggestTagValues,\n  tsdbVersion,\n}: TagSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [tagValues, updTagValues] = useState<Array<SelectableValue<string>>>();\n  const [valueIsLoading, updValueIsLoading] = useState<boolean>();\n\n  const [addTagMode, updAddTagMode] = useState<boolean>(false);\n\n  const [curTagKey, updCurTagKey] = useState<string | number>('');\n  const [curTagValue, updCurTagValue] = useState<string>('');\n\n  const [errors, setErrors] = useState<string>('');\n\n  function changeAddTagMode() {\n    updAddTagMode(!addTagMode);\n  }\n\n  function addTag() {\n    if (query.filters && size(query.filters) > 0) {\n      const err = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addTagMode) {\n      updAddTagMode(true);\n      return;\n    }\n\n    // check for duplicate tags\n    if (query.tags && has(query.tags, curTagKey)) {\n      const err = \"Duplicate tag key '\" + curTagKey + \"'.\";\n      setErrors(err);\n      return;\n    }\n\n    // tags may be undefined\n    if (!query.tags) {\n      query.tags = {};\n    }\n\n    // add tag to query\n    query.tags[curTagKey] = curTagValue;\n\n    // reset the inputs\n    updCurTagKey('');\n    updCurTagValue('');\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the tag ditor\n    changeAddTagMode();\n  }\n\n  function removeTag(key: string | number) {\n    delete query.tags[key];\n\n    // fire off the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editTag(key: string | number, value: string) {\n    removeTag(key);\n    updCurTagKey(key);\n    updCurTagValue(value);\n    addTag();\n  }\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customTagOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={tsdbVersion >= 2 ? <div>Please use filters, tags are deprecated in opentsdb 2.2</div> : undefined}\n        >\n          Tags\n        </InlineFormLabel>\n        {query.tags &&\n          Object.keys(query.tags).map((tagKey: string | number, idx: number) => {\n            const tagValue = query.tags[tagKey];\n            return (\n              <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n                {tagKey}={tagValue}\n                <button type=\"button\" className={buttonStyles} onClick={() => editTag(tagKey, tagValue)}>\n                  <Icon name={'pen'} />\n                </button>\n                <button\n                  type=\"button\"\n                  className={buttonStyles}\n                  onClick={() => removeTag(tagKey)}\n                  data-testid={testIds.remove}\n                >\n                  <Icon name={'times'} />\n                </button>\n              </InlineFormLabel>\n            );\n          })}\n        {!addTagMode && (\n          <button className=\"gf-form-label\" type=\"button\" onClick={changeAddTagMode} aria-label=\"Add tag\">\n            <Icon name={'plus'} />\n          </button>\n        )}\n      </div>\n      {addTagMode && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              className=\"gf-form-input\"\n              value={curTagKey ? toOption('' + curTagKey) : undefined}\n              placeholder=\"key\"\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagKey(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagv-select\"\n              className=\"gf-form-input\"\n              value={curTagValue ? toOption(curTagValue) : undefined}\n              placeholder=\"value\"\n              allowCustomValue\n              filterOption={customTagOption}\n              onOpenMenu={async () => {\n                if (!tagValues) {\n                  updValueIsLoading(true);\n                  const tVs = await suggestTagValues();\n                  updTagValues(tVs);\n                  updValueIsLoading(false);\n                }\n              }}\n              isLoading={valueIsLoading}\n              options={tagValues}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagValue(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            {errors && (\n              <div className=\"gf-form-label\" title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </div>\n            )}\n\n            <div className=\"gf-form-label\">\n              <button type=\"button\" className={buttonStyles} onClick={addTag}>\n                add tag\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddTagMode}>\n                <Icon name={'times'} />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-tag',\n  list: 'opentsdb-tag-list',\n  error: 'opentsdb-tag-error',\n  remove: 'opentsdb-tag-remove',\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, QueryEditorProps, textUtil } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbOptions, OpenTsdbQuery } from '../types';\n\nimport { DownSample } from './DownSample';\nimport { FilterSection } from './FilterSection';\nimport { MetricSection } from './MetricSection';\nimport { RateSection } from './RateSection';\nimport { TagSection } from './TagSection';\n\nexport type OpenTsdbQueryEditorProps = QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>;\n\nexport function OpenTsdbQueryEditor({\n  datasource,\n  onRunQuery,\n  onChange,\n  query,\n  range,\n  queries,\n}: OpenTsdbQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  const [aggregators, setAggregators] = useState<string[]>([\n    'avg',\n    'sum',\n    'min',\n    'max',\n    'dev',\n    'zimsum',\n    'mimmin',\n    'mimmax',\n  ]);\n\n  const fillPolicies: string[] = ['none', 'nan', 'null', 'zero'];\n\n  const [filterTypes, setFilterTypes] = useState<string[]>([\n    'wildcard',\n    'iliteral_or',\n    'not_iliteral_or',\n    'not_literal_or',\n    'iwildcard',\n    'literal_or',\n    'regexp',\n  ]);\n\n  const tsdbVersion: number = datasource.tsdbVersion;\n\n  if (!query.aggregator) {\n    query.aggregator = 'sum';\n  }\n\n  if (!query.downsampleAggregator) {\n    query.downsampleAggregator = 'avg';\n  }\n\n  if (!query.downsampleFillPolicy) {\n    query.downsampleFillPolicy = 'none';\n  }\n\n  datasource.getAggregators().then((aggs: string[]) => {\n    if (aggs.length !== 0) {\n      setAggregators(aggs);\n    }\n  });\n\n  datasource.getFilterTypes().then((filterTypes: string[]) => {\n    if (filterTypes.length !== 0) {\n      setFilterTypes(filterTypes);\n    }\n  });\n\n  // previously called as an autocomplete on every input,\n  // in this we call it once on init and filter in the MetricSection component\n  async function suggestMetrics(): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery('metrics()').then(getTextValues);\n  }\n\n  // previously called as an autocomplete on every input,\n  // in this we call it once on init and filter in the MetricSection component\n  async function suggestTagValues(): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery('suggest_tagv()').then(getTextValues);\n  }\n\n  async function suggestTagKeys(query: OpenTsdbQuery): Promise<string[]> {\n    return datasource.suggestTagKeys(query);\n  }\n\n  function getTextValues(metrics: Array<{ text: string }>) {\n    return metrics.map((value: { text: string }) => {\n      return {\n        value: textUtil.escapeHtml(value.text),\n        description: value.text,\n      };\n    });\n  }\n\n  return (\n    <div className={styles.container} data-testid={testIds.editor}>\n      <div className={styles.visualEditor}>\n        <MetricSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestMetrics={suggestMetrics}\n          aggregators={aggregators}\n        />\n        <DownSample\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          aggregators={aggregators}\n          fillPolicies={fillPolicies}\n          tsdbVersion={tsdbVersion}\n        />\n        {tsdbVersion >= 2 && (\n          <FilterSection\n            query={query}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            filterTypes={filterTypes}\n            suggestTagValues={suggestTagValues}\n            suggestTagKeys={suggestTagKeys}\n          />\n        )}\n        <TagSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestTagValues={suggestTagValues}\n          suggestTagKeys={suggestTagKeys}\n          tsdbVersion={tsdbVersion}\n        />\n        <RateSection query={query} onChange={onChange} onRunQuery={onRunQuery} tsdbVersion={tsdbVersion} />\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n    `,\n    visualEditor: css`\n      flex-grow: 1;\n    `,\n    toggleButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n\nexport const testIds = {\n  editor: 'opentsdb-editor',\n};\n","import React, { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel, Input, InlineSwitch } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbQuery, OpenTsdbOptions } from '../types';\n\nexport const AnnotationEditor = (props: QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>) => {\n  const { query, onChange } = props;\n  const [target, setTarget] = useState<string>(query.target ?? '');\n  const [isGlobal, setIsGlobal] = useState<boolean>(query.isGlobal ?? false);\n\n  const updateValue = <K extends keyof OpenTsdbQuery, V extends OpenTsdbQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      fromAnnotations: true,\n    });\n  };\n\n  const updateIsGlobal = (isGlobal: boolean) => {\n    isGlobal = !isGlobal;\n    setIsGlobal(isGlobal);\n    updateValue('isGlobal', isGlobal);\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>OpenTSDB metrics query</InlineFormLabel>\n        <Input\n          value={target}\n          onChange={(e) => setTarget(e.currentTarget.value ?? '')}\n          onBlur={() => updateValue('target', target)}\n          placeholder=\"events.eventname\"\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>Show Global Annotations?</InlineFormLabel>\n        <InlineSwitch value={isGlobal} onChange={(e) => updateIsGlobal(isGlobal)} />\n      </div>\n    </div>\n  );\n};\n","import { LegacyAnnotation } from './types';\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  // return the target annotation\n  const annotation: LegacyAnnotation = {\n    fromAnnotations: true,\n    target: json.target ?? '',\n    name: json.name ?? '',\n    isGlobal: json.isGlobal ?? false,\n  };\n\n  return annotation;\n};\n\n// eslint-ignore-next-line\nexport const prepareAnnotation = (json: any) => {\n  const resultingTarget = json.target && typeof json.target !== 'string' ? json.target : migrateLegacyAnnotation(json);\n\n  json.target = resultingTarget;\n\n  return json;\n};\n","import {\n  clone,\n  cloneDeep,\n  compact,\n  each,\n  every,\n  filter,\n  findIndex,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map as _map,\n  toPairs,\n} from 'lodash';\nimport { lastValueFrom, merge, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  dateMath,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { AnnotationEditor } from './components/AnnotationEditor';\nimport { prepareAnnotation } from './migrations';\nimport { OpenTsdbFilter, OpenTsdbOptions, OpenTsdbQuery } from './types';\n\nexport default class OpenTsDatasource extends DataSourceApi<OpenTsdbQuery, OpenTsdbOptions> {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  lookupLimit: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  constructor(instanceSettings: any, private readonly templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.lookupLimit = instanceSettings.jsonData.lookupLimit || 1000;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n    this.annotations = {\n      QueryEditor: AnnotationEditor,\n      prepareAnnotation,\n    };\n  }\n\n  // Called once per panel (graph)\n  query(options: DataQueryRequest<OpenTsdbQuery>): Observable<DataQueryResponse> {\n    // migrate annotations\n    if (options.targets.some((target: OpenTsdbQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const annotation of options.targets) {\n        if (annotation.target) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvent(options, annotation)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => {\n                  // grafana fetch throws the error so for annotation consistency among datasources\n                  // we return an empty array which displays as 'no events found'\n                  // in the annnotation editor\n                  return subscriber.next({ data: [toDataFrame([])] });\n                })\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs: any[] = [];\n\n    each(options.targets, (target) => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(queries)) {\n      return of({ data: [] });\n    }\n\n    const groupByTags: any = {};\n    each(queries, (query) => {\n      if (query.filters && query.filters.length > 0) {\n        each(query.filters, (val) => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = filter(options.targets, (query) => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).pipe(\n      catchError((err) => {\n        // Throw the error message here instead of the whole object to workaround the error parsing error.\n        throw err?.data?.error?.message || 'Error performing time series query.';\n      }),\n      map((response) => {\n        const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n        const result = _map(response.data, (metricData: any, index: number) => {\n          index = metricToTargetMapping[index];\n          if (index === -1) {\n            index = 0;\n          }\n          this._saveTagKeys(metricData);\n\n          return this.transformMetricData(\n            metricData,\n            groupByTags,\n            options.targets[index],\n            options,\n            this.tsdbResolution\n          );\n        });\n        return { data: result };\n      })\n    );\n  }\n\n  annotationEvent(options: DataQueryRequest, annotation: OpenTsdbQuery): Promise<AnnotationEvent[]> {\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs = [];\n    const eventList: any[] = [];\n\n    qs.push({ aggregator: 'sum', metric: annotation.target });\n\n    const queries = compact(qs);\n\n    return lastValueFrom(\n      this.performTimeSeriesQuery(queries, start, end).pipe(\n        map((results) => {\n          if (results.data[0]) {\n            let annotationObject = results.data[0].annotations;\n            if (annotation.isGlobal) {\n              annotationObject = results.data[0].globalAnnotations;\n            }\n            if (annotationObject) {\n              each(annotationObject, (ann) => {\n                const event = {\n                  text: ann.description,\n                  time: Math.floor(ann.startTime) * 1000,\n                  annotation: annotation,\n                };\n\n                eventList.push(event);\n              });\n            }\n          }\n          return eventList;\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.containsTemplate(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.containsTemplate(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries: any[], start: any, end: any): Observable<FetchResponse> {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return getBackendSrv().fetch(options);\n  }\n\n  suggestTagKeys(query: OpenTsdbQuery) {\n    const metric = query.metric ?? '';\n    return Promise.resolve(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData: { tags: {}; aggregateTags: any; metric: string | number }) {\n    const tagKeys = Object.keys(metricData.tags);\n    each(metricData.aggregateTags, (tag) => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query: string, type: string): Observable<any> {\n    return this._get('/api/suggest', { type, q: query, max: this.lookupLimit }).pipe(\n      map((result: any) => {\n        return result.data;\n      })\n    );\n  }\n\n  _performMetricKeyValueLookup(metric: string, keys: any): Observable<any[]> {\n    if (!metric || !keys) {\n      return of([]);\n    }\n\n    const keysArray = keys.split(',').map((key: any) => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: this.lookupLimit }).pipe(\n      map((result: any) => {\n        result = result.data.results;\n        const tagvs: any[] = [];\n        each(result, (r) => {\n          if (tagvs.indexOf(r.tags[key]) === -1) {\n            tagvs.push(r.tags[key]);\n          }\n        });\n        return tagvs;\n      })\n    );\n  }\n\n  _performMetricKeyLookup(metric: any): Observable<any[]> {\n    if (!metric) {\n      return of([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).pipe(\n      map((result: any) => {\n        result = result.data.results;\n        const tagks: any[] = [];\n        each(result, (r) => {\n          each(r.tags, (tagv, tagk) => {\n            if (tagks.indexOf(tagk) === -1) {\n              tagks.push(tagk);\n            }\n          });\n        });\n        return tagks;\n      })\n    );\n  }\n\n  _get(\n    relativeUrl: string,\n    params?: { type?: string; q?: string; max?: number; m?: any; limit?: number }\n  ): Observable<FetchResponse> {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return getBackendSrv().fetch(options);\n  }\n\n  _addCredentialOptions(options: any) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const responseTransform = (result: any) => {\n      return _map(result, (value) => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return lastValueFrom(this._performSuggestQuery(metricsQuery[1], 'metrics').pipe(map(responseTransform)));\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return lastValueFrom(this._performMetricKeyLookup(tagNamesQuery[1]).pipe(map(responseTransform)));\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return lastValueFrom(\n        this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).pipe(map(responseTransform))\n      );\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').pipe(map(responseTransform)));\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').pipe(map(responseTransform)));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return lastValueFrom(\n      this._performSuggestQuery('cpu', 'metrics').pipe(\n        map(() => {\n          return { status: 'success', message: 'Data source is working' };\n        })\n      )\n    );\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = lastValueFrom(\n      this._get('/api/aggregators').pipe(\n        map((result: any) => {\n          if (result.data && isArray(result.data)) {\n            return result.data.sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = lastValueFrom(\n      this._get('/api/config/filters').pipe(\n        map((result: any) => {\n          if (result.data) {\n            return Object.keys(result.data).sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md: { dps: any }, groupByTags: any, target: any, options: any, tsdbResolution: number) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps: any[] = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use pairs(invert()) because it stringifies keys/values\n    each(md.dps, (v: any, k: number) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(\n    md: { dps?: any; tags?: any; metric?: any },\n    target: { alias: string },\n    groupByTags: any,\n    options: { scopedVars: any }\n  ) {\n    if (target.alias) {\n      const scopedVars = clone(options.scopedVars || {});\n      each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData: any[] = [];\n\n    if (!isEmpty(md.tags)) {\n      each(toPairs(md.tags), (tag) => {\n        if (has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target: OpenTsdbQuery, options: DataQueryRequest<OpenTsdbQuery>, tsdbVersion: number) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = cloneDeep(target.filters);\n\n      if (query.filters) {\n        this.interpolateVariablesInFilters(query, options);\n      }\n    } else {\n      query.tags = cloneDeep(target.tags);\n\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  interpolateVariablesInFilters(query: OpenTsdbQuery, options: DataQueryRequest<OpenTsdbQuery>) {\n    query.filters = query.filters?.map((filter: OpenTsdbFilter): OpenTsdbFilter => {\n      filter.tagk = this.templateSrv.replace(filter.tagk, options.scopedVars, 'pipe');\n\n      filter.filter = this.templateSrv.replace(filter.filter, options.scopedVars, 'pipe');\n\n      return filter;\n    });\n  }\n\n  mapMetricsToTargets(metrics: any, options: any, tsdbVersion: number) {\n    let interpolatedTagValue, arrTagV;\n    return _map(metrics, (metricData) => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return findIndex(options.targets as any[], (target) => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  interpolateVariablesInQueries(queries: OpenTsdbQuery[], scopedVars: ScopedVars): OpenTsdbQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      metric: this.templateSrv.replace(query.metric, scopedVars),\n    }));\n  }\n\n  convertToTSDBTime(date: any, roundUp: any, timezone: any) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp, timezone);\n    return date.valueOf();\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { OpenTsdbQueryEditor } from './components/OpenTsdbQueryEditor';\nimport OpenTsDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(OpenTsDatasource)\n  .setQueryEditor(OpenTsdbQueryEditor)\n  .setConfigEditor(ConfigEditor);\n"],"names":["Select","Input","tsdbVersions","tsdbResolutions","OpenTsdbDetails","props","onChange","value","idSuffix","useUniqueId","version","onSelectChangeHandler","resolution","onInputChangeHandler","key","newValue","event","ConfigEditor","options","onOptionsChange","DataSourceHttpSettings","config","SecureSocksProxySettings","paddingRightClass","DownSample","query","onRunQuery","aggregators","fillPolicies","tsdbVersion","aggregatorOptions","fillPolicyOptions","testIds","e","InlineLabel","disableDownsampling","FilterSection","suggestTagKeys","filterTypes","suggestTagValues","buttonStyles","tagKeys","updTagKeys","keyIsLoading","updKeyIsLoading","tagValues","updTagValues","valueIsLoading","updValueIsLoading","addFilterMode","updAddFilterMode","curFilterType","updCurFilterType","curFilterKey","updCurFilterKey","curFilterValue","updCurFilterValue","curFilterGroupBy","updCurFilterGroupBy","errors","setErrors","filterTypesOptions","changeAddFilterMode","addFilter","currentFilter","removeFilter","index","editFilter","fil","idx","splitSeparator","customFilterOption","option","searchQuery","label","acc","cur","Icon","tKsOptions","tVs","MetricSection","suggestMetrics","state","setState","metrics","RateSection","shouldComputeRate","isCounter","explicitTags","TagSection","addTagMode","updAddTagMode","curTagKey","updCurTagKey","curTagValue","updCurTagValue","changeAddTagMode","addTag","err","removeTag","editTag","customTagOption","tagKey","tagValue","OpenTsdbQueryEditor","datasource","range","queries","styles","getStyles","setAggregators","setFilterTypes","aggs","getTextValues","theme","AnnotationEditor","target","setTarget","isGlobal","setIsGlobal","updateValue","val","updateIsGlobal","migrateLegacyAnnotation","json","prepareAnnotation","resultingTarget","OpenTsDatasource","instanceSettings","templateSrv","streams","annotation","Observable","subscriber","events","ex","merge","start","end","qs","of","groupByTags","catchError","map","response","metricToTargetMapping","metricData","eventList","lastValueFrom","results","annotationObject","ann","i","msResolution","reqBody","metric","tag","type","result","keys","keysArray","keysQuery","m","tagvs","r","tagks","tagv","tagk","relativeUrl","params","interpolated","responseTransform","metricsRegex","tagNamesRegex","tagValuesRegex","tagNamesSuggestRegex","tagValuesSuggestRegex","metricsQuery","tagNamesQuery","tagValuesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","md","tsdbResolution","metricLabel","dps","v","k","scopedVars","tagData","interval","filter","interpolatedTagValue","arrTagV","tagV","tagK","date","roundUp","timezone"],"sourceRoot":""}