{"version":3,"file":"graphPlugin.15718e8e3083449662a7.js","mappings":"+MAGO,MAAMA,EAAqB,CAAC,eAAgB,oBAC5C,MAAMC,EACkB,8BAACC,GAC5B,IAAKA,EAAMC,OAASC,EAAAA,GAAAA,uBAClB,OAAO,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMC,MAAMG,WAAWC,OAAQF,IAAK,OACtD,MAAMG,EAAYN,EAAMC,MAAMG,WAAWD,GACzC,GAAuB,UAAnBG,EAAUC,KACZ,SAGF,MAAMC,EAAYF,EAAUE,UACtBC,EAAqBT,EAAMS,WAAa,GACxCC,GAAmE,IAAzDZ,EAAmBa,QAAnB,UAA2BL,EAAUM,eAArC,aAA2B,EAAmBL,MAE9D,OAAQC,EAAUD,MAChB,IAAK,KAAM,CACT,MAAMM,EAAQL,EAAUM,OAAO,GAC/BL,EAAWM,KAAK,CAAEF,MAAOA,EAAOG,GAAI,KAAMN,QAAAA,IAC1C,MAEF,IAAK,KAAM,CACT,MAAMG,EAAQL,EAAUM,OAAO,GAC/BL,EAAWM,KAAK,CAAEF,MAAOA,EAAOG,GAAI,KAAMN,QAAAA,IAC1C,MAEF,IAAK,gBAAiB,CACpB,MAAMO,EAAST,EAAUM,OAAO,GAC1BI,EAASV,EAAUM,OAAO,GAE5BG,EAASC,GACXT,EAAWM,KAAK,CAAEF,MAAOI,EAAQD,GAAI,KAAMN,QAAAA,IAC3CD,EAAWM,KAAK,CAAEF,MAAOK,EAAQF,GAAI,KAAMN,QAAAA,MAE3CD,EAAWM,KAAK,CAAEF,MAAOI,EAAQD,GAAI,KAAMN,QAAAA,IAC3CD,EAAWM,KAAK,CAAEF,MAAOK,EAAQF,GAAI,KAAMN,QAAAA,KAG7C,MAEF,IAAK,eAAgB,CACnB,MAAMO,EAAST,EAAUM,OAAO,GAC1BI,EAASV,EAAUM,OAAO,GAE5BG,EAASC,GACXT,EAAWM,KAAK,CAAEF,MAAOI,EAAQD,GAAI,KAAMN,QAAAA,IAC3CD,EAAWM,KAAK,CAAEF,MAAOK,EAAQF,GAAI,KAAMN,QAAAA,MAE3CD,EAAWM,KAAK,CAAEF,MAAOI,EAAQD,GAAI,KAAMN,QAAAA,IAC3CD,EAAWM,KAAK,CAAEF,MAAOK,EAAQF,GAAI,KAAMN,QAAAA,KAE7C,OAGJ,MAGF,IAAK,MAAMS,KAAKnB,EAAMS,WACpBU,EAAEC,KAAOpB,EAAMqB,QAAQC,eACvBH,EAAEI,KAAOvB,EAAMqB,QAAQC,eACvBH,EAAEK,UAAY,WAIhB,OADgB,K,kaC5Db,SAASC,EAAiBzB,EAAmB0B,GAClD,MAAMC,GAAOC,EAAAA,EAAAA,IAAuB5B,EAAM6B,cACpCC,EAAS,IAAIC,EAAAA,EACbV,EAAU,CAAEK,UAAAA,EAAWM,OAAOC,EAAAA,EAAAA,wBAC9BC,EAAmBJ,EAAOK,QAAQd,GAAWS,EAAOM,yBAAyBV,EAAW1B,EAAMqC,IAAM,GACpGC,EAAc,CAAC,IAAIC,EAAAA,eAAeL,IAGxC,MAAO,CACLM,WAHeC,EAAAA,EAAAA,IAAwBzC,GAAO0C,EAAAA,EAAAA,MAAaF,aAGvCA,UACpBG,MAAOC,EAAAA,aAAAA,KACPC,QAAQC,EAAAA,EAAAA,qBAAoB,CAC1BnB,KAAAA,EACAoB,YAAa,CACXC,SAAU,GACVC,UAAW,IAEbC,iBAAkBlD,EAAMkD,iBACxBC,oBAAqBnD,EAAMoD,OAAQD,oBACnCE,MAAOnD,EAAAA,GAAAA,OACPoD,SAAU5B,EAAU6B,gBAEtBjB,YAAAA,K,uMCoBG,MAAMkB,EAAyB3C,IACpC,MAAM4C,EAAQ5C,EAAM6C,MAAMD,MAC1B,GAAKA,GAA0B,IAAjBA,EAAMpD,OAIpB,MAAO,CACLsD,SAAWT,IACT,MAAMU,EAA0C,GAEhD,GAAI/C,EAAMgD,KAAM,CACd,MAAM,UAAEC,GAAcjD,EAAMgD,KAE5BD,EAAU,SAAe,CACvB/C,MAAO,CACLkD,KAAMD,EAAUC,KAChBC,MAAOF,EAAUE,OAEnBC,KAAM,UAGR,MAAMP,OAA2BQ,IAAnBrD,EAAMsD,SAAyBL,EAAUM,OAAOvD,EAAMsD,eAAYD,EAEhF,GAAIR,EAAO,CAST,GARAE,EAAU,QAAc,CACtB/C,MAAO,CACLkD,KAAML,EAAMK,KACZM,OAAQX,EAAMW,QAEhBJ,KAAM,cAGeC,IAAnBrD,EAAMyD,UAA0BzD,EAAMyD,UAAY,EAAG,CACvD,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,cAAaV,GACnCF,EAAU,QAAc,CACtB/C,MAAO,CACL4D,IAAKf,EAAMgB,OAAOC,IAAI9D,EAAMyD,UAC5BM,QAAS/D,EAAMgE,QAAQD,QACvBX,MAAMa,EAAAA,EAAAA,wBAAuBjE,EAAMgE,SACnCE,KAAMR,EAAYA,EAAUG,OAAOC,IAAI9D,EAAMyD,eAAYJ,GAE3DD,KAAM,SAKNpD,EAAMgD,OACRD,EAAU,OAAa,CACrB/C,MAAO,CACLkD,KAAMD,EAAUC,KAChBC,MAAOF,EAAUE,MACjBI,QAAQY,EAAAA,EAAAA,4BAA2B,CACjCC,MAAOnB,EACPQ,SAAUzD,EAAMyD,YAGpBL,KAAM,cAKVL,EAAU,QAAc,CACtB/C,MAAO,CACL4D,IAAK5D,EAAMgE,QAAQD,QACnBA,QAAS/D,EAAMgE,QAAQD,QACvBX,MAAMa,EAAAA,EAAAA,wBAAuBjE,EAAMgE,SACnCK,KAAMrE,EAAMkD,MAEdE,KAAM,cAIVkB,QAAQC,IAAI,QAASvE,GAGvB,MAAMwE,EAA+B,CAACxE,EAAeyE,EAA8BC,KACjF,MAAMC,EAAwB,OAAH,UACrB5B,EACD0B,GAEL,OAAOpC,EAAiBrC,EAAO2E,EAAWD,IAG5C,OAAO9B,EAAMgC,KAAKC,IACTC,EAAAA,EAAAA,MAAaC,mBAAmBF,EAAML,EAASxE,QAMjDgF,EAAyB7F,IACpC,MAAMyD,EAAQzD,EAAMyD,MAEpB,GAAKA,GAA0B,IAAjBA,EAAMpD,OAIpB,MAAO,CACLsD,SAAU,IACDF,EAAMgC,KAAKC,IACTC,EAAAA,EAAAA,MAAaC,mBAAmBF,EAAM1F,EAAMkD,iBAAkBlD,Q,ohCC9I7E,MAAM8F,EAA4C,CAACC,EAASC,EAAOC,KACjE,MAAMC,GAAWC,EAAAA,EAAAA,4BACXC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,6EAEpBL,EAASM,OAAO,CACd,WACA,aACA,CAACC,EAAUC,KACT,MAAMC,EAAeV,EAAKW,aAAaC,OAAOC,QACxCC,EAAWL,EAAWM,MAAK,GACjCD,EAASf,MAAQA,EACjBe,EAASE,OAAS,KAChBN,EAAaO,UAAUlB,IAGzBS,EAASL,EAATK,CAAkBM,GAClBA,EAASI,UACTJ,EAASK,WAET,MAAMC,EAAO,IAAIC,IAAJ,CAAS,CACpBC,OAAQxB,EAAQ,GAChBK,QAASA,EACToB,SAAU,gBACVC,QAAS,wCACTC,OAAQ,QACRC,gBAAiB,IACjBC,cAAe,CACbC,YAAa,CAAC,CAAEC,GAAI,SAAUC,KAAK,EAAMC,WAAY,YAIzDX,EAAKY,OAELZ,EAAKa,GAAG,SAAS,KACfC,YAAW,KACTd,EAAKe,oB,qCAOf,IAAIC,EAA+B,KAGnC,MAAMC,EAAuC,CAACvC,EAASC,EAAOC,KAC5D,MAAMU,EAAeV,EAAKW,aAAaC,OAAOC,QAC1CH,EAAa4B,WAGfF,EAA0BtC,GAK5BY,EAAa6B,eAEbH,EAA0BtC,EAG1BoC,YAAW,KACT,MAAMjC,GAAWC,EAAAA,EAAAA,4BACXC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,qFAEpBL,EAASM,OAAO,CACd,WACA,aACA,CAACC,EAAUC,KACT,MAAM+B,EAAQ/B,EAAWM,MAAK,GAC9B,IAAIK,EAEJoB,EAAMzC,MAAQA,EACdyC,EAAMC,UAAY/B,EAAa+B,UAC/BD,EAAME,MAAQ,KACZtB,EAAKsB,SAGPlC,EAASL,EAATK,CAAkBgC,GAClBA,EAAMtB,UAENE,EAAO,IAAIC,IAAJ,CAAS,CACdC,OAAQc,EAAwB,GAChCjC,QAASA,EACToB,SAAU,gBACVC,QAAS,kCACTC,OAAQ,QACRE,cAAe,CACbC,YAAa,CAAC,CAAEC,GAAI,SAAUC,KAAK,EAAMC,WAAY,YAIzDX,EAAKY,OACLtB,EAAa6B,eAEbnB,EAAKa,GAAG,SAAS,KAEfC,YAAW,KACTxB,EAAaiC,eACbH,EAAMrB,WACNC,EAAKe,qBAKZ,O,qCAuBE,MAAMS,EAUXC,YACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACA,uLACAC,KAAKC,QAAUT,EACfQ,KAAKE,UAAYT,EACjBO,KAAKG,WAAaT,EAClBM,KAAKI,UAAYT,EACjBK,KAAKK,UAAY,CAAET,KAAAA,EAAMC,IAAAA,GACzBG,KAAKM,OAASR,EACdE,KAAKO,QAAUR,EAGjBD,QACE,OAAOE,KAAKM,OAEdP,SACE,OAAOC,KAAKO,QAEdtC,WACE,OAAO+B,KAAKK,UAEdG,OACER,KAAKE,UAAUF,KAAKC,SAEtBQ,QACET,KAAKG,WAAWH,KAAKC,SAEvBS,YACE,OAAOV,KAAKC,QAEdU,OAAO1C,GACL+B,KAAKK,UAAYpC,EACjB+B,KAAKI,UAAUJ,KAAKC,QAASD,KAAKK,Y,qFAO/B,MAAMO,EAOXrB,YAAYzH,EAAc+I,GAA8B,4GACtDb,KAAKc,SAAWhJ,EAChBkI,KAAKe,eAAiBF,EACtBb,KAAKgB,SAAU,EAGjBC,SACE,OAAOjB,KAAKe,eAEd1D,aACE,OAAO2C,KAAKc,SAEdI,YACE,OAAOlB,KAAKmB,QAEdC,WACE,OAAOpB,KAAKgB,QAEdK,OACErB,KAAKgB,SAAU,EAEjBM,SACEtB,KAAKgB,SAAU,G,sCAOZ,MAAMO,EAOXhC,YAAY7C,GAAW,uGACrBsD,KAAKwB,QAAU,GACfxB,KAAKyB,OAAS,GACdzB,KAAK0B,MAAQhF,EACbsD,KAAK2B,eAAgB,EAGvBC,YACE,OAAO5B,KAAKwB,QAGdK,SAASC,GACP,OAAQ9B,KAAKyB,OAASK,EAMxBC,YAAYzE,GACV,MAAM0E,GAAQC,EAAAA,EAAAA,WAAU3E,EAAQ,YAC1B4E,EAAUF,EAAM,GACtB1E,EAAS0E,EAAM,GAEfG,IAAAA,KAAO7E,GAAQ,CAAC8E,EAAO3F,KACrB,MAAM4F,EAAK,IAAIzB,EAAYnE,EAAOuD,KAAKsC,UAAU7F,IACjDuD,KAAKwB,QAAQhK,KAAK6K,MAGpBF,IAAAA,KAAOD,GAAS,CAACE,EAAO3F,KACtB,MAAM8F,EAAM,IAAI3B,EAAYnE,EAAOuD,KAAKwC,aAAa/F,IACrDuD,KAAKwB,QAAQhK,KAAK+K,MAGpBvC,KAAKwB,QAAQiB,MAAK,CAACC,EAAQC,KACzB,MAAMC,EAAKF,EAAErF,aACXwF,EAAKF,EAAEtF,aACT,OAAIuF,EAAGE,IAAMD,EAAGC,IACP,EAELF,EAAGE,IAAMD,EAAGC,KACN,EAEH,KAOXC,aAGEZ,IAAAA,KAAOnC,KAAKwB,SAAS,CAACY,EAAO3F,KAC3B,MAAM3E,EAAU2E,EAAMY,aAChB2F,EAAahD,KAAKiD,YAAYnL,EAAQgL,MAAQ9C,KAAKiD,YAAYnL,EAAQoL,SACvEC,EAAcnD,KAAKoD,aAAatL,EAAQgL,IAAKhL,EAAQoL,UAEtDF,IAAcG,GAAiB1G,EAAM2E,WAGxC3E,EAAMwE,SAASP,YAAYW,OAF3B5E,EAAMwE,SAAST,UAUrB6C,eACE,MAAMC,EAAItD,KAAK0B,MAAM6B,gBACrB,IAAI3D,EACAC,EACJ,MAAM2D,EAAQxD,KAAK0B,MAAM+B,WAAWzD,KAAK0B,MAAMrE,aAAaC,OAAOkG,MAAQ,GAE3ErB,IAAAA,KAAOnC,KAAKwB,SAAS,CAACY,EAAO3F,KAC3BoD,EAAMyD,EAAEzD,IAAMG,KAAK0B,MAAM3B,SAAWtD,EAAMwE,SAASlB,SACnDH,EAAO4D,EAAME,IAAIjH,EAAMY,aAAayF,KAAOQ,EAAE1D,KAAOnD,EAAMwE,SAASnB,QAAU,EAC7ErD,EAAMwE,SAASN,OAAO,CAAEd,IAAKA,EAAKD,KAAMA,OAO5C+D,eACExB,IAAAA,KAAOnC,KAAKwB,SAAS,CAACY,EAAOwB,KAC3BA,EAAI3C,SAASR,WAEfT,KAAKwB,QAAU,GAMjBc,UAAU7F,GAAqD,QAC7D,MAAMoH,EAAO7D,KAEP8D,EAAY9D,KAAK0B,MAAMqC,iBACvBT,EAAItD,KAAK0B,MAAM6B,gBACfC,EAAQxD,KAAK0B,MAAM+B,WAAWzD,KAAK0B,MAAMrE,aAAaC,OAAOkG,MAAQ,GAC3E,IAAI3D,EAAKD,EAAMoE,EAAOC,EAAYC,EAAYC,EAAWC,EACrDC,EAGJ,MAAMC,EAAc7H,EAAM8H,UAKxBP,EAHkB,OAAhBhE,KAAKyB,QAAoBzB,KAAKyB,OAAO6C,IAAiBtE,KAAKyB,OAAO6C,GAAaN,MAGzEhE,KAAKyB,OAAO6C,GAAaN,MAFzB,OAQRC,EAHkB,OAAhBjE,KAAKyB,QAAoBzB,KAAKyB,OAAO6C,IAAiBtE,KAAKyB,OAAO6C,GAAaL,WAGpEjE,KAAKyB,OAAO6C,GAAaL,WAFzB,EAQbC,EAHkB,OAAhBlE,KAAKyB,SAAoBzB,KAAKyB,OAAO6C,SAAwD3J,IAAxCqF,KAAKyB,OAAO6C,GAAaJ,YAGnElE,KAAKyB,OAAO6C,GAAaJ,WAMtCG,EAHkB,OAAhBrE,KAAKyB,SAAoBzB,KAAKyB,OAAO6C,SAA2D3J,IAA3CqF,KAAKyB,OAAO6C,GAAaD,eAGhErE,KAAKyB,OAAO6C,GAAaD,cAMzCF,EAHiB,MAAfnE,KAAKyB,QAAmBzB,KAAKyB,OAAO6C,IAAiBtE,KAAKyB,OAAO6C,GAAaH,UAGpEnE,KAAKyB,OAAO6C,GAAaH,UAAUK,cAFnC,SAQZJ,EAHiB,MAAfpE,KAAKyB,QAAmBzB,KAAKyB,OAAO6C,SAAuD3J,IAAvCqF,KAAKyB,OAAO6C,GAAaF,UAGnEpE,KAAKyB,OAAO6C,GAAaF,UAFzB,EAKd,IAAIK,EAAYjB,EAAM1L,QAAQ4M,oBAAsB,EACpDD,GAAwB,EAExB5E,EAAMyD,EAAEzD,IAAMG,KAAK0B,MAAM3B,SAAW0E,EACpC7E,EAAO4D,EAAME,IAAIjH,EAAMqG,KAAOQ,EAAE1D,KAEhC,MAAM5H,EAAOmK,GAAAA,CAAE,kDACZwC,IAAI,CACH1G,SAAU,WACV2G,QAAS,GACThF,KAAMA,EAAO,KACbC,IAAK,EACLC,MAAOsE,EAAY,KACnBrE,OAAQC,KAAK0B,MAAM3B,SAAuB,GAAZ0E,EAC9B,oBAAqBL,EAAY,KACjC,oBAAqBD,EACrB,oBAAqBH,EACrBA,MAAOA,IAERa,SAASf,GAEZ,GAAII,EAAY,CACd,MAAMY,EAAS3C,GAAAA,CAAE,qCAAqCwC,IAAI,CACxD1G,SAAU,WACV2B,MAAOqE,EAAac,KAAKC,MAAMZ,EAAY,GAAK,KAChD,YAAa,EACb,cAAe,EACftE,MAAO,EACPC,OAAQ,EACR,cAAekE,EAAa,uBAC5B,eAAgBA,EAAa,yBAG/Ba,EAAOD,SAAS7M,GAGdgI,KAAKyB,OAAO6C,IACZtE,KAAKyB,OAAO6C,GAAarG,UAC2B,WAApD+B,KAAKyB,OAAO6C,GAAarG,SAASgH,cAElCH,EAAOH,IAAI,CACT9E,IAAKA,EAAMoE,EAAa,EAAI,KAC5B,aAAc,OACd,gBAAiBA,EAAa,YAAcD,IAG9Cc,EAAOH,IAAI,CACT9E,IAAK,MACL,aAAcoE,EAAa,YAAcD,EACzC,gBAAiB,SAIrBc,EAAO1M,KAAK,CACVqE,MAAOA,IAGT,MAAMyI,EAAa,WACjB3I,EAAuBuI,EAAQ3C,GAAAA,CAAEnC,MAAM5H,KAAK,SAAUyL,EAAKnC,QAGzDjF,EAAM0I,WACRpG,EAAkB+F,EAAQrI,EAAM0I,UAAWtB,EAAKnC,OAGlD,MAAM0D,EAAa,KACjBvB,EAAKnC,MAAM2D,kBAGThB,IACFS,EAAOH,IAAI,CAAEW,OAAQ,SACrBR,EAAOS,MAAML,EAAYE,IAwB7B,OApBsB,IAAI9F,EACxBtH,GACA,SAAkBwN,GAChBA,EAAIC,UAELD,IACCA,EAAIE,YAEN,CAACF,EAAUvH,KACTuH,EAAIb,IAAI,CACN9E,IAAK5B,EAAS4B,IACdD,KAAM3B,EAAS2B,SAGnBA,EACAC,EAfoB,UAgBpB7H,EAAK8H,eAhBe,QAgBJ,EAhBI,UAiBpB9H,EAAK+H,gBAjBe,QAiBH,GASrByC,aAAa/F,GAAyE,QACpF,MAAMoH,EAAO7D,KAEP8D,EAAY9D,KAAK0B,MAAMqC,iBACvBT,EAAItD,KAAK0B,MAAM6B,gBACfC,EAAQxD,KAAK0B,MAAM+B,WAAWzD,KAAK0B,MAAMrE,aAAaC,OAAOkG,MAAQ,GAC3E,IAAI3D,EACFD,EACAwE,EACAuB,EACAxB,EACAH,EACAK,EAGF,MAAMC,EAAc7H,EAAM8H,UAKxBP,EAHkB,OAAhBhE,KAAKyB,QAAoBzB,KAAKyB,OAAO6C,IAAiBtE,KAAKyB,OAAO6C,GAAaN,MAGzEhE,KAAKyB,OAAO6C,GAAaN,MAFzB,OAQRK,EAHkB,OAAhBrE,KAAKyB,SAAoBzB,KAAKyB,OAAO6C,SAA2D3J,IAA3CqF,KAAKyB,OAAO6C,GAAaD,eAGhErE,KAAKyB,OAAO6C,GAAaD,cAMzCD,EAHiB,MAAfpE,KAAKyB,QAAmBzB,KAAKyB,OAAO6C,SAAuD3J,IAAvCqF,KAAKyB,OAAO6C,GAAaF,UAGnEpE,KAAKyB,OAAO6C,GAAaF,UAFzB,EAQZD,EAHiB,MAAfnE,KAAKyB,QAAmBzB,KAAKyB,OAAO6C,IAAiBtE,KAAKyB,OAAO6C,GAAaH,UAGpEnE,KAAKyB,OAAO6C,GAAaH,UAAUK,cAFnC,SAMd3E,EAAMyD,EAAEzD,IAAMG,KAAK0B,MAAM3B,SADP,EAGlB,MAAM6F,EAAWb,KAAKjC,IAAIrG,EAAMqG,IAAKrG,EAAMyG,SACrC2C,EAASd,KAAKe,IAAIrJ,EAAMqG,IAAKrG,EAAMyG,SACzCtD,EAAO4D,EAAME,IAAIkC,GAAYtC,EAAE1D,KAC/B,MAAMmG,EAAQvC,EAAME,IAAImC,GAAUvC,EAAE1D,MAE7BoG,EAAMC,GAAQ,CAAC3C,EAAE1D,KAAM0D,EAAE1D,KAAOI,KAAK0B,MAAM5B,SAC5CoG,EAAcnB,KAAKe,IAAIlG,EAAMoG,GAGnCL,EAFkBZ,KAAKjC,IAAIiD,EAAOE,GAERC,GADLH,EAAQE,EAAO,EAAI7B,IAGxC+B,EAAAA,EAAAA,MAAK,CAACvG,EAAMmG,IAAS9H,IAEnB,GAAI+H,GAAQ/H,GAAYA,EAAWgI,EAAM,CAC1B9D,GAAAA,CAAE,kDAAkDwC,IAAI,CACnE1G,SAAU,WACV2G,QAAS,GACThF,KAAM3B,EAAW,KACjB4B,IAAK,EACLC,MAAOsE,EAAY,KACnBrE,OAAQC,KAAK0B,MAAM3B,SAvBP,EAwBZ,oBAAqBqE,EAAY,KACjC,oBAAqBD,EACrB,oBAAqBH,EACrBA,MAAOA,IAEJa,SAASf,OAIlB,MAAMsC,EAASjE,GAAAA,CAAE,kEAAkEwC,IAAI,CACrF1G,SAAU,WACV2G,QAAS,GACThF,KAAMsG,EAAc,KACpBrG,IAAKA,EACLC,MAAO6F,EAAc,KACrB5F,OAAQ,SACR,oBAAqBiE,EACrBA,MAAOA,EACP,mBAAoBA,IAEtBoC,EAAOvB,SAASf,GAEhBsC,EAAOhO,KAAK,CACVqE,MAAOA,IAGT,MAAMyI,EAAa,WACjB3I,EAAuB6J,EAAQjE,GAAAA,CAAEnC,MAAM5H,KAAK,SAAUyL,EAAKnC,QAGzDjF,EAAM0I,WACRpG,EAAkBqH,EAAQ3J,EAAM0I,UAAWtB,EAAKnC,OAGlD,MAAM0D,EAAa,KACjBvB,EAAKnC,MAAM2D,kBAGThB,IACF+B,EAAOzB,IAAI,CAAEW,OAAQ,SACrBc,EAAOb,MAAML,EAAYE,IAuB3B,OApBsB,IAAI9F,EACxB8G,GACA,SAAkBZ,GAChBA,EAAIC,UAELD,IACCA,EAAIE,YAEN,CAACF,EAAuDvH,KACtDuH,EAAIb,IAAI,CACN9E,IAAK5B,EAAS4B,IACdD,KAAM3B,EAAS2B,SAGnBA,EACAC,EAfoB,UAgBpBuG,EAAOtG,eAhBa,QAgBF,EAhBE,UAiBpBsG,EAAOrG,gBAjBa,QAiBD,GASvBkD,YAAYoD,GACV,MAAM7C,EAAQxD,KAAK0B,MAAM+B,WAAWzD,KAAK0B,MAAMrE,aAAaC,OAAOkG,MAAQ,GACrE8C,EAAK9C,EAAME,IAAI2C,GACrB,OAAOC,EAAK,GAAKA,EAAK9C,EAAME,IAAIF,EAAMsC,KAMxC1C,aAAamD,EAAgBC,GAC3B,MAAMhD,EAAQxD,KAAK0B,MAAM+B,WAAWzD,KAAK0B,MAAMrE,aAAaC,OAAOkG,MAAQ,IACpEiD,EAAQC,GAAU,CAAClD,EAAME,IAAI6C,GAAS/C,EAAME,IAAI8C,KAChDG,EAAUC,GAAY,CAAC,EAAGpD,EAAME,IAAIF,EAAMsC,MACjD,OAAOa,EAAWF,GAAUC,EAASE,GASlC,SAASC,EAAgBnK,GAC9B,MAAMmH,EAAO7D,KACP8G,EAAe,IAAIvF,EAAa7E,GAEtCA,EAAKkF,UAAY,IACRkF,EAAatF,QAGtB9E,EAAKqK,WAAa,KAChB5E,IAAAA,KAAO2E,EAAatF,SAAS,CAACY,EAAO3F,KACnCA,EAAMwE,SAASP,YAAYW,WAI/B3E,EAAKsK,WAAa,KAChBtK,EAAKqK,aACL5E,IAAAA,KAAO2E,EAAatF,SAAS,CAACY,EAAO3F,KACnCA,EAAM4E,UAGRwC,EAAKiD,aAAa/D,cAIpBrG,EAAKuK,UAAa3J,IACZwJ,EAAanF,eACfmF,EAAa/E,YAAYzE,IAI7BZ,EAAKwK,MAAMC,eAAe3P,MAAK,CAACkF,EAAW5E,KAEd,MAAvBA,EAAQwF,OAAOlF,OACjB0O,EAAanF,eAAgB,MAIjCjF,EAAKwK,MAAM1G,KAAKhJ,MAAMkF,IACpB,MAAM5E,EAAU4E,EAAKW,aAEjByJ,EAAanF,gBAEXmF,EAAalF,YAAY9K,OAAS,GACpCgQ,EAAajF,SAAS/J,EAAQwF,OAAOwE,OACrCgF,EAAa/E,YAAYjK,EAAQwF,OAAOlF,OAExC0O,EAAazD,gBAIjByD,EAAa/D,gB,mBAajBZ,IAAAA,KAAAA,QAAAA,KAAoB,CAClB0E,KAAMA,EACN/O,QAX0B,CAC1BwF,OAAQ,CACNlF,KAAM,KACN0J,MAAO,KACP0B,MAAO,EACPvF,SAAU,WAOZzD,KAAM,SACN4M,QAAS,U,uMCnrBI,SAASC,EAAwBC,EAAWnP,EAAgB+G,EAAYqI,GACrF,MAAMC,EAAOxH,KAEPvJ,EADOyI,EAAMuI,KACAhR,MACbiR,EAAa,IAAIC,EAAAA,sBAAsB,CAAEC,IAAK,GAAIC,MAAO,GAAIpR,MAAOuJ,KAAKvJ,QAEzEqR,EAAW3F,GAAAA,CAAE,+BAEnBnC,KAAKnB,QAAU,KACbiJ,EAASpC,UAGX1F,KAAK+H,6BAA+B,CAACC,EAAc1O,EAAa2O,KAC9D,MAAMC,EAAK5O,EAAO6O,WAAWC,UACvBC,EAAUJ,EAAOC,EACjBI,EAAMhP,EAAO6O,WAAWI,OAAOzR,OACrC,IAAI0R,EACJ,IAAKA,EAAIH,EAASG,EAAIF,EAAKE,GAAKN,EAE9B,IACI5O,EAAOmP,MAAMC,OAA8C,MAArCpP,EAAO6O,WAAWI,OAAOF,IAAmD,MAA/B/O,EAAO6O,WAAWI,OAAOC,IAE9FlP,EAAO6O,WAAWI,OAAOC,GAAKR,EAE9B,OAAOjD,KAAKe,IAAI0C,EAAIN,EAAI,GAAKA,EAGjC,OAAOM,EAAIN,EAAK,GAGlBlI,KAAK2I,uBAAyB,CAACX,EAAW1O,KACxC,IAEIsP,EAFAC,EAAQ,EACRC,EAAQxP,EAAOlB,KAAKtB,OAAS,EAEjC,OAAa,CACX,GAAI+R,EAAQC,EACV,OAAO/D,KAAKe,IAAIgD,EAAO,GAGzB,GADAF,EAAS7D,KAAKgE,OAAOF,EAAQC,GAAS,GAClCxP,EAAOlB,KAAKwQ,GAAQ,KAAOZ,EAC7B,OAAOY,EACEtP,EAAOlB,KAAKwQ,GAAQ,GAAKZ,EAClCa,EAAQD,EAAS,EAEjBE,EAAQF,EAAS,IAKvB5I,KAAKgJ,cAAgB,CAACC,EAAsBC,EAAmBtB,EAAoCuB,KACnF,SAAVA,IACFD,EAAY,mCAAqCD,EAAe,SAAWC,GAE7EpB,EAASsB,KAAKF,GAAWG,SAASzB,EAAI0B,MAAO1B,EAAI2B,MAAO,CAAEC,OAAQ,MAGpExJ,KAAKyJ,4BAA8B,SAAUC,EAAmB9B,GAC9D,IAAItQ,EAAOV,EAAG0C,EAAQqQ,EAAYC,EAAeC,EAAWC,EAOxDC,EAAaC,EALbC,EAAe,CAAC,GAAI,GAAI,IAGxBC,EAAY,EAIhB,IAAKtT,EAAI,EAAGA,EAAI8S,EAAW5S,OAAQF,IACjC0C,EAASoQ,EAAW9S,IAEf0C,EAAOlB,KAAKtB,QAAWL,EAAM0T,OAAOC,WAAa9Q,EAAO+Q,YAMxD/Q,EAAOlB,KAAKtB,QAAWL,EAAM0T,OAAOG,UAAYhR,EAAOiR,WAMxDjR,EAAOkR,YAVTP,EAAQ,GAAGzS,KAAK,CAAEiT,QAAQ,EAAMnT,MAAO,KAezCqS,EAAa3J,KAAK2I,uBAAuBf,EAAIvB,EAAG/M,GAChDsQ,EAAgBhC,EAAIvB,EAAI/M,EAAOlB,KAAKuR,GAAY,GAChDE,EAAYvQ,EAAOlB,KAAKuR,GAAY,KAIjCI,GACAH,GAAiB,IAAMA,EAAgBG,GAAeA,EAAc,IACpEH,EAAgB,GAAKA,EAAgBG,KAEtCA,EAAcH,EACdI,EAAUH,GAGZvS,EAAQgC,EAAOlB,KAAKuR,GAAY,GAE5BrQ,EAAOoR,OAAmB,OAAVpT,GAA+C,eAA7Bb,EAAMkU,QAAQC,aAClDV,GAAa5S,EACbA,EAAQ4S,IAIN5Q,EAAOmP,MAAMC,OAASpP,EAAOoR,SAI/Bf,EAAa3J,KAAK+H,6BAA6BH,EAAIvB,EAAG/M,EAAQqQ,IAIhEG,EAAQ,EACJxQ,EAAOwQ,QACTA,EAAQxQ,EAAOwQ,MAAMe,GAGvBZ,EAAQH,GAAOtS,KAAK,CAClBF,MAAOA,EACPqS,WAAYA,EACZ3F,MAAO1K,EAAO0K,MACd8G,MAAOxR,EAAOyR,aACdvP,KAAMqO,EACNmB,SAAUpB,EACVxH,MAAOxL,KAUX,OALAqT,EAAUA,EAAQ,GAAGgB,OAAOhB,EAAQ,GAAIA,EAAQ,IAGhDA,EAAQzO,KAAOwO,EAERC,GAGT3C,EAAKlC,YAAW,KAAM,MACpB,aAAI3O,EAAMkU,eAAV,OAAI,EAAeO,OAAQ,CACzB,MAAMxO,EAAO4K,EAAKlP,OAAOsE,KACrBA,IACFoL,EAASqD,SACTzO,EAAK0O,eAGTjT,EAAUmF,OAAO+N,QAAQ,IAAIC,EAAAA,4BAC7BnT,EAAUmF,OAAO+N,QAAQ,IAAIE,EAAAA,wBAG/BjE,EAAKkE,KAAK,aAAa,CAAC/O,EAAYmL,EAA2C6D,KAC7EjE,EAAK/B,KAAKmC,EAAK6D,GAGVtT,EAAUuT,cACb9D,EAAI+D,WAAa/D,EAAI2B,MAAQjC,EAAKkC,SAAS3J,KAAOyH,EAAKvH,SACvD2H,EAAWkE,QAAQhE,IAAMA,EACzBF,EAAWkE,QAAQnV,MAAQA,EAC3BiR,EAAWkE,QAAQ/D,MAAnB,KAAoCD,EAAYvB,EAChDlO,EAAUmF,OAAO+N,QAAQ3D,OAI7BJ,EAAKkE,KAAK,aAAa,CAAC/O,EAAYmL,EAAU6D,KAC5CI,EAAAA,GAAAA,KAAeC,EAAAA,GAAAA,GAAyB,CAAElE,IAAKA,EAAKnR,MAAOA,EAAOgV,KAAMA,OAG1EnE,EAAKkE,KAAK,aAAa,KACrB,IAAK/U,EAAMkU,QAAQO,OACjB,OAGF,MAAMxO,EAAO4K,EAAKlP,OAAOsE,KACrBA,IACFoL,EAASqD,SACTzO,EAAK0O,kBAITpL,KAAKS,MAAS/D,IACZoL,EAASqD,SACTzO,EAAKqP,iBACLrP,EAAK0O,eAGPpL,KAAKyF,KAAO,CAACmC,EAAU6D,KACrB,MAAM/O,EAAO4K,EAAKlP,OAAOsE,KACnBsP,EAAWtP,EAAKuP,UAEhB9C,EADQzM,EAAK+G,WACC,GAAG3L,QAAQoU,KACzBxC,EAAanC,IACnB,IACI4E,EAAO7U,EAAO2R,EAAcmD,EAAWxV,EAAG0C,EAAQ+S,EAAYC,EAD9DC,EAAgB9V,EAAMkU,QAAQO,OAKlC,GAAItD,EAAI+D,UAAW,OACjB,MAAMa,EAAc9P,EAAK8P,YAAY,CAAEnG,EAAGuB,EAAIvB,IAC9C,GAAIoG,OAAOC,MAAMF,EAAY5M,OAAS4M,EAAY5M,KAAO,GAAK4M,EAAY5M,KAAO0H,EAAKxH,QAEpF,YADA0H,EAAK/G,MAAM/D,GAIbkL,EAAI0B,MAAQhC,EAAKkC,SAAS5J,KAAO4M,EAAY5M,KAC7CgI,EAAI2B,MAAQjC,EAAKkC,SAAS3J,IAAMyH,EAAKvH,SAAW6H,EAAI+D,UAEpD,MAAMgB,EAAS,UAAGxK,GAAAA,CAAEyK,QAAQD,mBAAb,QAA4B,EAG3C,KAFkB/E,EAAI2B,OAASoD,GAAa/E,EAAI2B,OAASpH,GAAAA,CAAEyK,QAAQC,cAAiBF,GAIlF,YADAnF,EAAK/G,MAAM/D,GAOb,GAHAA,EAAKoQ,aAAalF,GAClB2E,GAAgB,EAEZpU,EAAU4U,0BAEZ,OAIJ,GAA0B,IAAtBrD,EAAW5S,OAUf,GALEwV,EADE5C,EAAW,GAAGsD,gBACAC,EAAAA,kBAAAA,WAEAA,EAAAA,kBAAAA,SAGdV,EAAe,CACjB7P,EAAK0O,cAEL,MAAM8B,EAAkB1F,EAAKiC,4BAA4BuC,EAAUpE,GAkBnE,IAhBAyE,EAAa,GAEbpD,EAAe9Q,EAAUgV,WAAWD,EAAgB1R,KAAM8Q,GAI/B,IAAvB7V,EAAMkU,QAAQlI,KAChByK,EAAgBzK,MAAK,CAACC,EAAsBC,IACnCA,EAAErL,MAAQoL,EAAEpL,QAEW,IAAvBb,EAAMkU,QAAQlI,MACvByK,EAAgBzK,MAAK,CAACC,EAAsBC,IACnCD,EAAEpL,MAAQqL,EAAErL,QAIlBV,EAAI,EAAGA,EAAIsW,EAAgBpW,OAAQF,IAAK,CAG3C,GAFAwV,EAAYc,EAAgBtW,GAExBwV,EAAU3B,OACZ,SAGF,IAAI2C,EAAiB,GACjB3B,GAAQW,EAAUhK,QAAUqJ,EAAK4B,cACnCD,EAAiB,sCAGnB9T,EAASoQ,EAAW0C,EAAUhK,OAC9B9K,EAAQgW,EAAAA,SAAAA,SAAkBhU,EAAOiU,YAAYnB,EAAU9U,QAKvD+U,GACE,uCAAyCe,EAAiB,4CAC5Df,GAAc,uCALAiB,EAAAA,SAAAA,SAAkBlB,EAAUpI,OAKqB,WAJjDsJ,EAAAA,SAAAA,SAAkBlB,EAAUtB,OAI0C,UACpFuB,GAAc,oCAAsC/U,EAAQ,eAC5DoF,EAAK8Q,UAAUpB,EAAUhK,MAAOgK,EAAUzC,YAG5CnC,EAAKwB,cAAcC,EAAcoD,EAAYzE,EAAKuB,QAC7C,GAAIsC,EAAM,CAEf,MAAMzH,EAAQsJ,EAAAA,SAAAA,SAAkB7B,EAAKnS,OAAO0K,OAC5C1K,EAASoQ,EAAW+B,EAAK4B,aACzBlB,EAAQ,+EACRA,GAAS,uCAAyCnI,EAAQ,WAAa1K,EAAOyR,aAAe,UAG3FzT,EADEb,EAAMiU,OAAsC,eAA7BjU,EAAMkU,QAAQC,WACvBa,EAAKgC,UAAU,GAAKhC,EAAKgC,UAAU,GAEnChC,EAAKgC,UAAU,GAGzBnW,EAAQgW,EAAAA,SAAAA,SAAkBhU,EAAOiU,YAAYjW,IAC7C2R,EAAe9Q,EAAUgV,WAAW1B,EAAKgC,UAAU,GAAInB,GAEvDH,GAAS,oCAAsC7U,EAAQ,SAEvDkQ,EAAKwB,cAAcC,EAAckD,EAAOvE,EAAKuB,QAG7CrB,EAASqD,U,+JCnTR,MAAMuC,EAQXnO,YAAoBJ,GAAsB,8HAH3B,GAG2B,qCAAtBA,UAAAA,EAAsB,KAAtBA,UAAAA,EAEpBwO,cAAcC,EAAkBC,EAA8BC,GAC5D,IAAIC,EAAaF,EAAM5V,UAKvB,MAJwB,WAApB4V,EAAM5V,YACR8V,EAAa,YAGP,iEACkDH,+DACLG,yEAEJH,0CACjBG,iBAA0BA,qDACnBD,sEAKzCE,aAAaC,GACX,MAAMC,EAAa/L,GAAAA,CAAE8L,EAAIE,eAAeC,QAAQ,yBAC1CR,EAAczL,GAAAA,CAAE8L,EAAIE,eAAe/V,KAAK,eAE9C,IACIiW,EADAC,EAAuB,KAE3B,MAAM5R,EAAOsD,KAAKtD,KACZyC,EAAYa,KAAKb,UACjB0O,EAAQ7N,KAAK9I,WAAW0W,GAE9B,SAASW,EAASN,GAChB,GAAc,OAAVK,EACFA,EAAQL,EAAIO,YACP,CACL,MAAMC,EAAOR,EAAIO,QAAUF,EAC3BD,GAAkBI,EAClBH,EAAQL,EAAIO,QACZN,EAAWvJ,IAAI,CAAE9E,IAAKwO,EAASI,KAuBnCH,EAAQ,KACRD,EAASH,EAAWjQ,WAAW4B,IAE/BqO,EAAWvP,GAAG,YAAa4P,GAC3BzR,SAAS4R,iBAAiB,WAvB1B,SAASC,IAEP,IAAIC,EAAalS,EAAKmS,IAAI,CAAEjP,KAAM,EAAGC,IAAKwO,IAAUS,EACpDF,EAAaG,SAASH,EAAWI,QAAQ,GAAI,IAC7CnB,EAAMvW,MAAQsX,EAEdV,EAAWe,IAAI,YAAaV,GAC5BzR,SAASoS,oBAAoB,UAAWP,GAGxCxP,EAAUgQ,OAAOC,QAAO,KACtBjQ,EAAUkQ,SACVlQ,EAAU7B,OAAOgS,KAAKxD,EAAAA,GAAAA,GAA6B,CACjDyD,UAAW1B,EACXD,YAAaA,UAYrB4B,UACExP,KAAKyP,YAAYC,KAAK,yBAAyBhK,SAC/C1F,KAAK2P,cAAe,EAGtBC,aAAahC,EAAqBiC,GAChC,MAAMhC,EAAQ7N,KAAK9I,WAAW0W,GAE9B,IAAKC,EAAM1W,SAAY6I,KAAKb,UAAkBzI,MAC5C,OAGF,MAAMY,EAAQuW,EAAMvW,MACpB,IAAIwW,EAAWxW,EACXwY,EAAe,EAGnB,IAAKC,EAAAA,EAAAA,UAASzY,GAGP,CACL,MAAM0Y,EAAiBhQ,KAAKtD,KAAKgH,IAAI,CAAE2C,EAAG,EAAGyI,EAAGxX,IAChDwY,EAAe/K,KAAKC,MAAMD,KAAKjC,IAAIiC,KAAKe,IAAIkK,EAAenQ,IAAK,GAAIG,KAAKD,QAAU,QAJnF+N,EAAW,GACXgC,EAAeD,EAMjB,MAAM3B,EAAa/L,GAAAA,CAAEnC,KAAK2N,cAAcC,EAAaC,EAAOC,IAC5D9N,KAAKyP,YAAYQ,OAAO/B,GAExBA,EAAWgC,YAAY,iCAA+C,KAAbpC,GACzDI,EAAWvJ,IAAI,CAAE9E,IAAKiQ,IAGxBK,oBAEE,OAAQnQ,KAAKoQ,gBAAkBpQ,KAAKb,UAAUkR,mBAAqBrQ,KAAKb,UAAU1I,MAAMS,WAAWJ,OAAS,EAG9GwZ,QAAQhJ,EAAclP,GACpB4H,KAAKoQ,gBAAiB,EACtB,IAAK,IAAIxZ,EAAI,EAAGA,EAAIwB,EAAKtB,OAAQF,IAC/B,GAAIwB,EAAKxB,GAAGkT,MAAQ,EAAG,CACrB9J,KAAKoQ,gBAAiB,EACtB,MAIJ,GAAIpQ,KAAKmQ,oBAAqB,CAC5B,MAAMI,EAAkBvQ,KAAKb,UAAU1I,MAAMS,WAAWJ,OAAS,EAAI,QAAU,QAC/EwQ,EAAK3C,IAAI,eAAgB4L,QAChBvQ,KAAK2P,cACdrI,EAAK3C,IAAI,eAAgB,KAI7BnE,KAAK9D,GACHsD,KAAK9I,WAAa8I,KAAKb,UAAU1I,MAAMS,WACvC8I,KAAKtD,KAAOA,EACZsD,KAAKyP,YAAc/S,EAAKqH,iBAEpB/D,KAAK2P,cACP3P,KAAKwP,UAGFxP,KAAKmQ,sBAIVnQ,KAAKD,OAASrD,EAAKqD,SAEfC,KAAK9I,WAAWJ,OAAS,GAC3BkJ,KAAK4P,aAAa,EAAG,IAEnB5P,KAAK9I,WAAWJ,OAAS,GAC3BkJ,KAAK4P,aAAa,EAAG5P,KAAKD,OAAS,IAGrCC,KAAKyP,YAAYR,IAAI,YAAa,iBAClCjP,KAAKyP,YAAY9Q,GAAG,YAAa,gBAAiBqB,KAAKgO,aAAaxC,KAAKxL,OACzEA,KAAK2P,cAAe,GAGtBa,eAAe1Y,EAAcrB,GAC3B,IAAKA,EAAMS,YAA0C,IAA5BT,EAAMS,WAAWJ,OACxC,OAGF,IAEIF,EAAG2Y,EAAWkB,EAFdC,EAAUC,EAAAA,EACVC,GAAWD,EAAAA,EAGf,IAAK/Z,EAAI,EAAGA,EAAIH,EAAMS,WAAWJ,OAAQF,IAAK,CAE5C,GADA2Y,EAAY9Y,EAAMS,WAAWN,KACxBmZ,EAAAA,EAAAA,UAASR,EAAUjY,OACtB,SAGF,IAAIuZ,EA4BAC,EAAWC,EA3Bf,OAAQxB,EAAU9X,IAChB,IAAK,KACHoZ,EAAQH,EAEJja,EAAMS,WAAWJ,OAASF,EAAI,IAChC6Z,EAAQha,EAAMS,WAAWN,EAAI,GACzB6Z,EAAMnZ,MAAQiY,EAAUjY,QAC1BuZ,EAAQJ,EAAMnZ,MACdsZ,EAAUC,IAGd,MAEF,IAAK,KACHA,EAAQD,EAEJna,EAAMS,WAAWJ,OAASF,EAAI,IAChC6Z,EAAQha,EAAMS,WAAWN,EAAI,GACzB6Z,EAAMnZ,MAAQiY,EAAUjY,QAC1BuZ,EAAQJ,EAAMnZ,MACdoZ,EAAUG,IASlB,OAAQtB,EAAUtX,WAChB,IAAK,WACH6Y,EAAY,4BACZC,EAAY,0BACZ,MAEF,IAAK,UACHD,EAAY,2BACZC,EAAY,2BACZ,MAEF,IAAK,KACHD,EAAY,2BACZC,EAAY,uBACZ,MAEF,IAAK,SACHD,EAAYvB,EAAUuB,UACtBC,EAAYxB,EAAUwB,UAMtBxB,EAAU1X,OACY,UAApB0X,EAAUzF,OAAqB9J,KAAKoQ,eACtCtY,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzB0Z,OAAQ,CAAEC,KAAM5B,EAAUjY,MAAOiH,GAAIsS,GACrC7M,OAAOoN,EAAAA,EAAAA,kBAAiBN,EAAWna,EAAAA,GAAAA,SAGrCmB,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzBsS,MAAO,CAAEqH,KAAM5B,EAAUjY,MAAOiH,GAAIsS,GACpC7M,OAAOoN,EAAAA,EAAAA,kBAAiBN,EAAWna,EAAAA,GAAAA,UAIrC4Y,EAAUvX,OACY,UAApBuX,EAAUzF,OAAqB9J,KAAKoQ,eACtCtY,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzB0Z,OAAQ,CAAEC,KAAM5B,EAAUjY,MAAOiH,GAAIgR,EAAUjY,OAC/C0M,OAAOoN,EAAAA,EAAAA,kBAAiBL,EAAWpa,EAAAA,GAAAA,SAGrCmB,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzBsS,MAAO,CAAEqH,KAAM5B,EAAUjY,MAAOiH,GAAIgR,EAAUjY,OAC9C0M,OAAOoN,EAAAA,EAAAA,kBAAiBL,EAAWpa,EAAAA,GAAAA,Y,wHCpPxC,MAAM0a,EAAkB,CAC7BC,KAAM,CACJC,gBAAgB,EAChBC,MAAO,OACPC,UAAW,CAAE5Z,KAAM,4BAA6BG,KAAM,4BACtD0Z,WAAY,CAAE7Z,KAAM,sBAAuBG,KAAM,uBAEnD2Z,IAAK,CACHH,MAAO,MACPxN,MAAO,CAAEnM,KAAM,4BAA6BG,KAAM,4BAEpD4Z,MAAO,CACLJ,MAAO,QACPxN,MAAO,CAAEnM,KAAM,2BAA4BG,KAAM,yBAEnD6Z,KAAM,CACJL,MAAO,OACPxN,MAAO,CAAEnM,KAAM,2BAA4BG,KAAM,6BAEnD8Z,OAAQ,CACNN,MAAO,SACPxN,MAAO,CAAEnM,KAAM,2BAA4BG,KAAM,6BAEnD+Z,OAAQ,CAAEP,MAAO,WAYnB,SAASQ,EAASC,EAAiBnY,GAKjC,IAJ+D,IAA3DoY,OAAOC,KAAKd,GAAYja,QAAQ6a,EAAWha,aAC7Cga,EAAWha,UAAY,OAGI,WAAzBga,EAAWha,UACb,MAAO,CACLJ,KAAMoa,EAAWpa,MAAQoa,EAAWnB,WAAYM,EAAAA,EAAAA,kBAAiBa,EAAWnB,UAAWhX,GAAS,KAChG9B,KAAMia,EAAWja,MAAQia,EAAWlB,WAAYK,EAAAA,EAAAA,kBAAiBa,EAAWlB,UAAWjX,GAAS,MAIpG,MAAM7B,EAAYoZ,EAAWY,EAAWha,WAExC,OAAiC,IAA7BA,EAAUsZ,eACLzX,EAAMsY,QAAUna,EAAUyZ,WAAazZ,EAAUwZ,UAGnD,CACL5Z,KAAMoa,EAAWpa,MAAOuZ,EAAAA,EAAAA,kBAAiBnZ,EAAU+L,MAAMnM,KAAMiC,GAAS,KACxE9B,KAAMia,EAAWpa,MAAOuZ,EAAAA,EAAAA,kBAAiBnZ,EAAU+L,MAAMhM,KAAM8B,GAAS,MAIrE,MAAMuY,EAIX9S,YAAoBJ,GAAgB,wDAAhBA,UAAAA,EAAgB,KAAhBA,UAAAA,EAEpBqB,KAAK9D,GACHsD,KAAKsS,YAActS,KAAKb,UAAU1I,MAAM6b,YACxCtS,KAAKtD,KAAOA,EAGd8T,eAAe1Y,EAAcrB,GAC3B,IAAKA,EAAM6b,aAA4C,IAA7B7b,EAAM6b,YAAYxb,OAC1C,OAGF,MAAMyb,EAAS,CACbpB,MAAMqB,EAAAA,EAAAA,UAASxS,KAAKb,UAAU1G,MAAM0Y,MAAMsB,MAC1ClU,IAAIiU,EAAAA,EAAAA,UAASxS,KAAKb,UAAU1G,MAAM8F,IAAIkU,OAGxC,IAAI7b,EACF8b,EACAT,EACA/P,EACAyQ,EACAC,EACAC,EAEF,MAAMC,EAAkBrc,EAAM6b,YAAYpW,KAAKwG,GAAD,iBAAkBA,KAEhE,IAAK9L,EAAI,EAAGA,EAAIkc,EAAgBhc,OAAQF,IAGtC,GAFAqb,EAAaa,EAAgBlc,IAEvBqb,EAAWc,eAAiBd,EAAWd,MAAWc,EAAWe,aAAef,EAAW1T,MAIzF0T,EAAWd,OAASc,EAAW1T,KACjC0T,EAAW1T,GAAK0T,EAAWd,OAGxBc,EAAWd,MAAQc,EAAW1T,KACjC0T,EAAWd,KAAOc,EAAW1T,IAG/BmU,EAAS,CACPvB,KAAMnR,KAAKiT,eAAehB,EAAWd,MACrC5S,GAAIyB,KAAKiT,eAAehB,EAAW1T,MAGhC0T,EAAWc,eAAiBd,EAAWe,cAC1Cf,EAAWc,cAAgBd,EAAWe,cAGnCf,EAAWe,aAAef,EAAWc,gBACxCd,EAAWe,YAAcf,EAAWc,eAGlCd,EAAWc,gBACbL,EAAOvB,KAAK+B,UAAYzG,OAAOwF,EAAWc,gBAGxCd,EAAWe,cACbN,EAAOnU,GAAG2U,UAAYzG,OAAOwF,EAAWe,cAGtCN,EAAOvB,KAAK+B,WAA+B,OAAlBR,EAAOvB,KAAKgC,GAAgC,OAAlBT,EAAOvB,KAAKiC,IACjEV,EAAOvB,KAAKgC,EAAI,EAChBT,EAAOvB,KAAKiC,EAAI,EAChBV,EAAOvB,KAAKkC,EAAI,GAGdX,EAAOnU,GAAG2U,WAA6B,OAAhBR,EAAOnU,GAAG4U,GAA8B,OAAhBT,EAAOnU,GAAG6U,IAC3DV,EAAOnU,GAAG4U,EAAI,GACdT,EAAOnU,GAAG6U,EAAI,GACdV,EAAOnU,GAAG8U,EAAI,IAGXX,EAAOvB,MAASuB,EAAOnU,IAA5B,CAcA,IAVA2D,EAAU,GAEVyQ,GAAYH,EAAAA,EAAAA,UAASD,EAAOpB,MAC5BwB,EAAUW,IAAI,OAAQ,GACtBX,EAAUW,IAAI,SAAU,GACxBX,EAAUW,IAAI,SAAU,GACxBX,EAAUY,IAAIb,EAAOvB,KAAKgC,EAAG,SAC7BR,EAAUY,IAAIb,EAAOvB,KAAKiC,EAAG,WAC7BT,EAAUY,IAAIb,EAAOvB,KAAKkC,EAAG,WAEtBV,EAAUa,QAAUjB,EAAOhU,GAAGiV,QAAQ,CAC3C,KAAOd,EAAOvB,KAAK+B,WAAaR,EAAOvB,KAAK+B,YAAcP,EAAUc,cAClEd,EAAUY,IAAI,GAAI,SAGpB,GAAIZ,EAAUa,OAASjB,EAAOhU,GAAGiV,OAC/B,MAKF,GAFAZ,GAAUJ,EAAAA,EAAAA,UAASG,GAEfC,EAAQc,KACV,GAAIhB,EAAOvB,KAAKgC,GAAKT,EAAOnU,GAAG4U,EAC7BP,EAAQW,IAAIb,EAAOnU,GAAG4U,EAAIT,EAAOvB,KAAKgC,EAAG,cACpC,GAAIT,EAAOvB,KAAKgC,EAAIT,EAAOnU,GAAG4U,EACnC,KAAOP,EAAQc,SAAWhB,EAAOnU,GAAG4U,GAClCP,EAAQW,IAAI,EAAG,cAKjB,IAFAX,EAAQW,IAAI,GAAKb,EAAOvB,KAAKgC,EAAG,SAEzBP,EAAQc,SAAWhB,EAAOnU,GAAG4U,GAClCP,EAAQW,IAAI,EAAG,SAQrB,IAHAX,EAAQU,IAAI,SAAUZ,EAAOnU,GAAG6U,GAChCR,EAAQU,IAAI,SAAUZ,EAAOnU,GAAG8U,GAEzBX,EAAOnU,GAAG2U,WAAaR,EAAOnU,GAAG2U,YAAcN,EAAQa,cAC5Db,EAAQW,IAAI,GAAI,SAIfZ,EAAUa,OAASjB,EAAOpB,KAAKqC,QAAUZ,EAAQY,OAASjB,EAAOpB,KAAKqC,QACtEb,EAAUa,OAASjB,EAAOhU,GAAGiV,QAAUZ,EAAQY,OAASjB,EAAOhU,GAAGiV,QAGnEtR,EAAQ1K,KAAK,CAAE2Z,KAAMwB,EAAUgB,UAAWpV,GAAIqU,EAAQe,YAGxDhB,EAAUY,IAAI,GAAI,SAGpBV,EAAkBb,EAASC,EAAYtb,EAAAA,GAAAA,OAEvC,IAAK,IAAI6R,EAAI,EAAGA,EAAItG,EAAQpL,OAAQ0R,IAAK,CACvC,MAAMoL,EAAI1R,EAAQsG,GACdyJ,EAAWpa,MACbC,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzBgM,MAAO,CAAE2N,KAAMyC,EAAEzC,KAAM5S,GAAIqV,EAAErV,IAC7ByF,MAAO6O,EAAgBhb,OAIvBoa,EAAWja,OACbF,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzBgM,MAAO,CAAE2N,KAAMyC,EAAEzC,KAAM5S,GAAIqV,EAAEzC,MAC7BnN,MAAO6O,EAAgB7a,OAEzBF,EAAQkZ,KAAKC,SAASzZ,KAAK,CACzBgM,MAAO,CAAE2N,KAAMyC,EAAErV,GAAIA,GAAIqV,EAAErV,IAC3ByF,MAAO6O,EAAgB7a,UAOjCib,eAAeY,GACb,MACMC,EAAc,CAAEX,EAAG,KAAMC,EAAG,MAC5BW,EAFY,qBAEMC,KAAKH,GAE7B,OAAKE,GAIDA,EAAMjd,OAAS,IACjBgd,EAAOX,EAAI1G,OAAOsH,EAAM,IACxBD,EAAOV,EAAI,EAEPW,EAAMjd,OAAS,QAAkB6D,IAAboZ,EAAM,KAC5BD,EAAOV,EAAI3G,OAAOsH,EAAM,KAGtBD,EAAOX,EAAI,KACbW,EAAOX,EAAI,IAGTW,EAAOV,EAAI,KACbU,EAAOV,EAAI,KAIRU,GApBEA,G,oSChON,MAAMG,EAIX1U,YAAoBJ,GAA6B,eAHjB,MAGiB,qBAFpC,GAEoC,KAA7BA,UAAAA,EAA6B,KAA7BA,UAAAA,EAEpBE,eACEW,KAAKvD,MAAQ,KACbuD,KAAKhB,YAAa,EAClBgB,KAAKb,UAAUkQ,SAGjBpQ,eACEe,KAAKhB,YAAa,EAGpBkV,WAAWzb,GACJuH,KAAKvD,QACRuD,KAAKvD,MAAQ,GACbuD,KAAKvD,MAAM0X,YAAcnU,KAAKb,UAAUhH,UAAUW,GAClDkH,KAAKvD,MAAM2X,QAAUpU,KAAKb,UAAU1I,MAAMqC,IAI5CkH,KAAKvD,MAAMjB,KAAO/C,EAAM0Y,KACxBnR,KAAKvD,MAAM4X,UAAW,EAElB5b,EAAM8F,KACRyB,KAAKvD,MAAMyG,QAAUzK,EAAM8F,GAC3ByB,KAAKvD,MAAM4X,UAAW,GAGxBrU,KAAKb,UAAUkQ,SAGjB1R,UAAUlB,EAAwB6K,GAChCtH,KAAKvD,MAAQA,EACbuD,KAAKb,UAAUkQ,SAGjBiF,cAAcvb,EAAkBwb,GAC9B,IAAKvU,KAAKvD,OAAgC,IAAvB1D,EAAYjC,OAC7B,OAGF,MAAMgL,EAAa,CACjB0S,YAAa,CACXxQ,MAAOyQ,EAAAA,eACPxW,SAAU,SACVgG,WAAY,GAEdyQ,MAAO,CACL1Q,MAAO2Q,EAAAA,SACP1W,SAAU,SACVgG,WAAY,GAEd2Q,WAAY,CACV5Q,MAAO6Q,EAAAA,cACP5W,SAAU,SACVgG,WAAY,GAEd6Q,WAAY,CACV9Q,MAAO+Q,EAAAA,cACP9W,SAAU,SACVgG,WAAY,GAEd+Q,WAAY,CACVhR,MAAOiR,EAAAA,yBACPhX,SAAU,SACVgG,WAAY,IAIhB,GAAIjE,KAAKvD,MAEL1D,EADEiH,KAAKvD,MAAM4X,SACC,CACZ,CACEA,UAAU,EACVvR,IAAK9C,KAAKvD,MAAMjB,KAChB0H,QAASlD,KAAKvD,MAAMyG,QACpBxI,KAAMsF,KAAKvD,MAAM/B,KACjB6J,UAAW,aACXY,UAAWnF,KAAKvD,QAIN,CACZ,CACEqG,IAAK9C,KAAKvD,MAAMjB,KAChBd,KAAMsF,KAAKvD,MAAM/B,KACjByK,UAAWnF,KAAKvD,MAChB8H,UAAW,oBAMjB,IAAK,IAAI3N,EAAI,EAAGA,EAAImC,EAAYjC,OAAQF,IAAK,CAC3C,MAAM6U,EAAO1S,EAAYnC,GAGzB6U,EAAK3I,IAAM2I,EAAKjQ,KAChBiQ,EAAK3F,IAAM2F,EAAKjQ,KAChBiQ,EAAKlH,UAAYkH,EAAKzU,KAElByU,EAAKyJ,SACPzJ,EAAKlH,UAAY,MAAQkH,EAAKyJ,SAI3BpT,EAAM2J,EAAKzU,QACd8K,EAAM2J,EAAKzU,MAAQ,CACjBgN,MAAOyH,EAAKzH,MACZ/F,SAAU,SACVgG,WAAY,IAMpB,MAAM/B,EAiBV,SAAoB5E,GAClB,OAAO6X,EAAAA,EAAAA,QAAO7X,EAAQ,YAlBJ8X,CAAWrc,IAqB/B,SAA0BmJ,EAAgBqS,GACxC,MAAMtD,EAAWsD,EAAYvD,KAAKC,SAC5BoE,EAAeJ,EAAAA,yBACrB,IAAInE,GAEJ3K,EAAAA,EAAAA,MAAKjE,GAAUkE,IAEX0K,EADE1K,EAAOkP,QACGlP,EAAOpC,OAEPqR,EAGdvE,EAQJ,SAAuByE,EAAqBC,GAC1C,MAAMxR,EAAQyR,GAAAA,CAAUF,GACxB,OAAIvR,EAAM0R,WACR1R,EAAM2R,SAASH,GACRxR,EAAM4R,eAENL,EAdKM,CAAc/E,EAAWgF,EAAAA,mBACrC7E,EAASzZ,KAAK,CACZgM,MAAO,CAAE2N,KAAM/K,EAAOtD,IAAKvE,GAAI6H,EAAOlD,SACtCc,MAAO8M,OAnCTiF,CAAiB7T,EAASqS,GAI1BA,EAAYvD,KAAKtM,mBADU,EAE3B6P,EAAY/Q,MAAMkB,mBAHS,GAK3B6P,EAAYjX,OAAS,CACnB0Y,QAAQ7D,EAAAA,EAAAA,MAAKrQ,GAAOhL,OAAS,EAC7BsB,KAAMW,EACN+I,MAAOA,EACPvE,QAASyC,O,sGCjGR,SAASiW,EACd7d,EACA8d,EACAC,EACArT,EACAgD,GAEA,OAAO1N,EAAK8D,KAAK5C,IACf,MAAM6B,EAlDH,SAAyBib,GAC9B,MACMjb,EAAS,GAGf,IAAK,IAAIvE,EAAI,EAAGA,EAAIwf,EAAStf,OAAQF,IAAK,CACxC,MACMuR,EADSiO,EAASxf,GACEuR,WAC1B,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAWrR,OAAQ0R,IACF,OAA/BL,EAAWK,GARC,IASdrN,EAAO3D,KAAK2Q,EAAWK,GATT,IAcpB,OAAOrN,EAmCUkb,CAAgB,CAAC/c,IAEhC,GADAA,EAAOgd,WAAY,EACdH,EAAa7c,EAAOid,OAIvBjd,EAAOlB,KAAO,OAJiB,CAC/B,MAAMke,EA7BL,SAAkCnb,EAAkB+a,EAAoBpT,EAAagD,GAC1F,MAAM0Q,EAAWC,EAAe3T,EAAKoT,GAC/BQ,EAAWD,EAAe3Q,EAAKoQ,GAMrC,OAJsBI,EAAAA,EAAAA,aACnBK,OAAO,CAACH,EAAUE,IAClBxf,WAAW6N,KAAKC,MAAMc,EAAMhD,GAAOoT,EAE/BU,CAAczb,GAAQe,KAAK2a,GACzB,CAACA,EAAIC,GAAID,EAAI/f,UAoBAigB,CAAyB5b,EAAQ+a,EAAYpT,EAAKgD,GACpExM,EAAOlB,KAAOke,EAIhB,OAAOhd,KAIX,SAASmd,EAAenf,EAAe4e,GACrC,OAAOnR,KAAKgE,MAAMzR,EAAQ4e,GAAcA,ECjEnC,SAASc,EAAYC,EAAYC,GACtC,GAAIxK,MAAMwK,KAoGa,KADCC,EAnGcF,GAoG1BngB,SAAgBsgB,EAAiBD,EAAK,MAAOC,EAAiBD,EAAK,KAnG7E,OAkGJ,IAA0BA,EA/FxB,MAAOE,EAAOC,GAAUL,GAoE1B,SAAyBI,EAAqCC,EAAsCJ,GACpF,IAAVA,IACFG,EAAMvU,KAAOoU,EACbG,EAAMvR,KAAOoR,EACbI,EAAOxU,KAAOoU,EACdI,EAAOxR,KAAOoR,GAxEhBK,CAAgBF,EAAOC,EAAQJ,GAsDjC,SAA2BG,EAAqCC,GAE9D,MAAME,EAAa,IACfH,EAAMvR,MAAQuR,EAAMvU,MACtBuU,EAAMvU,KAAO0U,EACbH,EAAMvR,KAAO0R,GAEXF,EAAOxR,MAAQwR,EAAOxU,MACxBwU,EAAOxU,KAAO0U,EACdF,EAAOxR,KAAO0R,GA7DhBC,CAAkBJ,EAAOC,GAGzB,MAAMI,EAAqB,IAAdL,EAAMvU,KAA4B,IAAfwU,EAAOxU,KAA2B,IAAduU,EAAMvR,KAA4B,IAAfwR,EAAOxR,IAExE6R,EAAUC,EAAaP,EAAOC,GAEpC,GAAII,GAAQC,EACVN,EAAMvU,IAAMuU,EAAMvR,IAAM,EAAI,EAAIuR,EAAMvU,IACtCuU,EAAMvR,IAAMuR,EAAMvR,IAAM,EAAIuR,EAAMvR,IAAM,EACxCwR,EAAOxU,IAAMwU,EAAOxR,IAAM,EAAI,EAAIwR,EAAOxU,IACzCwU,EAAOxR,IAAMwR,EAAOxR,IAAM,EAAIwR,EAAOxR,IAAM,OAE3C,GAiGJ,SAA4BuR,EAAiBC,GAE3C,OAAQD,EAAMvU,KAAO,GAAKwU,EAAOxR,KAAO,GAAOuR,EAAMvR,KAAO,GAAKwR,EAAOxU,KAAO,EAnGzE+U,CAAmBR,EAAOC,GACxBD,EAAMvU,KAAO,GACfuU,EAAMvU,KAAOuU,EAAMvR,IACnBwR,EAAOxR,KAAOwR,EAAOxU,MAErBuU,EAAMvR,KAAOuR,EAAMvU,IACnBwU,EAAOxU,KAAOwU,EAAOxR,SAElB,CACL,MAAMgS,EA6FZ,SAAiBT,EAAiBC,GAChC,GAAIS,EAAcV,EAAOC,GAAS,CAChC,MAAMU,EAAWV,EAAOxU,IAAMuU,EAAMvU,IAAMwU,EAAOxU,IAAM,EACjDmV,EAAYX,EAAOxR,IAAMuR,EAAMvR,IAAMwR,EAAOxR,IAAM,EAExD,OAAOkS,EAAWC,EAAYD,EAAWC,EAG3C,GAAIL,EAAaP,EAAOC,GAAS,CAC/B,MAAMY,EAAanT,KAAKoT,IAAId,EAAMvU,KAC5BsV,EAAarT,KAAKoT,IAAId,EAAMvR,KAC5BuS,EAActT,KAAKoT,IAAIb,EAAOxU,KAC9BwV,EAAcvT,KAAKoT,IAAIb,EAAOxR,KAC9ByS,EAASxT,KAAKe,IAAIoS,EAAYE,GAC9BI,EAAWzT,KAAKjC,IAAIoV,EAAYE,GAChCK,EAAU1T,KAAKe,IAAIuS,EAAaC,GAChCI,EAAY3T,KAAKjC,IAAIuV,EAAaC,GAElCN,EAAwB,IAAbQ,EAAiBD,EAASC,EAAWD,EAChDN,EAA0B,IAAdS,EAAkBD,EAAUC,EAAYD,EAE1D,OAAOT,EAAWC,EAAYD,EAAWC,EAG3C,OAAIZ,EAAMvU,IAAM,GAAKwU,EAAOxU,IAAM,EACzBuU,EAAMvR,IAAMwR,EAAOxR,IAEnBuR,EAAMvU,IAAMwU,EAAOxU,IAxHX6V,CAAQtB,EAAOC,GAExBK,EAEEN,EAAMvU,IAAM,GACduU,EAAMvU,IAAMuU,EAAMvR,IAAMgS,EACxBR,EAAOxU,IAAMwU,EAAOxR,IAAMgS,IAE1BT,EAAMvR,IAAMuR,EAAMvU,IAAMgV,EACxBR,EAAOxR,IAAMwR,EAAOxU,IAAMgV,GAGxBC,EAAcV,EAAOC,IACvBD,EAAMvU,IAAMwU,EAAOxU,IAAMwU,EAAOxU,IAAMgV,EAAOT,EAAMvU,IACnDwU,EAAOxU,IAAMuU,EAAMvU,IAAMuU,EAAMvU,IAAMgV,EAAOR,EAAOxU,IACnDuU,EAAMvR,IAAMwR,EAAOxR,IAAMwR,EAAOxR,IAAMgS,EAAOT,EAAMvR,IACnDwR,EAAOxR,IAAMuR,EAAMvR,IAAMuR,EAAMvR,IAAMgS,EAAOR,EAAOxR,MAEnDuR,EAAMvU,IAAMuU,EAAMvU,IAAM,EAAIwU,EAAOxU,IAAMgV,EAAOT,EAAMvU,IACtDwU,EAAOxU,IAAMwU,EAAOxU,IAAM,EAAIuU,EAAMvU,IAAMgV,EAAOR,EAAOxU,IACxDuU,EAAMvR,IAAMuR,EAAMvR,IAAM,EAAIwR,EAAOxR,IAAMgS,EAAOT,EAAMvR,IACtDwR,EAAOxR,IAAMwR,EAAOxR,IAAM,EAAIuR,EAAMvR,IAAMgS,EAAOR,EAAOxR,MA+BlE,SACEuR,EACAC,EACAJ,GAEc,IAAVA,IACFG,EAAMvU,KAAOoU,EACbG,EAAMvR,KAAOoR,EACbI,EAAOxU,KAAOoU,EACdI,EAAOxR,KAAOoR,GAlChB0B,CAAqBvB,EAAOC,EAAQJ,GA+CtC,SAASE,EAAiByB,GACxB,MAAO,QAASA,GAAQ,QAASA,EAGnC,SAASjB,EAAaP,EAAiBC,GAErC,OAAQD,EAAMvU,KAAO,GAAKwU,EAAOxU,KAAO,GAAOuU,EAAMvR,KAAO,GAAKwR,EAAOxR,KAAO,EAGjF,SAASiS,EAAcV,EAAiBC,GAEtC,OAAOD,EAAMvU,KAAO,GAAKuU,EAAMvR,KAAO,GAAKwR,EAAOxU,KAAO,GAAKwU,EAAOxR,KAAO,E,8pBClHvE,MAAMgT,EAAe,CAAC,MAAO,MAAO,MAAO,UAAW,SA2BtD,MAAMC,UAAmBC,EAAAA,cAS9BzZ,YAAY0Z,GACVC,MAAMD,GAD4B,uBAOpBE,GAAWnZ,KAAKiZ,MAAMG,aAAapZ,KAAKiZ,MAAM3f,OAAQ6f,KAPlC,uBASrB,KACb,MAAMrP,EAA6B,IAArB9J,KAAK5G,MAAM0Q,MAAc,EAAI,EACrCuP,EAAO,CAAE9C,MAAOvW,KAAKiZ,MAAM3f,OAAOid,MAAOzM,MAAOA,GACtD9J,KAAKsZ,SAAS,CAAExP,MAAOA,IACvB9J,KAAKiZ,MAAMM,aAAaF,MAbU,wBAgBnBrV,IACfhE,KAAKiZ,MAAMO,cAAcxZ,KAAKiZ,MAAM3f,OAAQ0K,GAI5ChE,KAAKyZ,iBAnBLzZ,KAAK5G,MAAQ,CACX0Q,MAAO9J,KAAKiZ,MAAM3f,OAAOwQ,OAqB7B4P,qBACE,MAAM,OAAEpgB,EAAF,QAAUqgB,GAAY3Z,KAAKiZ,MAC3BW,EAAmB,GACzB,IAAK,MAAMC,KAAaf,EAEtB,GAAI9Y,KAAKiZ,MAAMY,GAAY,CACzB,MAAMC,EAAiBxgB,EAAOiU,YAAYjU,EAAOygB,MAAMF,IACvDD,EAAiBpiB,MACf,SAACwiB,EAAD,CAEEH,UAAWA,EACXviB,MAAOwiB,EACPH,QAASA,EACTM,aAAcja,KAAKoZ,cAJdS,IASb,OAAOD,EAGTvK,SAAS,MACP,MAAM,OAAE/V,EAAF,OAAU6B,EAAV,QAAkBwe,EAAlB,OAA2BlP,GAAWzK,KAAKiZ,MAC3CiB,EAAsBC,GAAAA,CAAW,CACrC,6BAA8B1P,EAC9B,+BAAiD,IAAjBnR,EAAOwQ,QAEnCsQ,EAAajf,EAAS6E,KAAK0Z,qBAAuB,GAClDW,GACJ,SAACC,EAAD,CACExP,MAAOxR,EAAOid,MACdvS,MAAO1K,EAAO0K,MACd8F,MAAO9J,KAAK5G,MAAM0Q,MAClBsP,aAAcpZ,KAAKoZ,aACnBI,cAAexZ,KAAKwZ,cACpBD,aAAcvZ,KAAKuZ,eAIvB,OAAII,GAEA,gBAAIY,UAAY,uBAAsBL,IAAtC,iBACE,yBACE,gBAAKK,UAAU,kCAAf,SAAkDF,OAEnDD,MAKH,iBAAKG,UAAY,uBAAsBL,IAAvC,UACGG,EACAD,M,EArFErB,EAAAA,eACW,CACpBY,SAAS,EACTlP,QAAQ,EACR2O,aAAc,OACdI,cAAe,OACfD,aAAc,SA6FlB,MAAMe,UAA0BtB,EAAAA,cAM9B3J,SACE,MAAM,MAAEvE,EAAF,MAAS9G,EAAT,MAAgB8F,GAAU9J,KAAKiZ,OAC/B,cAAEO,EAAF,aAAiBD,GAAiBvZ,KAAKiZ,MACvCG,EAAepZ,KAAKiZ,MAAMG,aAAepZ,KAAKiZ,MAAMG,aAAe,OAEzE,MAAO,EACL,SAACoB,EAAD,CAEExW,MAAOA,EACP8F,MAAOA,EACP0P,cAAeA,EACfD,aAAcA,GAJV,SAMN,cACEgB,UAAU,6BACV/I,MAAO1G,EAEP2P,QAASrB,EACT,aAAYsB,EAAAA,GAAAA,WAAAA,OAAAA,cAAAA,MAAAA,OAAAA,gBAAuE5P,GALrF,SAOGA,GAJG,W,EAtBNwP,EAAAA,eACmD,CACrDxQ,WAAOnP,EACPye,aAAc,SAwClB,MAAMoB,UAAyBxB,EAAAA,cAA4D,0DAOxEhV,IACf,MAAM,cAAEwV,GAAkBxZ,KAAKiZ,MAC3BO,GACFA,EAAcxV,MAGlBqL,SACE,OACE,SAAC,EAAAsL,kBAAD,CACE7Q,MAAO9J,KAAKiZ,MAAMnP,MAClB9F,MAAOhE,KAAKiZ,MAAMjV,MAClB4W,SAAU5a,KAAKwZ,cACfD,aAAcvZ,KAAKiZ,MAAMM,aACzBsB,mBAAiB,EALnB,SAOG,QAAC,IAAEC,EAAF,gBAAOC,EAAP,gBAAwBC,GAAzB,SACC,SAAC,EAAAC,WAAD,CACEjX,MAAOhE,KAAKiZ,MAAMjV,MAClB8W,IAAKA,EACLL,QAASM,EACTG,aAAcF,EACdT,UAAU,0BAetB,SAASP,EAAT,GAAoF,IAA/D,MAAE1iB,EAAF,UAASuiB,EAAT,QAAoBF,EAApB,aAA6BM,GAAkC,EAClF,OAAIN,GAEA,eAAIY,UAAY,sBAAqBV,IAAaY,QAASR,EAA3D,SACG3iB,KAKL,gBAAKijB,UAAY,sBAAqBV,IAAaY,QAASR,EAA5D,SACG3iB,I,2HArDDkjB,EAAAA,eACkD,CACpD1Q,WAAOnP,EACP6e,cAAe,OACfD,aAAc,SCpHX,MAAM4B,WAAoBnC,EAAAA,cAmB/BzZ,YAAY0Z,GACVC,MAAMD,GAD6B,0BAyBpB,CAAC3f,EAAoBmD,KACpC,IAAKuD,KAAKiZ,MAAMmC,eACd,OAGF,IAAIjF,EAAe,OAAH,UAAQnW,KAAK5G,MAAM+c,cAC/B1Z,EAAM4e,SAAW5e,EAAM6e,SAAW7e,EAAM8e,SACtCpF,EAAa7c,EAAOid,cACfJ,EAAa7c,EAAOid,OAE3BJ,EAAa7c,EAAOid,QAAS,EAG/BJ,EAAenW,KAAKwb,0BAA0BliB,GAEhD0G,KAAKsZ,SAAS,CAAEnD,aAAcA,IAC9BnW,KAAKiZ,MAAMmC,eAAejF,MAvC1BnW,KAAK5G,MAAQ,CACX+c,aAAcnW,KAAKiZ,MAAM9C,cAI7BsF,aACE,IAAI/R,EAA2B,IAAI1J,KAAKiZ,MAAMvP,aAAe,GAC7D,MAAMgS,EAAS1b,KAAKiZ,MAAMxW,KAa1B,OAZIiZ,GAAU1b,KAAKiZ,MAAMyC,IAAW1b,KAAKiZ,MAAM0C,eAC7CjS,GAAakS,EAAAA,EAAAA,QAAQlS,GAAapQ,IAChC,IAAImJ,EAAOnJ,EAAOygB,MAAM2B,GAIxB,OAHa,OAATjZ,IACFA,GAAQkO,EAAAA,GAEHlO,KAELzC,KAAKiZ,MAAM4C,WACbnS,EAAaA,EAAWoS,YAGrBpS,EAsBT8R,0BAA0BliB,GACxB,MAAM6c,EAAe,OAAH,UAAQnW,KAAK5G,MAAM+c,cAEjCA,EAAa7c,EAAOid,eACfJ,EAAa7c,EAAOid,OA4B7B,OAxByBvW,KAAKiZ,MAAMvP,WAAWqS,OAAOzkB,GAChDA,EAAMif,QAAUjd,EAAOid,OAIpBJ,EAAa7e,EAAMif,SAK1BvW,KAAKiZ,MAAMvP,WAAWsS,SAAS1kB,WACtB6e,EAAa7e,EAAMif,UAI5BvW,KAAKiZ,MAAMvP,WAAWsS,SAAS1kB,IACzBA,EAAMif,QAAUjd,EAAOid,QAI3BJ,EAAa7e,EAAMif,QAAS,MAIzBJ,EAGT9G,SACE,MAAM,cACJ4M,EADI,UAEJC,EAFI,UAGJC,EAHI,KAIJ1Z,EAJI,SAKJoZ,EALI,UAMJzR,EANI,SAOJE,EAPI,OAQJnP,EARI,IASJ2H,EATI,IAUJgD,EAVI,IAWJsW,EAXI,QAYJC,EAZI,MAaJC,GACEtc,KAAKiZ,MACHsD,EAAoB,CAAEphB,OAAAA,EAAQ2H,IAAAA,EAAKgD,IAAAA,EAAKsW,IAAAA,EAAKC,QAAAA,EAASC,MAAAA,GACtDnG,EAAenW,KAAK5G,MAAM+c,aAC1BqG,EAAkB,CAAEpS,UAAAA,EAAWE,SAAAA,GAC/BmS,EAAY,CAAEha,KAAAA,EAAMoZ,SAAAA,GACpBnS,EAAa1J,KAAKyb,aAAatG,QAAQ7b,IAAYA,EAAOojB,eAAeF,KACzEG,EAAe,GAAE3c,KAAKiZ,MAAM0C,aAAe,qBAAuB,MAAMM,IAMxEW,EAAmC,CACvCC,SAHiBX,GAAaC,EAAYA,OAAYxhB,EAItDmF,MAHmBoc,GAAaC,EAAYA,EAAY,OAAIxhB,GAMxDmiB,EAAoC,OAAH,QACrCpT,WAAYA,EACZyM,aAAcA,EACdiF,eAAgBpb,KAAKob,eACrB7B,aAAcvZ,KAAKiZ,MAAMM,aACzBwD,aAAc/c,KAAKiZ,MAAM8D,aACzBvD,cAAexZ,KAAKiZ,MAAMO,eACvB+C,EACAE,GAGL,OACE,gBAAKlC,UAAY,wBAAuBoC,IAAeK,MAAOJ,EAA9D,SACG5c,KAAKiZ,MAAM0C,cAAe,SAACsB,GAAD,iBAAiBH,KAAkB,SAACI,GAAD,iBAAsBJ,O,GA/I/E3B,GAAAA,eACsC,CAC/ChgB,QAAQ,EACR2H,KAAK,EACLgD,KAAK,EACLsW,KAAK,EACLC,SAAS,EACTC,OAAO,EACPX,cAAc,EACdO,WAAW,EACXzZ,UAAM9H,EACNkhB,UAAU,EACVI,cAAe,GACfb,eAAgB,OAChB2B,aAAc,OACdxD,aAAc,OACdC,cAAe,SAqInB,MAAM0D,WAAyBlE,EAAAA,cAC7B3J,SACE,MAAM,WAAE3F,EAAF,aAAcyM,EAAd,OAA4Bhb,EAA5B,IAAoC2H,EAApC,IAAyCgD,EAAzC,IAA8CsW,EAA9C,QAAmDC,EAAnD,MAA4DC,GAAUtc,KAAKiZ,MAC3EsD,EAAoB,CAAEphB,OAAAA,EAAQ2H,IAAAA,EAAKgD,IAAAA,EAAKsW,IAAAA,EAAKC,QAAAA,EAASC,MAAAA,GAC5D,OAAO5S,EAAWxN,KAAI,CAAC5C,EAAQ1C,KAC7B,SAACmiB,EAAD,eAIEzf,OAAQA,EACRmR,OAAQ0L,EAAa7c,EAAOid,QACxBgG,EANN,CAOEnD,aAAcpZ,KAAKiZ,MAAMmC,eACzB5B,cAAexZ,KAAKiZ,MAAMO,cAC1BD,aAAcvZ,KAAKiZ,MAAMM,eANnB,GAAEjgB,EAAOR,MAAMlC,QAY7B,MAAMqmB,WAAoBjE,EAAAA,cAA6C,0DACrDmE,IACd,IAAKnd,KAAKiZ,MAAM8D,aACd,OAGF,IAAIlB,EAAW7b,KAAKiZ,MAAM4C,SACtBH,EAAS1b,KAAKiZ,MAAMxW,KACpB0a,IAASzB,IACXG,OAAWlhB,IAII,IAAbkhB,GACFH,OAAS/gB,EACTkhB,OAAWlhB,IAEXkhB,GAAYA,EACZH,EAASyB,GAEXnd,KAAKiZ,MAAM8D,aAAarB,EAAQG,MAGlCxM,SACE,MAAM3F,EAAa1J,KAAKiZ,MAAMvP,YACxB,OAAEvO,EAAF,IAAU2H,EAAV,IAAegD,EAAf,IAAoBsW,EAApB,QAAyBC,EAAzB,MAAkCC,EAAlC,KAAyC7Z,EAAzC,SAA+CoZ,EAA/C,aAAyD1F,GAAiBnW,KAAKiZ,MAC/EsD,EAAyB,CAAEphB,OAAAA,EAAQ2H,IAAAA,EAAKgD,IAAAA,EAAKsW,IAAAA,EAAKC,QAAAA,EAASC,MAAAA,GAEjE,OAAK5S,GAKH,8BACE,+BACE,gBAAKsT,MAAO,CAAEld,MAAO,aAEvB,4BACE,2BACE,eAAIkd,MAAO,CAAEI,UAAW,UACvBtE,EAAa5c,KACXmhB,GACCd,EAAkBc,KAChB,SAACC,GAAD,CAEED,SAAUA,EACV5a,KAAMA,EACNoZ,SAAUA,EACVpB,QAASza,KAAK+c,cAJTM,WAUjB,2BACG3T,GACCA,EAAWxN,KAAI,CAAC5C,EAAQ1C,KACtB,SAACmiB,EAAD,eAEEY,SAAS,EACTrgB,OAAQA,EACRmR,OAAQ0L,EAAa7c,EAAOid,OAC5B6C,aAAcpZ,KAAKiZ,MAAMmC,eACzB5B,cAAexZ,KAAKiZ,MAAMO,cAC1BD,aAAcvZ,KAAKiZ,MAAMM,cACrBgD,GAPE,GAAEjjB,EAAOR,MAAMlC,YA7BxB,MAkDb,MAAM0mB,WAA8BtE,EAAAA,cAAwD,qDAChF,KACJhZ,KAAKiZ,MAAMwB,SACbza,KAAKiZ,MAAMwB,QAAQza,KAAKiZ,MAAMoE,aAIlChO,SACE,MAAM,SAAEgO,EAAF,KAAY5a,EAAZ,SAAkBoZ,GAAa7b,KAAKiZ,MAC1C,OACE,gBAAIsB,UAAU,UAAUE,QAASza,KAAKya,QAAtC,UACG4C,EACA5a,IAAS4a,IAAY,SAAC,EAAAE,KAAD,CAAM/iB,KAAMqhB,EAAW,aAAe,iBAM7D,MAAM2B,WAAexE,EAAAA,cAC1B3J,SACE,OACE,SAAC,EAAAoO,gBAAD,CAAiBC,qBAAmB,EAApC,UACE,SAACvC,GAAD,iBAAiBnb,KAAKiZ,W,iSCnR9B,MAAM0E,IAA0BC,EAAAA,GAAAA,IAAaJ,IAE7C,MAAMK,GAgBJte,YACUL,EACAoI,EAGAwW,GACR,sOAbY,IAaZ,0KA4I4B,CAC5BC,EACAC,IAEO,KAEL,MAAMC,EAA0Bje,KAAK7H,UAAU+lB,oBAC3C,CACE,CACED,MAAO,CACL,CACEnT,MAAO,iBACPqT,UAAW,iBACXC,KAAM,cACN3D,QAAS,IAAMza,KAAK5C,aAAa8W,WAAW,CAAE/C,KAAM4M,EAAa1X,EAAG9H,GAAI,WAKhF,GAEJ,IAAKyf,EACH,OAAOC,EAGT,MAAMI,EAAY,CAChB,CACEJ,MAAOD,EAAc5jB,SAAS4F,KAAKvJ,MAAMkD,kBAAkBuC,KAAoBC,IACtE,CACL2O,MAAO3O,EAAKqV,MACZ2M,UAAWhiB,EAAKqV,MAChB8M,IAAKniB,EAAKoiB,KACVvgB,OAAQ7B,EAAK6B,OACbogB,KAAO,IAAkB,UAAhBjiB,EAAK6B,OAAqB,OAAS,qBAC5Cyc,QAASte,EAAKse,cAMtB,MAAO,IAAIwD,KAAUI,MApLvB,KALQnf,MAAAA,EAKR,KAJQoI,KAAAA,EAIR,KADQwW,QAAAA,EACR,KALQ5e,MAAAA,EAKR,KAJQoI,KAAAA,EAIR,KADQwW,QAAAA,EAER9d,KAAKyH,KAAOvI,EAAMuI,KAClBzH,KAAKwe,YAActf,EAAMuI,KAAKgX,gBAC9Bze,KAAK7H,UAAY6H,KAAKyH,KAAKtP,UAC3B6H,KAAKvJ,MAAQuJ,KAAKyH,KAAKhR,MACvBuJ,KAAKjH,YAAc,GAEnBiH,KAAK0e,WAAa,EAClB1e,KAAK5C,aAAe,IAAI6W,EAAajU,KAAKyH,MAC1CzH,KAAK2e,iBAAmB,IAAIjR,EAAiB1N,KAAKyH,MAClDzH,KAAK4e,kBAAoB,IAAIvM,EAAkBrS,KAAKyH,MAEpDzH,KAAK2K,QAAU,IAAItD,EAAarH,KAAKsH,KAAMtH,KAAKyH,KAAKtP,UAAW6H,KAAKd,OAAO,IACnEc,KAAK6e,eAId7e,KAAKyH,KAAKnK,OAAOqB,GAAGmgB,EAAAA,YAAAA,cAA2B9e,KAAK+e,gBAAgBvT,KAAKxL,OACzEA,KAAKyH,KAAKnK,OAAOqB,GAAGmgB,EAAAA,YAAAA,OAAoB9e,KAAKgf,SAASxT,KAAKxL,OAI3DA,KAAKyH,KAAKtP,UAAUmF,OAAOqB,GAAGgJ,EAAAA,sBAAAA,KAA4B3H,KAAKif,aAAazT,KAAKxL,MAAOA,KAAKd,OAC7Fc,KAAKyH,KAAKtP,UAAUmF,OAAOqB,GAAG2M,EAAAA,2BAAAA,KAAiCtL,KAAKkf,kBAAkB1T,KAAKxL,MAAOA,KAAKd,OAEvGc,KAAKyH,KAAKtP,UAAUmF,OAAOqB,GAAGwgB,EAAAA,eAAAA,KAAqBnf,KAAKif,aAAazT,KAAKxL,MAAOA,KAAKd,OACtFc,KAAKyH,KAAKtP,UAAUmF,OAAOqB,GAAG4M,EAAAA,oBAAAA,KAA0BvL,KAAKkf,kBAAkB1T,KAAKxL,MAAOA,KAAKd,OAGhGc,KAAKsH,KAAKkE,KAAK,eAAgBxL,KAAKof,eAAe5T,KAAKxL,OACxDA,KAAKsH,KAAKkE,KAAK,YAAaxL,KAAKqf,YAAY7T,KAAKxL,OAG9CA,KAAKsH,MAAQtH,KAAKsH,KAAKgY,SACzBtf,KAAKuf,WAAavf,KAAKsH,KAAKgY,SAAS5P,KAAK,iBAAiB,IAI/DsP,SAASQ,GAEP,GADAxf,KAAK5H,KAAOonB,GAAcxf,KAAK5H,MAC1B4H,KAAK5H,KACR,OAGF4H,KAAKjH,YAAciH,KAAKyH,KAAK1O,aAAe,GAC5CiH,KAAKyf,eAAezf,KAAK5H,MACzB,MAAMsnB,EAAc1f,KAAKyH,KAAK1H,OAG9B,IAFA4f,EAAAA,EAAAA,IAAmB3f,KAAK5H,KAAM4H,KAAKvJ,MAAOipB,IAErC1f,KAAKvJ,MAAM0T,OAAO1E,KAKrB,OAJIzF,KAAKuf,WAAWK,iBAClBC,EAAAA,uBAAgC7f,KAAKuf,iBAEvCvf,KAAK8f,cAIP,MAAM,OAAE3kB,EAAF,IAAU2H,EAAV,IAAegD,EAAf,IAAoBsW,EAApB,QAAyBC,EAAzB,MAAkCC,GAAUtc,KAAKvJ,MAAM0T,QACvD,aAAEwR,EAAF,UAAgBO,EAAhB,UAA2BC,EAA3B,KAAsC1Z,EAAtC,SAA4CoZ,EAA5C,UAAsDzR,EAAtD,SAAiEE,GAAatK,KAAKvJ,MAAM0T,OACzF4V,EAAgB,CAAEpE,aAAAA,EAAcO,UAAAA,EAAWC,UAAAA,EAAW1Z,KAAAA,EAAMoZ,SAAAA,EAAUzR,UAAAA,EAAWE,SAAAA,GACjF0V,EAAe,CAAE7kB,OAAAA,EAAQ2H,IAAAA,EAAKgD,IAAAA,EAAKsW,IAAAA,EAAKC,QAAAA,EAASC,MAAAA,GACjDQ,EAAgC,OAAH,QACjCpT,WAAY1J,KAAK5H,KACjB+d,aAAcnW,KAAKyH,KAAK0O,cACrB4J,EACAC,EAJ8B,CAKjC5E,eAAgBpb,KAAKyH,KAAK2T,eAC1B2B,aAAc/c,KAAKyH,KAAKsV,aACxBvD,cAAexZ,KAAKyH,KAAK+R,cACzBD,aAAcvZ,KAAKyH,KAAK8R,eAGpB0G,EAAkBC,EAAAA,cAAoBvC,GAAyBb,GACrE+C,EAAAA,OAAgBI,EAAiBjgB,KAAKuf,YAAY,IAAMvf,KAAK8f,gBAG/Db,aAAahR,GAAsD,QAEjE,GAAKjO,KAAK7H,UAAUgoB,2BAApB,CAIA,GAA4BlS,EClIjBmS,eAAe,ODkIQ,OAEhC,IAAKpgB,KAAKtD,OAAQ,UAAAuR,EAAIxX,aAAJ,eAAWqC,MAAOkH,KAAKvJ,MAAMqC,IAAMkH,KAAKyH,KAAK4Y,6BAC7D,OAGFrgB,KAAK2K,QAAQlF,KAAKwI,EAAIrG,KAIpB,UAACqG,EAAIpG,aAAL,OAAC,EAAWrM,MAIhBwE,KAAK2K,QAAQlF,KAAK,CAAEY,EAAG4H,EAAIpG,MAAMrM,KAAMmQ,UAAS,UAAEsC,EAAIpG,MAAM8D,iBAAZ,QAAyB,KAG3EoT,kBACM/e,KAAKtD,OACPsD,KAAKtD,KAAKmC,UACVmB,KAAKtD,KAAO,MAGdsD,KAAK2K,QAAQ9L,UACbmB,KAAKsH,KAAK2H,MACVjP,KAAKsH,KAAK5B,SAEVma,EAAAA,uBAAgC7f,KAAKuf,YAGvCL,kBAAkBoB,GACZtgB,KAAKtD,MACPsD,KAAK2K,QAAQlK,MAAMT,KAAKtD,MAI5B0iB,eAAe3iB,EAA0B8jB,GACT,SAA1BvgB,KAAKvJ,MAAM+M,MAAM0I,MAMhBqU,EAAOlF,SAAWkF,EAAOjF,UAAYtb,KAAK7H,UAAU+lB,oBAEvDtf,YAAW,KACToB,KAAK5C,aAAa8W,WAAWqM,EAAO/c,SACnC,KAEHxD,KAAKd,MAAMkQ,QAAO,KAChBpP,KAAK8d,QAAQ0C,QAAQ,CACnBrP,MAAMsP,EAAAA,EAAAA,OAAMF,EAAO/c,MAAM2N,MACzB5S,IAAIkiB,EAAAA,EAAAA,OAAMF,EAAO/c,MAAMjF,SAb3ByB,KAAKtD,KAAK2I,iBA+Ddga,YAAY5iB,EAA0BmL,EAAU6D,GAC9C,MAAMiV,EAAuB1gB,KAAKsH,KAAKqZ,QAAQ,SAAW3gB,KAAKsH,KAAKqZ,QAAQ,SAASvlB,MAAM,GAAK,KAC1FwlB,EAAwBnV,EAE9B,GAA8B,SAA1BzL,KAAKvJ,MAAM+M,MAAM0I,KAKrB,GAAItE,EAAIyT,SAAWzT,EAAI0T,QAAvB,CAEE,GAAI1T,EAAIvB,IAAMuB,EAAIiZ,GAChB,OAIF,IAAK7gB,KAAK7H,UAAUW,KAAOkH,KAAK7H,UAAU+lB,oBACxC,OAGFtf,YAAW,KACToB,KAAK5C,aAAa8W,WAAW,CAAE/C,KAAMvJ,EAAIvB,EAAG9H,GAAI,SAC/C,SAEE,CAEL,IAAIyf,EAEJ,GAHAhe,KAAK2K,QAAQlK,MAAMT,KAAKtD,MAGpB+O,EAAM,CAER,MAAMqV,EAAc9gB,KAAKvJ,MAAMsqB,MAA8B,IAAxBtV,EAAKnS,OAAOwQ,MAAMe,EAAU,EAAI,GAC/DtQ,EAAYyF,KAAKyH,KAAK2O,SAAS3K,EAAKnS,OAAO0nB,gBAC3C7mB,EAAQI,EAAUM,OAAO4Q,EAAKnS,OAAO2nB,YACrCC,EAAYlhB,KAAKmhB,qCAAqC1V,EAAMlR,GAElE,IAAIL,EAAe8F,KAAKvJ,MAAMqB,QAAQumB,WAAa,GACnD,MAAM+C,GAAgBC,EAAAA,EAAAA,UAASlnB,GAC3BinB,IAEFlnB,EAAQ,IAAIA,KAAUC,EAAMxD,OAAOuD,QAErC,MAAMV,EAAc,CAClB8nB,SAAUR,EAAYQ,SACtBpnB,MAAAA,GAEIqnB,GAAeC,EAAAA,EAAAA,qBAAoB,CACvCrnB,MAAO,CAAExD,OAAQ6C,EAAaxC,KAAMyqB,EAAAA,UAAAA,QACpC3nB,MAAOnD,EAAAA,GAAAA,OACPoD,SAAUiG,KAAK7H,UAAU6B,eAHNwnB,CAIlBrnB,EAAMgB,OAAOC,IAAI8lB,IACpBlD,EAAgB9jB,EAAMpD,QAClBmD,EAAAA,GAAAA,GAAsB,CACpBqB,QAASimB,EACT/mB,KAAML,EAAMK,KACZF,KAAM,IAAIonB,EAAAA,cAAcnnB,GACxBQ,SAAUmmB,EACVtmB,SAAU6Q,EAAKnS,OAAO2nB,WACtB9mB,MAAOX,EACP6nB,SAAUD,SAEZzmB,EAGNqF,KAAKd,MAAMkQ,QAAO,KAEhBpP,KAAKwe,YAAYmD,wBAAwBjB,GACzC1gB,KAAKwe,YAAYoD,UAAUhB,GAC3B5gB,KAAKwe,YAAYqD,qBAAqB7hB,KAAK8hB,4BAA4Bla,EAAKoW,IAC5Ehe,KAAKwe,YAAYuD,WAAWna,OAKlCuZ,qCAAqC1V,EAAWlR,GAO9C,MAAM,UAAEkT,EAAF,UAAayT,GAAczV,EAEjC,IAAKuW,MAAMC,QAAQxU,IAAmC,IAArBA,EAAU3W,OACzC,OAAOoqB,EAGT,MAAMgB,EAAKzU,EAAU,IACf,UAAEzS,IAAcC,EAAAA,EAAAA,cAAaV,GAEnC,IAAKS,IAAcA,EAAUG,OAC3B,OAAO+lB,EAKT,GAFclmB,EAAUG,OAAOC,IAAI8lB,KAErBgB,EACZ,OAAOhB,EAGT,MAAMiB,EAAennB,EAAUG,OAAOinB,UAAUC,WAAW/qB,GAAUA,IAAU4qB,IAC/E,OAAOC,GAAgB,EAAIA,EAAejB,EAG5CoB,oBACE,OAAKtiB,KAAK5H,MAIc,IAApB4H,KAAK0e,WAOX6D,SAAS7lB,GAEHsD,KAAKvJ,MAAMsqB,MAAM,GAAGjW,OAAS9K,KAAKvJ,MAAMsqB,MAAM,GAAGtb,MACnDtD,GAAAA,CAAE,iEACCzH,KAAKsF,KAAKvJ,MAAMsqB,MAAM,GAAGjW,OACzBjG,SAAS7E,KAAKsH,MAIftH,KAAKvJ,MAAMsqB,MAAM,GAAGjW,OAAS9K,KAAKvJ,MAAMsqB,MAAM,GAAGtb,MACnDtD,GAAAA,CAAE,kEACCzH,KAAKsF,KAAKvJ,MAAMsqB,MAAM,GAAGjW,OACzBjG,SAAS7E,KAAKsH,MAGnB,MAAM,YAAEkb,GAAgBxiB,KAAKyH,KAC7B,GAAI+a,EAAa,CACf,MAAMC,EAAMtgB,GAAAA,CAAG,kDAAiDqgB,EAAYhR,eACxEgR,EAAYE,QACdvgB,GAAAA,CAAG,qCAAoCqgB,EAAYG,uBAChDC,MAAMJ,EAAYE,QAClB7d,SAAS4d,GAEdA,EAAI5d,SAAS7E,KAAKsH,MAEpBtH,KAAK2e,iBAAiBne,KAAK9D,GAC3BsD,KAAK4e,kBAAkBpe,KAAK9D,GAG9BmmB,kBAAkBnmB,EAAWomB,GAC3B,MAAMljB,EAAOI,KAAKvJ,MAAMsqB,MAAM,GACxBhb,EAAQ/F,KAAKvJ,MAAMsqB,MAAM,GAC3BnhB,EAAK6F,MAAQ7F,EAAKkL,QACpBgY,EAAWljB,KAAO,IAEhBmG,EAAMN,MAAQM,EAAM+E,QACtBgY,EAAW/c,MAAQ,IAIrB,MAAM+D,EAAQpN,EAAKqmB,WACnB,IAAK,IAAInsB,EAAI,EAAGA,EAAIkT,EAAMhT,OAAQF,IAAK,CACrC,MAAMugB,EAAYrN,EAAMlT,GAClBosB,EAAehjB,KAAKvJ,MAAMsqB,MAAMnqB,GACtCugB,EAAKrf,QAAQgO,IAA2B,OAArBqR,EAAKrf,QAAQgO,IAAeqR,EAAKrf,QAAQgO,IAAMkd,EAAald,IAC/EqR,EAAKrf,QAAQgL,IAA2B,OAArBqU,EAAKrf,QAAQgL,IAAeqU,EAAKrf,QAAQgL,IAAMkgB,EAAalgB,KAInFmgB,iBAAiBvmB,GACf,MAAMua,EAAQva,EAAKqmB,WACbG,EAAQljB,KAAKvJ,MAAMqT,MAAMoZ,QAAS,EAExC,GAAIjM,EAAMngB,OAAS,IAAe,IAAVosB,EAAgB,CACtC,MAAMhM,EAAQlX,KAAKvJ,MAAMqT,MAAMqZ,YAAc,EAC7CnM,EAAYC,EAAOmM,WAAWlM,KAOlCmM,uBAAuBjrB,GACrB,IAAI0K,EAAM2J,OAAO6W,UAEjB,IAAK,IAAI1sB,EAAI,EAAGA,EAAIwB,EAAKtB,OAAQF,IAC/B,GAAKwB,EAAKxB,GAAGmjB,MAAMwJ,SAAnB,CAGA,GAAIvjB,KAAKvJ,MAAM+sB,MACb,GAAIprB,EAAKxB,GAAG4sB,OAA8B,IAAtBprB,EAAKxB,GAAG4sB,KAAK/d,KAC/B,cAGF,QAA4B,IAAjBrN,EAAKxB,GAAG4sB,WAAqD,IAAtBprB,EAAKxB,GAAG4sB,KAAK/d,OAAyBrN,EAAKxB,GAAG4sB,KAAK/d,KACnG,SAIArN,EAAKxB,GAAGmjB,MAAMwJ,SAAWzgB,IAC3BA,EAAM1K,EAAKxB,GAAGmjB,MAAMwJ,UAIxB,OAAOzgB,EAITgd,cAAc,MAGZ,GAFA9f,KAAK0e,WAAL,UAAkB1e,KAAKsH,KAAKxH,eAA5B,QAAuC,EAEnCE,KAAKsiB,oBACP,OAIFtiB,KAAK2e,iBAAiBrO,QAAQtQ,KAAKsH,KAAMtH,KAAK5H,MAG9C4H,KAAKvJ,MAAMgtB,SAASzjB,KAAKvJ,MAAMgS,OAAQzI,KAAKvJ,MAAMgtB,OAGlD,MAAM3rB,EAAekI,KAAK0jB,iBAAiB1jB,KAAKvJ,OAChDuJ,KAAK2jB,aAAa7rB,EAASkI,KAAKvJ,OAChCuJ,KAAK4jB,sBAAsB5jB,KAAK5H,KAAMN,GACtCkI,KAAK2e,iBAAiBnO,eAAe1Y,EAASkI,KAAKvJ,OACnDuJ,KAAK4e,kBAAkBpO,eAAe1Y,EAASkI,KAAKvJ,OACpDuJ,KAAK5C,aAAakX,cAActU,KAAKjH,YAAajB,GAClDkI,KAAK6e,aAAe7e,KAAK6jB,WAAW7jB,KAAK5H,KAAM4H,KAAKvJ,OACpDuJ,KAAK8jB,SAAShsB,GAAS,GAGzB2nB,eAAernB,GACb,IAAK,IAAIxB,EAAI,EAAGA,EAAIwB,EAAKtB,OAAQF,IAAK,CACpC,MAAM0C,EAASlB,EAAKxB,GACpB0C,EAAOlB,KAAOkB,EAAOyqB,aAAazqB,EAAO0qB,eAAiBhkB,KAAKvJ,MAAMutB,eAE5C,aAArB1qB,EAAO2qB,YACT3qB,EAAOlB,MAAO8rB,EAAAA,EAAAA,sBAAqB5qB,EAAOlB,KAAM4H,KAAKyH,KAAKhP,QAIxDuH,KAAKyH,KAAK0O,aAAa7c,EAAOid,SAChCjd,EAAOlB,KAAO,GACdkB,EAAOoR,OAAQ,IAKrBiZ,aAAa7rB,EAAcrB,GACzB,OAAQA,EAAM+M,MAAM0I,MAClB,IAAK,SACHpU,EAAQwB,OAAOkqB,KAAKW,SAAW,GAC/BrsB,EAAQwB,OAAOkqB,KAAKN,MAAQ,SAE5B,IAAK,IAAItsB,EAAI,EAAGA,EAAIoJ,KAAK5H,KAAKtB,OAAQF,IAAK,CACzC,MAAM0C,EAAS0G,KAAK5H,KAAKxB,GACzB0C,EAAOlB,KAAO,CAAC,CAACxB,EAAI,EAAG0C,EAAOygB,MAAMtjB,EAAM+M,MAAMrI,OAAO,MAGzD6E,KAAKokB,eAAetsB,GACpB,MAEF,IAAK,YAAa,CAChB,IAAIoe,EAEJ,GAAIlW,KAAK5H,KAAKtB,OAAQ,CACpB,IAAIutB,GAAUC,EAAAA,EAAAA,MAAKpoB,EAAAA,EAAAA,KAAI8D,KAAK5H,MAAOib,GAAMA,EAAE0G,MAAMjX,OAC7CyhB,GAAUC,EAAAA,EAAAA,MAAKtoB,EAAAA,EAAAA,KAAI8D,KAAK5H,MAAOib,GAAMA,EAAE0G,MAAMjU,OACjD,MAAM2e,EAAQhuB,EAAM+M,MAAMkhB,SAAW1kB,KAAK0e,WAAa,GACvD,GAAuB,MAAnBjoB,EAAM+M,MAAMV,IAAa,CAE3BuhB,GAD0BM,EAAAA,EAAAA,UAASluB,EAAM+M,MAAMV,IAAKyhB,EAASE,IAAU,EACzCJ,EAAU5tB,EAAM+M,MAAMV,IAEtD,GAAuB,MAAnBrM,EAAM+M,MAAMsC,IAAa,CAE3Bye,GAD0BI,EAAAA,EAAAA,UAASN,EAAS5tB,EAAM+M,MAAMsC,IAAK2e,IAAU,EACzCF,EAAU9tB,EAAM+M,MAAMsC,IAEtDoQ,GAAayO,EAAAA,EAAAA,UAASN,EAASE,EAASE,GACxC3sB,EAAQwB,OAAOkqB,KAAKW,SAAwB,GAAbjO,EAC/BlW,KAAK5H,KAAO6d,EAAuBjW,KAAK5H,KAAM8d,EAAYlW,KAAKyH,KAAK0O,aAAckO,EAASE,QAE3FrO,EAAa,EAGflW,KAAK4kB,kBAAkB9sB,EAASoe,GAChC,MAEF,IAAK,QACHpe,EAAQwB,OAAOkqB,KAAKW,SAAW,GAC/BrsB,EAAQwB,OAAOkqB,KAAKN,MAAQ,SAC5BljB,KAAK6kB,cAAc/sB,GACnB,MAEF,QACEA,EAAQwB,OAAOkqB,KAAKW,SAAWnkB,KAAKqjB,uBAAuBrjB,KAAK5H,MAAQ,IACxE4H,KAAK8kB,YAAYhtB,IAMvBgsB,SAAShsB,EAAcitB,GACrB,IACE/kB,KAAKtD,KAAOyF,IAAAA,KAAOnC,KAAKsH,KAAMtH,KAAK6e,aAAc/mB,GAC7CkI,KAAKyH,KAAKud,oBACLhlB,KAAKyH,KAAKwd,MAEnB,MAAO9L,GACPvd,QAAQqpB,MAAM,mBAAoB9L,GAClCnZ,KAAKyH,KAAKwd,MAAQ9L,EAAE+L,SAAW,eAC/BllB,KAAKyH,KAAKud,aAAc,EAGtBD,GACF/kB,KAAKyH,KAAK0d,qBAIdzB,iBAAiBjtB,GACf,IAAI2uB,EAAY,WACwB,IAApCzuB,EAAAA,GAAAA,SAAAA,KAAAA,aACFyuB,EAAY,WAEd,MAAM1a,IAAQjU,EAAMiU,OAAe,KA6DnC,MA5DqB,CACnBxD,MAAO,CACL1G,KAAM,CAACR,KAAKuiB,SAAS/W,KAAKxL,OAC1BqlB,cAAe,CAACrlB,KAAK6iB,kBAAkBrX,KAAKxL,OAC5CslB,aAAc,CAACtlB,KAAKijB,iBAAiBzX,KAAKxL,QAE5CmK,OAAQ,CAAE1E,MAAM,GAChBnM,OAAQ,CACNisB,eAAc9uB,EAAMiU,OAAQjU,EAAM+uB,WAClC9a,MAAOjU,EAAM+uB,WAAa,KAAO9a,EACjCjC,MAAO,CACLhD,KAAMhP,EAAMgS,MACZiP,MAAM,EACN7f,KAAMmI,KAAKylB,oBAAoBhvB,EAAMoB,MACrCiZ,UAAW9Q,KAAK0lB,gBAAgBjvB,EAAMkvB,cACtCvhB,UAAW3N,EAAMgtB,OAAS,EAAIhtB,EAAMmvB,UACpCld,MAAOjS,EAAMovB,aAEfpC,OAAQ,CACNhe,KAAMhP,EAAMgtB,OACZrf,UAAW3N,EAAMmvB,UACjBE,WAAY,CAACrvB,EAAMqvB,WAAYrvB,EAAMsvB,cAEvCvC,KAAM,CACJ/d,KAAMhP,EAAM+sB,KACZ3rB,KAAM,EACNssB,SAAU,EACVzM,MAAM,EACNtT,UAAW,GAEbmE,OAAQ,CACN9C,KAAMhP,EAAM8R,OACZ1Q,KAAM,EACNiZ,WAAW,EACXkV,OAAQvvB,EAAM8R,OAAS9R,EAAMwvB,YAAc,GAE7CC,WAAY,GAEdnF,MAAO,GACPvd,MAAO,GACPwN,KAAM,CACJmV,gBAAiB,EACjBlV,SAAU,GACVmV,gBAAiB,KACjBC,YAAa,EACbC,WAAW,EACXC,WAAW,EACXviB,MAAOohB,EACPoB,OAAQ,CAAE5mB,KAAM,EAAGmG,MAAO,GAC1B0gB,aAAc,EACdC,kBAAmB,IAErBC,UAAW,CACTza,KAAM,IACNlI,MAAO,QAET4iB,UAAW,CACT1a,KAAM,MAMZ2X,WAAWvqB,EAAa7C,GACtB,MAAMilB,EAASjlB,EAAM0T,OAAO1H,KACtBokB,EAAYpwB,EAAM0T,OAAO0R,SACzBiL,EAAapL,MAAAA,GAA2CjlB,EAAM0T,OAAOuR,GACrEqL,EAAgBF,MAAAA,EAChBG,EAAevwB,EAAMiU,OAASoc,GAAcC,GAAiBtwB,EAAM0T,OAAOwR,aAC1EE,GAAqC,IAA1BplB,EAAM0T,OAAO0R,UAAqB,EAAI,EAEvD,OAAImL,GACKpL,EAAAA,EAAAA,QAAQtiB,GAAS+Z,GAAMA,EAAE0G,MAAM2B,GAAUG,KAEzCD,EAAAA,EAAAA,QAAQtiB,GAAS+Z,GAAMA,EAAE4T,SAIpCvB,gBAAgBwB,GACd,OAAKA,EAIE,CACLC,OAAQ,CAAC,CAAEviB,QAAS,GAAO,CAAEA,QAASsiB,EAAS,MAJxC,KAQXzB,oBAAoB5tB,GAClB,OAAImI,KAAKvJ,MAAM+uB,YAAcxlB,KAAKvJ,MAAMiU,OACtB,IAAT7S,EAAa,KAEbA,EAAO,GAIlBitB,YAAYhtB,GACV,MAAM2sB,EAAQzkB,KAAK0e,WAAa,IAC1B5b,GAAMskB,EAAAA,EAAAA,aAAYpnB,KAAKyH,KAAKhP,MAAO0Y,MAAQ,KAAOnR,KAAKyH,KAAKhP,MAAO0Y,KAAKwC,UACxE7N,GAAMshB,EAAAA,EAAAA,aAAYpnB,KAAKyH,KAAKhP,MAAO8F,IAAM,KAAOyB,KAAKyH,KAAKhP,MAAO8F,GAAGoV,UAE1E7b,EAAQ0L,MAAQ,CACd6jB,SAAUrnB,KAAK7H,UAAU6B,cACzByL,KAAMzF,KAAKvJ,MAAM+M,MAAMiC,KACvByG,KAAM,OACNpJ,IAAKA,EACLgD,IAAKA,EACLgF,MAAO,WACP2Z,MAAOA,EACP6C,YAAYC,EAAAA,EAAAA,iBAAgB9C,EAAO3hB,EAAKgD,GACxC0hB,cAAeC,EAAAA,oBAInBrD,eAAetsB,GACb,MAAM2sB,GAAQvoB,EAAAA,EAAAA,KAAI8D,KAAK5H,MAAM,CAACkB,EAAQ8I,IAC7B,CAACA,EAAQ,EAAG9I,EAAOid,SAG5Bze,EAAQ0L,MAAQ,CACd6jB,SAAUrnB,KAAK7H,UAAU6B,cACzByL,KAAMzF,KAAKvJ,MAAM+M,MAAMiC,KACvByG,KAAM,KACNpJ,IAAK,EACLgD,IAAK2e,EAAM3tB,OAAS,EACpBgU,MAAO,WACP2Z,MAAOA,GAIXG,kBAAkB9sB,EAAcoe,GAC9B,IAAIuO,EACA3hB,EACAgD,EAEJ,MAAM4hB,EAAe1nB,KAAK0e,WAAa,GAEvC,GAAI1e,KAAK5H,KAAKtB,QAAUof,EAAY,CAClC,MAAMyR,EAAa,GAEnB,IAAK,MAAMC,KAAK5nB,KAAK5H,KACnB,IAAK,MAAMyP,KAAS+f,EAAExvB,KACpBuvB,EAAW9f,EAAM,KAAM,EAI3B4c,EAAQvS,OAAOC,KAAKwV,GAAYzrB,KAAK2rB,GAAMpb,OAAOob,KAClD/kB,GAAMwhB,EAAAA,EAAAA,KAAKG,GACX3e,GAAM0e,EAAAA,EAAAA,KAAKC,GAGX,IAAIE,EAAWzO,EACX4R,EAAW/iB,KAAKgE,OAAOjD,EAAMhD,GAAO6hB,GACxC,KAAOmD,EAAWJ,GAChB/C,GAAsB,EACtBmD,EAAW/iB,KAAKgjB,MAAMjiB,EAAMhD,GAAO6hB,GAIrC7hB,EAAMiC,KAAKgE,MAAMjG,EAAM6hB,GAAYA,EAEnC7e,EAAMf,KAAKgjB,KAAY,KAANjiB,EAAc6e,GAAYA,EAE3CF,EAAQ,GACR,IAAK,IAAI7tB,EAAIkM,EAAKlM,GAAKkP,EAAKlP,GAAK+tB,EAC/BF,EAAMjtB,KAAKZ,QAIb6tB,EAAQiD,EAAe,EACvB5kB,EAAM,EACNgD,EAAM,EAGRhO,EAAQ0L,MAAQ,CACd6jB,SAAUrnB,KAAK7H,UAAU6B,cACzByL,KAAMzF,KAAKvJ,MAAM+M,MAAMiC,KACvByG,KAAM,KACNpJ,IAAKA,EACLgD,IAAKA,EACLgF,MAAO,YACP2Z,MAAOA,GAITzkB,KAAKgoB,kBAAkBlwB,EAAQ0L,MAAO,QAAS,MAGjDqhB,cAAc/sB,GACZ,IAAI2sB,GAAQvoB,EAAAA,EAAAA,KAAI8D,KAAK5H,MAAM,CAACkB,EAAQ+T,KAC3BnR,EAAAA,EAAAA,KAAI5C,EAAO6O,YAAY,CAACN,EAAOogB,IAE7B,CADW5a,EAAc/T,EAAO6O,WAAWrR,OAASmxB,EACvC,EAAGpgB,EAAM,QAIjC4c,GAAQyD,EAAAA,EAAAA,SAAQzD,GAAO,GAEvB3sB,EAAQ0L,MAAQ,CACd6jB,SAAUrnB,KAAK7H,UAAU6B,cACzByL,KAAMzF,KAAKvJ,MAAM+M,MAAMiC,KACvByG,KAAM,KACNpJ,IAAK,EACLgD,IAAK2e,EAAM3tB,OAAS,EACpBgU,MAAO,WACP2Z,MAAOA,GAIXb,sBAAsBxrB,EAAWN,GAC/B,MAAM2B,EAAW,CACfwE,SAAU,OACVwH,KAAMzF,KAAKvJ,MAAMsqB,MAAM,GAAGtb,KAC1BrD,MAAO,EACP+lB,QAASnoB,KAAKvJ,MAAMsqB,MAAM,GAAGoH,SAAW,EACxCrlB,IAAK9C,KAAKooB,YAAYpoB,KAAKvJ,MAAMsqB,MAAM,GAAGje,KAC1CgD,IAAK9F,KAAKooB,YAAYpoB,KAAKvJ,MAAMsqB,MAAM,GAAGjb,KAC1CuiB,aAAcroB,KAAKvJ,MAAMsqB,MAAM,GAAGO,UAKpC,GAFAxpB,EAAQipB,MAAMvpB,KAAKiC,IAEfiW,EAAAA,EAAAA,MAAKtX,EAAM,CAAE0R,MAAO,IAAM,CAC5B,MAAMwe,GAAUC,EAAAA,EAAAA,OAAM9uB,GACtB6uB,EAAQlmB,MAAQ,EAChBkmB,EAAQ7iB,KAAOzF,KAAKvJ,MAAMsqB,MAAM,GAAGtb,KACnC6iB,EAAQH,QAAUnoB,KAAKvJ,MAAMsqB,MAAM,GAAGoH,SAAW,EACjDG,EAAQrqB,SAAW,QACnBqqB,EAAQxlB,IAAM9C,KAAKooB,YAAYpoB,KAAKvJ,MAAMsqB,MAAM,GAAGje,KACnDwlB,EAAQxiB,IAAM9F,KAAKooB,YAAYpoB,KAAKvJ,MAAMsqB,MAAM,GAAGjb,KACnDwiB,EAAQD,aAAeroB,KAAKvJ,MAAMsqB,MAAM,GAAGO,SAC3CxpB,EAAQipB,MAAMvpB,KAAK8wB,GAEnBtoB,KAAKwoB,cAAc1wB,EAAQipB,MAAM,GAAI3oB,GACrC4H,KAAKgoB,kBACHlwB,EAAQipB,MAAM,GACd/gB,KAAKvJ,MAAM+uB,YAAcxlB,KAAKvJ,MAAMiU,MAAQ,UAAY1K,KAAKvJ,MAAMsqB,MAAM,GAAG0H,OAC5EzoB,KAAKvJ,MAAMsqB,MAAM,GAAGO,UAGxBthB,KAAKwoB,cAAc1wB,EAAQipB,MAAM,GAAI3oB,GACrC4H,KAAKgoB,kBACHlwB,EAAQipB,MAAM,GACd/gB,KAAKvJ,MAAM+uB,YAAcxlB,KAAKvJ,MAAMiU,MAAQ,UAAY1K,KAAKvJ,MAAMsqB,MAAM,GAAG0H,OAC5EzoB,KAAKvJ,MAAMsqB,MAAM,GAAGO,UAIxB8G,YAAY9wB,GACV,OAAIA,MAAAA,EACK,MAGFoxB,EAAAA,EAAAA,UAASpxB,GAGlBkxB,cAAcrR,EAAW/e,GACvB,GAAqB,IAAjB+e,EAAKgR,QACP,OAGF,MAAMQ,EAA4B,IAAbxR,EAAKrU,IAS1B,IAAIxJ,EAAQ1C,EAPRugB,EAAKrU,IAAM2J,OAAOmc,YACpBzR,EAAKrU,IAAM,MAETqU,EAAKrR,IAAM2G,OAAOmc,YACpBzR,EAAKrR,IAAM,MAIb,IAAIA,EAAMqR,EAAKrR,IACbhD,EAAMqU,EAAKrU,IAEb,IAAKlM,EAAI,EAAGA,EAAIwB,EAAKtB,OAAQF,IAC3B0C,EAASlB,EAAKxB,GACV0C,EAAOwQ,QAAUqN,EAAK/U,UACnB0D,GAAOA,EAAMxM,EAAOygB,MAAMjU,OAC7BA,EAAMxM,EAAOygB,MAAMjU,OAEhBhD,GAAOA,EAAMxJ,EAAOygB,MAAM8O,UAC7B/lB,EAAMxJ,EAAOygB,MAAM8O,SAKzB1R,EAAK8M,UAAa4D,GACTA,EAAIpb,OAAOmc,UAAY,KAAO7jB,KAAKlJ,IAAIgsB,GAAK9iB,KAAKlJ,IAAIsb,EAAKgR,SAEnEhR,EAAK2R,iBAAoBjB,GAChB9iB,KAAKgkB,IAAI5R,EAAKgR,QAASN,GAG3B/hB,GAAQhD,EAGDgD,EAEAhD,IACVA,EAAMgD,EAAMqR,EAAK2R,kBAAkB,IAFnChjB,EAAMhD,EAAMqU,EAAK2R,iBAAiB,IAHlChjB,EAAMqR,EAAK2R,iBAAiB,GAC5BhmB,EAAMqU,EAAK2R,kBAAkB,IAQ7BhmB,EADEqU,EAAKrU,IACDqU,EAAK2R,iBAAiB/jB,KAAKgjB,KAAK5Q,EAAK8M,UAAU9M,EAAKrU,OAEpDqU,EAAKrU,IAAMqU,EAAK2R,iBAAiB/jB,KAAKgE,MAAMoO,EAAK8M,UAAUnhB,KAGjEgD,EADEqR,EAAKrR,IACDqR,EAAK2R,iBAAiB/jB,KAAKgE,MAAMoO,EAAK8M,UAAU9M,EAAKrR,OAErDqR,EAAKrR,IAAMqR,EAAK2R,iBAAiB/jB,KAAKgjB,KAAK5Q,EAAK8M,UAAUne,MAG7DhD,GAAOA,EAAM2J,OAAOmc,YAAc9iB,GAAOA,EAAM2G,OAAOmc,YAIvDnc,OAAOuc,SAASlmB,IAAQ2J,OAAOuc,SAASljB,IACtC6iB,IACFxR,EAAKrU,IAAM,GACXA,EAAM,GAGRqU,EAAKsN,MAAQzkB,KAAKipB,8BAA8BnmB,EAAKgD,EAAKqR,EAAKgR,SAC3DQ,GACFxR,EAAKsN,MAAMyE,QAAQ,IAEjB/R,EAAKsN,MAAMtN,EAAKsN,MAAM3tB,OAAS,GAAKqgB,EAAKrR,MAC3CqR,EAAKrR,IAAMqR,EAAKsN,MAAMtN,EAAKsN,MAAM3tB,OAAS,MAG5CqgB,EAAKsN,MAAQ,CAAC,EAAG,UACVtN,EAAKrU,WACLqU,EAAKrR,MAIhBmjB,8BAA8BnmB,EAAUgD,EAAaqiB,GACnD,IAEIgB,EAFA1E,EAAQ,GAGZ,IAAK0E,EAAWrmB,EAAKqmB,GAAYrjB,EAAKqjB,GAAYhB,EAChD1D,EAAMjtB,KAAK2xB,GAGb,MAAMC,EAAcrkB,KAAKgjB,KAAK/nB,KAAKyH,KAAK1H,OAAS,IAC3CspB,EAAW5E,EAAM3tB,OACvB,GAAIuyB,EAAWD,EAAa,CAC1B,MAAME,EAASvkB,KAAKgjB,KAAKsB,EAAWD,GAAejB,EAGnD,IAFA1D,EAAQ,GAEH0E,EAAWrmB,EAAKqmB,GAAYrjB,EAAMwjB,EAAQH,GAAYG,EACzD7E,EAAMjtB,KAAK2xB,GAIf,OAAO1E,EAGTuD,kBACE7Q,EACAsR,EACAnH,GAEAnK,EAAKqQ,cAAgB,CAAC5jB,EAAKuT,KACzB,MAAMoS,GAAYC,EAAAA,EAAAA,gBAAef,GAEjC,IAAKc,EACH,MAAM,IAAIE,MAAO,SAAQhB,uBAG3B,OAAOltB,EAAAA,EAAAA,wBAAuBguB,EAAU3lB,EAAK0d,MAMnD,SAASoI,GAAe5L,EAAkB6L,EAAiBC,GACzD,MAAO,CACLC,SAAU,IACVC,SAAU,GACV3tB,KAAM,CAAC+C,EAAYoI,IACV,IAAIuW,GAAa3e,EAAOoI,EAAMwW,IEn8BpC,SAASiM,GAAoB5a,EAAa6a,EAAkBL,GACjExa,EAAO8a,aAAe,GACtB9a,EAAO+a,iBAAmB,GAC1B/a,EAAOgb,SAAWhb,EAAOgb,UAAY,GACrChb,EAAOib,iBAAmB,GAE1Bjb,EAAOkb,kBAAoB,CAAC7vB,EAAc8vB,EAAsBnvB,KAC9D,MAAMovB,EAAS,CACb7vB,KAAMF,EACN8vB,aAAcA,EACdloB,MAAO+M,EAAO8a,aAAanzB,OAC3BqE,OAAAA,EACAqvB,SAAStuB,EAAAA,EAAAA,KAAIf,GAAS7D,IACb,CAAEoD,KAAM+vB,OAAOnzB,GAAQA,MAAOA,OAIzC6X,EAAO8a,aAAazyB,KAAK+yB,IAG3Bpb,EAAOub,YAAc,CAACjf,EAAgCkf,KAE1B,UAAtBlf,EAAK6e,cAKTnb,EAAOgb,SAAS1e,EAAK6e,cAAgBK,EAAQrzB,MAInB,gBAAtBmU,EAAK6e,eACPnb,EAAOgb,SAAP,OAA2B,EAC3Bhb,EAAO1H,KAAKmjB,kBAAkB,CAAErU,MAAOoU,EAAQrzB,MAAOmR,OAAO,KAG/D0G,EAAO0b,yBACP1b,EAAO1H,KAAK4H,UAdVF,EAAO2b,kBAAkB3b,EAAOgb,SAAP,QAiB7Bhb,EAAO4b,cAAiB/mB,IACtBmL,EAAOgb,SAAP,MAA2BnmB,EAC3BmL,EAAO0b,yBACP1b,EAAO1H,KAAK4H,SAGZF,EAAOib,iBAAiB9wB,OAAO0K,MAAQA,GAGzCmL,EAAO2b,kBAAqB9mB,IAC1BmL,EAAOib,iBAAmB,CACxBY,WAAW,EACXD,cAAe5b,EAAO4b,cACtBzxB,OAAQ,CAAE0K,MAAAA,IAGZ2lB,EAAWlkB,KAAK,CACdjJ,QAASwtB,EAASta,KAAK,aAAa,GACpCzR,SAAU,aACVE,OAAQ,QACR2rB,SAAU,qFACV3P,WAAY,yCACZtM,MAAOsB,EAAOib,iBACda,QAAS,KACP9b,EAAO1H,KAAK4H,aAKlBF,EAAO+b,eAAkBX,WAChBpb,EAAOgb,SAASI,EAAOD,cAC9Bnb,EAAO0b,yBACP1b,EAAO1H,KAAK0jB,WAGdhc,EAAOic,eAAiB,KACflvB,EAAAA,EAAAA,KAAIiT,EAAO1H,KAAKiC,YAAapQ,GAC3BgU,EAAAA,SAAAA,WAAoBhU,EAAOid,SAItCpH,EAAO0b,uBAAyB,KAC9B1b,EAAO+a,iBAAmB,IAC1B/jB,EAAAA,EAAAA,MAAKgJ,EAAO8a,cAAeM,IACzB,MAAMjzB,EAAQ6X,EAAOgb,SAASI,EAAOD,eACjClD,EAAAA,EAAAA,aAAY9vB,IAGhB6X,EAAO+a,iBAAiB1yB,KAAK,CAC3BgD,KAAM+vB,EAAO7vB,KACb4vB,aAAcC,EAAOD,aACrBhzB,MAAOmzB,OAAOnzB,SAKpB6X,EAAOkb,kBAAkB,OAAQ,OAAQ,EAAC,GAAM,IAChDlb,EAAOkb,kBAAkB,QAAS,QAAS,EAAC,GAAM,IAClDlb,EAAOkb,kBAAkB,YAAa,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC7Elb,EAAOkb,kBAAkB,gBAAiB,eAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACzFlb,EAAOkb,kBAAkB,aAAc,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACnFlb,EAAOkb,kBAAkB,kBAAmB,gBAAiB,CAAC,YAAa,OAAQ,iBACnFlb,EAAOkb,kBAAkB,gBAAiB,cAAelb,EAAOic,kBAChEjc,EAAOkb,kBAAkB,iBAAkB,cAAe,EAAC,GAAM,IACjElb,EAAOkb,kBAAkB,SAAU,SAAU,EAAC,GAAM,IACpDlb,EAAOkb,kBAAkB,gBAAiB,eAAgB,EAAC,GAAM,IACjElb,EAAOkb,kBACL,cACA,aACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEtElb,EAAOkb,kBACL,aACA,cACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEtElb,EAAOkb,kBAAkB,SAAU,SAAU,EAAC,GAAM,IACpDlb,EAAOkb,kBAAkB,gBAAiB,cAAe,CAAC,EAAG,EAAG,EAAG,EAAG,IACtElb,EAAOkb,kBAAkB,QAAS,QAAS,EAAC,GAAM,EAAO,IAAK,IAAK,IAAK,MACxElb,EAAOkb,kBAAkB,QAAS,QAAS,CAAC,WAC5Clb,EAAOkb,kBAAkB,SAAU,QAAS,CAAC,EAAG,IAChDlb,EAAOkb,kBAAkB,UAAW,SAAU,EAAE,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,IACpElb,EAAOkb,kBAAkB,YAAa,YAAa,CAAC,WAAY,eAChElb,EAAOkb,kBAAkB,SAAU,SAAU,EAAC,GAAM,IACpDlb,EAAOkb,kBAAkB,kBAAmB,cAAe,EAAC,GAAM,IAClElb,EAAO0b,yB,yHF20BTQ,EAAAA,GAAAA,UAAqB,eAAgB3B,I,8CEx0BrC2B,EAAAA,GAAAA,WAAsB,sBAAuBtB,IClItC,MAAMuB,GAMX/rB,YAAoB4P,GAAa,wEAHtB,GAGsB,KAAbA,OAAAA,EAAa,KAAbA,OAAAA,EAEpBoc,UACEvrB,KAAKvJ,MAAQuJ,KAAKb,UAAU1I,MAExBuJ,KAAKvJ,MAAMC,QAAUC,EAAAA,GAAAA,yBACvBqJ,KAAKwrB,UAAW,GAGlB,MAAMC,EAAgBzrB,KAAKmP,OAAOuc,IAAI,YAAY,KAChD1rB,KAAKb,UAAUkR,mBAAoB,EACnCrQ,KAAKb,UAAUkQ,SACfoc,OAGFzrB,KAAKb,UAAUkR,mBAAoB,EAGrCsb,eACE3rB,KAAKvJ,MAAMS,WAAWM,KAAK,CACzBF,WAAOqD,EACP1C,UAAW,WACXR,GAAI,KACJI,MAAM,EACNG,MAAM,EACN8R,MAAO,SAET9J,KAAKb,UAAUkQ,SAGjBuc,gBAAgBxpB,GACdpC,KAAKvJ,MAAMS,WAAW20B,OAAOzpB,EAAO,GACpCpC,KAAKb,UAAUkQ,SAGjBA,SACErP,KAAKb,UAAUkQ,SAGjByc,kBAAkB1pB,GAChB,OAAQ2pB,IACN/rB,KAAKvJ,MAAMS,WAAWkL,GAAO0O,UAAYib,EACzC/rB,KAAKqP,UAIT2c,kBAAkB5pB,GAChB,OAAQ2pB,IACN/rB,KAAKvJ,MAAMS,WAAWkL,GAAO2O,UAAYgb,EACzC/rB,KAAKqP,UAIT4c,sBAAsB7pB,GAE2B,WAA3CpC,KAAKvJ,MAAMS,WAAWkL,GAAOnK,YAC/B+H,KAAKvJ,MAAMS,WAAWkL,GAAO0O,UAAY2E,GAAAA,CAAU9e,EAAAA,GAAAA,MAAAA,QAAAA,QAA6Bgf,SAAS,IAAKC,cAC9F5V,KAAKvJ,MAAMS,WAAWkL,GAAO2O,UAAY0E,GAAAA,CAAU9e,EAAAA,GAAAA,MAAAA,QAAAA,QAA6Bgf,SAAS,IAAKC,eAEhG5V,KAAKb,UAAUkQ,U,+IAInBgc,EAAAA,GAAAA,UAAqB,sBAAsB,KAClC,CACLxB,SAAU,IACVqC,YAAa,sDACbC,WAAYb,GACZc,kBAAkB,EAClBC,aAAc,OACdntB,MAAO,CACLC,UAAW,SC7EV,MAAMmtB,GAOX/sB,YAAoB4P,GAAa,wEAJtB,GAIsB,kCAAbA,OAAAA,EAAa,KAAbA,OAAAA,EAEpBoc,UACEvrB,KAAKvJ,MAAQuJ,KAAKb,UAAU1I,MAE5B,MAAMg1B,EAAgBzrB,KAAKmP,OAAOuc,IAAI,YAAY,KAChD1rB,KAAKb,UAAUotB,oBAAqB,EACpCvsB,KAAKb,UAAUkQ,SACfoc,OAGFzrB,KAAKqR,YVgBAnV,EAAAA,EAAAA,KAAIgW,OAAOC,KAAKd,IAAcmb,IAC5B,CACLA,IAAAA,EACAl1B,MAAO+Z,EAAWmb,GAAKhb,UUlBzBxR,KAAKb,UAAUotB,oBAAqB,EAGtCld,SACErP,KAAKb,UAAUkQ,SAGjBod,gBACEzsB,KAAKvJ,MAAM6b,YAAY9a,KAAK,CAC1BC,GAAI,OACJsb,mBAAepY,EACfwW,UAAMxW,EACNqY,iBAAarY,EACb4D,QAAI5D,EACJ1C,UAAW,cACXJ,MAAM,EACNG,MAAM,EAEN8Y,UAAW,4BACXC,UAAW,4BAEb/Q,KAAKb,UAAUkQ,SAGjBqd,iBAAiBtqB,GACfpC,KAAKvJ,MAAM6b,YAAYuZ,OAAOzpB,EAAO,GACrCpC,KAAKb,UAAUkQ,SAGjByc,kBAAkB1pB,GAChB,OAAQ2pB,IACN/rB,KAAKvJ,MAAM6b,YAAYlQ,GAAO0O,UAAYib,EAC1C/rB,KAAKqP,UAIT2c,kBAAkB5pB,GAChB,OAAQ2pB,IACN/rB,KAAKvJ,MAAM6b,YAAYlQ,GAAO2O,UAAYgb,EAC1C/rB,KAAKqP,W,sBAKXgc,EAAAA,GAAAA,UAAqB,uBAAuB,KACnC,CACLxB,SAAU,IACVqC,YAAa,wDACbC,WAAYG,GACZF,kBAAkB,EAClBC,aAAc,OACdntB,MAAO,CACLC,UAAW,S,6DClEV,SAASwtB,GACdC,EACAC,EACAjD,EACA1sB,GAEA,SAAS4vB,EAAejZ,GACtB,IACE,OAAO+Y,EAAU/Y,GACjB,MAAOkZ,GAEP,OADAnxB,QAAQC,IAAI,gEACLmxB,EAAAA,EAAAA,QAAOnZ,IAIlB,MAAO,CACLgW,SAAU,IACV3qB,MAAO,CACLzC,MAAO,IACPiB,OAAQ,KAEVvB,KAAM,CAAC+C,EAAY1C,KACjB,MAAMC,EAAQyC,EAAMzC,MACpB,IAAI+U,EAAQ/U,EAAM+U,MACd9W,EAAO+B,EAAM/B,KACjB,MAAMvC,EAAY00B,EAAaI,aAE/B,IAAItiB,EAAU,iCACVuiB,EAAkB,GAEtB,QAAsBvyB,IAAlB8B,EAAM0wB,SAAyB1wB,EAAMyY,SAAU,CACjD,MAAMkY,EAAaC,GAAAA,EAAAA,qBAA8B5wB,EAAMyY,UACvDgY,EAAkBE,EAAWrf,WAC7ByD,EAAS,aAAY4b,EAAWE,mBAAmBF,EAAW1yB,OAC9DA,EAAO2yB,GAAAA,EAAAA,uBAAgC5wB,GACnCA,EAAM/B,OACRA,EAAOA,EAAO,SAAW+B,EAAM/B,WAExB8W,IACT9W,EAAO8W,EAAQ,WAAY+b,EAAAA,EAAAA,UAAS7yB,GAAQA,EAAO,IACnD8W,EAAQ,IAGV,IAAIgc,EAAU,yCACV/wB,EAAMgxB,OAAShxB,EAAMixB,YACvBF,GAAW,+DAA8D/wB,EAAMgxB,qBAAqBhxB,EAAMixB,uBAE5GF,GAAW,oDACgCN,MAAoBJ,EAAetb,6DACnCrZ,MAAAA,OAFjC,EAEiCA,EAAWgV,WAAW1Q,EAAMqG,sBAInErG,EAAM3D,IAAN2D,MAAYtE,GAAAA,EAAWw1B,mBAAmBlxB,EAAM0X,eAClDqZ,GAAW,oKAObA,GAAW,SACX7iB,GAAW6iB,EACX7iB,GAAW,uCAEPjQ,IACFiQ,GAAW,wBAA0BmiB,EAAepyB,EAAKoB,QAAQ,MAAO,SAAW,UAGrF,MAAM8xB,EAAOnxB,EAAMmxB,KAEfA,GAAQA,EAAK92B,SACfoI,EAAM0uB,KAAOA,EACbjjB,GACE,6GAGJA,GAAW,SACXA,GAAW,SAEMxI,GAAAA,CAAEwI,GACV9F,SAASrI,GAElBU,EAASV,EAAQqxB,WAAjB3wB,CAA6BgC,K,gEAKnCmsB,EAAAA,GAAAA,UAAqB,oBAAqBsB,I,uTCxFnC,MAAMmB,GAWXvuB,cAAc,8JAEdgsB,UACEvrB,KAAKvD,MAAM2X,QAAUpU,KAAKb,UAAU1I,MAAMqC,GAC1CkH,KAAKvD,MAAM0X,YAAcnU,KAAKb,UAAUhH,UAAUW,GAGlDkH,KAAKvD,MAAMjB,KAAOuyB,GAAiB/tB,KAAKvD,MAAMjB,MAC1CwE,KAAKvD,MAAM4X,WACbrU,KAAKvD,MAAMyG,QAAU6qB,GAAiB/tB,KAAKvD,MAAMyG,UAGnDlD,KAAKguB,aAAehuB,KAAKb,UAAUhH,UAAUgV,WAAWnN,KAAKvD,MAAMjB,MAGrEyyB,YACyC,MACO,EAD9C,OAAIrE,GAAAA,GAAAA,yBAC6B,cAA3B5pB,KAAKvD,MAAM6Y,OAAOte,OACZ,UAACgJ,KAAKb,UAAUhH,UAAU+1B,KAAKC,8BAA/B,QAAC,EAAsDh2B,UAAU81B,aAEnE,UAACjuB,KAAKb,UAAUhH,UAAU+1B,KAAKC,8BAA/B,QAAC,EAAsDC,aAAaH,YAKtE,aACR,IAAKjuB,KAAKquB,KAAKC,OACb,OAGF,MAAMC,GAAYC,EAAAA,EAAAA,WAAUxuB,KAAKvD,OAIjC,GAHA8xB,EAAU/yB,KAAO+yB,EAAU/yB,KAAMmY,UACjC4a,EAAUrrB,QAAU,EAEhBqrB,EAAUla,WACZka,EAAUrrB,QAAUlD,KAAKvD,MAAMyG,QAASyQ,UAEpC4a,EAAUrrB,QAAUqrB,EAAU/yB,MAEhC,YADAI,QAAQC,IAAI,gBAKhB,IAAI4yB,EAAeC,GAAAA,GACfH,EAAUz1B,KACZ21B,EAAeE,GAAAA,IAGjB,UACQF,EAAaF,GACnB,MAAOxB,GACPnxB,QAAQC,IAAIkxB,GAHd,QAKE/sB,KAAKZ,SACLwvB,EAAAA,GAAAA,MAA0BC,IAAI,CAAE12B,UAAW6H,KAAKb,UAAUhH,UAAWM,MAAOuH,KAAKb,UAAU1G,SAInF,eACV,UACQq2B,EAAAA,GAAAA,IAAiB9uB,KAAKvD,OAC5B,MAAOswB,GACPnxB,QAAQC,IAAIkxB,GAHd,QAKE/sB,KAAKZ,SACLwvB,EAAAA,GAAAA,MAA0BC,IAAI,CAAE12B,UAAW6H,KAAKb,UAAUhH,UAAWM,MAAOuH,KAAKb,UAAU1G,UAKjG,SAASs1B,GAAiBgB,GACxB,GAAIA,IAAahf,EAAAA,EAAAA,UAASgf,GAAY,CACpC,MAAMC,EAAQviB,OAAOsiB,GACrB,OAAOvc,EAAAA,EAAAA,UAASwc,GAEhB,OAAOD,E,cAmBX1D,EAAAA,GAAAA,UAAqB,eAfd,WACL,MAAO,CACLxB,SAAU,IACVsC,WAAY2B,GACZ1B,kBAAkB,EAClBC,aAAc,OACdH,YAAa,6DACbhtB,MAAO,CACLC,UAAW,IACX1C,MAAO,IACP2C,MAAO,S,wLCzGN,MAAM6vB,GAUX1vB,YAAoB4P,GAAa,gNAAbA,OAAAA,EAAa,KAAbA,OAAAA,EAClBnP,KAAKb,UAAYgQ,EAAO1H,KACxBzH,KAAKvJ,MAAQuJ,KAAKb,UAAU1I,MAC5BuJ,KAAKmP,OAAO1H,KAAOzH,KAEnBA,KAAKkvB,UAAY,CACfC,OAAQ,EACR,eAAgB,EAChB,gBAAiB,GACjB,gBAAiB,GACjB,kBAAmB,MAGrBnvB,KAAKovB,WAAa,CAChBC,KAAM,OACNC,OAAQ,SACRC,UAAW,aAIbvvB,KAAKwvB,iBAAmB,CACtB,CAAE90B,KAAM,MAAOpD,MAAO,OACtB,CAAEoD,KAAM,MAAOpD,MAAO,OACtB,CAAEoD,KAAM,MAAOpD,MAAO,OACtB,CAAEoD,KAAM,QAASpD,MAAO,SACxB,CAAEoD,KAAM,QAASpD,MAAO,SACxB,CAAEoD,KAAM,UAAWpD,MAAO,YAGE,WAA1B0I,KAAKvJ,MAAM+M,MAAM0I,OACdlM,KAAKvJ,MAAM+M,MAAMhJ,OACpBwF,KAAKvJ,MAAM+M,MAAMhJ,KAAO,kBAG5BwF,KAAK0a,UAAYA,EAAAA,GAAAA,WAAAA,OAAAA,cAAAA,MAAAA,iBAGnB+U,cAActY,GACZ,OAAQuY,IACNvY,EAAKsR,OAASiH,EAEV1vB,KAAKvJ,MAAM+C,YAAYC,SAASi2B,MAClC1vB,KAAKvJ,MAAM+C,YAAYC,SAASi2B,UAAO/0B,EACvCqF,KAAKb,UAAUgsB,WAEfnrB,KAAKb,UAAUkQ,UAKrBA,SACErP,KAAKb,UAAUkQ,SAGjBsgB,mBACE3vB,KAAKb,UAAUywB,UAAUC,kCACzB7vB,KAAKb,UAAU2wB,qBAAqB9vB,KAAKb,UAAUiX,UAGrD2Z,oBACE/vB,KAAKb,UAAU2wB,qBAAqB9vB,KAAKb,UAAUiX,WAKhD,SAAS4Z,KAEd,MAAO,CACLnG,SAAU,IACV3qB,OAAO,EACPgtB,YAAa,kDACbC,WAAY8C,I,+ICjFT,MAAMgB,GAYX1wB,YAAY4P,GAAa,oHARkB,MAQlB,mBAJrB,CAAE9I,EAAG,EAAGyI,EAAG,IAIU,+CAKf,KACJ9O,KAAK0gB,sBACP1gB,KAAK0gB,qBAAqBxR,oBAAoB,SAAUlP,KAAKirB,SAG/DjrB,KAAKd,MAAMkQ,QAAO,KAChBpP,KAAKkwB,WAAY,QAXI,sBAeXzzB,IACZuD,KAAKkwB,WAAalwB,KAAKkwB,UACnBlwB,KAAKkwB,WAAalwB,KAAK0gB,sBACzB1gB,KAAK0gB,qBAAqBhS,iBAAiB,SAAU1O,KAAKirB,SAGxDjrB,KAAKsV,OACPtV,KAAK/B,SAAW,CACdoI,EAAGrG,KAAKsV,OAAOhM,MACfwF,EAAG9O,KAAKsV,OAAO/L,OAGjBvJ,KAAK/B,SAAW,CACdoI,EAAG5J,EAAQA,EAAM6M,MAAQ,EACzBwF,EAAGrS,EAAQA,EAAM8M,MAAQ,MA7BN,mCAoCE4mB,IACzBnwB,KAAK0gB,qBAAuByP,KArCL,qBAwCZ7a,IACXtV,KAAKsV,OAASA,KAzCS,qBA4Cb,IACHtV,KAAKsV,SA7CW,gCAgDD8a,IACtBpwB,KAAKowB,kBAAoBA,KAhDzBpwB,KAAKkwB,WAAY,EACjBlwB,KAAKd,MAAQiQ,G,8fCeV,MAAMkhB,WAAkBC,GAAAA,EAmH7B/wB,YAAY4P,EAAaohB,GACvBrX,MAAM/J,EAAQohB,GAD2C,uBAhH7C,GAgH6C,uBA/GvC,IA+GuC,+BA9GrC,GA8GqC,qBA7GhC,IA6GgC,mBA5GnC,IA4GmC,sBA3GxC,IA2GwC,4EAvG7C,IAuG6C,sBAtG7C,GAsG6C,sFAlGtC,CAEnBC,WAAY,KAEZC,SAAU,OACV1P,MAAO,CACL,CACEjW,MAAO,KACPrF,MAAM,EACN0iB,QAAS,EACTrlB,IAAK,KACLgD,IAAK,KACL2iB,OAAQ,SAEV,CACE3d,MAAO,KACPrF,MAAM,EACN0iB,QAAS,EACTrlB,IAAK,KACLgD,IAAK,KACL2iB,OAAQ,UAGZjlB,MAAO,CACLiC,MAAM,EACNyG,KAAM,OACN1R,KAAM,KACNW,OAAQ,GACRupB,QAAS,MAEX5a,MAAO,CACLoZ,OAAO,EACPC,WAAY,MAGd1a,OAAO,EAEP5Q,KAAM,EAEN8tB,aAAc,EAEdC,UAAW,EAEXnC,QAAQ,EAERtN,cAAc,EAEd2P,WAAY,GAEZC,YAAa,GAEbxd,QAAQ,EAER0d,YAAa,EAEbzC,MAAM,EAEN9Y,OAAO,EAEP8a,YAAY,EAEZrb,OAAQ,CACN1E,MAAM,EACNtK,QAAQ,EACR2H,KAAK,EACLgD,KAAK,EACLuW,SAAS,EACTC,OAAO,EACPF,KAAK,GAGP4H,cAAe,OAEf6B,aAAa,EAEblb,QAAS,CACPC,WAAY,aACZM,QAAQ,EACRzI,KAAM,GAGRmD,SAAU,KACV8qB,UAAW,KAEXC,QAAS,CAAC,IAEVC,YAAa,GAEbC,gBAAiB,GACjB35B,WAAY,GACZob,YAAa,GACbxa,QAAS,CAEPC,gBAAgB,KAKuC,yBAuJ3C,CAACuB,EAAa0K,KAC5B1K,EAAOw3B,UAAS1f,EAAAA,EAAAA,kBAAiBpN,EAAOrN,EAAAA,GAAAA,QACxCqJ,KAAKvJ,MAAMm6B,YAAYt3B,EAAOid,OAASvS,EACvChE,KAAKqP,YA1JoD,0BA6JzC8G,IAChBnW,KAAK+wB,qBAAsB,EAC3B/wB,KAAKmW,aAAeA,EACpBnW,KAAKqP,YAhKoD,wBAmK5C,CAACqM,EAAaG,KAC3B7b,KAAKvJ,MAAM0T,OAAO1H,KAAOiZ,EACzB1b,KAAKvJ,MAAM0T,OAAO0R,SAAWA,EAC7B7b,KAAKqP,YAtKoD,wBAyK3CgK,IACd,IAAI8Q,GAAgBza,EAAAA,EAAAA,MAAK1P,KAAKvJ,MAAMo6B,gBAAiB,CAAEta,MAAO8C,EAAK9C,QAC9D4T,IACHA,EAAW,CAAE5T,MAAO8C,EAAK9C,OACzBvW,KAAKvJ,MAAMo6B,gBAAgBr5B,KAAK2yB,IAElCA,EAASrgB,MAAQuP,EAAKvP,MACtB9J,KAAKqP,YAhLoD,8BAuMtC,KACnBrP,KAAKye,gBAAgBsD,gBAxMoC,uBA2M7C,IAAM/hB,KAAK7H,UAAU6B,gBA3MwB,+BA6MpCS,GACduF,KAAKoW,SAASjB,QAAQ5a,GAAcA,EAAUE,QAAUA,IAAO,MA3MtEhB,EAAAA,EAAAA,UAASuG,KAAKvJ,MAAOuJ,KAAKgxB,gBAC1Bv3B,EAAAA,EAAAA,UAASuG,KAAKvJ,MAAMkU,QAAS3K,KAAKgxB,cAAcrmB,UAChDlR,EAAAA,EAAAA,UAASuG,KAAKvJ,MAAM0T,OAAQnK,KAAKgxB,cAAc7mB,SAC/C1Q,EAAAA,EAAAA,UAASuG,KAAKvJ,MAAM+M,MAAOxD,KAAKgxB,cAAcxtB,QAC9C/J,EAAAA,EAAAA,UAASuG,KAAKvJ,MAAMqB,QAASkI,KAAKgxB,cAAcl5B,SAEhDkI,KAAKixB,eAAgB,EACrBjxB,KAAK4vB,UAAY,IAAIsB,GAAAA,EAAclxB,KAAKvJ,OACxCuJ,KAAKye,gBAAkB,IAAIwR,GAAqB9gB,GAEhDnP,KAAK1C,OAAOqB,GAAGmgB,EAAAA,YAAAA,OAAoB9e,KAAKgf,SAASxT,KAAKxL,OACtDA,KAAK1C,OAAOqB,GAAGmgB,EAAAA,YAAAA,mBAAgC9e,KAAK8vB,qBAAqBtkB,KAAKxL,OAC9EA,KAAK1C,OAAOqB,GAAGmgB,EAAAA,YAAAA,iBAA8B9e,KAAKmxB,mBAAmB3lB,KAAKxL,OAC1EA,KAAK1C,OAAOqB,GAAGmgB,EAAAA,YAAAA,oBAAiC9e,KAAKoxB,eAAe5lB,KAAKxL,OACzEA,KAAK1C,OAAOqB,GAAGmgB,EAAAA,YAAAA,iBAA8B9e,KAAKqxB,mBAAmB7lB,KAAKxL,OAG1E,MAAMsxB,EAAkBtxB,KAAKvJ,MAAM+C,YAAYC,SAASi2B,KACpD4B,IACFtxB,KAAKvJ,MAAMsqB,MAAM,GAAG0H,OAAS6I,GAIjCF,iBACEpxB,KAAKuxB,aAAa,UAAW,mDAC7BvxB,KAAKuxB,aAAa,mBAAoB,4DACtCvxB,KAAKuxB,aAAa,OAAQvB,IAC1BhwB,KAAKuxB,aAAa,SAAU,kDAC5BvxB,KAAKuxB,aAAa,aAAc,sDAChCvxB,KAAKuxB,aAAa,eAAgB,wDAClCvxB,KAAKwxB,YAAc,EACnBxxB,KAAK+wB,qBAAsB,EAG7BM,mBAAmBI,GACjBA,EAAQj6B,KAAK,CAAEkD,KAAM,gBAAiBkoB,MAAO,sBAAuB8O,SAAU,QAGhFC,QAAQ1jB,GACNpC,EAAAA,GAAAA,QAAkB,IAAI+lB,GAAAA,GAAa,CAAEC,MAAO,KAG9CV,mBAAmB74B,GACjB,MAAM,OAAEgB,EAAF,YAAUP,IAAgBb,EAAAA,GAAAA,GAAiB8H,KAAKvJ,MAAOuJ,KAAK7H,WAClE6H,KAAK8xB,UAAW/4B,YAAcA,EAC9BiH,KAAK8vB,qBAAqBx2B,GAG5Bw2B,qBAAqB13B,GAAmB,MACtC4H,KAAKoW,SAAWhe,EAChB4H,KAAK0J,WAAa1J,KAAK4vB,UAAUmC,cAAc,CAC7C3b,SAAUpW,KAAKoW,SACf3d,MAAOuH,KAAKvH,QAGduH,KAAKwiB,YAAcxiB,KAAKgyB,iBAExBhyB,KAAKiyB,gBAAat3B,EACjBqF,KAAK0J,WAAmBuoB,gBAAat3B,EAClCqF,KAAK8xB,UAAWG,aAClBjyB,KAAKiyB,WAAajyB,KAAK8xB,UAAWG,WACjCjyB,KAAK0J,WAAmBuoB,WAAajyB,KAAKiyB,WAAW74B,OAGxD4G,KAAKjH,YAAc,GACnB,UAAIiH,KAAK8xB,UAAW/4B,mBAApB,OAAI,EAA6BjC,SAC/BkJ,KAAKjH,aAAcm5B,EAAAA,GAAAA,IAA0BlyB,KAAK8xB,UAAW/4B,cAG/DiH,KAAKmyB,SAAU,EACfnyB,KAAKqP,OAAOrP,KAAK0J,YAGnBsoB,iBAKE,GAAwB,IAJAhyB,KAAK0J,WAAW0oB,QAAO,CAACC,EAAM/4B,IAC7C+4B,EAAO/4B,EAAO6O,WAAWrR,QAC/B,GAEwB,CACzB,GAAIkJ,KAAKoW,SACP,IAAK,MAAM1a,KAASsE,KAAKoW,SAAU,OACjC,GAAI1a,EAAM5E,QAAN,UAAgB4E,EAAMb,cAAtB,OAAgB,EAAc/D,OAChC,MAAO,CACL0a,MAAO,uBACP8gB,IAAK,qCACL3P,WAAY,uBACZD,OAAQ,MACN6P,EAAAA,GAAAA,KAASC,EAAAA,GAAAA,IAAkB,CAAE/7B,MAAOuJ,KAAKvJ,MAAOg8B,SAAU,aAOpE,MAAO,CACLjhB,MAAO,UACP8gB,IAAK,+BAKT,IAAK,MAAMh5B,KAAU0G,KAAK0J,WACxB,IAAKpQ,EAAOo5B,eACV,OAKJ,MAAMlQ,EAA2B,CAC/BhR,MAAO,0BACP8gB,IAAK,sEAGD75B,ER3PH,SAA0Bk6B,GAC/B,MAAMl6B,EAA2B,CAC/B0Y,KAAM1E,OAAOmmB,iBACbr0B,GAAIkO,OAAOomB,kBAEb,IAAIC,GAAQ,EACZ,MAAMC,EAAW,CAACC,EAAAA,UAAAA,IAAeA,EAAAA,UAAAA,KACjC,IAAK,MAAMt3B,KAASi3B,EAClB,IAAK,MAAMx4B,KAASuB,EAAMb,OACxB,GAAIV,EAAMnD,OAASyqB,EAAAA,UAAAA,KAAgB,CACjC,MAAMwR,GAAQC,EAAAA,EAAAA,aAAY,CAAE/4B,MAAAA,EAAO44B,SAAAA,IACnCt6B,EAAM0Y,KAAOpM,KAAKjC,IAAIrK,EAAM0Y,KAAM8hB,EAAMD,EAAAA,UAAAA,MACxCv6B,EAAM8F,GAAKwG,KAAKe,IAAIrN,EAAM8F,GAAI00B,EAAMD,EAAAA,UAAAA,MACpCF,GAAQ,EAId,OAAOA,EAAQr6B,OAAQkC,EQ0OPw4B,CAAiBnzB,KAAKoW,UAYpC,OAVI3d,IACF+pB,EAAYG,WAAa,eACzBH,EAAYE,OAAS,KACnB0Q,EAAAA,gBAAAA,QAAwB,CACtBjiB,KAAM1Y,EAAM0Y,KACZ5S,GAAI9F,EAAM8F,OAKTikB,EAGTxD,WACE,GAAKhf,KAAK0J,WAAV,CAIAlT,GAAAA,EAAAA,uBAAuCwJ,KAAKvJ,OAE5C,IAAK,MAAM6C,KAAU0G,KAAK0J,WACxBpQ,EAAO+5B,qBAAqBrzB,KAAKvJ,MAAMo6B,iBAGnCv3B,EAAOo2B,OACT1vB,KAAKvJ,MAAMsqB,MAAMznB,EAAOwQ,MAAQ,GAAG2e,OAASnvB,EAAOo2B,OAEpB,IAA7B1vB,KAAK+wB,sBAAyD,IAAxBz3B,EAAO6c,eAC/CnW,KAAKmW,aAAa7c,EAAOid,QAAS,IAiCxCqU,kBAAkBT,GAChBnqB,KAAKvJ,MAAMo6B,gBAAgBr5B,KAAK2yB,GAAY,IAG9CmJ,qBAAqBnJ,GACnBnqB,KAAKvJ,MAAMo6B,iBAAkB0C,EAAAA,EAAAA,SAAQvzB,KAAKvJ,MAAMo6B,gBAAiB1G,GACjEnqB,KAAKqP,SAGPmkB,eACExzB,KAAKvJ,MAAM0T,OAAO1E,MAAQzF,KAAKvJ,MAAM0T,OAAO1E,KAC5CzF,KAAKqP,SAGPokB,4BACE,MAAMtpB,EAASnK,KAAKvJ,MAAM0T,OAC1BA,EAAOhP,OAASgP,EAAOrH,KAAOqH,EAAOrE,KAAOqE,EAAOiS,KAAOjS,EAAOkS,SAAWlS,EAAOmS,MACnFtc,KAAKqP,SAaPqkB,iBACE1zB,KAAK2zB,mBAAmBh9B,EAAAA,GAAAA,OAAAA,a,qCArUf05B,GAAAA,WChCK,6rBD0WX,MAAMx2B,GAAS,IAAI+5B,EAAAA,YAAiD,MACxEC,eAAe,CACdC,uBAAwB,CACtBC,EAAAA,oBAAAA,QACAA,EAAAA,oBAAAA,WACAA,EAAAA,oBAAAA,IACAA,EAAAA,oBAAAA,IACAA,EAAAA,oBAAAA,SACAA,EAAAA,oBAAAA,MACAA,EAAAA,oBAAAA,YAGHC,eAAe,CAAEj7B,aAAa,EAAMk7B,aAAa,IACjDC,qBElXwCz9B,IAAyC,MAClF,MAAM+C,EAA8B,UAAG/C,EAAM+C,mBAAT,QAAwB,CAC1DC,SAAU,GACVC,UAAW,IAGP5B,EAAUrB,EAAMqB,SAAW,GAWjC,OARIA,EAAQumB,YACV7kB,EAAYC,SAASS,MAAQpC,EAAQumB,iBAC9BvmB,EAAQumB,WAIjB5nB,EAAMqB,QAAUA,EAChBrB,EAAM+C,YAAcA,EACb1B,KFoWT+B,GAAOs6B,iBAAmB9D","sources":["webpack://grafana/./public/app/features/alerting/state/ThresholdMapper.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack://grafana/./public/app/plugins/panel/graph/graph_tooltip.ts","webpack://grafana/./public/app/plugins/panel/graph/threshold_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/time_region_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/event_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/histogram.ts","webpack://grafana/./public/app/plugins/panel/graph/align_yaxes.ts","webpack://grafana/./public/app/plugins/panel/graph/Legend/LegendSeriesItem.tsx","webpack://grafana/./public/app/plugins/panel/graph/Legend/Legend.tsx","webpack://grafana/./public/app/plugins/panel/graph/graph.ts","webpack://grafana/./public/app/plugins/panel/graph/utils.ts","webpack://grafana/./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack://grafana/./public/app/plugins/panel/graph/thresholds_form.ts","webpack://grafana/./public/app/plugins/panel/graph/time_regions_form.ts","webpack://grafana/./public/app/plugins/panel/graph/annotation_tooltip.ts","webpack://grafana/./public/app/plugins/panel/graph/event_editor.ts","webpack://grafana/./public/app/plugins/panel/graph/axes_editor.ts","webpack://grafana/./public/app/plugins/panel/graph/GraphContextMenuCtrl.ts","webpack://grafana/./public/app/plugins/panel/graph/module.ts","webpack://grafana/./public/app/plugins/panel/graph/template.ts","webpack://grafana/./public/app/plugins/panel/graph/GraphMigrations.ts"],"sourcesContent":["import { config } from 'app/core/config';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nexport const hiddenReducerTypes = ['percent_diff', 'percent_diff_abs'];\nexport class ThresholdMapper {\n  static alertToGraphThresholds(panel: PanelModel) {\n    if (!panel.alert || config.unifiedAlertingEnabled) {\n      return false; // no update when no alerts\n    }\n\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds: any[] = (panel.thresholds = []);\n      const visible = hiddenReducerTypes.indexOf(condition.reducer?.type) === -1;\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt', visible });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt', visible });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = panel.options.alertThreshold;\n      t.line = panel.options.alertThreshold;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n","import { applyFieldOverrides, ArrayDataFrame, getDefaultTimeRange, LoadingState, PanelData } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { DashboardModel, PanelModel } from '../state';\nimport { getProcessedDataFrames } from '../../query/state/runRequest';\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { applyPanelTimeOverrides } from './panel';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [new ArrayDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    annotations,\n  };\n}\n","import { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import $ from 'jquery';\nimport { partition, each } from 'lodash';\n//@ts-ignore\nimport Drop from 'tether-drop';\nimport { CreatePlotOverlay } from '@grafana/data';\nimport { getLegacyAngularInjector } from '@grafana/runtime';\n\n/** @ngInject */\nconst createAnnotationToolip: CreatePlotOverlay = (element, event, plot) => {\n  const injector = getLegacyAngularInjector();\n  const content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    ($compile, $rootScope) => {\n      const eventManager = plot.getOptions().events.manager;\n      const tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = () => {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      const drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', () => {\n        setTimeout(() => {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n};\n\nlet markerElementToAttachTo: any = null;\n\n/** @ngInject */\nconst createEditPopover: CreatePlotOverlay = (element, event, plot) => {\n  const eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the initial marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(() => {\n    const injector = getLegacyAngularInjector();\n    const content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      ($compile, $rootScope) => {\n        const scope = $rootScope.$new(true);\n        let drop: any;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = () => {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', () => {\n          // need timeout here in order call drop.destroy\n          setTimeout(() => {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n};\n\nexport { createEditPopover, createAnnotationToolip };\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(\n    object: JQuery,\n    drawFunc: any,\n    clearFunc: any,\n    moveFunc: any,\n    left: number,\n    top: number,\n    width: number,\n    height: number\n  ) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left, top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position: { left: number; top: number }) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options: any, drawableEvent: DrawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot: any) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types: any) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events: any[]) {\n    const parts = partition(events, 'isRegion');\n    const regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      const ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a: any, b: any) => {\n      const ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      const options = event.getOptions();\n      const insidePlot = this._insidePlot(options.min) || this._insidePlot(options.timeEnd);\n      const overlapPlot = this._overlapPlot(options.min, options.timeEnd);\n      // check event is inside the graph range\n      if ((insidePlot || overlapPlot) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event.visual().getObject().hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    const o = this._plot.getPlotOffset();\n    let left;\n    let top;\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event: { eventType: any; min: any; editModel: any }) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      const marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      const mouseenter = function (this: any) {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      const mouseleave = () => {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    const drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj: { show: () => void }) {\n        obj.show();\n      },\n      (obj: { remove: () => void }) => {\n        obj.remove();\n      },\n      (obj: any, position: { top: any; left: any }) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width() ?? 1,\n      line.height() ?? 1\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event: { eventType: any; min: number; timeEnd: number; editModel: any }) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top,\n      left,\n      lineWidth: number,\n      regionWidth,\n      lineStyle: string | number | cssPropertySetter,\n      color: string,\n      markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    const topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    const timeFrom = Math.min(event.min, event.timeEnd);\n    const timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    const right = xaxis.p2c(timeTo) + o.left;\n\n    const [xmin, xmax] = [o.left, o.left + this._plot.width()];\n    const regionStart = Math.max(left, xmin);\n    const regionEnd = Math.min(right, xmax);\n    const regionOffset = right > xmax ? 0 : lineWidth; // only include lineWidth when right line is visible\n    regionWidth = regionEnd - regionStart + regionOffset;\n\n    each([left, right], (position) => {\n      // only draw visible region lines\n      if (xmin <= position && position < xmax) {\n        const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n          position: 'absolute',\n          opacity: 0.8,\n          left: position + 'px',\n          top: 8,\n          width: lineWidth + 'px',\n          height: this._plot.height() + topOffset,\n          'border-left-width': lineWidth + 'px',\n          'border-left-style': lineStyle,\n          'border-left-color': color,\n          color: color,\n        });\n        line.appendTo(container);\n      }\n    });\n\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: regionStart + 'px',\n      top: top,\n      width: regionWidth + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    const mouseenter = function (this: any) {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    const mouseleave = () => {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    const drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj: { show: () => void }) {\n        obj.show();\n      },\n      (obj: { remove: () => void }) => {\n        obj.remove();\n      },\n      (obj: { css: (arg0: { top: any; left: any }) => void }, position: { top: any; left: any }) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width() ?? 1,\n      region.height() ?? 1\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x: any) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n\n  /**\n   * check if the event overlaps the visible range\n   */\n  _overlapPlot(point0: number, point1: number) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const [coord0, coord1] = [xaxis.p2c(point0), xaxis.p2c(point1)];\n    const [coordMin, coordMax] = [0, xaxis.p2c(xaxis.max)];\n    return coordMin < coord0 && coord1 < coordMax;\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(this: any, plot: any) {\n  const that = this;\n  const eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = () => {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = () => {\n    $.each(eventMarkers._events, (index, event) => {\n      event.visual().getObject().hide();\n    });\n  };\n\n  plot.showEvents = () => {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = (events: any[]) => {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push((plot: any, options: any) => {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push((plot: any) => {\n    const options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nconst defaultOptions: any = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import $ from 'jquery';\nimport { appEvents } from 'app/core/core';\nimport { CoreEvents } from 'app/types';\nimport {\n  textUtil,\n  systemDateFormats,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  DataHoverClearEvent,\n} from '@grafana/data';\n\nexport default function GraphTooltip(this: any, elem: any, dashboard: any, scope: any, getSeriesFn: any) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n  const hoverEvent = new LegacyGraphHoverEvent({ pos: {}, point: {}, panel: this.panel });\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX: number, series: any, last: number) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX: any, series: any) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime: string, innerHtml: string, pos: { pageX: number; pageY: any }, xMode: string) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX, pos.pageY, { offset: 10 });\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function (seriesList: any[], pos: { x: number }) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      value = series.data[hoverIndex][1];\n\n      if (series.stack && value !== null && panel.tooltip.value_type !== 'individual') {\n        lastValue += value;\n        value = lastValue;\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    if (panel.tooltip?.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    dashboard.events.publish(new LegacyGraphHoverClearEvent());\n    dashboard.events.publish(new DataHoverClearEvent());\n  });\n\n  elem.bind('plothover', (event: any, pos: { panelRelY: number; pageY: number }, item: any) => {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    if (!dashboard.panelInEdit) {\n      pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n      hoverEvent.payload.pos = pos;\n      hoverEvent.payload.panel = panel;\n      hoverEvent.payload.point['time'] = (pos as any).x;\n      dashboard.events.publish(hoverEvent);\n    }\n  });\n\n  elem.bind('plotclick', (event: any, pos: any, item: any) => {\n    appEvents.emit(CoreEvents.graphClicked, { pos: pos, panel: panel, item: item });\n  });\n\n  elem.bind('plotleave', () => {\n    if (!panel.tooltip.shared) {\n      return;\n    }\n\n    const plot = elem.data().plot;\n    if (plot) {\n      $tooltip.detach();\n      plot.unhighlight();\n    }\n  });\n\n  this.clear = (plot: { clearCrosshair: () => void; unhighlight: () => void }) => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos: any, item: any) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n\n      const scrollTop = $(window).scrollTop() ?? 0;\n      const isVisible = pos.pageY >= scrollTop && pos.pageY <= $(window).innerHeight()! + scrollTop;\n\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = systemDateFormats.fullDateMS;\n    } else {\n      tooltipFormat = systemDateFormats.fullDate;\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n        value = textUtil.sanitize(series.formatValue(hoverInfo.value));\n\n        const color = textUtil.sanitize(hoverInfo.color);\n        const label = textUtil.sanitize(hoverInfo.label);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      const color = textUtil.sanitize(item.series.color);\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = textUtil.sanitize(series.formatValue(value));\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport { isNumber } from 'lodash';\nimport { getColorForTheme } from '@grafana/data';\nimport { CoreEvents } from 'app/types';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { config } from 'app/core/config';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup = false;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl: PanelCtrl) {}\n\n  getHandleHtml(handleIndex: any, model: { colorMode: string }, valueStr: any) {\n    let stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt: any) {\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    let lastY: number | null = null;\n    let posTop: number;\n    const plot = this.plot;\n    const panelCtrl = this.panelCtrl;\n    const model = this.thresholds[handleIndex];\n\n    function dragging(evt: any) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        const diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0), 10);\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      document.removeEventListener('mouseup', stopped);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(() => {\n        panelCtrl.render();\n        panelCtrl.events.emit(CoreEvents.thresholdChanged, {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    document.addEventListener('mouseup', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex: number, defaultHandleTopPos: number) {\n    const model = this.thresholds[handleIndex];\n    // alerting defines\n    if (!model.visible && (this.panelCtrl as any).alert) {\n      return;\n    }\n\n    const value = model.value;\n    let valueStr = value;\n    let handleTopPos = 0;\n\n    // handle no value\n    if (!isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    // @ts-ignore\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem: JQuery, data: any[]) {\n    this.hasSecondYAxis = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot: any) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options: any, panel: any) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    let gtLimit = Infinity;\n    let ltLimit = -Infinity;\n    let i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!isNumber(threshold.value)) {\n        continue;\n      }\n\n      let limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      let fillColor, lineColor;\n\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: getColorForTheme(fillColor, config.theme),\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: getColorForTheme(fillColor, config.theme),\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: getColorForTheme(lineColor, config.theme),\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: getColorForTheme(lineColor, config.theme),\n          });\n        }\n      }\n    }\n  }\n}\n","import 'vendor/flot/jquery.flot';\nimport { map } from 'lodash';\nimport { getColorForTheme, dateTime, DateTime, AbsoluteTimeRange, GrafanaTheme } from '@grafana/data';\nimport { config } from 'app/core/config';\n\ntype TimeRegionColorDefinition = {\n  fill: string | null;\n  line: string | null;\n};\n\nexport const colorModes: any = {\n  gray: {\n    themeDependent: true,\n    title: 'Gray',\n    darkColor: { fill: 'rgba(255, 255, 255, 0.09)', line: 'rgba(255, 255, 255, 0.2)' },\n    lightColor: { fill: 'rgba(0, 0, 0, 0.09)', line: 'rgba(0, 0, 0, 0.2)' },\n  },\n  red: {\n    title: 'Red',\n    color: { fill: 'rgba(234, 112, 112, 0.12)', line: 'rgba(237, 46, 24, 0.60)' },\n  },\n  green: {\n    title: 'Green',\n    color: { fill: 'rgba(11, 237, 50, 0.090)', line: 'rgba(6,163,69, 0.60)' },\n  },\n  blue: {\n    title: 'Blue',\n    color: { fill: 'rgba(11, 125, 238, 0.12)', line: 'rgba(11, 125, 238, 0.60)' },\n  },\n  yellow: {\n    title: 'Yellow',\n    color: { fill: 'rgba(235, 138, 14, 0.12)', line: 'rgba(247, 149, 32, 0.60)' },\n  },\n  custom: { title: 'Custom' },\n};\n\nexport function getColorModes() {\n  return map(Object.keys(colorModes), (key) => {\n    return {\n      key,\n      value: colorModes[key].title,\n    };\n  });\n}\n\nfunction getColor(timeRegion: any, theme: GrafanaTheme): TimeRegionColorDefinition {\n  if (Object.keys(colorModes).indexOf(timeRegion.colorMode) === -1) {\n    timeRegion.colorMode = 'red';\n  }\n\n  if (timeRegion.colorMode === 'custom') {\n    return {\n      fill: timeRegion.fill && timeRegion.fillColor ? getColorForTheme(timeRegion.fillColor, theme) : null,\n      line: timeRegion.line && timeRegion.lineColor ? getColorForTheme(timeRegion.lineColor, theme) : null,\n    };\n  }\n\n  const colorMode = colorModes[timeRegion.colorMode];\n\n  if (colorMode.themeDependent === true) {\n    return theme.isLight ? colorMode.lightColor : colorMode.darkColor;\n  }\n\n  return {\n    fill: timeRegion.fill ? getColorForTheme(colorMode.color.fill, theme) : null,\n    line: timeRegion.fill ? getColorForTheme(colorMode.color.line, theme) : null,\n  };\n}\n\nexport class TimeRegionManager {\n  plot: any;\n  timeRegions: any;\n\n  constructor(private panelCtrl: any) {}\n\n  draw(plot: any) {\n    this.timeRegions = this.panelCtrl.panel.timeRegions;\n    this.plot = plot;\n  }\n\n  addFlotOptions(options: any, panel: any) {\n    if (!panel.timeRegions || panel.timeRegions.length === 0) {\n      return;\n    }\n\n    const tRange = {\n      from: dateTime(this.panelCtrl.range.from).utc(),\n      to: dateTime(this.panelCtrl.range.to).utc(),\n    };\n\n    let i: number,\n      hRange: { from: any; to: any },\n      timeRegion: any,\n      regions: AbsoluteTimeRange[],\n      fromStart: DateTime,\n      fromEnd: DateTime,\n      timeRegionColor: TimeRegionColorDefinition;\n\n    const timeRegionsCopy = panel.timeRegions.map((a: any) => ({ ...a }));\n\n    for (i = 0; i < timeRegionsCopy.length; i++) {\n      timeRegion = timeRegionsCopy[i];\n\n      if (!(timeRegion.fromDayOfWeek || timeRegion.from) && !(timeRegion.toDayOfWeek || timeRegion.to)) {\n        continue;\n      }\n\n      if (timeRegion.from && !timeRegion.to) {\n        timeRegion.to = timeRegion.from;\n      }\n\n      if (!timeRegion.from && timeRegion.to) {\n        timeRegion.from = timeRegion.to;\n      }\n\n      hRange = {\n        from: this.parseTimeRange(timeRegion.from),\n        to: this.parseTimeRange(timeRegion.to),\n      };\n\n      if (!timeRegion.fromDayOfWeek && timeRegion.toDayOfWeek) {\n        timeRegion.fromDayOfWeek = timeRegion.toDayOfWeek;\n      }\n\n      if (!timeRegion.toDayOfWeek && timeRegion.fromDayOfWeek) {\n        timeRegion.toDayOfWeek = timeRegion.fromDayOfWeek;\n      }\n\n      if (timeRegion.fromDayOfWeek) {\n        hRange.from.dayOfWeek = Number(timeRegion.fromDayOfWeek);\n      }\n\n      if (timeRegion.toDayOfWeek) {\n        hRange.to.dayOfWeek = Number(timeRegion.toDayOfWeek);\n      }\n\n      if (hRange.from.dayOfWeek && hRange.from.h === null && hRange.from.m === null) {\n        hRange.from.h = 0;\n        hRange.from.m = 0;\n        hRange.from.s = 0;\n      }\n\n      if (hRange.to.dayOfWeek && hRange.to.h === null && hRange.to.m === null) {\n        hRange.to.h = 23;\n        hRange.to.m = 59;\n        hRange.to.s = 59;\n      }\n\n      if (!hRange.from || !hRange.to) {\n        continue;\n      }\n\n      regions = [];\n\n      fromStart = dateTime(tRange.from);\n      fromStart.set('hour', 0);\n      fromStart.set('minute', 0);\n      fromStart.set('second', 0);\n      fromStart.add(hRange.from.h, 'hours');\n      fromStart.add(hRange.from.m, 'minutes');\n      fromStart.add(hRange.from.s, 'seconds');\n\n      while (fromStart.unix() <= tRange.to.unix()) {\n        while (hRange.from.dayOfWeek && hRange.from.dayOfWeek !== fromStart.isoWeekday()) {\n          fromStart.add(24, 'hours');\n        }\n\n        if (fromStart.unix() > tRange.to.unix()) {\n          break;\n        }\n\n        fromEnd = dateTime(fromStart);\n\n        if (fromEnd.hour) {\n          if (hRange.from.h <= hRange.to.h) {\n            fromEnd.add(hRange.to.h - hRange.from.h, 'hours');\n          } else if (hRange.from.h > hRange.to.h) {\n            while (fromEnd.hour() !== hRange.to.h) {\n              fromEnd.add(1, 'hours');\n            }\n          } else {\n            fromEnd.add(24 - hRange.from.h, 'hours');\n\n            while (fromEnd.hour() !== hRange.to.h) {\n              fromEnd.add(1, 'hours');\n            }\n          }\n        }\n\n        fromEnd.set('minute', hRange.to.m);\n        fromEnd.set('second', hRange.to.s);\n\n        while (hRange.to.dayOfWeek && hRange.to.dayOfWeek !== fromEnd.isoWeekday()) {\n          fromEnd.add(24, 'hours');\n        }\n\n        const outsideRange =\n          (fromStart.unix() < tRange.from.unix() && fromEnd.unix() < tRange.from.unix()) ||\n          (fromStart.unix() > tRange.to.unix() && fromEnd.unix() > tRange.to.unix());\n\n        if (!outsideRange) {\n          regions.push({ from: fromStart.valueOf(), to: fromEnd.valueOf() });\n        }\n\n        fromStart.add(24, 'hours');\n      }\n\n      timeRegionColor = getColor(timeRegion, config.theme);\n\n      for (let j = 0; j < regions.length; j++) {\n        const r = regions[j];\n        if (timeRegion.fill) {\n          options.grid.markings.push({\n            xaxis: { from: r.from, to: r.to },\n            color: timeRegionColor.fill,\n          });\n        }\n\n        if (timeRegion.line) {\n          options.grid.markings.push({\n            xaxis: { from: r.from, to: r.from },\n            color: timeRegionColor.line,\n          });\n          options.grid.markings.push({\n            xaxis: { from: r.to, to: r.to },\n            color: timeRegionColor.line,\n          });\n        }\n      }\n    }\n  }\n\n  parseTimeRange(str: string) {\n    const timeRegex = /^([\\d]+):?(\\d{2})?/;\n    const result: any = { h: null, m: null };\n    const match = timeRegex.exec(str);\n\n    if (!match) {\n      return result;\n    }\n\n    if (match.length > 1) {\n      result.h = Number(match[1]);\n      result.m = 0;\n\n      if (match.length > 2 && match[2] !== undefined) {\n        result.m = Number(match[2]);\n      }\n\n      if (result.h > 23) {\n        result.h = 23;\n      }\n\n      if (result.m > 59) {\n        result.m = 59;\n      }\n    }\n\n    return result;\n  }\n}\n","import { each, filter, keys } from 'lodash';\nimport tinycolor from 'tinycolor2';\nimport {\n  ALERTING_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  NO_DATA_COLOR,\n  OK_COLOR,\n  PENDING_COLOR,\n  REGION_FILL_ALPHA,\n} from '@grafana/ui';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\n\nimport { AnnotationEvent } from '@grafana/data';\n\nexport class EventManager {\n  event: AnnotationEvent | null = null;\n  editorOpen = false;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range: { from: any; to: any }) {\n    if (!this.event) {\n      this.event = {};\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = range.from;\n    this.event.isRegion = false;\n\n    if (range.to) {\n      this.event.timeEnd = range.to;\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event: AnnotationEvent, elem?: any) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations: any, flotOptions: any) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types: any = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__pending: {\n        color: PENDING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time,\n            timeEnd: this.event.timeEnd,\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time,\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.type;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.type]) {\n          types[item.type] = {\n            color: item.color,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events: AnnotationEvent[]) {\n  return filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions: any[], flotOptions: { grid: { markings: any } }) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  each(regions, (region) => {\n    if (region.source) {\n      fillColor = region.color || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n","import TimeSeries from 'app/core/time_series2';\nimport { histogram } from 'd3';\n\n/**\n * Convert series into array of series values.\n * @param data Array of series\n */\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\n  const VALUE_INDEX = 0;\n  const values = [];\n\n  // Count histogam stats\n  for (let i = 0; i < dataList.length; i++) {\n    const series = dataList[i];\n    const datapoints = series.datapoints;\n    for (let j = 0; j < datapoints.length; j++) {\n      if (datapoints[j][VALUE_INDEX] !== null) {\n        values.push(datapoints[j][VALUE_INDEX]);\n      }\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert array of values into timeseries-like histogram:\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\n * @param values\n * @param bucketSize\n */\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\n  const minBound = getBucketBound(min, bucketSize);\n  const maxBound = getBucketBound(max, bucketSize);\n\n  const histGenerator = histogram()\n    .domain([minBound, maxBound])\n    .thresholds(Math.round(max - min) / bucketSize);\n\n  return histGenerator(values).map((bin) => {\n    return [bin.x0, bin.length];\n  });\n}\n\n/**\n * Convert series into array of histogram data.\n * @param data Array of series\n * @param bucketSize\n */\nexport function convertToHistogramData(\n  data: any,\n  bucketSize: number,\n  hiddenSeries: any,\n  min: number,\n  max: number\n): any[] {\n  return data.map((series: any) => {\n    const values = getSeriesValues([series]);\n    series.histogram = true;\n    if (!hiddenSeries[series.alias]) {\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\n      series.data = histogram;\n    } else {\n      series.data = [];\n    }\n    return series;\n  });\n}\n\nfunction getBucketBound(value: number, bucketSize: number): number {\n  return Math.floor(value / bucketSize) * bucketSize;\n}\n","/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes: any, level: any) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft: { max: number; min: number }, yRight: { max: number; min: number }) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft: { min: number; max: number }, yRight: { min: number; max: number }, level: number) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(\n  yLeft: { min: number; max: number },\n  yRight: { min: number; max: number },\n  level: number\n) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\ninterface AxisSide {\n  max: number;\n  min: number;\n}\n\nfunction checkCorrectAxis(axis: any[]): boolean {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes: any): boolean {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft: AxisSide, yRight: AxisSide): number {\n  if (checkTwoCross(yLeft, yRight)) {\n    const rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    const rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (checkOneSide(yLeft, yRight)) {\n    const absLeftMin = Math.abs(yLeft.min);\n    const absLeftMax = Math.abs(yLeft.max);\n    const absRightMin = Math.abs(yRight.min);\n    const absRightMax = Math.abs(yRight.max);\n    const upLeft = Math.max(absLeftMin, absLeftMax);\n    const downLeft = Math.min(absLeftMin, absLeftMax);\n    const upRight = Math.max(absRightMin, absRightMax);\n    const downRight = Math.min(absRightMin, absRightMax);\n\n    const rateLeft = downLeft !== 0 ? upLeft / downLeft : upLeft;\n    const rateRight = downRight !== 0 ? upRight / downRight : upRight;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (yLeft.min > 0 || yRight.min > 0) {\n    return yLeft.max / yRight.max;\n  } else {\n    return yLeft.min / yRight.min;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { TimeSeries } from 'app/core/core';\nimport { SeriesColorPicker, SeriesIcon } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport const LEGEND_STATS = ['min', 'max', 'avg', 'current', 'total'] as const;\nexport type LegendStat = typeof LEGEND_STATS[number];\n\nexport interface LegendLabelProps {\n  series: TimeSeries;\n  asTable?: boolean;\n  hidden?: boolean;\n  onLabelClick: (series: any, event: any) => void;\n  onColorChange: (series: any, color: string) => void;\n  onToggleAxis: (series: any) => void;\n}\n\nexport interface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ntype LegendItemProps = LegendLabelProps & LegendValuesProps;\n\ninterface LegendItemState {\n  yaxis: number;\n}\n\nexport class LegendItem extends PureComponent<LegendItemProps, LegendItemState> {\n  static defaultProps = {\n    asTable: false,\n    hidden: false,\n    onLabelClick: () => {},\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  constructor(props: LegendItemProps) {\n    super(props);\n    this.state = {\n      yaxis: this.props.series.yaxis,\n    };\n  }\n\n  onLabelClick = (e: any) => this.props.onLabelClick(this.props.series, e);\n\n  onToggleAxis = () => {\n    const yaxis = this.state.yaxis === 2 ? 1 : 2;\n    const info = { alias: this.props.series.alias, yaxis: yaxis };\n    this.setState({ yaxis: yaxis });\n    this.props.onToggleAxis(info);\n  };\n\n  onColorChange = (color: string) => {\n    this.props.onColorChange(this.props.series, color);\n    // Because of PureComponent nature it makes only shallow props comparison and changing of series.color doesn't run\n    // component re-render. In this case we can't rely on color, selected by user, because it may be overwritten\n    // by series overrides. So we need to use forceUpdate() to make sure we have proper series color.\n    this.forceUpdate();\n  };\n\n  renderLegendValues() {\n    const { series, asTable } = this.props;\n    const legendValueItems = [];\n    for (const valueName of LEGEND_STATS) {\n      // @ts-ignore\n      if (this.props[valueName]) {\n        const valueFormatted = series.formatValue(series.stats[valueName]);\n        legendValueItems.push(\n          <LegendValue\n            key={valueName}\n            valueName={valueName}\n            value={valueFormatted}\n            asTable={asTable}\n            onValueClick={this.onLabelClick}\n          />\n        );\n      }\n    }\n    return legendValueItems;\n  }\n\n  render() {\n    const { series, values, asTable, hidden } = this.props;\n    const seriesOptionClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n      'graph-legend-series--right-y': series.yaxis === 2,\n    });\n    const valueItems = values ? this.renderLegendValues() : [];\n    const seriesLabel = (\n      <LegendSeriesLabel\n        label={series.alias}\n        color={series.color}\n        yaxis={this.state.yaxis}\n        onLabelClick={this.onLabelClick}\n        onColorChange={this.onColorChange}\n        onToggleAxis={this.onToggleAxis}\n      />\n    );\n\n    if (asTable) {\n      return (\n        <tr className={`graph-legend-series ${seriesOptionClasses}`}>\n          <td>\n            <div className=\"graph-legend-series__table-name\">{seriesLabel}</div>\n          </td>\n          {valueItems}\n        </tr>\n      );\n    } else {\n      return (\n        <div className={`graph-legend-series ${seriesOptionClasses}`}>\n          {seriesLabel}\n          {valueItems}\n        </div>\n      );\n    }\n  }\n}\n\ninterface LegendSeriesLabelProps {\n  label: string;\n  color: string;\n  yaxis?: number;\n  onLabelClick: (event: any) => void;\n}\n\nclass LegendSeriesLabel extends PureComponent<LegendSeriesLabelProps & LegendSeriesIconProps> {\n  static defaultProps: Partial<LegendSeriesLabelProps> = {\n    yaxis: undefined,\n    onLabelClick: () => {},\n  };\n\n  render() {\n    const { label, color, yaxis } = this.props;\n    const { onColorChange, onToggleAxis } = this.props;\n    const onLabelClick = this.props.onLabelClick ? this.props.onLabelClick : () => {};\n\n    return [\n      <LegendSeriesIcon\n        key=\"icon\"\n        color={color}\n        yaxis={yaxis}\n        onColorChange={onColorChange}\n        onToggleAxis={onToggleAxis}\n      />,\n      <a\n        className=\"graph-legend-alias pointer\"\n        title={label}\n        key=\"label\"\n        onClick={onLabelClick}\n        aria-label={selectors.components.Panels.Visualization.Graph.Legend.legendItemAlias(label)}\n      >\n        {label}\n      </a>,\n    ];\n  }\n}\n\ninterface LegendSeriesIconProps {\n  color: string;\n  yaxis?: number;\n  onColorChange?: (color: string) => void;\n  onToggleAxis?: () => void;\n}\n\ninterface LegendSeriesIconState {\n  color: string;\n}\n\nclass LegendSeriesIcon extends PureComponent<LegendSeriesIconProps, LegendSeriesIconState> {\n  static defaultProps: Partial<LegendSeriesIconProps> = {\n    yaxis: undefined,\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  onColorChange = (color: string) => {\n    const { onColorChange } = this.props;\n    if (onColorChange) {\n      onColorChange(color);\n    }\n  };\n  render() {\n    return (\n      <SeriesColorPicker\n        yaxis={this.props.yaxis}\n        color={this.props.color}\n        onChange={this.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n        enableNamedColors\n      >\n        {({ ref, showColorPicker, hideColorPicker }) => (\n          <SeriesIcon\n            color={this.props.color}\n            ref={ref}\n            onClick={showColorPicker}\n            onMouseLeave={hideColorPicker}\n            className=\"graph-legend-icon\"\n          />\n        )}\n      </SeriesColorPicker>\n    );\n  }\n}\n\ninterface LegendValueProps {\n  value: string;\n  valueName: string;\n  asTable?: boolean;\n  onValueClick?: (event: any) => void;\n}\n\nfunction LegendValue({ value, valueName, asTable, onValueClick }: LegendValueProps) {\n  if (asTable) {\n    return (\n      <td className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n        {value}\n      </td>\n    );\n  }\n  return (\n    <div className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n      {value}\n    </div>\n  );\n}\n","import { sortBy as _sortBy } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { TimeSeries } from 'app/core/core';\nimport { CustomScrollbar, Icon } from '@grafana/ui';\nimport { LegendStat, LegendItem, LEGEND_STATS } from './LegendSeriesItem';\n\ninterface LegendProps {\n  seriesList: TimeSeries[];\n  optionalClass?: string;\n}\n\ninterface LegendEventHandlers {\n  onToggleSeries?: (hiddenSeries: any) => void;\n  onToggleSort?: (sortBy: any, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendComponentEventHandlers {\n  onToggleSeries?: (series: TimeSeries, event: any) => void;\n  onToggleSort?: (sortBy: LegendStat | undefined, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendDisplayProps {\n  hiddenSeries: any;\n  hideEmpty?: boolean;\n  hideZero?: boolean;\n  alignAsTable?: boolean;\n  rightSide?: boolean;\n  sideWidth?: number;\n}\n\ninterface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ninterface LegendSortProps {\n  sort?: LegendStat;\n  sortDesc?: boolean;\n}\n\nexport type GraphLegendProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendEventHandlers;\nexport type LegendComponentProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendComponentEventHandlers;\n\ninterface LegendState {\n  hiddenSeries: { [seriesAlias: string]: boolean };\n}\n\nexport class GraphLegend extends PureComponent<GraphLegendProps, LegendState> {\n  static defaultProps: Partial<GraphLegendProps> = {\n    values: false,\n    min: false,\n    max: false,\n    avg: false,\n    current: false,\n    total: false,\n    alignAsTable: false,\n    rightSide: false,\n    sort: undefined,\n    sortDesc: false,\n    optionalClass: '',\n    onToggleSeries: () => {},\n    onToggleSort: () => {},\n    onToggleAxis: () => {},\n    onColorChange: () => {},\n  };\n\n  constructor(props: GraphLegendProps) {\n    super(props);\n    this.state = {\n      hiddenSeries: this.props.hiddenSeries,\n    };\n  }\n\n  sortLegend() {\n    let seriesList: TimeSeries[] = [...this.props.seriesList] || [];\n    const sortBy = this.props.sort;\n    if (sortBy && this.props[sortBy] && this.props.alignAsTable) {\n      seriesList = _sortBy(seriesList, (series) => {\n        let sort = series.stats[sortBy];\n        if (sort === null) {\n          sort = -Infinity;\n        }\n        return sort;\n      }) as TimeSeries[];\n      if (this.props.sortDesc) {\n        seriesList = seriesList.reverse();\n      }\n    }\n    return seriesList;\n  }\n\n  onToggleSeries = (series: TimeSeries, event: any) => {\n    if (!this.props.onToggleSeries) {\n      return;\n    }\n\n    let hiddenSeries = { ...this.state.hiddenSeries };\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (hiddenSeries[series.alias]) {\n        delete hiddenSeries[series.alias];\n      } else {\n        hiddenSeries[series.alias] = true;\n      }\n    } else {\n      hiddenSeries = this.toggleSeriesExclusiveMode(series);\n    }\n    this.setState({ hiddenSeries: hiddenSeries });\n    this.props.onToggleSeries(hiddenSeries);\n  };\n\n  toggleSeriesExclusiveMode(series: TimeSeries) {\n    const hiddenSeries = { ...this.state.hiddenSeries };\n\n    if (hiddenSeries[series.alias]) {\n      delete hiddenSeries[series.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = this.props.seriesList.every((value) => {\n      if (value.alias === series.alias) {\n        return true;\n      }\n\n      return hiddenSeries[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      this.props.seriesList.forEach((value) => {\n        delete hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      this.props.seriesList.forEach((value) => {\n        if (value.alias === series.alias) {\n          return;\n        }\n\n        hiddenSeries[value.alias] = true;\n      });\n    }\n\n    return hiddenSeries;\n  }\n\n  render() {\n    const {\n      optionalClass,\n      rightSide,\n      sideWidth,\n      sort,\n      sortDesc,\n      hideEmpty,\n      hideZero,\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total,\n    } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    const hiddenSeries = this.state.hiddenSeries;\n    const seriesHideProps = { hideEmpty, hideZero };\n    const sortProps = { sort, sortDesc };\n    const seriesList = this.sortLegend().filter((series) => !series.hideFromLegend(seriesHideProps));\n    const legendClass = `${this.props.alignAsTable ? 'graph-legend-table' : ''} ${optionalClass}`;\n\n    // Set min-width if side style and there is a value, otherwise remove the CSS property\n    // Set width so it works with IE11\n    const width: any = rightSide && sideWidth ? sideWidth : undefined;\n    const ieWidth: any = rightSide && sideWidth ? sideWidth - 1 : undefined;\n    const legendStyle: React.CSSProperties = {\n      minWidth: width,\n      width: ieWidth,\n    };\n\n    const legendProps: LegendComponentProps = {\n      seriesList: seriesList,\n      hiddenSeries: hiddenSeries,\n      onToggleSeries: this.onToggleSeries,\n      onToggleAxis: this.props.onToggleAxis,\n      onToggleSort: this.props.onToggleSort,\n      onColorChange: this.props.onColorChange,\n      ...seriesValuesProps,\n      ...sortProps,\n    };\n\n    return (\n      <div className={`graph-legend-content ${legendClass}`} style={legendStyle}>\n        {this.props.alignAsTable ? <LegendTable {...legendProps} /> : <LegendSeriesList {...legendProps} />}\n      </div>\n    );\n  }\n}\n\nclass LegendSeriesList extends PureComponent<LegendComponentProps> {\n  render() {\n    const { seriesList, hiddenSeries, values, min, max, avg, current, total } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    return seriesList.map((series, i) => (\n      <LegendItem\n        // This trick required because TimeSeries.id is not unique (it's just TimeSeries.alias).\n        // In future would be good to make id unique across the series list.\n        key={`${series.id}-${i}`}\n        series={series}\n        hidden={hiddenSeries[series.alias]}\n        {...seriesValuesProps}\n        onLabelClick={this.props.onToggleSeries}\n        onColorChange={this.props.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n      />\n    ));\n  }\n}\n\nclass LegendTable extends PureComponent<Partial<LegendComponentProps>> {\n  onToggleSort = (stat: LegendStat) => {\n    if (!this.props.onToggleSort) {\n      return;\n    }\n\n    let sortDesc = this.props.sortDesc;\n    let sortBy = this.props.sort;\n    if (stat !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = stat;\n    }\n    this.props.onToggleSort(sortBy, sortDesc);\n  };\n\n  render() {\n    const seriesList = this.props.seriesList;\n    const { values, min, max, avg, current, total, sort, sortDesc, hiddenSeries } = this.props;\n    const seriesValuesProps: any = { values, min, max, avg, current, total };\n\n    if (!seriesList) {\n      return null;\n    }\n\n    return (\n      <table>\n        <colgroup>\n          <col style={{ width: '100%' }} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th style={{ textAlign: 'left' }} />\n            {LEGEND_STATS.map(\n              (statName) =>\n                seriesValuesProps[statName] && (\n                  <LegendTableHeaderItem\n                    key={statName}\n                    statName={statName}\n                    sort={sort}\n                    sortDesc={sortDesc}\n                    onClick={this.onToggleSort}\n                  />\n                )\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {seriesList &&\n            seriesList.map((series, i) => (\n              <LegendItem\n                key={`${series.id}-${i}`}\n                asTable={true}\n                series={series}\n                hidden={hiddenSeries[series.alias]}\n                onLabelClick={this.props.onToggleSeries}\n                onColorChange={this.props.onColorChange}\n                onToggleAxis={this.props.onToggleAxis}\n                {...seriesValuesProps}\n              />\n            ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\ninterface LegendTableHeaderProps {\n  statName: LegendStat;\n  onClick?: (statName: LegendStat) => void;\n}\n\nclass LegendTableHeaderItem extends PureComponent<LegendTableHeaderProps & LegendSortProps> {\n  onClick = () => {\n    if (this.props.onClick) {\n      this.props.onClick(this.props.statName);\n    }\n  };\n\n  render() {\n    const { statName, sort, sortDesc } = this.props;\n    return (\n      <th className=\"pointer\" onClick={this.onClick}>\n        {statName}\n        {sort === statName && <Icon name={sortDesc ? 'angle-down' : 'angle-up'} />}\n      </th>\n    );\n  }\n}\n\nexport class Legend extends PureComponent<GraphLegendProps> {\n  render() {\n    return (\n      <CustomScrollbar hideHorizontalTrack>\n        <GraphLegend {...this.props} />\n      </CustomScrollbar>\n    );\n  }\n}\n\nexport default Legend;\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport { clone, find, flatten, isUndefined, map, max as _max, min as _min, sortBy as _sortBy, toNumber } from 'lodash';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { updateLegendValues } from 'app/core/core';\nimport { coreModule } from 'app/angular/core_module';\nimport GraphTooltip from './graph_tooltip';\nimport { ThresholdManager } from './threshold_manager';\nimport { TimeRegionManager } from './time_region_manager';\nimport { EventManager } from './event_manager';\nimport { convertToHistogramData } from './histogram';\nimport { alignYLevel } from './align_yaxes';\nimport config from 'app/core/config';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GraphLegendProps, Legend } from './Legend/Legend';\n\nimport { GraphCtrl } from './module';\nimport { graphTickFormatter, graphTimeFormat, IconName, MenuItemProps, MenuItemsGroup } from '@grafana/ui';\nimport { provideTheme } from 'app/core/utils/ConfigProvider';\nimport {\n  DataFrame,\n  DataFrameView,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  FieldDisplay,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFlotPairsConstant,\n  getTimeField,\n  getValueFormat,\n  hasLinks,\n  LegacyEventHandler,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  LegacyGraphHoverEventPayload,\n  LinkModelSupplier,\n  PanelEvents,\n  toUtc,\n} from '@grafana/data';\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport { getFieldLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { DashboardModel } from '../../../features/dashboard/state';\nimport { isLegacyGraphHoverEvent } from './utils';\n\nconst LegendWithThemeProvider = provideTheme(Legend);\n\nclass GraphElement {\n  ctrl: GraphCtrl;\n  contextMenu: GraphContextMenuCtrl;\n  tooltip: any;\n  dashboard: DashboardModel;\n  annotations: object[];\n  panel: any;\n  plot: any;\n  sortedSeries?: any[];\n  data: any[] = [];\n  panelWidth: number;\n  eventManager: EventManager;\n  thresholdManager: ThresholdManager;\n  timeRegionManager: TimeRegionManager;\n  declare legendElem: HTMLElement;\n\n  constructor(\n    private scope: any,\n    private elem: JQuery & {\n      bind(eventType: string, handler: (eventObject: JQueryEventObject, ...args: any[]) => any): JQuery; // need to extend with Plot\n    },\n    private timeSrv: TimeSrv\n  ) {\n    this.ctrl = scope.ctrl;\n    this.contextMenu = scope.ctrl.contextMenuCtrl;\n    this.dashboard = this.ctrl.dashboard;\n    this.panel = this.ctrl.panel;\n    this.annotations = [];\n\n    this.panelWidth = 0;\n    this.eventManager = new EventManager(this.ctrl);\n    this.thresholdManager = new ThresholdManager(this.ctrl);\n    this.timeRegionManager = new TimeRegionManager(this.ctrl);\n    // @ts-ignore\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\n      return this.sortedSeries;\n    });\n\n    // panel events\n    this.ctrl.events.on(PanelEvents.panelTeardown, this.onPanelTeardown.bind(this));\n    this.ctrl.events.on(PanelEvents.render, this.onRender.bind(this));\n\n    // global events\n    // Using old way here to use the scope unsubscribe model as the new $on function does not take scope\n    this.ctrl.dashboard.events.on(LegacyGraphHoverEvent.type, this.onGraphHover.bind(this), this.scope);\n    this.ctrl.dashboard.events.on(LegacyGraphHoverClearEvent.type, this.onGraphHoverClear.bind(this), this.scope);\n\n    this.ctrl.dashboard.events.on(DataHoverEvent.type, this.onGraphHover.bind(this), this.scope);\n    this.ctrl.dashboard.events.on(DataHoverClearEvent.type, this.onGraphHoverClear.bind(this), this.scope);\n\n    // plot events\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\n\n    // get graph legend element\n    if (this.elem && this.elem.parent) {\n      this.legendElem = this.elem.parent().find('.graph-legend')[0];\n    }\n  }\n\n  onRender(renderData: any[]) {\n    this.data = renderData || this.data;\n    if (!this.data) {\n      return;\n    }\n\n    this.annotations = this.ctrl.annotations || [];\n    this.buildFlotPairs(this.data);\n    const graphHeight = this.ctrl.height;\n    updateLegendValues(this.data, this.panel, graphHeight);\n\n    if (!this.panel.legend.show) {\n      if (this.legendElem.hasChildNodes()) {\n        ReactDOM.unmountComponentAtNode(this.legendElem);\n      }\n      this.renderPanel();\n      return;\n    }\n\n    const { values, min, max, avg, current, total } = this.panel.legend;\n    const { alignAsTable, rightSide, sideWidth, sort, sortDesc, hideEmpty, hideZero } = this.panel.legend;\n    const legendOptions = { alignAsTable, rightSide, sideWidth, sort, sortDesc, hideEmpty, hideZero };\n    const valueOptions = { values, min, max, avg, current, total };\n    const legendProps: GraphLegendProps = {\n      seriesList: this.data,\n      hiddenSeries: this.ctrl.hiddenSeries,\n      ...legendOptions,\n      ...valueOptions,\n      onToggleSeries: this.ctrl.onToggleSeries,\n      onToggleSort: this.ctrl.onToggleSort,\n      onColorChange: this.ctrl.onColorChange,\n      onToggleAxis: this.ctrl.onToggleAxis,\n    };\n\n    const legendReactElem = React.createElement(LegendWithThemeProvider, legendProps);\n    ReactDOM.render(legendReactElem, this.legendElem, () => this.renderPanel());\n  }\n\n  onGraphHover(evt: LegacyGraphHoverEventPayload | DataHoverPayload) {\n    // ignore other graph hover events if shared tooltip is disabled\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\n      return;\n    }\n\n    if (isLegacyGraphHoverEvent(evt)) {\n      // ignore if we are the emitter\n      if (!this.plot || evt.panel?.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\n        return;\n      }\n\n      this.tooltip.show(evt.pos);\n    }\n\n    // DataHoverEvent can come from multiple panels that doesn't include x position\n    if (!evt.point?.time) {\n      return;\n    }\n\n    this.tooltip.show({ x: evt.point.time, panelRelY: evt.point.panelRelY ?? 1 });\n  }\n\n  onPanelTeardown() {\n    if (this.plot) {\n      this.plot.destroy();\n      this.plot = null;\n    }\n\n    this.tooltip.destroy();\n    this.elem.off();\n    this.elem.remove();\n\n    ReactDOM.unmountComponentAtNode(this.legendElem);\n  }\n\n  onGraphHoverClear(handler: LegacyEventHandler<any>) {\n    if (this.plot) {\n      this.tooltip.clear(this.plot);\n    }\n  }\n\n  onPlotSelected(event: JQueryEventObject, ranges: any) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      this.plot.clearSelection();\n      return;\n    }\n\n    if ((ranges.ctrlKey || ranges.metaKey) && this.dashboard.canAddAnnotations()) {\n      // Add annotation\n      setTimeout(() => {\n        this.eventManager.updateTime(ranges.xaxis);\n      }, 100);\n    } else {\n      this.scope.$apply(() => {\n        this.timeSrv.setTime({\n          from: toUtc(ranges.xaxis.from),\n          to: toUtc(ranges.xaxis.to),\n        });\n      });\n    }\n  }\n\n  getContextMenuItemsSupplier = (\n    flotPosition: { x: number; y: number },\n    linksSupplier?: LinkModelSupplier<FieldDisplay>\n  ): (() => MenuItemsGroup[]) => {\n    return () => {\n      // Fixed context menu items\n      const items: MenuItemsGroup[] = this.dashboard.canAddAnnotations()\n        ? [\n            {\n              items: [\n                {\n                  label: 'Add annotation',\n                  ariaLabel: 'Add annotation',\n                  icon: 'comment-alt',\n                  onClick: () => this.eventManager.updateTime({ from: flotPosition.x, to: null }),\n                },\n              ],\n            },\n          ]\n        : [];\n\n      if (!linksSupplier) {\n        return items;\n      }\n\n      const dataLinks = [\n        {\n          items: linksSupplier.getLinks(this.panel.replaceVariables).map<MenuItemProps>((link) => {\n            return {\n              label: link.title,\n              ariaLabel: link.title,\n              url: link.href,\n              target: link.target,\n              icon: `${link.target === '_self' ? 'link' : 'external-link-alt'}` as IconName,\n              onClick: link.onClick,\n            };\n          }),\n        },\n      ];\n\n      return [...items, ...dataLinks];\n    };\n  };\n\n  onPlotClick(event: JQueryEventObject, pos: any, item: any) {\n    const scrollContextElement = this.elem.closest('.view') ? this.elem.closest('.view').get()[0] : null;\n    const contextMenuSourceItem = item;\n\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      return;\n    }\n\n    if (pos.ctrlKey || pos.metaKey) {\n      // Skip if range selected (added in \"plotselected\" event handler)\n      if (pos.x !== pos.x1) {\n        return;\n      }\n\n      // skip if dashboard is not saved yet (exists in db) or user cannot edit\n      if (!this.dashboard.id || !this.dashboard.canAddAnnotations()) {\n        return;\n      }\n\n      setTimeout(() => {\n        this.eventManager.updateTime({ from: pos.x, to: null });\n      }, 100);\n      return;\n    } else {\n      this.tooltip.clear(this.plot);\n      let linksSupplier: LinkModelSupplier<FieldDisplay> | undefined;\n\n      if (item) {\n        // pickup y-axis index to know which field's config to apply\n        const yAxisConfig = this.panel.yaxes[item.series.yaxis.n === 2 ? 1 : 0];\n        const dataFrame = this.ctrl.dataList[item.series.dataFrameIndex];\n        const field = dataFrame.fields[item.series.fieldIndex];\n        const dataIndex = this.getDataIndexWithNullValuesCorrection(item, dataFrame);\n\n        let links: any[] = this.panel.options.dataLinks || [];\n        const hasLinksValue = hasLinks(field);\n        if (hasLinksValue) {\n          // Append the configured links to the panel datalinks\n          links = [...links, ...field.config.links!];\n        }\n        const fieldConfig = {\n          decimals: yAxisConfig.decimals,\n          links,\n        };\n        const fieldDisplay = getDisplayProcessor({\n          field: { config: fieldConfig, type: FieldType.number },\n          theme: config.theme2,\n          timeZone: this.dashboard.getTimezone(),\n        })(field.values.get(dataIndex));\n        linksSupplier = links.length\n          ? getFieldLinksSupplier({\n              display: fieldDisplay,\n              name: field.name,\n              view: new DataFrameView(dataFrame),\n              rowIndex: dataIndex,\n              colIndex: item.series.fieldIndex,\n              field: fieldConfig,\n              hasLinks: hasLinksValue,\n            })\n          : undefined;\n      }\n\n      this.scope.$apply(() => {\n        // Setting nearest CustomScrollbar element as a scroll context for graph context menu\n        this.contextMenu.setScrollContextElement(scrollContextElement);\n        this.contextMenu.setSource(contextMenuSourceItem);\n        this.contextMenu.setMenuItemsSupplier(this.getContextMenuItemsSupplier(pos, linksSupplier) as any);\n        this.contextMenu.toggleMenu(pos);\n      });\n    }\n  }\n\n  getDataIndexWithNullValuesCorrection(item: any, dataFrame: DataFrame): number {\n    /** This is one added to handle the scenario where we have null values in\n     *  the time series data and the: \"visualization options -> null value\"\n     *  set to \"connected\". In this scenario we will get the wrong dataIndex.\n     *\n     *  https://github.com/grafana/grafana/issues/22651\n     */\n    const { datapoint, dataIndex } = item;\n\n    if (!Array.isArray(datapoint) || datapoint.length === 0) {\n      return dataIndex;\n    }\n\n    const ts = datapoint[0];\n    const { timeField } = getTimeField(dataFrame);\n\n    if (!timeField || !timeField.values) {\n      return dataIndex;\n    }\n\n    const field = timeField.values.get(dataIndex);\n\n    if (field === ts) {\n      return dataIndex;\n    }\n\n    const correctIndex = timeField.values.toArray().findIndex((value) => value === ts);\n    return correctIndex > -1 ? correctIndex : dataIndex;\n  }\n\n  shouldAbortRender() {\n    if (!this.data) {\n      return true;\n    }\n\n    if (this.panelWidth === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  drawHook(plot: any) {\n    // add left axis labels\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[0].label)\n        .appendTo(this.elem);\n    }\n\n    // add right axis labels\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[1].label)\n        .appendTo(this.elem);\n    }\n\n    const { dataWarning } = this.ctrl;\n    if (dataWarning) {\n      const msg = $(`<div class=\"datapoints-warning flot-temp-elem\">${dataWarning.title}</div>`);\n      if (dataWarning.action) {\n        $(`<button class=\"btn btn-secondary\">${dataWarning.actionText}</button>`)\n          .click(dataWarning.action)\n          .appendTo(msg);\n      }\n      msg.appendTo(this.elem);\n    }\n    this.thresholdManager.draw(plot);\n    this.timeRegionManager.draw(plot);\n  }\n\n  processOffsetHook(plot: any, gridMargin: { left: number; right: number }) {\n    const left = this.panel.yaxes[0];\n    const right = this.panel.yaxes[1];\n    if (left.show && left.label) {\n      gridMargin.left = 20;\n    }\n    if (right.show && right.label) {\n      gridMargin.right = 20;\n    }\n\n    // apply y-axis min/max options\n    const yaxis = plot.getYAxes();\n    for (let i = 0; i < yaxis.length; i++) {\n      const axis: any = yaxis[i];\n      const panelOptions = this.panel.yaxes[i];\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n    }\n  }\n\n  processRangeHook(plot: any) {\n    const yAxes = plot.getYAxes();\n    const align = this.panel.yaxis.align || false;\n\n    if (yAxes.length > 1 && align === true) {\n      const level = this.panel.yaxis.alignLevel || 0;\n      alignYLevel(yAxes, parseFloat(level));\n    }\n  }\n\n  // Series could have different timeSteps,\n  // let's find the smallest one so that bars are correctly rendered.\n  // In addition, only take series which are rendered as bars for this.\n  getMinTimeStepOfSeries(data: any[]) {\n    let min = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].stats.timeStep) {\n        continue;\n      }\n      if (this.panel.bars) {\n        if (data[i].bars && data[i].bars.show === false) {\n          continue;\n        }\n      } else {\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n          continue;\n        }\n      }\n\n      if (data[i].stats.timeStep < min) {\n        min = data[i].stats.timeStep;\n      }\n    }\n\n    return min;\n  }\n\n  // Function for rendering panel\n  renderPanel() {\n    this.panelWidth = this.elem.width() ?? 0;\n\n    if (this.shouldAbortRender()) {\n      return;\n    }\n\n    // give space to alert editing\n    this.thresholdManager.prepare(this.elem, this.data);\n\n    // un-check dashes if lines are unchecked\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\n\n    // Populate element\n    const options: any = this.buildFlotOptions(this.panel);\n    this.prepareXAxis(options, this.panel);\n    this.configureYAxisOptions(this.data, options);\n    this.thresholdManager.addFlotOptions(options, this.panel);\n    this.timeRegionManager.addFlotOptions(options, this.panel);\n    this.eventManager.addFlotEvents(this.annotations, options);\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\n    this.callPlot(options, true);\n  }\n\n  buildFlotPairs(data: any) {\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\n\n      if (series.transform === 'constant') {\n        series.data = getFlotPairsConstant(series.data, this.ctrl.range!);\n      }\n\n      // if hidden remove points and disable stack\n      if (this.ctrl.hiddenSeries[series.alias]) {\n        series.data = [];\n        series.stack = false;\n      }\n    }\n  }\n\n  prepareXAxis(options: any, panel: any) {\n    switch (panel.xaxis.mode) {\n      case 'series': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n\n        for (let i = 0; i < this.data.length; i++) {\n          const series = this.data[i];\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n        }\n\n        this.addXSeriesAxis(options);\n        break;\n      }\n      case 'histogram': {\n        let bucketSize: number;\n\n        if (this.data.length) {\n          let histMin = _min(map(this.data, (s) => s.stats.min));\n          let histMax = _max(map(this.data, (s) => s.stats.max));\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\n          if (panel.xaxis.min != null) {\n            const isInvalidXaxisMin = tickStep(panel.xaxis.min, histMax, ticks) <= 0;\n            histMin = isInvalidXaxisMin ? histMin : panel.xaxis.min;\n          }\n          if (panel.xaxis.max != null) {\n            const isInvalidXaxisMax = tickStep(histMin, panel.xaxis.max, ticks) <= 0;\n            histMax = isInvalidXaxisMax ? histMax : panel.xaxis.max;\n          }\n          bucketSize = tickStep(histMin, histMax, ticks);\n          options.series.bars.barWidth = bucketSize * 0.8;\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\n        } else {\n          bucketSize = 0;\n        }\n\n        this.addXHistogramAxis(options, bucketSize);\n        break;\n      }\n      case 'table': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n        this.addXTableAxis(options);\n        break;\n      }\n      default: {\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\n        this.addTimeAxis(options);\n        break;\n      }\n    }\n  }\n\n  callPlot(options: any, incrementRenderCounter: boolean) {\n    try {\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\n      if (this.ctrl.renderError) {\n        delete this.ctrl.error;\n      }\n    } catch (e) {\n      console.error('flotcharts error', e);\n      this.ctrl.error = e.message || 'Render Error';\n      this.ctrl.renderError = true;\n    }\n\n    if (incrementRenderCounter) {\n      this.ctrl.renderingCompleted();\n    }\n  }\n\n  buildFlotOptions(panel: any) {\n    let gridColor = '#c8c8c8';\n    if (config.bootData.user.lightTheme === true) {\n      gridColor = '#a1a1a1';\n    }\n    const stack = panel.stack ? true : null;\n    const options: any = {\n      hooks: {\n        draw: [this.drawHook.bind(this)],\n        processOffset: [this.processOffsetHook.bind(this)],\n        processRange: [this.processRangeHook.bind(this)],\n      },\n      legend: { show: false },\n      series: {\n        stackpercent: panel.stack ? panel.percentage : false,\n        stack: panel.percentage ? null : stack,\n        lines: {\n          show: panel.lines,\n          zero: false,\n          fill: this.translateFillOption(panel.fill),\n          fillColor: this.getFillGradient(panel.fillGradient),\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\n          steps: panel.steppedLine,\n        },\n        dashes: {\n          show: panel.dashes,\n          lineWidth: panel.linewidth,\n          dashLength: [panel.dashLength, panel.spaceLength],\n        },\n        bars: {\n          show: panel.bars,\n          fill: 1,\n          barWidth: 1,\n          zero: false,\n          lineWidth: 0,\n        },\n        points: {\n          show: panel.points,\n          fill: 1,\n          fillColor: false,\n          radius: panel.points ? panel.pointradius : 2,\n        },\n        shadowSize: 0,\n      },\n      yaxes: [],\n      xaxis: {},\n      grid: {\n        minBorderMargin: 0,\n        markings: [],\n        backgroundColor: null,\n        borderWidth: 0,\n        hoverable: true,\n        clickable: true,\n        color: gridColor,\n        margin: { left: 0, right: 0 },\n        labelMarginX: 0,\n        mouseActiveRadius: 30,\n      },\n      selection: {\n        mode: 'x',\n        color: '#666',\n      },\n      crosshair: {\n        mode: 'x',\n      },\n    };\n    return options;\n  }\n\n  sortSeries(series: any, panel: any) {\n    const sortBy = panel.legend.sort;\n    const sortOrder = panel.legend.sortDesc;\n    const haveSortBy = sortBy !== null && sortBy !== undefined && panel.legend[sortBy];\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder && panel.legend.alignAsTable;\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n    if (shouldSortBy) {\n      return _sortBy(series, (s) => s.stats[sortBy] * sortDesc);\n    } else {\n      return _sortBy(series, (s) => s.zindex);\n    }\n  }\n\n  getFillGradient(amount: number) {\n    if (!amount) {\n      return null;\n    }\n\n    return {\n      colors: [{ opacity: 0.0 }, { opacity: amount / 10 }],\n    };\n  }\n\n  translateFillOption(fill: number) {\n    if (this.panel.percentage && this.panel.stack) {\n      return fill === 0 ? 0.001 : fill / 10;\n    } else {\n      return fill / 10;\n    }\n  }\n\n  addTimeAxis(options: any) {\n    const ticks = this.panelWidth / 100;\n    const min = isUndefined(this.ctrl.range!.from) ? null : this.ctrl.range!.from.valueOf();\n    const max = isUndefined(this.ctrl.range!.to) ? null : this.ctrl.range!.to.valueOf();\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: 'time',\n      min: min,\n      max: max,\n      label: 'Datetime',\n      ticks: ticks,\n      timeformat: graphTimeFormat(ticks, min, max),\n      tickFormatter: graphTickFormatter,\n    };\n  }\n\n  addXSeriesAxis(options: any) {\n    const ticks = map(this.data, (series, index) => {\n      return [index + 1, series.alias];\n    });\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  addXHistogramAxis(options: any, bucketSize: number) {\n    let ticks: number | number[];\n    let min: number | undefined;\n    let max: number | undefined;\n\n    const defaultTicks = this.panelWidth / 50;\n\n    if (this.data.length && bucketSize) {\n      const tickValues = [];\n\n      for (const d of this.data) {\n        for (const point of d.data) {\n          tickValues[point[0]] = true;\n        }\n      }\n\n      ticks = Object.keys(tickValues).map((v) => Number(v));\n      min = _min(ticks)!;\n      max = _max(ticks)!;\n\n      // Adjust tick step\n      let tickStep = bucketSize;\n      let ticksNum = Math.floor((max - min) / tickStep);\n      while (ticksNum > defaultTicks) {\n        tickStep = tickStep * 2;\n        ticksNum = Math.ceil((max - min) / tickStep);\n      }\n\n      // Expand ticks for pretty view\n      min = Math.floor(min / tickStep) * tickStep;\n      // 1.01 is 101% - ensure we have enough space for last bar\n      max = Math.ceil((max * 1.01) / tickStep) * tickStep;\n\n      ticks = [];\n      for (let i = min; i <= max; i += tickStep) {\n        ticks.push(i);\n      }\n    } else {\n      // Set defaults if no data\n      ticks = defaultTicks / 2;\n      min = 0;\n      max = 1;\n    }\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: min,\n      max: max,\n      label: 'Histogram',\n      ticks: ticks,\n    };\n\n    // Use 'short' format for histogram values\n    this.configureAxisMode(options.xaxis, 'short', null);\n  }\n\n  addXTableAxis(options: any) {\n    let ticks = map(this.data, (series, seriesIndex) => {\n      return map(series.datapoints, (point, pointIndex) => {\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n        return [tickIndex + 1, point[1]];\n      });\n    });\n    // @ts-ignore, potential bug? is this flattenDeep?\n    ticks = flatten(ticks, true);\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  configureYAxisOptions(data: any, options: any) {\n    const defaults = {\n      position: 'left',\n      show: this.panel.yaxes[0].show,\n      index: 1,\n      logBase: this.panel.yaxes[0].logBase || 1,\n      min: this.parseNumber(this.panel.yaxes[0].min),\n      max: this.parseNumber(this.panel.yaxes[0].max),\n      tickDecimals: this.panel.yaxes[0].decimals,\n    };\n\n    options.yaxes.push(defaults);\n\n    if (find(data, { yaxis: 2 })) {\n      const secondY = clone(defaults);\n      secondY.index = 2;\n      secondY.show = this.panel.yaxes[1].show;\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\n      secondY.position = 'right';\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\n      options.yaxes.push(secondY);\n\n      this.applyLogScale(options.yaxes[1], data);\n      this.configureAxisMode(\n        options.yaxes[1],\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format,\n        this.panel.yaxes[1].decimals\n      );\n    }\n    this.applyLogScale(options.yaxes[0], data);\n    this.configureAxisMode(\n      options.yaxes[0],\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format,\n      this.panel.yaxes[0].decimals\n    );\n  }\n\n  parseNumber(value: any) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    return toNumber(value);\n  }\n\n  applyLogScale(axis: any, data: any) {\n    if (axis.logBase === 1) {\n      return;\n    }\n\n    const minSetToZero = axis.min === 0;\n\n    if (axis.min < Number.MIN_VALUE) {\n      axis.min = null;\n    }\n    if (axis.max < Number.MIN_VALUE) {\n      axis.max = null;\n    }\n\n    let series, i;\n    let max = axis.max,\n      min = axis.min;\n\n    for (i = 0; i < data.length; i++) {\n      series = data[i];\n      if (series.yaxis === axis.index) {\n        if (!max || max < series.stats.max) {\n          max = series.stats.max;\n        }\n        if (!min || min > series.stats.logmin) {\n          min = series.stats.logmin;\n        }\n      }\n    }\n\n    axis.transform = (v: number) => {\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n    };\n    axis.inverseTransform = (v: any) => {\n      return Math.pow(axis.logBase, v);\n    };\n\n    if (!max && !min) {\n      max = axis.inverseTransform(+2);\n      min = axis.inverseTransform(-2);\n    } else if (!max) {\n      max = min * axis.inverseTransform(+4);\n    } else if (!min) {\n      min = max * axis.inverseTransform(-4);\n    }\n\n    if (axis.min) {\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n    } else {\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n    }\n    if (axis.max) {\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n    } else {\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n    }\n\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n      return;\n    }\n\n    if (Number.isFinite(min) && Number.isFinite(max)) {\n      if (minSetToZero) {\n        axis.min = 0.1;\n        min = 1;\n      }\n\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\n      if (minSetToZero) {\n        axis.ticks.unshift(0.1);\n      }\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n        axis.max = axis.ticks[axis.ticks.length - 1];\n      }\n    } else {\n      axis.ticks = [1, 2];\n      delete axis.min;\n      delete axis.max;\n    }\n  }\n\n  generateTicksForLogScaleYAxis(min: any, max: number, logBase: number) {\n    let ticks = [];\n\n    let nextTick;\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n      ticks.push(nextTick);\n    }\n\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\n    const numTicks = ticks.length;\n    if (numTicks > maxNumTicks) {\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n      ticks = [];\n\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n        ticks.push(nextTick);\n      }\n    }\n\n    return ticks;\n  }\n\n  configureAxisMode(\n    axis: { tickFormatter: (val: any, axis: any) => string },\n    format: string,\n    decimals?: number | null\n  ) {\n    axis.tickFormatter = (val, axis) => {\n      const formatter = getValueFormat(format);\n\n      if (!formatter) {\n        throw new Error(`Unit '${format}' is not supported`);\n      }\n\n      return formattedValueToString(formatter(val, decimals));\n    };\n  }\n}\n\n/** @ngInject */\nfunction graphDirective(timeSrv: TimeSrv, popoverSrv: any, contextSrv: ContextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: (scope: any, elem: JQuery) => {\n      return new GraphElement(scope, elem, timeSrv);\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\nexport { GraphElement, graphDirective };\n","import {\n  AbsoluteTimeRange,\n  DataFrame,\n  FieldType,\n  LegacyGraphHoverEventPayload,\n  reduceField,\n  ReducerID,\n} from '@grafana/data';\n\n/**\n * Find the min and max time that covers all data\n */\nexport function getDataTimeRange(frames: DataFrame[]): AbsoluteTimeRange | undefined {\n  const range: AbsoluteTimeRange = {\n    from: Number.MAX_SAFE_INTEGER,\n    to: Number.MIN_SAFE_INTEGER,\n  };\n  let found = false;\n  const reducers = [ReducerID.min, ReducerID.max];\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.time) {\n        const calcs = reduceField({ field, reducers });\n        range.from = Math.min(range.from, calcs[ReducerID.min]);\n        range.to = Math.max(range.to, calcs[ReducerID.max]);\n        found = true;\n      }\n    }\n  }\n  return found ? range : undefined;\n}\n\n// Check wether event is LegacyGraphHoverEvent\nexport function isLegacyGraphHoverEvent(event: any): event is LegacyGraphHoverEventPayload {\n  return event.hasOwnProperty('pos');\n}\n","import { map, each, isUndefined } from 'lodash';\nimport coreModule from 'app/angular/core_module';\nimport { textUtil } from '@grafana/data';\n\n/** @ngInject */\nexport function SeriesOverridesCtrl($scope: any, $element: JQuery, popoverSrv: any) {\n  $scope.overrideMenu = [];\n  $scope.currentOverrides = [];\n  $scope.override = $scope.override || {};\n  $scope.colorPickerModel = {};\n\n  $scope.addOverrideOption = (name: string, propertyName: string, values: any) => {\n    const option = {\n      text: name,\n      propertyName: propertyName,\n      index: $scope.overrideMenu.length,\n      values,\n      submenu: map(values, (value) => {\n        return { text: String(value), value: value };\n      }),\n    };\n\n    $scope.overrideMenu.push(option);\n  };\n\n  $scope.setOverride = (item: { propertyName: string }, subItem: { value: any }) => {\n    // handle color overrides\n    if (item.propertyName === 'color') {\n      $scope.openColorSelector($scope.override['color']);\n      return;\n    }\n\n    $scope.override[item.propertyName] = subItem.value;\n\n    // automatically disable lines for this series and the fill below to series\n    // can be removed by the user if they still want lines\n    if (item.propertyName === 'fillBelowTo') {\n      $scope.override['lines'] = false;\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\n    }\n\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.colorSelected = (color: any) => {\n    $scope.override['color'] = color;\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n\n    // update picker model so that the picker UI will also update\n    $scope.colorPickerModel.series.color = color;\n  };\n\n  $scope.openColorSelector = (color: any) => {\n    $scope.colorPickerModel = {\n      autoClose: true,\n      colorSelected: $scope.colorSelected,\n      series: { color },\n    };\n\n    popoverSrv.show({\n      element: $element.find('.dropdown')[0],\n      position: 'top center',\n      openOn: 'click',\n      template: '<series-color-picker-popover color=\"series.color\" onColorChange=\"colorSelected\" />',\n      classNames: 'drop-popover drop-popover--transparent',\n      model: $scope.colorPickerModel,\n      onClose: () => {\n        $scope.ctrl.render();\n      },\n    });\n  };\n\n  $scope.removeOverride = (option: { propertyName: string | number }) => {\n    delete $scope.override[option.propertyName];\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.refresh();\n  };\n\n  $scope.getSeriesNames = () => {\n    return map($scope.ctrl.seriesList, (series) => {\n      return textUtil.escapeHtml(series.alias);\n    });\n  };\n\n  $scope.updateCurrentOverrides = () => {\n    $scope.currentOverrides = [];\n    each($scope.overrideMenu, (option) => {\n      const value = $scope.override[option.propertyName];\n      if (isUndefined(value)) {\n        return;\n      }\n      $scope.currentOverrides.push({\n        name: option.text,\n        propertyName: option.propertyName,\n        value: String(value),\n      });\n    });\n  };\n\n  $scope.addOverrideOption('Bars', 'bars', [true, false]);\n  $scope.addOverrideOption('Lines', 'lines', [true, false]);\n  $scope.addOverrideOption('Line fill', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Fill gradient', 'fillGradient', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Line width', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Null point mode', 'nullPointMode', ['connected', 'null', 'null as zero']);\n  $scope.addOverrideOption('Fill below to', 'fillBelowTo', $scope.getSeriesNames());\n  $scope.addOverrideOption('Staircase line', 'steppedLine', [true, false]);\n  $scope.addOverrideOption('Dashes', 'dashes', [true, false]);\n  $scope.addOverrideOption('Hidden Series', 'hiddenSeries', [true, false]);\n  $scope.addOverrideOption(\n    'Dash Length',\n    'dashLength',\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  );\n  $scope.addOverrideOption(\n    'Dash Space',\n    'spaceLength',\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  );\n  $scope.addOverrideOption('Points', 'points', [true, false]);\n  $scope.addOverrideOption('Points Radius', 'pointradius', [1, 2, 3, 4, 5]);\n  $scope.addOverrideOption('Stack', 'stack', [true, false, 'A', 'B', 'C', 'D']);\n  $scope.addOverrideOption('Color', 'color', ['change']);\n  $scope.addOverrideOption('Y-axis', 'yaxis', [1, 2]);\n  $scope.addOverrideOption('Z-index', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\n  $scope.addOverrideOption('Transform', 'transform', ['constant', 'negative-Y']);\n  $scope.addOverrideOption('Legend', 'legend', [true, false]);\n  $scope.addOverrideOption('Hide in tooltip', 'hideTooltip', [true, false]);\n  $scope.updateCurrentOverrides();\n}\n\ncoreModule.controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\n","import coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nimport tinycolor from 'tinycolor2';\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert && !config.unifiedAlertingEnabled) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index: number) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n\n  onThresholdTypeChange(index: number) {\n    // Because of the ng-model binding, threshold's color mode is already set here\n    if (this.panel.thresholds[index].colorMode === 'custom') {\n      this.panel.thresholds[index].fillColor = tinycolor(config.theme.palette.blue85).setAlpha(0.2).toRgbString();\n      this.panel.thresholds[index].lineColor = tinycolor(config.theme.palette.blue77).setAlpha(0.6).toRgbString();\n    }\n    this.panelCtrl.render();\n  }\n}\n\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/thresholds_form.html',\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","import coreModule from 'app/angular/core_module';\nimport { getColorModes } from './time_region_manager';\n\nexport class TimeRegionFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n  colorModes: any;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingTimeRegions = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.colorModes = getColorModes();\n    this.panelCtrl.editingTimeRegions = true;\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  addTimeRegion() {\n    this.panel.timeRegions.push({\n      op: 'time',\n      fromDayOfWeek: undefined,\n      from: undefined,\n      toDayOfWeek: undefined,\n      to: undefined,\n      colorMode: 'background6',\n      fill: true,\n      line: false,\n      // Default colors for new\n      fillColor: 'rgba(234, 112, 112, 0.12)',\n      lineColor: 'rgba(237, 46, 24, 0.60)',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeTimeRegion(index: number) {\n    this.panel.timeRegions.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.timeRegions[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.timeRegions[index].lineColor = newColor;\n      this.render();\n    };\n  }\n}\n\ncoreModule.directive('graphTimeRegionForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/time_regions_form.html',\n    controller: TimeRegionFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","import { isString, escape } from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/angular/core_module';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { ContextSrv } from 'app/core/services/context_srv';\n\n/** @ngInject */\nexport function annotationTooltipDirective(\n  $sanitize: any,\n  dashboardSrv: DashboardSrv,\n  contextSrv: ContextSrv,\n  $compile: any\n) {\n  function sanitizeString(str: string) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: (scope: any, element: JQuery) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId !== undefined && event.newState) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login && event.avatarUrl) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${event.avatarUrl}\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard?.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard?.canEditAnnotations(event.dashboardId)) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div ng-non-bindable>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import { cloneDeep, isNumber } from 'lodash';\nimport { coreModule } from 'app/angular/core_module';\nimport { AnnotationEvent, dateTime } from '@grafana/data';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../../features/annotations/api';\nimport { getDashboardQueryRunner } from '../../../features/query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { contextSrv } from '../../../core/services/context_srv';\n\nexport class EventEditorCtrl {\n  // @ts-ignore initialized through Angular not constructor\n  panelCtrl: MetricsPanelCtrl;\n  // @ts-ignore initialized through Angular not constructor\n  event: AnnotationEvent;\n  timeRange?: { from: number; to: number };\n  form: any;\n  close: any;\n  timeFormated?: string;\n\n  /** @ngInject */\n  constructor() {}\n\n  $onInit() {\n    this.event.panelId = this.panelCtrl.panel.id; // set correct id if in panel edit\n    this.event.dashboardId = this.panelCtrl.dashboard.id;\n\n    // Annotations query returns time as Unix timestamp in milliseconds\n    this.event.time = tryEpochToMoment(this.event.time);\n    if (this.event.isRegion) {\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\n    }\n\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time!);\n  }\n\n  canDelete(): boolean {\n    if (contextSrv.accessControlEnabled()) {\n      if (this.event.source.type === 'dashboard') {\n        return !!this.panelCtrl.dashboard.meta.annotationsPermissions?.dashboard.canDelete;\n      }\n      return !!this.panelCtrl.dashboard.meta.annotationsPermissions?.organization.canDelete;\n    }\n    return true;\n  }\n\n  async save(): Promise<void> {\n    if (!this.form.$valid) {\n      return;\n    }\n\n    const saveModel = cloneDeep(this.event);\n    saveModel.time = saveModel.time!.valueOf();\n    saveModel.timeEnd = 0;\n\n    if (saveModel.isRegion) {\n      saveModel.timeEnd = this.event.timeEnd!.valueOf();\n\n      if (saveModel.timeEnd < saveModel.time) {\n        console.log('invalid time');\n        return;\n      }\n    }\n\n    let crudFunction = saveAnnotation;\n    if (saveModel.id) {\n      crudFunction = updateAnnotation;\n    }\n\n    try {\n      await crudFunction(saveModel);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      this.close();\n      getDashboardQueryRunner().run({ dashboard: this.panelCtrl.dashboard, range: this.panelCtrl.range });\n    }\n  }\n\n  async delete(): Promise<void> {\n    try {\n      await deleteAnnotation(this.event);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      this.close();\n      getDashboardQueryRunner().run({ dashboard: this.panelCtrl.dashboard, range: this.panelCtrl.range });\n    }\n  }\n}\n\nfunction tryEpochToMoment(timestamp: any) {\n  if (timestamp && isNumber(timestamp)) {\n    const epoch = Number(timestamp);\n    return dateTime(epoch);\n  } else {\n    return timestamp;\n  }\n}\n\nexport function eventEditor() {\n  return {\n    restrict: 'E',\n    controller: EventEditorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\n    scope: {\n      panelCtrl: '=',\n      event: '=',\n      close: '&',\n    },\n  };\n}\n\ncoreModule.directive('eventEditor', eventEditor);\n","import { selectors } from '@grafana/e2e-selectors';\nimport { GraphCtrl } from './module';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: GraphCtrl;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n  selectors: typeof selectors.components.Panels.Visualization.Graph.VisualizationTab;\n\n  /** @ngInject */\n  constructor(private $scope: any) {\n    this.panelCtrl = $scope.ctrl as GraphCtrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n    this.selectors = selectors.components.Panels.Visualization.Graph.VisualizationTab;\n  }\n\n  setUnitFormat(axis: { format: any }) {\n    return (unit: string) => {\n      axis.format = unit;\n      // if already set via field config we clear that\n      if (this.panel.fieldConfig.defaults.unit) {\n        this.panel.fieldConfig.defaults.unit = undefined;\n        this.panelCtrl.refresh();\n      } else {\n        this.panelCtrl.render();\n      }\n    };\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import { MenuItemProps } from '@grafana/ui';\nimport { FlotDataPoint } from '@grafana/data';\n\nexport class GraphContextMenuCtrl {\n  private source?: FlotDataPoint | null;\n  private scope?: any;\n  menuItemsSupplier?: () => MenuItemProps[];\n  scrollContextElement: HTMLElement | null = null;\n  position: {\n    x: number;\n    y: number;\n  } = { x: 0, y: 0 };\n\n  isVisible: boolean;\n\n  constructor($scope: any) {\n    this.isVisible = false;\n    this.scope = $scope;\n  }\n\n  onClose = () => {\n    if (this.scrollContextElement) {\n      this.scrollContextElement.removeEventListener('scroll', this.onClose);\n    }\n\n    this.scope.$apply(() => {\n      this.isVisible = false;\n    });\n  };\n\n  toggleMenu = (event?: { pageX: number; pageY: number }) => {\n    this.isVisible = !this.isVisible;\n    if (this.isVisible && this.scrollContextElement) {\n      this.scrollContextElement.addEventListener('scroll', this.onClose);\n    }\n\n    if (this.source) {\n      this.position = {\n        x: this.source.pageX,\n        y: this.source.pageY,\n      };\n    } else {\n      this.position = {\n        x: event ? event.pageX : 0,\n        y: event ? event.pageY : 0,\n      };\n    }\n  };\n\n  // Sets element which is considered as a scroll context of given context menu.\n  // Having access to this element allows scroll event attachement for menu to be closed when user scrolls\n  setScrollContextElement = (el: HTMLElement | null) => {\n    this.scrollContextElement = el;\n  };\n\n  setSource = (source: FlotDataPoint | null) => {\n    this.source = source;\n  };\n\n  getSource = () => {\n    return this.source;\n  };\n\n  setMenuItemsSupplier = (menuItemsSupplier: () => MenuItemProps[]) => {\n    this.menuItemsSupplier = menuItemsSupplier;\n  };\n}\n","import './graph';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\nimport './time_regions_form';\nimport './annotation_tooltip';\nimport './event_editor';\n\nimport template from './template';\nimport { defaults, find, without } from 'lodash';\n\nimport { DataProcessor } from './data_processor';\nimport { axesEditorComponent } from './axes_editor';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { DataFrame, FieldConfigProperty, getColorForTheme, PanelEvents, PanelPlugin } from '@grafana/data';\n\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { graphPanelMigrationHandler } from './GraphMigrations';\nimport { DataWarning, GraphFieldConfig, GraphPanelOptions } from './types';\n\nimport { auto } from 'angular';\nimport { locationService } from '@grafana/runtime';\nimport { getDataTimeRange } from './utils';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\nimport { ThresholdMapper } from 'app/features/alerting/state/ThresholdMapper';\nimport { appEvents } from '../../../core/core';\nimport { ZoomOutEvent } from '../../../types/events';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\nimport { loadSnapshotData } from '../../../features/dashboard/utils/loadSnapshotData';\nimport { annotationsFromDataFrames } from '../../../features/query/state/DashboardQueryRunner/utils';\n\nexport class GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError = false;\n  hiddenSeries: any = {};\n  hiddenSeriesTainted = false;\n  seriesList: TimeSeries[] = [];\n  dataList: DataFrame[] = [];\n  annotations: any = [];\n  alertState: any;\n\n  dataWarning?: DataWarning;\n  colors: any = [];\n  subTabIndex = 0;\n  processor: DataProcessor;\n  contextMenuCtrl: GraphContextMenuCtrl;\n\n  panelDefaults: any = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // fill gradient\n    fillGradient: 0,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // show/hide line\n    hiddenSeries: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 2,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n    timeRegions: [],\n    options: {\n      // show/hide alert threshold lines and fill\n      alertThreshold: true,\n    },\n  };\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    defaults(this.panel, this.panelDefaults);\n    defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    defaults(this.panel.legend, this.panelDefaults.legend);\n    defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n    defaults(this.panel.options, this.panelDefaults.options);\n\n    this.useDataFrames = true;\n    this.processor = new DataProcessor(this.panel);\n    this.contextMenuCtrl = new GraphContextMenuCtrl($scope);\n\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onDataSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n    this.events.on(PanelEvents.initPanelActions, this.onInitPanelActions.bind(this));\n\n    // set axes format from field config\n    const fieldConfigUnit = this.panel.fieldConfig.defaults.unit;\n    if (fieldConfigUnit) {\n      this.panel.yaxes[0].format = fieldConfigUnit;\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html');\n    this.addEditorTab('Series overrides', 'public/app/plugins/panel/graph/tab_series_overrides.html');\n    this.addEditorTab('Axes', axesEditorComponent);\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html');\n    this.addEditorTab('Thresholds', 'public/app/plugins/panel/graph/tab_thresholds.html');\n    this.addEditorTab('Time regions', 'public/app/plugins/panel/graph/tab_time_regions.html');\n    this.subTabIndex = 0;\n    this.hiddenSeriesTainted = false;\n  }\n\n  onInitPanelActions(actions: any[]) {\n    actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()', shortcut: 'p l' });\n  }\n\n  zoomOut(evt: any) {\n    appEvents.publish(new ZoomOutEvent({ scale: 2 }));\n  }\n\n  onDataSnapshotLoad(snapshotData: any) {\n    const { series, annotations } = loadSnapshotData(this.panel, this.dashboard);\n    this.panelData!.annotations = annotations;\n    this.onDataFramesReceived(series);\n  }\n\n  onDataFramesReceived(data: DataFrame[]) {\n    this.dataList = data;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: this.dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = this.getDataWarning();\n\n    this.alertState = undefined;\n    (this.seriesList as any).alertState = undefined;\n    if (this.panelData!.alertState) {\n      this.alertState = this.panelData!.alertState;\n      (this.seriesList as any).alertState = this.alertState.state;\n    }\n\n    this.annotations = [];\n    if (this.panelData!.annotations?.length) {\n      this.annotations = annotationsFromDataFrames(this.panelData!.annotations);\n    }\n\n    this.loading = false;\n    this.render(this.seriesList);\n  }\n\n  getDataWarning(): DataWarning | undefined {\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      if (this.dataList) {\n        for (const frame of this.dataList) {\n          if (frame.length && frame.fields?.length) {\n            return {\n              title: 'Unable to graph data',\n              tip: 'Data exists, but is not timeseries',\n              actionText: 'Switch to table view',\n              action: () => {\n                dispatch(changePanelPlugin({ panel: this.panel, pluginId: 'table' }));\n              },\n            };\n          }\n        }\n      }\n\n      return {\n        title: 'No data',\n        tip: 'No data returned from query',\n      };\n    }\n\n    // If any data is in range, do not return an error\n    for (const series of this.seriesList) {\n      if (!series.isOutsideRange) {\n        return undefined;\n      }\n    }\n\n    // All data is outside the time range\n    const dataWarning: DataWarning = {\n      title: 'Data outside time range',\n      tip: 'Can be caused by timezone mismatch or missing time filter in query',\n    };\n\n    const range = getDataTimeRange(this.dataList);\n\n    if (range) {\n      dataWarning.actionText = 'Zoom to data';\n      dataWarning.action = () => {\n        locationService.partial({\n          from: range.from,\n          to: range.to,\n        });\n      };\n    }\n\n    return dataWarning;\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      // Always use the configured field unit\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n      if (this.hiddenSeriesTainted === false && series.hiddenSeries === true) {\n        this.hiddenSeries[series.alias] = true;\n      }\n    }\n  }\n\n  onColorChange = (series: any, color: string) => {\n    series.setColor(getColorForTheme(color, config.theme));\n    this.panel.aliasColors[series.alias] = color;\n    this.render();\n  };\n\n  onToggleSeries = (hiddenSeries: any) => {\n    this.hiddenSeriesTainted = true;\n    this.hiddenSeries = hiddenSeries;\n    this.render();\n  };\n\n  onToggleSort = (sortBy: any, sortDesc: any) => {\n    this.panel.legend.sort = sortBy;\n    this.panel.legend.sortDesc = sortDesc;\n    this.render();\n  };\n\n  onToggleAxis = (info: { alias: any; yaxis: any }) => {\n    let override: any = find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    override.yaxis = info.yaxis;\n    this.render();\n  };\n\n  addSeriesOverride(override: any) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override: any) {\n    this.panel.seriesOverrides = without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.render();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  onContextMenuClose = () => {\n    this.contextMenuCtrl.toggleMenu();\n  };\n\n  getTimeZone = () => this.dashboard.getTimezone();\n\n  getDataFrameByRefId = (refId: string) => {\n    return this.dataList.filter((dataFrame) => dataFrame.refId === refId)[0];\n  };\n\n  migrateToReact() {\n    this.onPluginTypeChange(config.panels['timeseries']);\n  }\n}\n\n// Use new react style configuration\nexport const plugin = new PanelPlugin<GraphPanelOptions, GraphFieldConfig>(null)\n  .useFieldConfig({\n    disableStandardOptions: [\n      FieldConfigProperty.NoValue,\n      FieldConfigProperty.Thresholds,\n      FieldConfigProperty.Max,\n      FieldConfigProperty.Min,\n      FieldConfigProperty.Decimals,\n      FieldConfigProperty.Color,\n      FieldConfigProperty.Mappings,\n    ],\n  })\n  .setDataSupport({ annotations: true, alertStates: true })\n  .setMigrationHandler(graphPanelMigrationHandler);\n\n// Use the angular ctrt rather than a react one\nplugin.angularPanelCtrl = GraphCtrl;\n","const template = `\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n  <div ng-if=\"ctrl.contextMenuCtrl.isVisible\">\n    <graph-context-menu\n      itemsGroup=\"ctrl.contextMenuCtrl.menuItemsSupplier()\"\n      on-close=\"ctrl.onContextMenuClose\"\n      getContextMenuSource=\"ctrl.contextMenuCtrl.getSource\"\n      timeZone=\"ctrl.getTimeZone()\"\n      x=\"ctrl.contextMenuCtrl.position.x\"\n      y=\"ctrl.contextMenuCtrl.position.y\"\n    ></graph-context-menu>\n  </div>\n</div>\n`;\n\nexport default template;\n","import { PanelModel, FieldConfigSource, DataLink } from '@grafana/data';\n\n/**\n * Called when upgrading from a previously saved versoin\n */\nexport const graphPanelMigrationHandler = (panel: PanelModel<any>): Partial<any> => {\n  const fieldConfig: FieldConfigSource = panel.fieldConfig ?? {\n    defaults: {},\n    overrides: [],\n  };\n\n  const options = panel.options || {};\n\n  // Move <7.1 dataLinks to the field section\n  if (options.dataLinks) {\n    fieldConfig.defaults.links = options.dataLinks as DataLink[];\n    delete options.dataLinks;\n  }\n\n  // Mutate the original panel state (only necessary because it is angular)\n  panel.options = options;\n  panel.fieldConfig = fieldConfig;\n  return options;\n};\n"],"names":["hiddenReducerTypes","ThresholdMapper","panel","alert","config","i","conditions","length","condition","type","evaluator","thresholds","visible","indexOf","reducer","value","params","push","op","value1","value2","t","fill","options","alertThreshold","line","colorMode","loadSnapshotData","dashboard","data","getProcessedDataFrames","snapshotData","worker","SnapshotWorker","range","getDefaultTimeRange","annotationEvents","canWork","getAnnotationsInSnapshot","id","annotations","ArrayDataFrame","timeRange","applyPanelTimeOverrides","getTimeSrv","state","LoadingState","series","applyFieldOverrides","fieldConfig","defaults","overrides","replaceVariables","fieldConfigRegistry","plugin","theme","timeZone","getTimezone","getFieldLinksSupplier","links","field","getLinks","scopedVars","view","dataFrame","name","refId","text","undefined","colIndex","fields","labels","rowIndex","timeField","getTimeField","raw","values","get","numeric","display","formattedValueToString","time","getFieldDisplayValuesProxy","frame","calc","console","log","replace","vars","fmt","finalVars","map","link","getLinkSrv","getDataLinkUIModel","getPanelLinksSupplier","createAnnotationToolip","element","event","plot","injector","getLegacyAngularInjector","content","document","createElement","innerHTML","invoke","$compile","$rootScope","eventManager","getOptions","events","manager","tmpScope","$new","onEdit","editEvent","$digest","$destroy","drop","Drop","target","position","classes","openOn","hoverCloseDelay","tetherOptions","constraints","to","pin","attachment","open","on","setTimeout","destroy","markerElementToAttachTo","createEditPopover","editorOpen","editorOpened","scope","panelCtrl","close","editorClosed","DrawableEvent","constructor","object","drawFunc","clearFunc","moveFunc","left","top","width","height","this","_object","_drawFunc","_clearFunc","_moveFunc","_position","_width","_height","draw","clear","getObject","moveTo","VisualEvent","drawableEvent","_options","_drawableEvent","_hidden","visual","getParent","_parent","isHidden","hide","unhide","EventMarkers","_events","_types","_plot","eventsEnabled","getEvents","setTypes","types","setupEvents","parts","partition","regions","$","index","ve","_buildDiv","vre","_buildRegDiv","sort","a","b","ao","bo","min","drawEvents","insidePlot","_insidePlot","timeEnd","overlapPlot","_overlapPlot","updateEvents","o","getPlotOffset","xaxis","getXAxes","p2c","_clearEvents","val","that","container","getPlaceholder","color","markerSize","markerShow","lineStyle","lineWidth","markerTooltip","eventTypeId","eventType","toLowerCase","topOffset","eventSectionHeight","css","opacity","appendTo","marker","Math","round","toUpperCase","mouseenter","editModel","mouseleave","clearSelection","cursor","hover","obj","show","remove","regionWidth","timeFrom","timeTo","max","right","xmin","xmax","regionStart","each","region","x","xc","point0","point1","coord0","coord1","coordMin","coordMax","init","eventMarkers","hideEvents","showEvents","setEvents","hooks","processOptions","version","GraphTooltip","elem","getSeriesFn","self","ctrl","hoverEvent","LegacyGraphHoverEvent","pos","point","$tooltip","findHoverIndexFromDataPoints","posX","last","ps","datapoints","pointsize","initial","len","points","j","lines","steps","findHoverIndexFromData","middle","lower","upper","floor","renderAndShow","absoluteTime","innerHtml","xMode","html","place_tt","pageX","pageY","offset","getMultiSeriesPlotHoverInfo","seriesList","hoverIndex","hoverDistance","pointTime","yaxis","minDistance","minTime","results","lastValue","legend","hideEmpty","allIsNull","hideZero","allIsZero","hideTooltip","hidden","stack","tooltip","value_type","n","label","aliasEscaped","distance","concat","shared","detach","unhighlight","publish","LegacyGraphHoverClearEvent","DataHoverClearEvent","bind","item","panelInEdit","panelRelY","payload","appEvents","CoreEvents","clearCrosshair","plotData","getData","mode","group","hoverInfo","seriesHtml","tooltipFormat","allSeriesMode","pointOffset","Number","isNaN","scrollTop","window","innerHeight","setCrosshair","sharedCrosshairModeOnly","hasMsResolution","systemDateFormats","seriesHoverInfo","formatDate","highlightClass","seriesIndex","textUtil","formatValue","highlight","datapoint","ThresholdManager","getHandleHtml","handleIndex","model","valueStr","stateClass","initDragging","evt","handleElem","currentTarget","parents","posTop","lastY","dragging","clientY","diff","addEventListener","stopped","graphValue","c2p","y","parseInt","toFixed","off","removeEventListener","$scope","$apply","render","emit","threshold","cleanUp","placeholder","find","needsCleanup","renderHandle","defaultHandleTopPos","handleTopPos","isNumber","valueCanvasPos","append","toggleClass","shouldDrawHandles","hasSecondYAxis","editingThresholds","prepare","thresholdMargin","addFlotOptions","other","gtLimit","Infinity","ltLimit","limit","fillColor","lineColor","grid","markings","y2axis","from","getColorForTheme","colorModes","gray","themeDependent","title","darkColor","lightColor","red","green","blue","yellow","custom","getColor","timeRegion","Object","keys","isLight","TimeRegionManager","timeRegions","tRange","dateTime","utc","hRange","fromStart","fromEnd","timeRegionColor","timeRegionsCopy","fromDayOfWeek","toDayOfWeek","parseTimeRange","dayOfWeek","h","m","s","set","add","unix","isoWeekday","hour","valueOf","r","str","result","match","exec","EventManager","updateTime","dashboardId","panelId","isRegion","addFlotEvents","flotOptions","$__alerting","ALERTING_COLOR","$__ok","OK_COLOR","$__no_data","NO_DATA_COLOR","$__pending","PENDING_COLOR","$__editing","DEFAULT_ANNOTATION_COLOR","newState","filter","getRegions","defaultColor","source","colorString","alpha","tinycolor","isValid","setAlpha","toRgbString","addAlphaToRGB","REGION_FILL_ALPHA","addRegionMarking","levels","convertToHistogramData","bucketSize","hiddenSeries","dataList","getSeriesValues","histogram","alias","minBound","getBucketBound","maxBound","domain","histGenerator","bin","x0","convertValuesToHistogram","alignYLevel","yAxes","level","axis","checkCorrectAxes","yLeft","yRight","moveLevelToZero","wideFactor","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rate","checkTwoCross","rateLeft","rateRight","absLeftMin","abs","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","restoreLevelFromZero","axes","LEGEND_STATS","LegendItem","PureComponent","props","super","e","onLabelClick","info","setState","onToggleAxis","onColorChange","forceUpdate","renderLegendValues","asTable","legendValueItems","valueName","valueFormatted","stats","LegendValue","onValueClick","seriesOptionClasses","classNames","valueItems","seriesLabel","LegendSeriesLabel","className","LegendSeriesIcon","onClick","selectors","SeriesColorPicker","onChange","enableNamedColors","ref","showColorPicker","hideColorPicker","SeriesIcon","onMouseLeave","GraphLegend","onToggleSeries","ctrlKey","metaKey","shiftKey","toggleSeriesExclusiveMode","sortLegend","sortBy","alignAsTable","_sortBy","sortDesc","reverse","every","forEach","optionalClass","rightSide","sideWidth","avg","current","total","seriesValuesProps","seriesHideProps","sortProps","hideFromLegend","legendClass","legendStyle","minWidth","legendProps","onToggleSort","style","LegendTable","LegendSeriesList","stat","textAlign","statName","LegendTableHeaderItem","Icon","Legend","CustomScrollbar","hideHorizontalTrack","LegendWithThemeProvider","provideTheme","GraphElement","timeSrv","flotPosition","linksSupplier","items","canAddAnnotations","ariaLabel","icon","dataLinks","url","href","contextMenu","contextMenuCtrl","panelWidth","thresholdManager","timeRegionManager","sortedSeries","PanelEvents","onPanelTeardown","onRender","onGraphHover","onGraphHoverClear","DataHoverEvent","onPlotSelected","onPlotClick","parent","legendElem","renderData","buildFlotPairs","graphHeight","updateLegendValues","hasChildNodes","ReactDOM","renderPanel","legendOptions","valueOptions","legendReactElem","React","sharedTooltipModeEnabled","hasOwnProperty","otherPanelInFullscreenMode","handler","ranges","setTime","toUtc","scrollContextElement","closest","contextMenuSourceItem","x1","yAxisConfig","yaxes","dataFrameIndex","fieldIndex","dataIndex","getDataIndexWithNullValuesCorrection","hasLinksValue","hasLinks","decimals","fieldDisplay","getDisplayProcessor","FieldType","DataFrameView","setScrollContextElement","setSource","setMenuItemsSupplier","getContextMenuItemsSupplier","toggleMenu","Array","isArray","ts","correctIndex","toArray","findIndex","shouldAbortRender","drawHook","dataWarning","msg","action","actionText","click","processOffsetHook","gridMargin","getYAxes","panelOptions","processRangeHook","align","alignLevel","parseFloat","getMinTimeStepOfSeries","MAX_VALUE","timeStep","bars","dashes","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","callPlot","getFlotPairs","nullPointMode","transform","getFlotPairsConstant","barWidth","addXSeriesAxis","histMin","_min","histMax","_max","ticks","buckets","tickStep","addXHistogramAxis","addXTableAxis","addTimeAxis","incrementRenderCounter","renderError","error","message","renderingCompleted","gridColor","processOffset","processRange","stackpercent","percentage","translateFillOption","getFillGradient","fillGradient","linewidth","steppedLine","dashLength","spaceLength","radius","pointradius","shadowSize","minBorderMargin","backgroundColor","borderWidth","hoverable","clickable","margin","labelMarginX","mouseActiveRadius","selection","crosshair","sortOrder","haveSortBy","haveSortOrder","shouldSortBy","zindex","amount","colors","isUndefined","timezone","timeformat","graphTimeFormat","tickFormatter","graphTickFormatter","defaultTicks","tickValues","d","v","ticksNum","ceil","configureAxisMode","pointIndex","flatten","logBase","parseNumber","tickDecimals","secondY","clone","applyLogScale","format","toNumber","minSetToZero","MIN_VALUE","logmin","inverseTransform","pow","isFinite","generateTicksForLogScaleYAxis","unshift","nextTick","maxNumTicks","numTicks","factor","formatter","getValueFormat","Error","graphDirective","popoverSrv","contextSrv","restrict","template","SeriesOverridesCtrl","$element","overrideMenu","currentOverrides","override","colorPickerModel","addOverrideOption","propertyName","option","submenu","String","setOverride","subItem","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","autoClose","onClose","removeOverride","refresh","getSeriesNames","coreModule","ThresholdFormCtrl","$onInit","disabled","unbindDestroy","$on","addThreshold","removeThreshold","splice","onFillColorChange","newColor","onLineColorChange","onThresholdTypeChange","templateUrl","controller","bindToController","controllerAs","TimeRegionFormCtrl","editingTimeRegions","key","addTimeRegion","removeTimeRegion","annotationTooltipDirective","$sanitize","dashboardSrv","sanitizeString","err","escape","getCurrent","titleStateClass","alertId","stateModel","alertDef","iconClass","isString","header","login","avatarUrl","canEditAnnotations","tags","contents","EventEditorCtrl","tryEpochToMoment","timeFormated","canDelete","meta","annotationsPermissions","organization","form","$valid","saveModel","cloneDeep","crudFunction","saveAnnotation","updateAnnotation","getDashboardQueryRunner","run","deleteAnnotation","timestamp","epoch","AxesEditorCtrl","logScales","linear","xAxisModes","Time","Series","Histogram","xAxisStatOptions","setUnitFormat","unit","xAxisModeChanged","processor","setPanelDefaultsForNewXAxisMode","onDataFramesReceived","xAxisValueChanged","axesEditorComponent","GraphContextMenuCtrl","isVisible","el","menuItemsSupplier","GraphCtrl","MetricsPanelCtrl","$injector","datasource","renderer","timeShift","targets","aliasColors","seriesOverrides","setColor","hiddenSeriesTainted","panelDefaults","useDataFrames","DataProcessor","onDataSnapshotLoad","onInitEditMode","onInitPanelActions","fieldConfigUnit","addEditorTab","subTabIndex","actions","shortcut","zoomOut","ZoomOutEvent","scale","panelData","getSeriesList","getDataWarning","alertState","annotationsFromDataFrames","loading","reduce","prev","tip","dispatch","changePanelPlugin","pluginId","isOutsideRange","frames","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","found","reducers","ReducerID","calcs","reduceField","getDataTimeRange","locationService","applySeriesOverrides","removeSeriesOverride","without","toggleLegend","legendValuesOptionChanged","migrateToReact","onPluginTypeChange","PanelPlugin","useFieldConfig","disableStandardOptions","FieldConfigProperty","setDataSupport","alertStates","setMigrationHandler","angularPanelCtrl"],"sourceRoot":""}