{"version":3,"file":"8948.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotice.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuTrigger.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderLoadingIndicator.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuProvider.tsx","webpack://grafana/./public/app/features/dashboard/utils/getPanelMenu.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts","webpack://grafana/./public/app/routes/utils.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/LazyLoader.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack://grafana/./public/app/features/dashboard/state/initDashboard.ts","webpack://grafana/./public/app/features/dashboard/state/analyticsProcessor.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/inspector/types.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/features/panel/state/selectors.ts"],"sourcesContent":["import React, { FC } from 'react';\nimport { QueryResultMetaNotice } from '@grafana/data';\nimport { Icon, Tooltip } from '@grafana/ui';\n\ninterface Props {\n  notice: QueryResultMetaNotice;\n  onClick: (e: React.SyntheticEvent, tab: string) => void;\n}\n\nexport const PanelHeaderNotice: FC<Props> = ({ notice, onClick }) => {\n  const iconName =\n    notice.severity === 'error' || notice.severity === 'warning' ? 'exclamation-triangle' : 'info-circle';\n\n  return (\n    <Tooltip content={notice.text} key={notice.severity}>\n      {notice.inspect ? (\n        <div className=\"panel-info-notice pointer\" onClick={(e) => onClick(e, notice.inspect!)}>\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </div>\n      ) : (\n        <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </a>\n      )}\n    </Tooltip>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\nimport { locationService } from '@grafana/runtime';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices: FC<Props> = ({ frames, panelId }) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n","import React, { FC, HTMLAttributes, MouseEvent, ReactElement, useCallback, useState } from 'react';\nimport { CartesianCoords2D } from '@grafana/data';\n\ninterface PanelHeaderMenuTriggerApi {\n  panelMenuOpen: boolean;\n  closeMenu: () => void;\n}\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  children: (props: PanelHeaderMenuTriggerApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuTrigger: FC<Props> = ({ children, ...divProps }) => {\n  const [clickCoordinates, setClickCoordinates] = useState<CartesianCoords2D>({ x: 0, y: 0 });\n  const [panelMenuOpen, setPanelMenuOpen] = useState<boolean>(false);\n  const onMenuToggle = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      if (!isClick(clickCoordinates, eventToClickCoordinates(event))) {\n        return;\n      }\n\n      event.stopPropagation();\n\n      setPanelMenuOpen(!panelMenuOpen);\n    },\n    [clickCoordinates, panelMenuOpen, setPanelMenuOpen]\n  );\n  const onMouseDown = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      setClickCoordinates(eventToClickCoordinates(event));\n    },\n    [setClickCoordinates]\n  );\n\n  return (\n    <header {...divProps} className=\"panel-title-container\" onClick={onMenuToggle} onMouseDown={onMouseDown}>\n      {children({ panelMenuOpen, closeMenu: () => setPanelMenuOpen(false) })}\n    </header>\n  );\n};\n\nfunction isClick(current: CartesianCoords2D, clicked: CartesianCoords2D): boolean {\n  return clicked.x === current.x && clicked.y === current.y;\n}\n\nfunction eventToClickCoordinates(event: MouseEvent<HTMLDivElement>): CartesianCoords2D {\n  return {\n    x: Math.floor(event.clientX),\n    y: Math.floor(event.clientY),\n  };\n}\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles } from '@grafana/ui';\n\ninterface Props {\n  state: LoadingState;\n  onClick: () => void;\n}\n\nexport const PanelHeaderLoadingIndicator: FC<Props> = ({ state, onClick }) => {\n  const styles = useStyles(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  if (state === LoadingState.Streaming) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.textFaint};\n      box-shadow: 0 0 2px ${theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n}\n","import { FC, ReactElement, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { PanelMenuItem } from '@grafana/data';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { StoreState } from '../../../../types';\nimport { getPanelMenu } from '../../utils/getPanelMenu';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\n\ninterface PanelHeaderMenuProviderApi {\n  items: PanelMenuItem[];\n}\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  children: (props: PanelHeaderMenuProviderApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuProvider: FC<Props> = ({ panel, dashboard, children }) => {\n  const [items, setItems] = useState<PanelMenuItem[]>([]);\n  const angularComponent = useSelector((state: StoreState) => getPanelStateForModel(state, panel)?.angularComponent);\n\n  useEffect(() => {\n    setItems(getPanelMenu(dashboard, panel, angularComponent));\n  }, [dashboard, panel, angularComponent, setItems]);\n\n  return children({ items });\n};\n","import { store } from 'app/store/store';\nimport { AngularComponent, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { PanelMenuItem } from '@grafana/data';\nimport {\n  addLibraryPanel,\n  copyPanel,\n  duplicatePanel,\n  removePanel,\n  sharePanel,\n  unlinkLibraryPanel,\n} from 'app/features/dashboard/utils/panel';\nimport { isPanelModelLibraryPanel } from 'app/features/library-panels/guard';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport config from 'app/core/config';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      viewPanel: panel.id,\n    });\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      editPanel: panel.id,\n    });\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onAddLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    addLibraryPanel(dashboard, panel);\n  };\n\n  const onUnlinkLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    unlinkLibraryPanel(panel);\n  };\n\n  const onInspectPanel = (tab?: string) => {\n    locationService.partial({\n      inspect: panel.id,\n      inspectTab: tab,\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: 'View',\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: 'Data',\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel('data'),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel('query'),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: 'Panel JSON',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel('json'),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'Inspect',\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (dashboard.canEditPanel(panel) && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n\n    if (isPanelModelLibraryPanel(panel)) {\n      subMenu.push({\n        text: 'Unlink library panel',\n        onClick: onUnlinkLibraryPanel,\n      });\n    } else {\n      subMenu.push({\n        text: 'Create library panel',\n        onClick: onAddLibraryPanel,\n      });\n    }\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (!panel.isEditing && subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: 'More...',\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n","import React, { PureComponent } from 'react';\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\nimport { PanelMenuItem } from '@grafana/data';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import React, { FC } from 'react';\nimport { ClickOutsideWrapper } from '@grafana/ui';\nimport { PanelHeaderMenuProvider } from './PanelHeaderMenuProvider';\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  show: boolean;\n  onClose: () => void;\n}\n\nexport const PanelHeaderMenuWrapper: FC<Props> = ({ show, onClose, panel, dashboard }) => {\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <ClickOutsideWrapper onClick={onClose} parent={document}>\n      <PanelHeaderMenuProvider panel={panel} dashboard={dashboard}>\n        {({ items }) => {\n          return <PanelHeaderMenu items={items} />;\n        }}\n      </PanelHeaderMenuProvider>\n    </ClickOutsideWrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { DataLink, GrafanaTheme2, PanelData } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\nimport { PanelHeaderMenuTrigger } from './PanelHeaderMenuTrigger';\nimport { PanelHeaderLoadingIndicator } from './PanelHeaderLoadingIndicator';\nimport { PanelHeaderMenuWrapper } from './PanelHeaderMenuWrapper';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n}\n\nexport const PanelHeader: FC<Props> = ({ panel, error, isViewing, isEditing, data, alertState, dashboard }) => {\n  const onCancelQuery = () => panel.getQueryRunner().cancelQuery();\n  const title = panel.getDisplayTitle();\n  const className = cx('panel-header', !(isViewing || isEditing) ? 'grid-drag-handle' : '');\n  const styles = useStyles2(panelStyles);\n\n  return (\n    <>\n      <PanelHeaderLoadingIndicator state={data.state} onClick={onCancelQuery} />\n      <PanelHeaderCorner\n        panel={panel}\n        title={panel.title}\n        description={panel.description}\n        scopedVars={panel.scopedVars}\n        links={getPanelLinksSupplier(panel)}\n        error={error}\n      />\n      <div className={className}>\n        <PanelHeaderMenuTrigger data-testid={selectors.components.Panels.Panel.title(title)}>\n          {({ closeMenu, panelMenuOpen }) => {\n            return (\n              <div className=\"panel-title\">\n                <PanelHeaderNotices frames={data.series} panelId={panel.id} />\n                {alertState ? (\n                  <Icon\n                    name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                    className=\"icon-gf panel-alert-icon\"\n                    style={{ marginRight: '4px' }}\n                    size=\"sm\"\n                  />\n                ) : null}\n                <h2 className={styles.titleText}>{title}</h2>\n                <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n                <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} show={panelMenuOpen} onClose={closeMenu} />\n                {data.request && data.request.timeInfo && (\n                  <span className=\"panel-time-info\">\n                    <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                  </span>\n                )}\n              </div>\n            );\n          }}\n        </PanelHeaderMenuTrigger>\n      </div>\n    </>\n  );\n};\n\nconst panelStyles = (theme: GrafanaTheme2) => {\n  return {\n    titleText: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: calc(100% - 38px);\n      cursor: pointer;\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.body.fontSize};\n      margin: 0;\n\n      &:hover {\n        color: ${theme.colors.text.primary};\n      }\n      .panel-has-alert & {\n        max-width: calc(100% - 54px);\n      }\n    `,\n  };\n};\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","export function isSoloRoute(path: string): boolean {\n  return /(d-solo|dashboard-solo)/.test(path?.toLowerCase());\n}\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Subscription } from 'rxjs';\nimport { locationService, RefreshEvent } from '@grafana/runtime';\nimport {\n  AbsoluteTimeRange,\n  AnnotationChangeEvent,\n  AnnotationEventUIModel,\n  CoreApp,\n  DashboardCursorSync,\n  EventFilterOptions,\n  FieldConfigSource,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  TimeRange,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { ErrorBoundary, PanelContext, PanelContextProvider, SeriesVisibilityChangeMode } from '@grafana/ui';\nimport { VizLegendOptions } from '@grafana/schema';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { profiler } from 'app/core/profiler';\nimport config from 'app/core/config';\nimport { DashboardModel, PanelModel } from '../state';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\nimport { RenderEvent } from 'app/types/events';\nimport { changeSeriesColorConfigFactory } from 'app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory';\nimport { seriesVisibilityConfigFactory } from './SeriesVisibilityConfigFactory';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../annotations/api';\nimport { getDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { liveTimer } from './liveTimer';\nimport { isSoloRoute } from '../../../routes/utils';\nimport { contextSrv } from '../../../core/services/context_srv';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  onInstanceStateChange: (value: any) => void;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  context: PanelContext;\n  data: PanelData;\n  liveTime?: TimeRange;\n}\n\nexport class PanelChrome extends PureComponent<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n  private eventFilter: EventFilterOptions = { onlyLocal: true };\n\n  constructor(props: Props) {\n    super(props);\n\n    // Can this eventBus be on PanelModel?  when we have more complex event filtering, that may be a better option\n    const eventBus = props.dashboard.events.newScopedBus(`panel:${props.panel.id}`, this.eventFilter);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      context: {\n        eventBus,\n        app: this.getPanelContextApp(),\n        sync: this.getSync,\n        onSeriesColorChange: this.onSeriesColorChange,\n        onToggleSeriesVisibility: this.onSeriesVisibilityChange,\n        onAnnotationCreate: this.onAnnotationCreate,\n        onAnnotationUpdate: this.onAnnotationUpdate,\n        onAnnotationDelete: this.onAnnotationDelete,\n        canAddAnnotations: this.canAddAnnotation,\n        onInstanceStateChange: this.onInstanceStateChange,\n        onToggleLegendSort: this.onToggleLegendSort,\n        canEditAnnotations: this.canEditAnnotation,\n        canDeleteAnnotations: this.canDeleteAnnotation,\n      },\n      data: this.getInitialPanelDataState(),\n    };\n  }\n\n  canEditDashboard = () => Boolean(this.props.dashboard.meta.canEdit || this.props.dashboard.meta.canMakeEditable);\n\n  canAddAnnotation = () => {\n    let canAdd = true;\n\n    if (contextSrv.accessControlEnabled()) {\n      canAdd = !!this.props.dashboard.meta.annotationsPermissions?.dashboard.canAdd;\n    }\n    return canAdd && this.canEditDashboard();\n  };\n\n  canEditAnnotation = (dashboardId: number) => {\n    let canEdit = true;\n\n    if (contextSrv.accessControlEnabled()) {\n      if (dashboardId !== 0) {\n        canEdit = !!this.props.dashboard.meta.annotationsPermissions?.dashboard.canEdit;\n      } else {\n        canEdit = !!this.props.dashboard.meta.annotationsPermissions?.organization.canEdit;\n      }\n    }\n    return canEdit && this.canEditDashboard();\n  };\n\n  canDeleteAnnotation = (dashboardId: number) => {\n    let canDelete = true;\n\n    if (contextSrv.accessControlEnabled()) {\n      if (dashboardId !== 0) {\n        canDelete = !!this.props.dashboard.meta.annotationsPermissions?.dashboard.canDelete;\n      } else {\n        canDelete = !!this.props.dashboard.meta.annotationsPermissions?.organization.canDelete;\n      }\n    }\n    return canDelete && this.canEditDashboard();\n  };\n\n  // Due to a mutable panel model we get the sync settings via function that proactively reads from the model\n  getSync = () => (this.props.isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip);\n\n  onInstanceStateChange = (value: any) => {\n    this.props.onInstanceStateChange(value);\n\n    this.setState({\n      context: {\n        ...this.state.context,\n        instanceState: value,\n      },\n    });\n  };\n\n  getPanelContextApp() {\n    if (this.props.isEditing) {\n      return CoreApp.PanelEditor;\n    }\n    if (this.props.isViewing) {\n      return CoreApp.PanelViewer;\n    }\n\n    return CoreApp.Dashboard;\n  }\n\n  onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.props.panel.fieldConfig));\n  };\n\n  onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.props.panel.fieldConfig, this.state.data.series)\n    );\n  };\n\n  onToggleLegendSort = (sortKey: string) => {\n    const legendOptions: VizLegendOptions = this.props.panel.options.legend;\n\n    // We don't want to do anything when legend options are not available\n    if (!legendOptions) {\n      return;\n    }\n\n    let sortDesc = legendOptions.sortDesc;\n    let sortBy = legendOptions.sortBy;\n    if (sortKey !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = sortKey;\n    }\n\n    this.onOptionsChange({\n      ...this.props.panel.options,\n      legend: { ...legendOptions, sortBy, sortDesc },\n    });\n  };\n\n  getInitialPanelDataState(): PanelData {\n    return {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n\n    // Listen for live timer events\n    liveTimer.listen(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    liveTimer.remove(this);\n  }\n\n  liveTimeChanged(liveTime: TimeRange) {\n    const { data } = this.state;\n    if (data.timeRange) {\n      const delta = liveTime.to.valueOf() - data.timeRange.to.valueOf();\n      if (delta < 100) {\n        // 10hz\n        console.log('Skip tick render', this.props.panel.title, delta);\n        return;\n      }\n    }\n    this.setState({ liveTime });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView, width } = this.props;\n    const { context } = this.state;\n\n    const app = this.getPanelContextApp();\n\n    if (context.app !== app) {\n      this.setState({\n        context: {\n          ...context,\n          app,\n        },\n      });\n    }\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n\n    // The timer depends on panel width\n    if (width !== prevProps.width) {\n      liveTimer.updateInterval(this);\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    const { dashboard, panel, plugin } = this.props;\n\n    // Ignore this data update if we are now a non data panel\n    if (plugin.meta.skipDataQuery) {\n      this.setState({ data: this.getInitialPanelDataState() });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (dashboard.snapshot) {\n          panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data, liveTime: undefined });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      if (this.state.refreshWhenInView) {\n        this.setState({ refreshWhenInView: false });\n      }\n      panel.runAllPanelQueries(this.props.dashboard.id, this.props.dashboard.getTimezone(), timeData, width);\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.setState({\n        data: { ...this.state.data, timeRange: this.timeSrv.timeRange() },\n        renderCounter: this.state.renderCounter + 1,\n        liveTime: undefined,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (error: Error) => {\n    const errorMessage = error.message || DEFAULT_PLUGIN_ERROR;\n    if (this.state.errorMessage !== errorMessage) {\n      this.setState({ errorMessage });\n    }\n  };\n\n  onPanelErrorRecover = () => {\n    this.setState({ errorMessage: undefined });\n  };\n\n  onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardId: this.props.dashboard.id,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await saveAnnotation(anno);\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardId: this.props.dashboard.id,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await updateAnnotation(anno);\n\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || pluginMeta.skipDataQuery;\n  }\n\n  skipFirstRender(loadingState: LoadingState) {\n    const { isFirstLoad } = this.state;\n    return (\n      this.wantsQueryExecution &&\n      isFirstLoad &&\n      (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)\n    );\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = this.state.liveTime ?? data.timeRange ?? this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelContextProvider value={this.state.context}>\n            <PanelComponent\n              id={panel.id}\n              data={data}\n              title={panel.title}\n              timeRange={timeRange}\n              timeZone={this.props.dashboard.getTimezone()}\n              options={panelOptions}\n              fieldConfig={panel.fieldConfig}\n              transparent={panel.transparent}\n              width={panelWidth}\n              height={innerPanelHeight}\n              renderCounter={renderCounter}\n              replaceVariables={panel.replaceVariables}\n              onOptionsChange={this.onOptionsChange}\n              onFieldConfigChange={this.onFieldConfigChange}\n              onChangeTimeRange={this.onChangeTimeRange}\n              eventBus={dashboard.events}\n            />\n          </PanelContextProvider>\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    return (\n      <section\n        className={containerClassNames}\n        aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}\n      >\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          alertState={alertState}\n          data={data}\n        />\n        <ErrorBoundary\n          dependencies={[data, plugin, panel.getOptions()]}\n          onError={this.onPanelError}\n          onRecover={this.onPanelErrorRecover}\n        >\n          {({ error }) => {\n            if (error) {\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </section>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Subscription } from 'rxjs';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { AngularComponent, getAngularLoader, locationService } from '@grafana/runtime';\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport config from 'app/core/config';\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { isSoloRoute } from '../../../routes/utils';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","import React, { useRef, useState } from 'react';\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\nimport { useEffectOnce } from 'react-use';\n\nexport interface Props {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  width?: number;\n  height?: number;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport function LazyLoader({ children, width, height, onLoad, onChange }: Props) {\n  const id = useUniqueId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, (entry) => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad?.();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange?.(entry.isIntersecting);\n    });\n\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n\n  return (\n    <div id={id} ref={wrapperRef} style={{ width, height }}>\n      {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n    </div>\n  );\n}\n\nLazyLoader.callbacks = {} as Record<string, (e: IntersectionObserverEntry) => void>;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      LazyLoader.callbacks[entry.target.id](entry);\n    }\n  },\n  { rootMargin: '100px' }\n);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { cleanUpPanelState, setPanelInstanceState } from '../../panel/state/reducers';\nimport { initPanelState } from '../../panel/state/actions';\nimport { LazyLoader } from './LazyLoader';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  stateKey: string;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  width: number;\n  height: number;\n  skipStateCleanUp?: boolean;\n  lazy?: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.panels[props.stateKey];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState,\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  cleanUpPanelState,\n  setPanelInstanceState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    lazy: true,\n  };\n\n  specialPanels: { [key: string]: Function } = {};\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  componentWillUnmount() {\n    // Most of the time an unmount should result in cleanup but in PanelEdit it should not\n    if (!this.props.skipStateCleanUp) {\n      this.props.cleanUpPanelState({ key: this.props.stateKey });\n    }\n  }\n\n  onInstanceStateChange = (value: any) => {\n    this.props.setPanelInstanceState({ key: this.props.stateKey, value });\n  };\n\n  onVisibilityChange = (v: boolean) => {\n    this.props.panel.isInView = v;\n  };\n\n  onPanelLoad = () => {\n    if (!this.props.plugin) {\n      this.props.initPanelState(this.props.panel);\n    }\n  };\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, lazy, plugin } = this.props;\n\n    const renderPanelChrome = (isInView: boolean) =>\n      plugin &&\n      (plugin.angularPanelCtrl ? (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n        />\n      ) : (\n        <PanelChrome\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n          onInstanceStateChange={this.onInstanceStateChange}\n        />\n      ));\n\n    return lazy ? (\n      <LazyLoader width={width} height={height} onChange={this.onVisibilityChange} onLoad={this.onPanelLoad}>\n        {({ isInView }) => renderPanelChrome(isInView)}\n      </LazyLoader>\n    ) : (\n      renderPanelChrome(true)\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\n\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { selectors } from '@grafana/e2e-selectors';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <section className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </section>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import {\n  ByNamesMatcherMode,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    const existing = getExistingDisplayNames(current);\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return names;\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n","// Services & Utils\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\n// Actions\nimport { notifyApp } from 'app/core/actions';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n// Types\nimport { DashboardDTO, DashboardInitPhase, DashboardRoutes, StoreState, ThunkDispatch, ThunkResult } from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nimport { locationUtil, setWeekStart } from '@grafana/data';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { config, locationService } from '@grafana/runtime';\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\nimport { toStateKey } from 'app/features/variables/utils';\nimport store from 'app/core/store';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string | null;\n  routeName?: string;\n  fixUrl: boolean;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY);\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n\n    const dashboardUid = toStateKey(args.urlUid ?? dashboard.uid);\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard));\n\n    // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.error(err);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // set week start\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nexport function getNewDashboardModelData(urlFolderId?: string | null): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\n\nexport function setDashboardToFetchFromLocalStorage(model: DashboardDTO) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\n\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}\n","import { DashboardModel } from './DashboardModel';\nimport { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","import { applyFieldOverrides, ArrayDataFrame, getDefaultTimeRange, LoadingState, PanelData } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { DashboardModel, PanelModel } from '../state';\nimport { getProcessedDataFrames } from '../../query/state/runRequest';\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { applyPanelTimeOverrides } from './panel';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [new ArrayDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    annotations,\n  };\n}\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Actions = 'actions', // ALPHA!\n}\n","import { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import { PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\nimport { PanelState } from './reducers';\n\nexport function getPanelStateForModel(state: StoreState, model: PanelModel): PanelState | undefined {\n  return state.panels[model.key];\n}\n"],"names":["PanelHeaderNotice","notice","onClick","iconName","severity","Tooltip","content","text","inspect","className","e","Icon","name","style","marginRight","href","link","target","rel","PanelHeaderNotices","frames","panelId","openInspect","useCallback","tab","stopPropagation","locationService","inspectTab","notices","frame","meta","Object","values","map","PanelHeaderMenuTrigger","children","divProps","clickCoordinates","setClickCoordinates","useState","x","y","panelMenuOpen","setPanelMenuOpen","onMenuToggle","event","current","clicked","eventToClickCoordinates","onMouseDown","closeMenu","Math","floor","clientX","clientY","PanelHeaderLoadingIndicator","state","styles","useStyles","getStyles","LoadingState","title","streamIndicator","theme","css","colors","textFaint","PanelHeaderMenuProvider","panel","dashboard","items","setItems","angularComponent","useSelector","getPanelStateForModel","useEffect","onViewPanel","preventDefault","viewPanel","id","onEditPanel","editPanel","onAddLibraryPanel","addLibraryPanel","onUnlinkLibraryPanel","unlinkLibraryPanel","onInspectPanel","onMore","onDuplicatePanel","duplicatePanel","onCopyPanel","copyPanel","onRemovePanel","removePanel","onNavigateToExplore","openInNewWindow","ctrlKey","metaKey","url","window","open","config","undefined","store","navigateToExplore","getDataSourceSrv","getTimeSrv","getExploreUrl","menu","isEditing","push","iconClassName","shortcut","canEditPanel","sharePanel","contextSrv","plugin","skipDataQuery","inspectMenu","canEdit","type","subMenu","isViewing","isPanelModelLibraryPanel","scope","getScope","panelCtrl","$$childHead","ctrl","angularMenuItems","getExtendedMenu","item","reactItem","click","$eval","length","getPanelMenu","PanelHeaderMenu","PureComponent","isSubMenu","role","menuItem","idx","PanelHeaderMenuItem","renderItems","render","this","props","PanelHeaderMenuWrapper","show","onClose","ClickOutsideWrapper","parent","document","PanelHeader","error","data","alertState","getDisplayTitle","cx","useStyles2","panelStyles","getQueryRunner","cancelQuery","PanelHeaderCorner","description","scopedVars","links","getPanelLinksSupplier","selectors","series","size","titleText","request","timeInfo","typography","fontWeightMedium","body","fontSize","primary","createOverride","label","color","matcher","FieldMatcherID","options","properties","createProperty","value","mode","FieldColorModeId","fixedColor","isSoloRoute","path","test","toLowerCase","PanelChrome","constructor","super","Subscription","onlyLocal","Boolean","canMakeEditable","canAdd","annotationsPermissions","canEditDashboard","dashboardId","organization","canDelete","DashboardCursorSync","graphTooltip","onInstanceStateChange","setState","context","instanceState","onFieldConfigChange","fieldConfig","overrides","currentIndex","findIndex","override","overridesCopy","Array","from","existing","propertyIndex","p","propertiesCopy","changeSeriesColorConfigFactory","seriesVisibilityConfigFactory","sortKey","legendOptions","legend","sortDesc","sortBy","onOptionsChange","isInView","width","refreshWhenInView","timeData","applyPanelTimeOverrides","timeSrv","timeRange","wantsQueryExecution","runAllPanelQueries","getTimezone","renderCounter","liveTime","stateUpdate","updateOptions","updateFieldConfig","errorMessage","message","async","isRegion","to","anno","time","timeEnd","tags","saveAnnotation","getDashboardQueryRunner","run","range","eventBus","publish","AnnotationChangeEvent","deleteAnnotation","updateAnnotation","setTime","toUtc","events","newScopedBus","eventFilter","isFirstLoad","app","getPanelContextApp","sync","getSync","onSeriesColorChange","onToggleSeriesVisibility","onSeriesVisibilityChange","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","canAddAnnotations","canAddAnnotation","onToggleLegendSort","canEditAnnotations","canEditAnnotation","canDeleteAnnotations","canDeleteAnnotation","getInitialPanelDataState","CoreApp","getDefaultTimeRange","componentDidMount","subs","add","subscribe","RefreshEvent","onRefresh","RenderEvent","onRender","panelInitialized","hasPanelSnapshot","loadSnapshotData","getData","withTransforms","withFieldConfig","next","onDataUpdate","liveTimer","componentWillUnmount","unsubscribe","liveTimeChanged","delta","valueOf","console","log","componentDidUpdate","prevProps","snapshot","snapshotData","toDataFrameDTO","shouldSignalRenderingCompleted","loadingState","pluginMeta","skipFirstRender","renderPanel","height","profiler","PanelComponent","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","panelWidth","PANEL_BORDER","innerPanelHeight","panelContentClassNames","classNames","panelOptions","getOptions","PanelContextProvider","timeZone","transparent","replaceVariables","onChangeTimeRange","hasTitle","containerClassNames","pathname","ErrorBoundary","dependencies","onError","onPanelError","onRecover","onPanelErrorRecover","PanelChromeAngularUnconnected","loadAngularPanel","queryRunner","onPanelDataUpdate","prevState","scopeProps","getInnerPanelHeight","getInnerPanelWidth","setPanelAngularComponent","element","loader","getAngularLoader","key","load","alert","ref","mapDispatchToProps","PanelChromeAngular","connect","LazyLoader","onLoad","onChange","useUniqueId","loaded","setLoaded","setIsInView","wrapperRef","useRef","useEffectOnce","addCallback","entry","isIntersecting","wrapperEl","observer","observe","callbacks","unobserve","keys","disconnect","c","IntersectionObserver","entries","rootMargin","initPanelState","cleanUpPanelState","setPanelInstanceState","connector","panelState","panels","stateKey","DashboardPanelUnconnected","v","lazy","onPanelLoad","skipStateCleanUp","renderPanelChrome","angularPanelCtrl","onVisibilityChange","DashboardPanel","InfoMode","Component","Error","Info","Links","markdown","interpolatedMarkdown","getTemplateSrv","replace","markedInterpolatedMarkdown","renderMarkdown","getLinks","dangerouslySetInnerHTML","__html","InspectTab","renderCornerType","infoMode","ariaLabel","placement","interactive","getInfoMode","onClickError","getInfoContent","displayOverrideRef","isHideSeriesOverride","isSystemOverrideWithRef","displayName","SeriesVisibilityChangeMode","getDisplayNames","splice","getExistingDisplayNames","createExtendedOverride","allFieldsAreExcluded","names","ByNamesMatcherMode","property","viz","tooltip","__systemRef","prefix","readOnly","find","index","rule","isArray","excludeName","unique","Set","field","fields","FieldType","getFieldDisplayName","initDashboard","args","dispatch","getState","dashboardInitFetching","dashDTO","model","DASHBOARD_FROM_LS_KEY","removeDashboardToFetchFromLocalStorage","routeName","DashboardRoutes","backendSrv","redirectUri","newUrl","locationUtil","canSave","canShare","canStar","dashboardLoaderSrv","urlType","urlSlug","urlUid","fixUrl","dashboardUrl","currentPath","getNewDashboardModelData","urlFolderId","err","cancelled","dashboardInitFailed","fetchDashboard","dashboardInitServices","DashboardModel","storeState","queryParams","orgId","user","getDashboardSrv","setCurrent","init","dashboardUid","toStateKey","uid","initVariablesTransaction","createDashboardQueryRunner","getIfExistsLastKey","initPhase","DashboardInitPhase","processRepeats","autofitpanels","autoFitPanels","innerHeight","kiosk","keybindingSrv","notifyApp","createErrorNotification","eventData","dashboardName","folderName","folderTitle","eventName","MetaAnalyticsEventName","reportMetaAnalytics","emitDashboardViewEvent","dashboardWatcher","weekStart","setWeekStart","dashboardInitCompleted","isNew","folderId","gridPos","w","h","parseInt","setDashboardToFetchFromLocalStorage","getProcessedDataFrames","worker","SnapshotWorker","annotationEvents","canWork","getAnnotationsInSnapshot","annotations","ArrayDataFrame","applyFieldOverrides","defaults","fieldConfigRegistry","getFieldLinksSupplier","view","dataFrame","refId","colIndex","labels","rowIndex","timeField","getTimeField","raw","get","numeric","display","formattedValueToString","getFieldDisplayValuesProxy","calc","vars","fmt","finalVars","getLinkSrv","getDataLinkUIModel"],"sourceRoot":""}