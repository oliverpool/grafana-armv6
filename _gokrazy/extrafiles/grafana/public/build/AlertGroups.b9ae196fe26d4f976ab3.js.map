{"version":3,"file":"AlertGroups.b9ae196fe26d4f976ab3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails: FC<AmNotificationsAlertDetailsProps> = ({ alert, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const instancePermissions = getInstancesPermissions(alertManagerSourceName);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        <Authorize actions={[instancePermissions.update, instancePermissions.create]} fallback={contextSrv.isEditor}>\n          {alert.status.state === AlertState.Suppressed && (\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          )}\n          {alert.status.state === AlertState.Active && (\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          )}\n        </Authorize>\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels className={styles.labels} labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <AlertLabels className={styles.headerLabels} labels={group.labels} />\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  headerLabels: css`\n    padding-bottom: 0 !important;\n    margin-bottom: -${theme.spacing(0.5)};\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup, Label, useStyles2 } from '@grafana/ui';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div className={styles.wrapper}>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { uniq } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\n\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { MatcherFilter } from './MatcherFilter';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          defaultQueryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup: AlertmanagerGroup[], group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};\n","import { uniqBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Labels } from '@grafana/data';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]): AlertmanagerGroup[] => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter((group) => Object.keys(group.labels).length === 0);\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({ labels }) => Object.keys(labels));\n            if (!noGroupingGroup) {\n              combinedGroups.push({ alerts: group.alerts, labels: {}, receiver: { name: 'NONE' } });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n          return combinedGroups;\n        }, [] as AlertmanagerGroup[]);\n      } else {\n        return groups;\n      }\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {} as Labels);\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, groupBy]);\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { AlertmanagerChoice } from '../../../plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AlertGroups = () => {\n  const { useGetAlertmanagerChoiceQuery } = alertmanagerApi;\n\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const { currentData: alertmanagerChoice } = useGetAlertmanagerChoiceQuery();\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const {\n    loading,\n    error,\n    result: results = [],\n  } = alertGroups[alertManagerSourceName || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  const grafanaAmDeliveryDisabled =\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME && alertmanagerChoice === AlertmanagerChoice.External;\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"groups\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"groups\">\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n\n      {grafanaAmDeliveryDisabled && (\n        <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n          Grafana is configured to send alerts to external alertmanagers only. No alerts are expected to be available\n          here for the selected Alertmanager.\n        </Alert>\n      )}\n\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={alertManagerSourceName || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroups;\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoice: build.query<AlertmanagerChoice, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n      transformResponse: (response: AlertmanagersChoiceResponse) => response.alertmanagersChoice,\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useEffect, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\n\nimport { LogMessages } from '../../Analytics';\n\ninterface Props {\n  className?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, defaultQueryString }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const onSearchInputChanged = useMemo(\n    () =>\n      debounce((e: FormEvent<HTMLInputElement>) => {\n        logInfo(LogMessages.filterByLabel);\n\n        const target = e.target as HTMLInputElement;\n        onFilterChange(target.value);\n      }, 600),\n    [onFilterChange]\n  );\n\n  useEffect(() => onSearchInputChanged.cancel(), [onSearchInputChanged]);\n\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <div className={className}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Search by label</span>\n          <Tooltip\n            content={\n              <div>\n                Filter alerts using label querying, ex:\n                <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        onChange={onSearchInputChanged}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["AlertDetails","alert","alertManagerSourceName","styles","getStyles","instancePermissions","isSeeSourceButtonEnabled","Authorize","annotationKey","annotationValue","AnnotationDetailsField","name","theme","AlertGroupAlertsTable","alerts","columns","AmAlertStateTag","labels","AlertLabels","items","DynamicTableWithGuidelines","AlertGroup","group","isCollapsed","setIsCollapsed","CollapseToggle","AlertGroupHeader","AlertStateFilter","onStateFilterChange","stateFilter","alertStateOptions","labelA","labelB","label","state","Label","RadioButtonGroup","GroupBy","className","groups","groupBy","onGroupingChange","labelKeyOptions","key","Icon","value","AlertGroupFilter","filterKey","setFilterKey","queryParams","setQueryParams","useQueryParams","queryString","alertState","matcherFilterKey","alertManagers","setAlertManagerSourceName","useAlertManagerSourceName","clearFilters","showClearButton","AlertManagerPicker","MatcherFilter","keys","Button","useFilteredAmGroups","filters","matchers","filteredGroup","status","labelsMatch","filtersMatch","useGroupedAlerts","combinedGroups","noGroupingGroup","groupings","groupByLabel","existingGrouping","groupKey","acc","AlertGroups","useGetAlertmanagerChoiceQuery","alertmanagerApi","dispatch","alertmanagerChoice","alertGroups","useUnifiedAlertingSelector","loading","error","results","groupedAlerts","filteredAlertGroups","grafanaAmDeliveryDisabled","fetchNotifications","interval","AlertingPageWrapper","LoadingPlaceholder","Alert","index","NoAlertManagerWarning","build","response","config","children","pageId","pageNav","isLoading","actions","fallback","action","renderExpandedContent","props","item","_","NoAlertManagersAvailable","OtherAlertManagersAvailable","availableAlertManagers","hasOtherAMs","onFilterChange","defaultQueryString","onSearchInputChanged","e","target","searchIcon","alertStateToState","useIsAlertManagerAvailable","alertManagerName","am","updateQueryParams","isAlertManagerAvailable","update","querySource","storeSource","useAlertManagersByPermission","accessType"],"sourceRoot":""}