{"version":3,"file":"PipelineAdminPage.d4730d169c622c86dc93.js","mappings":"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","sources":["webpack://grafana/./public/app/features/live/pages/AddNewRule.tsx","webpack://grafana/./public/app/features/live/pages/RuleSettingsEditor.tsx","webpack://grafana/./public/app/features/live/pages/RuleSettingsArray.tsx","webpack://grafana/./public/app/features/live/pages/RuleTest.tsx","webpack://grafana/./public/app/features/live/pages/utils.ts","webpack://grafana/./public/app/features/live/pages/RuleModal.tsx","webpack://grafana/./public/app/features/live/pages/PipelineTable.tsx","webpack://grafana/./public/app/features/live/pages/PipelineAdminPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { DataSourceRef, LiveChannelScope, SelectableValue } from '@grafana/data';\nimport { DataSourcePicker, getBackendSrv } from '@grafana/runtime';\nimport { Input, Field, Button, ValuePicker, HorizontalGroup } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\n\nimport { Rule } from './types';\n\ninterface Props {\n  onRuleAdded: (rule: Rule) => void;\n}\n\ntype PatternType = 'ds' | 'any';\n\nconst patternTypes: Array<SelectableValue<PatternType>> = [\n  {\n    label: 'Data source',\n    description: 'Configure a channel scoped to a data source instance',\n    value: 'ds',\n  },\n  {\n    label: 'Any',\n    description: 'Enter an arbitray channel pattern',\n    value: 'any',\n  },\n];\n\nexport function AddNewRule({ onRuleAdded }: Props) {\n  const [patternType, setPatternType] = useState<PatternType>();\n  const [pattern, setPattern] = useState<string>();\n  const [patternPrefix, setPatternPrefix] = useState<string>('');\n  const [datasource, setDatasource] = useState<DataSourceRef>();\n  const notifyApp = useAppNotification();\n\n  const onSubmit = () => {\n    if (!pattern) {\n      notifyApp.error('Enter path');\n      return;\n    }\n    if (patternType === 'ds' && !patternPrefix.length) {\n      notifyApp.error('Select datasource');\n      return;\n    }\n\n    getBackendSrv()\n      .post(`api/live/channel-rules`, {\n        pattern: patternPrefix + pattern,\n        settings: {\n          converter: {\n            type: 'jsonAuto',\n          },\n          frameOutputs: [\n            {\n              type: 'managedStream',\n            },\n          ],\n        },\n      })\n      .then((v: any) => {\n        console.log('ADDED', v);\n        setPattern(undefined);\n        setPatternType(undefined);\n        onRuleAdded(v.rule);\n      })\n      .catch((e) => {\n        notifyApp.error('Error adding rule', e);\n        e.isHandled = true;\n      });\n  };\n\n  if (patternType) {\n    return (\n      <div>\n        <HorizontalGroup>\n          {patternType === 'any' && (\n            <Field label=\"Pattern\">\n              <Input\n                value={pattern ?? ''}\n                onChange={(e) => setPattern(e.currentTarget.value)}\n                placeholder=\"scope/namespace/path\"\n              />\n            </Field>\n          )}\n          {patternType === 'ds' && (\n            <>\n              <Field label=\"Data source\">\n                <DataSourcePicker\n                  current={datasource}\n                  onChange={(ds) => {\n                    setDatasource(ds);\n                    setPatternPrefix(`${LiveChannelScope.DataSource}/${ds.uid}/`);\n                  }}\n                />\n              </Field>\n              <Field label=\"Path\">\n                <Input value={pattern ?? ''} onChange={(e) => setPattern(e.currentTarget.value)} placeholder=\"path\" />\n              </Field>\n            </>\n          )}\n\n          <Field label=\"\">\n            <Button onClick={onSubmit} variant={pattern?.length ? 'primary' : 'secondary'}>\n              Add\n            </Button>\n          </Field>\n\n          <Field label=\"\">\n            <Button variant=\"secondary\" onClick={() => setPatternType(undefined)}>\n              Cancel\n            </Button>\n          </Field>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <ValuePicker\n        label=\"Add channel rule\"\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        menuPlacement=\"auto\"\n        isFullWidth={false}\n        options={patternTypes}\n        onChange={(v) => setPatternType(v.value)}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { CodeEditor, Select } from '@grafana/ui';\n\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting) => void;\n  value: RuleSetting;\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsEditor = ({ onChange, value, ruleType, entitiesInfo }: Props) => {\n  return (\n    <>\n      <Select\n        key={ruleType}\n        options={entitiesInfo[ruleType]}\n        placeholder=\"Select an option\"\n        value={value?.type ?? ''}\n        onChange={(value) => {\n          // set the body with example\n          const type = value.value;\n          onChange({\n            type,\n            [type]: entitiesInfo.getExample(ruleType, type),\n          });\n        }}\n      />\n      <CodeEditor\n        height={'50vh'}\n        value={value ? JSON.stringify(value[value.type], null, '\\t') : ''}\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={(text: string) => {\n          const body = JSON.parse(text);\n          onChange({\n            type: value.type,\n            [value.type]: body,\n          });\n        }}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting[]) => void;\n  value: RuleSetting[];\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsArray = ({ onChange, value, ruleType, entitiesInfo }: Props) => {\n  const [index, setIndex] = useState<number>(0);\n  const arr = value ?? [];\n  const onRuleChange = (v: RuleSetting) => {\n    if (!value) {\n      onChange([v]);\n    } else {\n      const copy = [...value];\n      copy[index] = v;\n      onChange(copy);\n    }\n  };\n  // create array of value.length + 1\n  let indexArr: Array<SelectableValue<number>> = [];\n  for (let i = 0; i <= arr.length; i++) {\n    indexArr.push({\n      label: `${ruleType}: ${i}`,\n      value: i,\n    });\n  }\n\n  return (\n    <>\n      <Select\n        placeholder=\"Select an index\"\n        options={indexArr}\n        value={index}\n        onChange={(index) => {\n          // set index to find the correct setting\n          setIndex(index.value!);\n        }}\n      ></Select>\n      <RuleSettingsEditor onChange={onRuleChange} value={arr[index]} ruleType={ruleType} entitiesInfo={entitiesInfo} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { dataFrameFromJSON, getDisplayProcessor } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Table, Field } from '@grafana/ui';\n\nimport { ChannelFrame, Rule } from './types';\n\ninterface Props {\n  rule: Rule;\n}\n\nexport const RuleTest = (props: Props) => {\n  const [response, setResponse] = useState<ChannelFrame[]>();\n  const [data, setData] = useState<string>();\n\n  const onBlur = (text: string) => {\n    setData(text);\n  };\n\n  const onClick = () => {\n    getBackendSrv()\n      .post(`api/live/pipeline-convert-test`, {\n        channelRules: [props.rule],\n        channel: props.rule.pattern,\n        data: data,\n      })\n      .then((data: any) => {\n        const t = data.channelFrames as any[];\n        if (t) {\n          setResponse(\n            t.map((f) => {\n              const frame = dataFrameFromJSON(f.frame);\n              for (const field of frame.fields) {\n                field.display = getDisplayProcessor({ field, theme: config.theme2 });\n              }\n              return { channel: f.channel, frame };\n            })\n          );\n        }\n      })\n      .catch((e) => {\n        setResponse(e);\n      });\n  };\n\n  return (\n    <div>\n      <CodeEditor\n        height={100}\n        value=\"\"\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={onBlur}\n      />\n\n      <Button onClick={onClick} className={styles.margin}>\n        Test\n      </Button>\n\n      {response?.length &&\n        response.map((r) => (\n          <Field key={r.channel} label={r.channel}>\n            <Table data={r.frame} width={700} height={Math.min(10 * r.frame.length + 10, 150)} showTypeIcons></Table>\n          </Field>\n        ))}\n    </div>\n  );\n};\n\nconst styles = {\n  margin: css`\n    margin-bottom: 15px;\n  `,\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { PipelineListOption, PipeLineEntitiesInfo } from './types';\n\nexport async function getPipeLineEntities(): Promise<PipeLineEntitiesInfo> {\n  return await getBackendSrv()\n    .get(`api/live/pipeline-entities`)\n    .then((data) => {\n      return {\n        converter: transformLabel(data, 'converters'),\n        frameProcessors: transformLabel(data, 'frameProcessors'),\n        frameOutputs: transformLabel(data, 'frameOutputs'),\n        getExample: (ruleType, type) => {\n          return data[`${ruleType}s`]?.filter((option: PipelineListOption) => option.type === type)?.[0]?.['example'];\n        },\n      };\n    });\n}\n\nexport function transformLabel(data: any, key: keyof typeof data) {\n  if (Array.isArray(data)) {\n    return data.map((d) => ({\n      label: d[key],\n      value: d[key],\n    }));\n  }\n  return data[key].map((typeObj: PipelineListOption) => ({\n    label: typeObj.type,\n    value: typeObj.type,\n  }));\n}\n","import { css } from '@emotion/css';\nimport React, { useState, useMemo } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Modal, TabContent, TabsBar, Tab, Button } from '@grafana/ui';\n\nimport { RuleSettingsArray } from './RuleSettingsArray';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleTest } from './RuleTest';\nimport { Rule, RuleType, PipeLineEntitiesInfo, RuleSetting } from './types';\nimport { getPipeLineEntities } from './utils';\n\ninterface Props {\n  rule: Rule;\n  isOpen: boolean;\n  onClose: () => void;\n  clickColumn: RuleType;\n}\ninterface TabInfo {\n  label: string;\n  type?: RuleType;\n  isTest?: boolean;\n  isConverter?: boolean;\n  icon?: string;\n}\nconst tabs: TabInfo[] = [\n  { label: 'Converter', type: 'converter', isConverter: true },\n  { label: 'Processors', type: 'frameProcessors' },\n  { label: 'Outputs', type: 'frameOutputs' },\n  { label: 'Test', isTest: true, icon: 'flask' },\n];\n\nexport const RuleModal = (props: Props) => {\n  const { isOpen, onClose, clickColumn } = props;\n  const [rule, setRule] = useState<Rule>(props.rule);\n  const [activeTab, setActiveTab] = useState<TabInfo | undefined>(tabs.find((t) => t.type === clickColumn));\n  // to show color of Save button\n  const [hasChange, setChange] = useState<boolean>(false);\n  const [ruleSetting, setRuleSetting] = useState<any>(activeTab?.type ? rule?.settings?.[activeTab.type] : undefined);\n  const [entitiesInfo, setEntitiesInfo] = useState<PipeLineEntitiesInfo>();\n\n  const onRuleSettingChange = (value: RuleSetting | RuleSetting[]) => {\n    setChange(true);\n    if (activeTab?.type) {\n      setRule({\n        ...rule,\n        settings: {\n          ...rule.settings,\n          [activeTab?.type]: value,\n        },\n      });\n    }\n    setRuleSetting(value);\n  };\n\n  // load pipeline entities info\n  useMemo(() => {\n    getPipeLineEntities().then((data) => {\n      setEntitiesInfo(data);\n    });\n  }, []);\n\n  const onSave = () => {\n    getBackendSrv()\n      .put(`api/live/channel-rules`, rule)\n      .then(() => {\n        setChange(false);\n        onClose();\n      })\n      .catch((e) => console.error(e));\n  };\n\n  return (\n    <Modal isOpen={isOpen} title={rule.pattern} onDismiss={onClose} closeOnEscape>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab === activeTab}\n              icon={tab.icon as any}\n              onChangeTab={() => {\n                setActiveTab(tab);\n                if (tab.type) {\n                  // to notify children of the new rule\n                  setRuleSetting(rule?.settings?.[tab.type]);\n                }\n              }}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent>\n        {entitiesInfo && rule && activeTab && (\n          <>\n            {activeTab?.isTest && <RuleTest rule={rule} />}\n            {activeTab.isConverter && (\n              <RuleSettingsEditor\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={'converter'}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n            {!activeTab.isConverter && activeTab.type && (\n              <RuleSettingsArray\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={activeTab.type}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n          </>\n        )}\n        <Button onClick={onSave} className={styles.save} variant={hasChange ? 'primary' : 'secondary'}>\n          Save\n        </Button>\n      </TabContent>\n    </Modal>\n  );\n};\n\nconst styles = {\n  save: css`\n    margin-top: 5px;\n  `,\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Tag, IconButton } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { RuleModal } from './RuleModal';\nimport { Rule, Output, RuleType } from './types';\n\nfunction renderOutputTags(key: string, output?: Output): React.ReactNode {\n  if (!output?.type) {\n    return null;\n  }\n  return <Tag key={key} name={output.type} />;\n}\n\ninterface Props {\n  rules: Rule[];\n  onRuleChanged: () => void;\n  selectRule?: Rule;\n}\n\nexport const PipelineTable = (props: Props) => {\n  const { rules } = props;\n  const [isOpen, setOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState<Rule>();\n  const [clickColumn, setClickColumn] = useState<RuleType>('converter');\n\n  const onRowClick = (rule: Rule, event?: any) => {\n    if (!rule) {\n      return;\n    }\n    let column = event?.target?.getAttribute('data-column');\n    if (!column || column === 'pattern') {\n      column = 'converter';\n    }\n    setClickColumn(column);\n    setSelectedRule(rule);\n    setOpen(true);\n  };\n\n  // Supports selecting a rule from external config (after add rule)\n  useEffect(() => {\n    if (props.selectRule) {\n      onRowClick(props.selectRule);\n    }\n  }, [props.selectRule]);\n\n  const onRemoveRule = (pattern: string) => {\n    getBackendSrv()\n      .delete(`api/live/channel-rules`, JSON.stringify({ pattern: pattern }))\n      .catch((e) => console.error(e))\n      .finally(() => {\n        props.onRuleChanged();\n      });\n  };\n\n  const renderPattern = (pattern: string) => {\n    if (pattern.startsWith('ds/')) {\n      const idx = pattern.indexOf('/', 4);\n      if (idx > 3) {\n        const uid = pattern.substring(3, idx);\n        const ds = getDatasourceSrv().getInstanceSettings(uid);\n        if (ds) {\n          return (\n            <div>\n              <Tag name={ds.name} colorIndex={1} /> &nbsp;\n              <span>{pattern.substring(idx + 1)}</span>\n            </div>\n          );\n        }\n      }\n    }\n    return pattern;\n  };\n\n  return (\n    <div>\n      <div className=\"admin-list-table\">\n        <table className=\"filter-table filter-table--hover form-inline\">\n          <thead>\n            <tr>\n              <th>Channel</th>\n              <th>Converter</th>\n              <th>Processor</th>\n              <th>Output</th>\n              <th style={{ width: 10 }}>&nbsp;</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rules.map((rule) => (\n              <tr key={rule.pattern} onClick={(e) => onRowClick(rule, e)} className={styles.row}>\n                <td data-pattern={rule.pattern} data-column=\"pattern\">\n                  {renderPattern(rule.pattern)}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"converter\">\n                  {rule.settings?.converter?.type}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"processor\">\n                  {rule.settings?.frameProcessors?.map((processor) => (\n                    <span key={rule.pattern + processor.type}>{processor.type}</span>\n                  ))}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"output\">\n                  {rule.settings?.frameOutputs?.map((output) => (\n                    <span key={rule.pattern + output.type}>{renderOutputTags('out', output)}</span>\n                  ))}\n                </td>\n                <td>\n                  <IconButton\n                    name=\"trash-alt\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onRemoveRule(rule.pattern);\n                    }}\n                  ></IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {isOpen && selectedRule && (\n        <RuleModal\n          rule={selectedRule}\n          isOpen={isOpen}\n          onClose={() => {\n            setOpen(false);\n          }}\n          clickColumn={clickColumn}\n        />\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  row: css`\n    cursor: pointer;\n  `,\n};\n","import React, { useEffect, useState, ChangeEvent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\n\nimport { AddNewRule } from './AddNewRule';\nimport { PipelineTable } from './PipelineTable';\nimport { Rule } from './types';\n\nexport default function PipelineAdminPage() {\n  const [rules, setRules] = useState<Rule[]>([]);\n  const [defaultRules, setDefaultRules] = useState<any[]>([]);\n  const [newRule, setNewRule] = useState<Rule>();\n  const navModel = useNavModel('live-pipeline');\n  const [error, setError] = useState<string>();\n\n  const loadRules = () => {\n    getBackendSrv()\n      .get(`api/live/channel-rules`)\n      .then((data) => {\n        setRules(data.rules ?? []);\n        setDefaultRules(data.rules ?? []);\n      })\n      .catch((e) => {\n        if (e.data) {\n          setError(JSON.stringify(e.data, null, 2));\n        }\n      });\n  };\n\n  useEffect(() => {\n    loadRules();\n  }, []);\n\n  const onSearchQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      setRules(rules.filter((rule) => rule.pattern.toLowerCase().includes(e.target.value.toLowerCase())));\n    } else {\n      setRules(defaultRules);\n    }\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {error && <pre>{error}</pre>}\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <Input placeholder=\"Search pattern...\" onChange={onSearchQueryChange} />\n          </div>\n        </div>\n\n        <PipelineTable rules={rules} onRuleChanged={loadRules} selectRule={newRule} />\n\n        <AddNewRule\n          onRuleAdded={(r: Rule) => {\n            console.log('GOT', r, 'vs', rules[0]);\n            setNewRule(r);\n            loadRules();\n          }}\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n"],"names":["patternTypes","AddNewRule","onRuleAdded","patternType","setPatternType","pattern","setPattern","patternPrefix","setPatternPrefix","datasource","setDatasource","notifyApp","onSubmit","v","e","Field","Input","DataSourcePicker","ds","Button","ValuePicker","RuleSettingsEditor","onChange","value","ruleType","entitiesInfo","Select","type","CodeEditor","text","body","RuleSettingsArray","index","setIndex","arr","onRuleChange","copy","indexArr","i","RuleTest","props","response","setResponse","data","setData","onBlur","onClick","t","f","frame","field","config","styles","r","Table","getPipeLineEntities","transformLabel","option","key","d","typeObj","tabs","RuleModal","isOpen","onClose","clickColumn","rule","setRule","activeTab","setActiveTab","hasChange","setChange","ruleSetting","setRuleSetting","setEntitiesInfo","onRuleSettingChange","onSave","Modal","TabsBar","tab","Tab","TabContent","renderOutputTags","output","Tag","PipelineTable","rules","setOpen","selectedRule","setSelectedRule","setClickColumn","onRowClick","event","column","onRemoveRule","renderPattern","idx","uid","processor","IconButton","PipelineAdminPage","setRules","defaultRules","setDefaultRules","newRule","setNewRule","navModel","useNavModel","error","setError","loadRules","onSearchQueryChange","Page"],"sourceRoot":""}