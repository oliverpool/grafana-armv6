{"version":3,"file":"3320.254e064030ce8c770718.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/languageUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiLabelBrowser.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LabelBrowserModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/MaxLinesField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/module.ts"],"sourcesContent":["import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"loki-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\nexport type Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  runQueryOnBlur: boolean;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { runQueryOnBlur, onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    if (runQueryOnBlur) {\n      // run handleRunQuery only if the current value is different from the last-time-executed value\n      if (value !== lastRunValueRef.current) {\n        handleRunQuery(value);\n      }\n    } else {\n      onChange(value);\n    }\n  };\n\n  return <MonacoQueryFieldLazy onRunQuery={handleRunQuery} onBlur={handleBlur} {...rest} />;\n};\n","import { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Plugin, Node } from 'slate';\nimport { Editor } from 'slate-react';\n\nimport { CoreApp, QueryEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  SlatePrism,\n  TypeaheadOutput,\n  SuggestionsState,\n  QueryField,\n  TypeaheadInput,\n  BracesPlugin,\n  DOMUtil,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { LokiDatasource } from '../datasource';\nimport { escapeLabelValueInSelector, shouldRefreshLabels } from '../languageUtils';\nimport { LokiQuery, LokiOptions } from '../types';\n\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.loki.browser.labels';\n\nfunction willApplySuggestion(suggestion: string, { typeaheadContext, typeaheadText }: SuggestionsState): string {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels': {\n      const nextChar = DOMUtil.getNextCharacter();\n      if (!nextChar || nextChar === '}' || nextChar === ',') {\n        suggestion += '=';\n      }\n      break;\n    }\n\n    case 'context-label-values': {\n      // Always add quotes and remove existing ones instead\n      let suggestionModified = '';\n\n      if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n        suggestionModified = '\"';\n      }\n\n      suggestionModified += escapeLabelValueInSelector(suggestion, typeaheadText);\n\n      if (DOMUtil.getNextCharacter() !== '\"') {\n        suggestionModified += '\"';\n      }\n\n      suggestion = suggestionModified;\n\n      break;\n    }\n\n    default:\n  }\n\n  return suggestion;\n}\n\nexport interface LokiQueryFieldProps extends QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions> {\n  ExtraFieldElement?: ReactNode;\n  placeholder?: string;\n  'data-testid'?: string;\n}\n\ninterface LokiQueryFieldState {\n  labelsLoaded: boolean;\n  labelBrowserVisible: boolean;\n}\n\nexport class LokiQueryField extends React.PureComponent<LokiQueryFieldProps, LokiQueryFieldState> {\n  plugins: Array<Plugin<Editor>>;\n  _isMounted = false;\n\n  constructor(props: LokiQueryFieldProps) {\n    super(props);\n\n    this.state = { labelsLoaded: false, labelBrowserVisible: false };\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n          getSyntax: (node: Node) => 'logql',\n        },\n        { ...(prismLanguages as LanguageMap), logql: this.props.datasource.languageProvider.getSyntax() }\n      ),\n    ];\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.props.datasource.languageProvider.start();\n    if (this._isMounted) {\n      this.setState({ labelsLoaded: true });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps: LokiQueryFieldProps) {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n    const refreshLabels = shouldRefreshLabels(range, prevProps.range);\n    // We want to refresh labels when range changes (we round up intervals to a minute)\n    if (refreshLabels) {\n      languageProvider.fetchLabels();\n    }\n  }\n\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const { datasource } = this.props;\n\n    if (!datasource.languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const lokiLanguageProvider = datasource.languageProvider as LokiLanguageProvider;\n    const { history } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey } = typeahead;\n\n    const result = await lokiLanguageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey },\n      { history }\n    );\n    return result;\n  };\n\n  render() {\n    const {\n      ExtraFieldElement,\n      query,\n      app,\n      datasource,\n      placeholder = 'Enter a Loki query (run with Shift+Enter)',\n      history,\n      onRunQuery,\n      onBlur,\n    } = this.props;\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                  {config.featureToggles.lokiMonacoEditor ? (\n                    <MonacoQueryFieldWrapper\n                      runQueryOnBlur={app !== CoreApp.Explore}\n                      datasource={datasource}\n                      history={history ?? []}\n                      onChange={this.onChangeQuery}\n                      onRunQuery={onRunQuery}\n                      initialValue={query.expr ?? ''}\n                    />\n                  ) : (\n                    <QueryField\n                      additionalPlugins={this.plugins}\n                      cleanText={datasource.languageProvider.cleanText}\n                      query={query.expr}\n                      onTypeahead={this.onTypeahead}\n                      onWillApplySuggestion={willApplySuggestion}\n                      onChange={this.onChangeQuery}\n                      onBlur={onBlur}\n                      onRunQuery={onRunQuery}\n                      placeholder={placeholder}\n                      portalOrigin=\"loki\"\n                    />\n                  )}\n                </div>\n              </div>\n              {ExtraFieldElement}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n","import { TimeRange } from '@grafana/data';\n\nfunction roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nfunction roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function shouldRefreshLabels(range?: TimeRange, prevRange?: TimeRange): boolean {\n  if (range && prevRange) {\n    const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n    const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n    // If both are same, don't need to refresh\n    return !(sameMinuteFrom && sameMinuteTo);\n  }\n  return false;\n}\n\n// Loki regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of meta characters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapeLokiRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function unescapeLabelValue(labelValue: string): string {\n  return labelValue.replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapeLokiRegexp(labelValue));\n}\n\nexport function escapeLabelValueInSelector(labelValue: string, selector?: string): string {\n  return isRegexSelector(selector)\n    ? escapeLabelValueInRegexSelector(labelValue)\n    : escapeLabelValueInExactSelector(labelValue);\n}\n\nexport function isRegexSelector(selector?: string) {\n  if (selector && (selector.includes('=~') || selector.includes('!~'))) {\n    return true;\n  }\n  return false;\n}\n\nexport function isBytesString(string: string) {\n  const BYTES_KEYWORDS = [\n    'b',\n    'kib',\n    'Kib',\n    'kb',\n    'KB',\n    'mib',\n    'Mib',\n    'mb',\n    'MB',\n    'gib',\n    'Gib',\n    'gb',\n    'GB',\n    'tib',\n    'Tib',\n    'tb',\n    'TB',\n    'pib',\n    'Pib',\n    'pb',\n    'PB',\n    'eib',\n    'Eib',\n    'eb',\n    'EB',\n  ];\n  const regex = new RegExp(`^(?:-?\\\\d+(?:\\\\.\\\\d+)?)(?:${BYTES_KEYWORDS.join('|')})$`);\n  const match = string.match(regex);\n  return !!match;\n}\n","import { shuffle } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, keeps logs that contain the substring \"metrics\", and then parses and filters the logs further.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: ReturnType<typeof setTimeout>;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n    reportInteraction('grafana_loki_cheatsheet_opened', {});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n    const onClick = (query: LokiQuery) => {\n      onClickExample(query);\n      reportInteraction('grafana_loki_cheatsheet_example_clicked', {});\n    };\n\n    return (\n      <button\n        type=\"button\"\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={(e) => onClick({ refId: 'A', expr })}\n      >\n        <code>{expr}</code>\n      </button>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Label browser, or alternatively you can write a stream selector\n            into the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  HighlightPart,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  withTheme2,\n  BrowserLabel as LokiLabel,\n  fuzzyMatch,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../../prometheus/language_provider';\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../languageUtils';\n\n// Hard limit on labels to render\nconst MAX_LABEL_COUNT = 1000;\nconst MAX_VALUE_COUNT = 10000;\nconst MAX_AUTO_SELECT = 4;\nconst EMPTY_SELECTOR = '{}';\n\nexport interface BrowserProps {\n  // TODO #33976: Is it possible to use a common interface here? For example: LabelsLanguageProvider\n  languageProvider: LokiLanguageProvider | PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  app?: CoreApp;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  searchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  highlightParts?: HighlightPart[];\n  order?: number;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  const selectedLabels = [];\n  for (const label of labels) {\n    if (label.selected && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n      }\n    }\n  }\n  return ['{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return { ...label, loading: false, values: existingValues, facets: existingValues.length };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(2)};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing(2, 0)};\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  status: css`\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.colors.error.main};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing(1)};\n    resize: horizontal;\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border.medium};\n    margin: ${theme.spacing(1, 0)};\n    padding: ${theme.spacing(1, 0, 1, 1)};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing(1)};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.maxContrast};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n});\n\nexport class UnthemedLokiLabelBrowser extends React.Component<BrowserProps, BrowserState> {\n  state: BrowserState = {\n    labels: [] as SelectableLabel[],\n    searchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n  };\n\n  onChangeSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchTerm: event.target.value });\n  };\n\n  onClickRunLogsQuery = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunMetricsQuery = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsRateButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return { labels, searchTerm: '', status: '', error: '', validationStatus: '' };\n    });\n    this.props.deleteLastUsedLabels();\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, autoSelect = MAX_AUTO_SELECT, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        if (rawLabels.length > MAX_LABEL_COUNT) {\n          const error = `Too many labels found (showing only ${MAX_LABEL_COUNT} of ${rawLabels.length})`;\n          rawLabels = rawLabels.slice(0, MAX_LABEL_COUNT);\n          this.setState({ error });\n        }\n        // Auto-select all labels if label list is small enough\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: (arr.length <= autoSelect && selectedLabels.length === 0) || selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach((label) => label.selected && this.fetchValues(label.name, selector));\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false }, '');\n        return;\n      }\n      if (rawValues.length > MAX_VALUE_COUNT) {\n        const error = `Too many values for ${name} (showing only ${MAX_VALUE_COUNT} of ${rawValues.length})`;\n        rawValues = rawValues.slice(0, MAX_VALUE_COUNT);\n        this.setState({ error });\n      }\n      const values: FacettableValue[] = rawValues.map((value) => ({ name: value }));\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Loading labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} streams found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, searchTerm, status, error, validationStatus } = this.state;\n    if (labels.length === 0) {\n      return <LoadingPlaceholder text=\"Loading labels...\" />;\n    }\n    const styles = getStyles(theme);\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n\n    let selectedLabels = labels.filter((label) => label.selected && label.values);\n    if (searchTerm) {\n      selectedLabels = selectedLabels.map((label) => {\n        const searchResults = label.values!.filter((value) => {\n          // Always return selected values\n          if (value.selected) {\n            value.highlightParts = undefined;\n            return true;\n          }\n          const fuzzyMatchResult = fuzzyMatch(value.name.toLowerCase(), searchTerm.toLowerCase());\n          if (fuzzyMatchResult.found) {\n            value.highlightParts = fuzzyMatchResult.ranges;\n            value.order = fuzzyMatchResult.distance;\n            return true;\n          } else {\n            return false;\n          }\n        });\n        return {\n          ...label,\n          values: sortBy(searchResults, (value) => (value.selected ? -Infinity : value.order)),\n        };\n      });\n    } else {\n      // Clear highlight parts when searchTerm is cleared\n      selectedLabels = this.state.labels\n        .filter((label) => label.selected && label.values)\n        .map((label) => ({\n          ...label,\n          values: label?.values ? label.values.map((value) => ({ ...value, highlightParts: undefined })) : [],\n        }));\n    }\n\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.section}>\n          <Label description=\"Which labels would you like to consider for your search?\">\n            1. Select labels to search in\n          </Label>\n          <div className={styles.list}>\n            {labels.map((label) => (\n              <LokiLabel\n                key={label.name}\n                name={label.name}\n                loading={label.loading}\n                active={label.selected}\n                hidden={label.hidden}\n                facets={label.facets}\n                onClick={this.onClickLabel}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <Label description=\"Choose the label values that you would like to use for the query. Use the search field to find values across selected labels.\">\n            2. Find values for the selected labels\n          </Label>\n          <div>\n            <Input\n              onChange={this.onChangeSearch}\n              aria-label=\"Filter expression for values\"\n              value={searchTerm}\n              placeholder={'Enter a label value'}\n            />\n          </div>\n          <div className={styles.valueListArea}>\n            {selectedLabels.map((label) => (\n              <div role=\"list\" key={label.name} className={styles.valueListWrapper}>\n                <div className={styles.valueTitle} aria-label={`Values for ${label.name}`}>\n                  <LokiLabel\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    //If no facets, we want to show number of all label values\n                    facets={label.facets || label.values?.length}\n                    onClick={this.onClickLabel}\n                  />\n                </div>\n                <FixedSizeList\n                  height={200}\n                  itemCount={label.values?.length || 0}\n                  itemSize={28}\n                  itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                  width={200}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = label.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <LokiLabel\n                          name={label.name}\n                          value={value?.name}\n                          active={value?.selected}\n                          highlightParts={value?.highlightParts}\n                          onClick={this.onClickValue}\n                          searchTerm={searchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <Label>3. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n            <span className={error ? styles.error : ''}>{error || status}</span>\n          </div>\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector as logs button\" disabled={empty} onClick={this.onClickRunLogsQuery}>\n              Show logs\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunMetricsQuery}\n            >\n              Show logs rate\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LokiLabelBrowser = withTheme2(UnthemedLokiLabelBrowser);\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { LoadingPlaceholder, Modal, useStyles2 } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nimport { LokiLabelBrowser } from '../../components/LokiLabelBrowser';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\n\nexport interface Props {\n  isOpen: boolean;\n  datasource: LokiDatasource;\n  query: LokiQuery;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const LabelBrowserModal = (props: Props) => {\n  const { isOpen, onClose, datasource, app } = props;\n  const [labelsLoaded, setLabelsLoaded] = useState(false);\n  const [hasLogLabels, setHasLogLabels] = useState(false);\n  const LAST_USED_LABELS_KEY = 'grafana.datasources.loki.browser.labels';\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    datasource.languageProvider.start().then(() => {\n      setLabelsLoaded(true);\n      setHasLogLabels(datasource.languageProvider.getLabelKeys().length > 0);\n    });\n  }, [datasource, isOpen]);\n\n  const changeQuery = (value: string) => {\n    const { query, onChange, onRunQuery } = props;\n    const nextQuery = { ...query, expr: value };\n    onChange(nextQuery);\n    onRunQuery();\n  };\n\n  const onChange = (selector: string) => {\n    changeQuery(selector);\n    onClose();\n  };\n\n  const reportInteractionAndClose = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app,\n      closeType: 'modalClose',\n    });\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Label browser\" onDismiss={reportInteractionAndClose} className={styles.modal}>\n      {!labelsLoaded && <LoadingPlaceholder text=\"Loading labels...\" />}\n      {labelsLoaded && !hasLogLabels && <p>No labels found.</p>}\n      {labelsLoaded && hasLogLabels && (\n        <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n          {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n            return (\n              <LokiLabelBrowser\n                languageProvider={datasource.languageProvider}\n                onChange={onChange}\n                lastUsedLabels={lastUsedLabels}\n                storeLastUsedLabels={onLastUsedLabelsSave}\n                deleteLastUsedLabels={onLastUsedLabelsDelete}\n                app={app}\n              />\n            );\n          }}\n        </LocalStorageValueProvider>\n      )}\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n  };\n};\n","import { uniqBy } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from './types';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n}\n\nexport function LabelFilterItem({\n  item,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n}: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const getOptions = (): SelectableValue[] => {\n    const labelValues = state.labelValues ? [...state.labelValues] : [];\n    const selectedOptions = getSelectOptionsFromString(item?.value).map(toOption);\n\n    // Remove possible duplicated values\n    return uniqBy([...selectedOptions, ...labelValues], 'value');\n  };\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          placeholder=\"Select label\"\n          aria-label={selectors.components.QueryBuilder.labelSelect}\n          inputId=\"prometheus-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={item.label ? toOption(item.label) : null}\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelNames: true });\n            const labelNames = await onGetLabelNames(item);\n            setState({ labelNames, isLoadingLabelNames: undefined });\n          }}\n          isLoading={state.isLoadingLabelNames}\n          options={state.labelNames}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({\n                ...item,\n                op: item.op ?? defaultOp,\n                label: change.label,\n              } as unknown as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidLabel}\n        />\n\n        <Select\n          aria-label={selectors.components.QueryBuilder.matchOperatorSelect}\n          value={toOption(item.op ?? defaultOp)}\n          options={operators}\n          width=\"auto\"\n          onChange={(change) => {\n            if (change.value != null) {\n              onChange({\n                ...item,\n                op: change.value,\n                value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n              } as unknown as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        <Select\n          placeholder=\"Select value\"\n          aria-label={selectors.components.QueryBuilder.valueSelect}\n          inputId=\"prometheus-dimensions-filter-item-value\"\n          width=\"auto\"\n          value={\n            isMultiSelect()\n              ? getSelectOptionsFromString(item?.value).map(toOption)\n              : getSelectOptionsFromString(item?.value).map(toOption)[0]\n          }\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelValues: true });\n            const labelValues = await onGetLabelValues(item);\n            setState({\n              ...state,\n              labelValues,\n              isLoadingLabelValues: undefined,\n            });\n          }}\n          isMulti={isMultiSelect()}\n          isLoading={state.isLoadingLabelValues}\n          options={getOptions()}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({\n                ...item,\n                value: change.value,\n                op: item.op ?? defaultOp,\n              } as unknown as QueryBuilderLabelFilter);\n            } else {\n              const changes = change\n                .map((change: any) => {\n                  return change.label;\n                })\n                .join('|');\n              onChange({ ...item, value: changes, op: item.op ?? defaultOp } as unknown as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidValue}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n    </div>\n  );\n}\n\nconst operators = [\n  { label: '=~', value: '=~', isMultiValue: true },\n  { label: '=', value: '=', isMultiValue: false },\n  { label: '!=', value: '!=', isMultiValue: false },\n  { label: '!~', value: '!~', isMultiValue: true },\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorField, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: QueryBuilderLabelFilter[]) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n}: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels as QueryBuilderLabelFilter[]);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Label filters\"\n        error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n        invalid={labelFilterRequired && !hasLabelFilter}\n      >\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              item={item}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n              invalidLabel={labelFilterRequired && !item.label}\n              invalidValue={labelFilterRequired && !item.value}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport { lokiGrammar } from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all log lines matching label filters.';\n\nexport interface Props {\n  query: string;\n}\n\nexport const LokiQueryBuilderExplained = React.memo<Props>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: lokiGrammar, name: 'lokiql' };\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${lokiQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<LokiVisualQuery>\n        stepNumber={2}\n        queryModeller={lokiQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nLokiQueryBuilderExplained.displayName = 'LokiQueryBuilderExplained';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { LokiDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { LokiVisualQueryBinary } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\n\nexport interface Props {\n  nestedQuery: LokiVisualQueryBinary;\n  datasource: LokiDatasource;\n  index: number;\n  showExplain: boolean;\n  onChange: (index: number, update: LokiVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(\n  ({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain }) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.card}>\n        <div className={styles.header}>\n          <div className={styles.name}>Operator</div>\n          <Select\n            aria-label=\"Select operator\"\n            width=\"auto\"\n            options={operators}\n            value={toOption(nestedQuery.operator)}\n            onChange={(value) => {\n              onChange(index, {\n                ...nestedQuery,\n                operator: value.value!,\n              });\n            }}\n          />\n          <div className={styles.name}>Vector matches</div>\n          <div className={styles.vectorMatchWrapper}>\n            <Select<LokiVisualQueryBinary['vectorMatchesType']>\n              width=\"auto\"\n              value={nestedQuery.vectorMatchesType || 'on'}\n              allowCustomValue\n              options={[\n                { value: 'on', label: 'on' },\n                { value: 'ignoring', label: 'ignoring' },\n              ]}\n              onChange={(val) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatchesType: val.value,\n                });\n              }}\n            />\n            <AutoSizeInput\n              className={styles.vectorMatchInput}\n              minWidth={20}\n              defaultValue={nestedQuery.vectorMatches}\n              onCommitChange={(evt) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatches: evt.currentTarget.value,\n                  vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n                });\n              }}\n            />\n          </div>\n          <FlexItem grow={1} />\n          <IconButton ariaLabel=\"Remove nested query\" name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n        </div>\n        <div className={styles.body}>\n          <EditorRows>\n            <LokiQueryBuilder\n              showExplain={showExplain}\n              query={nestedQuery.query}\n              datasource={datasource}\n              onRunQuery={onRunQuery}\n              onChange={(update) => {\n                onChange(index, { ...nestedQuery, query: update });\n              }}\n            />\n          </EditorRows>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { LokiDatasource } from '../../datasource';\nimport { LokiVisualQuery, LokiVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (query: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery, showExplain }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: LokiVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { DataSourceApi, getDefaultTimeRange, LoadingState, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { QueryBuilderHints } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n} from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { escapeLabelValueInSelector } from '../../languageUtils';\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiOperationId, LokiVisualQuery } from '../types';\n\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './LokiQueryBuilderExplained';\nimport { NestedQueryList } from './NestedQueryList';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\nexport const LokiQueryBuilder = React.memo<Props>(({ datasource, query, onChange, onRunQuery, showExplain }) => {\n  const [sampleData, setSampleData] = useState<PanelData>();\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>(undefined);\n\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const withTemplateVariableOptions = async (optionsPromise: Promise<string[]>): Promise<SelectableValue[]> => {\n    const options = await optionsPromise;\n    return [...datasource.getVariables(), ...options].map((value) => ({ label: value, value }));\n  };\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<any> => {\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      await datasource.languageProvider.refreshLogLabels();\n      return datasource.languageProvider.getLabelKeys();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const series = await datasource.languageProvider.fetchSeriesLabels(expr);\n    const labelsNamesToConsider = labelsToConsider.map((l) => l.label);\n\n    const labelNames = Object.keys(series)\n      // Filter out label names that are already selected\n      .filter((name) => !labelsNamesToConsider.includes(name))\n      .sort();\n\n    return labelNames;\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    let values;\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    if (labelsToConsider.length === 0) {\n      values = await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    } else {\n      const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n      const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n      values = result[datasource.interpolateString(forLabel.label)];\n    }\n\n    return values ? values.map((v) => escapeLabelValueInSelector(v, forLabel.op)) : []; // Escape values in return\n  };\n\n  const labelFilterRequired: boolean = useMemo(() => {\n    const { labels, operations: op } = query;\n    if (!labels.length && op.length) {\n      // Filter is required when operations are present (empty line contains operation is exception)\n      if (op.length === 1 && op[0].id === LokiOperationId.LineContains && op[0].params[0] === '') {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }, [query]);\n\n  useEffect(() => {\n    const onGetSampleData = async () => {\n      const lokiQuery = { expr: lokiQueryModeller.renderQuery(query), refId: 'data-samples' };\n      const series = await datasource.getDataSamples(lokiQuery);\n      const sampleData = { series, state: LoadingState.Done, timeRange: getDefaultTimeRange() };\n      setSampleData(sampleData);\n    };\n\n    onGetSampleData().catch(console.error);\n  }, [datasource, query]);\n\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n  return (\n    <div data-testid={testIds.editor}>\n      <EditorRow>\n        <LabelFilters\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n          labelFilterRequired={labelFilterRequired}\n        />\n      </EditorRow>\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${lokiQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList\n          queryModeller={lokiQueryModeller}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource as DataSourceApi}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<LokiVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={sampleData}\n          queryModeller={lokiQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<LokiVisualQuery>\n          stepNumber={2}\n          queryModeller={lokiQueryModeller}\n          query={query}\n          lang={lang}\n          onMouseEnter={(op) => {\n            setHighlightedOp(op);\n          }}\n          onMouseLeave={() => {\n            setHighlightedOp(undefined);\n          }}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </div>\n  );\n});\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n","import React from 'react';\n\nimport { EditorRow, EditorFieldGroup } from '@grafana/experimental';\n\nimport { RawQuery } from '../../../prometheus/querybuilder/shared/RawQuery';\nimport { lokiGrammar } from '../../syntax';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: lokiGrammar, name: 'lokiql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: LokiQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: LokiVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function LokiQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr,\n    // Use initial visual query only if query.expr is empty string\n    visQuery:\n      query.expr === ''\n        ? {\n            labels: [],\n            operations: [{ id: '__line_contains', params: [''] }],\n          }\n        : undefined,\n  });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: LokiVisualQuery) => {\n    const expr = lokiQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <LokiQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        showExplain={showExplain}\n        data-testid={testIds.editor}\n      />\n      {query.expr !== '' && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'loki-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: LokiVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import React from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { RadioButtonGroup, Select, AutoSizeInput } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { isLogsQuery } from '../../queryUtils';\nimport { LokiQuery, LokiQueryType } from '../../types';\n\nexport interface Props {\n  query: LokiQuery;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  maxLines: number;\n  app?: CoreApp;\n}\n\nexport const LokiQueryBuilderOptions = React.memo<Props>(({ app, query, onChange, onRunQuery, maxLines }) => {\n  const onQueryTypeChange = (value: LokiQueryType) => {\n    onChange({ ...query, queryType: value });\n    onRunQuery();\n  };\n\n  const onResolutionChange = (option: SelectableValue<number>) => {\n    reportInteraction('grafana_loki_resolution_clicked', {\n      app,\n      resolution: option.value,\n    });\n    onChange({ ...query, resolution: option.value });\n    onRunQuery();\n  };\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, legendFormat: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n    if (query.maxLines !== newMaxLines) {\n      onChange({ ...query, maxLines: newMaxLines });\n      onRunQuery();\n    }\n  }\n\n  let queryType = query.queryType ?? (query.instant ? LokiQueryType.Instant : LokiQueryType.Range);\n  let showMaxLines = isLogsQuery(query.expr);\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup title=\"Options\" collapsedInfo={getCollapsedInfo(query, queryType, showMaxLines, maxLines)}>\n        <EditorField\n          label=\"Legend\"\n          tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        >\n          <AutoSizeInput\n            placeholder=\"{{label}}\"\n            id=\"loki-query-editor-legend-format\"\n            type=\"string\"\n            minWidth={14}\n            defaultValue={query.legendFormat}\n            onCommitChange={onLegendFormatChanged}\n          />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryType} onChange={onQueryTypeChange} />\n        </EditorField>\n        {showMaxLines && (\n          <EditorField label=\"Line limit\" tooltip=\"Upper limit for number of log lines returned by query.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder={maxLines.toString()}\n              type=\"number\"\n              min={0}\n              defaultValue={query.maxLines?.toString() ?? ''}\n              onCommitChange={onMaxLinesChange}\n            />\n          </EditorField>\n        )}\n        <EditorField label=\"Resolution\">\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={query.resolution || 1}\n            aria-label=\"Select resolution\"\n          />\n        </EditorField>\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction getCollapsedInfo(\n  query: LokiQuery,\n  queryType: LokiQueryType,\n  showMaxLines: boolean,\n  maxLines: number\n): string[] {\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find((x) => x.value === (query.resolution ?? 1));\n\n  const items: string[] = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  if (query.resolution) {\n    items.push(`Resolution: ${resolutionLabel?.label}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel?.label}`);\n\n  if (showMaxLines) {\n    items.push(`Line limit: ${query.maxLines ?? maxLines}`);\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiQueryField } from '../../components/LokiQueryField';\nimport { LokiQueryEditorProps } from '../../components/types';\n\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplained';\n\ntype Props = LokiQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function LokiQueryCodeEditor({\n  query,\n  datasource,\n  range,\n  onRunQuery,\n  onChange,\n  data,\n  app,\n  showExplain,\n  history,\n}: Props) {\n  const styles = useStyles2(getStyles);\n\n  // the inner QueryField works like this when a blur event happens:\n  // - if it has an onBlur prop, it calls it\n  // - else it calls onRunQuery (some extra conditions apply)\n  //\n  // we want it to not do anything when a blur event happens in explore mode,\n  // so we set an empty-function in such case. otherwise we set `undefined`,\n  // which will cause it to run the query when blur happens.\n  const onBlur = app === CoreApp.Explore ? () => undefined : undefined;\n\n  return (\n    <div className={styles.wrapper}>\n      <LokiQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        onBlur={onBlur}\n        history={history}\n        data={data}\n        app={app}\n        data-testid={testIds.editor}\n      />\n      {showExplain && <LokiQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      max-width: 100%;\n      .gf-form {\n        margin-bottom: 0.5;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiQueryPattern } from '../types';\n\ntype Props = {\n  pattern: LokiQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: LokiQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          query={lokiQueryModeller.renderQuery({ labels: [], operations: pattern.operations })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to replace it\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either replace your current query or create a new query'\n                  : 'your current query will be replaced'\n              }.`}\n            </div>\n            <Button size=\"sm\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Replace query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiQueryPattern, LokiQueryPatternType } from '../types';\n\nimport { QueryPattern } from './QueryPattern';\n\ntype Props = {\n  isOpen: boolean;\n  query: LokiQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onAddQuery?: (query: LokiQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(\n    () => buildVisualQueryFromString(query.expr).query.operations.length > 0,\n    [query.expr]\n  );\n\n  const onPatternSelect = (pattern: LokiQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_loki_query_patterns_selected', {\n      version: 'v2',\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose} className={styles.modal}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(LokiQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {lokiQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n  };\n};\n","import store from 'app/core/store';\n\nimport { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\n\nexport function changeEditorMode(query: LokiQuery, editorMode: QueryEditorMode, onChange: (query: LokiQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nexport function getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: LokiQuery): LokiQuery {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '' };\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = { ...result, queryType: LokiQueryType.Range };\n  }\n\n  return result;\n}\n","import React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space, Stack } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { lokiQueryEditorExplainKey, useFlag } from '../../prometheus/querybuilder/shared/hooks/useFlag';\nimport { LabelBrowserModal } from '../querybuilder/components/LabelBrowserModal';\nimport { LokiQueryBuilderContainer } from '../querybuilder/components/LokiQueryBuilderContainer';\nimport { LokiQueryBuilderOptions } from '../querybuilder/components/LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from '../querybuilder/components/LokiQueryCodeEditor';\nimport { QueryPatternsModal } from '../querybuilder/components/QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../querybuilder/parsing';\nimport { changeEditorMode, getQueryWithDefaults } from '../querybuilder/state';\nimport { LokiQuery } from '../types';\n\nimport { LokiQueryEditorProps } from './types';\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n\nexport const LokiQueryEditor = React.memo<LokiQueryEditorProps>((props) => {\n  const { onChange, onRunQuery, onAddQuery, data, app, queries, datasource } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const [labelBrowserVisible, setLabelBrowserVisible] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(lokiQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onExplainChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(event.currentTarget.checked);\n  };\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: QueryEditorMode) => {\n      reportInteraction('grafana_loki_editor_mode_clicked', {\n        newEditor: newEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: LokiQuery) => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  const onClickLabelBrowserButton = () => {\n    reportInteraction('grafana_loki_label_browser_opened', {\n      app: app,\n    });\n\n    setLabelBrowserVisible((visible) => !visible);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          onChange({ ...query, editorMode: QueryEditorMode.Builder });\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <LabelBrowserModal\n        isOpen={labelBrowserVisible}\n        datasource={datasource}\n        query={query}\n        app={app}\n        onClose={() => setLabelBrowserVisible(false)}\n        onChange={onChangeInternal}\n        onRunQuery={onRunQuery}\n      />\n      <EditorHeader>\n        <Stack gap={1}>\n          <Button\n            aria-label={selectors.components.QueryBuilder.queryPatterns}\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => {\n              setQueryPatternsModalOpen((prevValue) => !prevValue);\n\n              const visualQuery = buildVisualQueryFromString(query.expr || '');\n              reportInteraction('grafana_loki_query_patterns_opened', {\n                version: 'v2',\n                app: app ?? '',\n                editorMode: query.editorMode,\n                preSelectedOperationsCount: visualQuery.query.operations.length,\n                preSelectedLabelsCount: visualQuery.query.labels.length,\n              });\n            }}\n          >\n            Kick start your query\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={onClickLabelBrowserButton} data-testid=\"label-browser-button\">\n            Label browser\n          </Button>\n        </Stack>\n        <QueryHeaderSwitch label=\"Explain query\" value={explain} onChange={onExplainChange} />\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode!} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <LokiQueryCodeEditor {...props} query={query} onChange={onChangeInternal} showExplain={explain} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <LokiQueryBuilderContainer\n            datasource={props.datasource}\n            query={query}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            showExplain={explain}\n          />\n        )}\n        <LokiQueryBuilderOptions\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          app={app}\n          maxLines={datasource.maxLines}\n        />\n      </EditorRows>\n    </>\n  );\n});\n\nLokiQueryEditor.displayName = 'LokiQueryEditor';\n","import React from 'react';\n\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, history } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={history}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    default:\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport React, { ReactNode, useState } from 'react';\n\nimport { ArrayVector, Field, FieldType, LinkModel } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\n\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\nimport { DerivedFieldConfig } from '../types';\n\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={(event) => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: ReactNode = field.value;\n          if (field.error && field.error instanceof Error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: unknown;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        const result: DebugField = {\n          name: field.name,\n          value: value || '<no match>',\n          href: link ? link.href : undefined,\n        };\n        return result;\n      } catch (error) {\n        const result: DebugField = {\n          name: field.name,\n          error,\n        };\n        return result;\n      }\n    });\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, DataLinkInput, LegacyForms, useStyles2 } from '@grafana/ui';\n\nimport { DerivedFieldConfig } from '../types';\n\nconst { Switch, FormField } = LegacyForms;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  urlField: css`\n    flex: 1;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n});\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = useStyles2(getStyles);\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className} data-testid=\"derived-field\">\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={10}\n          className={styles.nameField}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Name\"\n          type=\"text\"\n          value={value.name}\n          onChange={handleChange('name')}\n        />\n        <FormField\n          labelWidth={10}\n          className={styles.regexField}\n          inputWidth={null}\n          label=\"Regex\"\n          type=\"text\"\n          value={value.matcherRegex}\n          onChange={handleChange('matcherRegex')}\n          tooltip={\n            'Use to parse and capture some part of the log message. You can use the captured groups in the template.'\n          }\n        />\n        <Button\n          variant=\"destructive\"\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={10}\n          label={showInternalLink ? 'Query' : 'URL'}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={styles.urlField}\n        />\n        <FormField\n          className={styles.urlDisplayLabelField}\n          labelWidth={10}\n          inputWidth={null}\n          label=\"URL Label\"\n          type=\"text\"\n          value={value.urlDisplayLabel}\n          onChange={handleChange('urlDisplayLabel')}\n          tooltip={'Use to override the button label when this derived field is found in a log.'}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              })\n            }\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { DerivedFieldConfig } from '../types';\n\nimport { DebugSection } from './DebugSection';\nimport { DerivedField } from './DerivedField';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = ({ value = [], onChange }: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from a log message and create a link from its value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value.map((field, index) => {\n          return (\n            <DerivedField\n              className={styles.derivedField}\n              key={index}\n              value={field}\n              onChange={(newField) => {\n                const newDerivedFields = [...value];\n                newDerivedFields.splice(index, 1, newField);\n                onChange(newDerivedFields);\n              }}\n              onDelete={() => {\n                const newDerivedFields = [...value];\n                newDerivedFields.splice(index, 1);\n                onChange(newDerivedFields);\n              }}\n              suggestions={[\n                {\n                  value: DataLinkBuiltInVars.valueRaw,\n                  label: 'Raw value',\n                  documentation: 'Exact string captured by the regular expression',\n                  origin: VariableOrigin.Value,\n                },\n              ]}\n            />\n          );\n        })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...value, { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MaxLinesField = (props: Props) => {\n  const { value, onChange } = props;\n  return (\n    <FormField\n      label=\"Maximum lines\"\n      labelWidth={11}\n      inputWidth={20}\n      inputEl={\n        <input\n          type=\"number\"\n          className=\"gf-form-input width-8 gf-form-input--has-help-icon\"\n          value={value}\n          onChange={(event) => onChange(event.currentTarget.value)}\n          spellCheck={false}\n          placeholder=\"1000\"\n        />\n      }\n      tooltip={\n        <>\n          Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit\n          to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when\n          displaying the log results.\n        </>\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AlertingSettings, DataSourceHttpSettings, SecureSocksProxySettings } from '@grafana/ui';\n\nimport { LokiOptions } from '../types';\n\nimport { DerivedFields } from './DerivedFields';\nimport { MaxLinesField } from './MaxLinesField';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      {config.featureToggles.secureSocksDatasourceProxy && (\n        <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n      )}\n\n      <AlertingSettings<LokiOptions> options={options} onOptionsChange={onOptionsChange} />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines || ''}\n              onChange={(value) => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n","import { DashboardLoadedEvent, DataSourcePlugin } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { LokiDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { LokiQuery } from './types';\n\nexport const plugin = new DataSourcePlugin(LokiDatasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(LokiCheatSheet);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<LokiQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n"],"names":["Field","MonacoQueryFieldLazy","props","MonacoQueryFieldWrapper","lastRunValueRef","runQueryOnBlur","onRunQuery","onChange","rest","handleRunQuery","value","handleBlur","LAST_USED_LABELS_KEY","willApplySuggestion","suggestion","typeaheadContext","typeaheadText","nextChar","suggestionModified","LokiQueryField","selector","override","query","nextQuery","typeahead","datasource","lokiLanguageProvider","history","prefix","text","wrapperClasses","labelKey","node","prism","prevProps","range","languageProvider","ExtraFieldElement","app","placeholder","onBlur","LocalStorageValueProvider","lastUsedLabels","onLastUsedLabelsSave","onLastUsedLabelsDelete","config","QueryField","roundMsToMin","milliseconds","roundSecToMin","seconds","shouldRefreshLabels","prevRange","sameMinuteFrom","sameMinuteTo","RE2_METACHARACTERS","escapeLokiRegexp","escapeLabelValueInExactSelector","labelValue","unescapeLabelValue","escapeLabelValueInRegexSelector","escapeLabelValueInSelector","isRegexSelector","isBytesString","string","BYTES_KEYWORDS","regex","DEFAULT_EXAMPLES","PREFERRED_LABELS","EXAMPLES_LIMIT","LOGQL_EXAMPLES","LokiCheatSheet","provider","labels","preferredLabel","l","values","userExamples","expr","onClickExample","onClick","e","hasUserExamples","example","item","MAX_LABEL_COUNT","MAX_VALUE_COUNT","MAX_AUTO_SELECT","EMPTY_SELECTOR","buildSelector","selectedLabels","label","selectedValues","facetLabels","possibleLabels","lastFacetted","possibleValues","existingValues","getStyles","theme","UnthemedLokiLabelBrowser","event","state","name","selected","nextValue","v","updatedFields","status","cb","error","autoSelect","rawLabels","i","arr","rawValues","streams","searchTerm","validationStatus","LoadingPlaceholder","styles","empty","searchResults","fuzzyMatchResult","fuzzy","Label","Input","index","style","Button","LokiLabelBrowser","LabelBrowserModal","isOpen","onClose","labelsLoaded","setLabelsLoaded","hasLogLabels","setHasLogLabels","changeQuery","reportInteractionAndClose","Modal","LabelFilterItem","defaultOp","onDelete","onGetLabelNames","onGetLabelValues","invalidLabel","invalidValue","setState","isMultiSelect","operator","operators","op","getSelectOptionsFromString","getOptions","labelValues","selectedOptions","Select","selectors","labelNames","change","changes","MISSING_LABEL_FILTER_ERROR_MESSAGE","LabelFilters","labelsFilters","labelFilterRequired","items","setItems","onLabelsChange","newItems","newLabels","x","hasLabelFilter","onChangeItem","EXPLAIN_LABEL_FILTER_CONTENT","LokiQueryBuilderExplained","visQuery","lang","OperationExplainedBox","RawQuery","OperationListExplained","NestedQuery","nestedQuery","onRemove","showExplain","val","AutoSizeInput","evt","IconButton","LokiQueryBuilder","update","def","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","sampleData","setSampleData","highlightedOp","setHighlightedOp","onChangeLabels","withTemplateVariableOptions","optionsPromise","options","forLabel","labelsToConsider","series","labelsNamesToConsider","lokiQuery","testIds","OperationsEditorRow","OperationList","QueryBuilderHints","QueryPreview","LokiQueryBuilderContainer","dispatch","stateSlice","exprChanged","onVisQueryChange","visualQueryChange","action","parseResult","LokiQueryBuilderOptions","maxLines","onQueryTypeChange","onResolutionChange","option","onLegendFormatChanged","onMaxLinesChange","newMaxLines","queryType","showMaxLines","QueryOptionGroup","getCollapsedInfo","RadioButtonGroup","queryTypeLabel","resolutionLabel","LokiQueryCodeEditor","data","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","Card","QueryPatternsModal","onAddQuery","queries","openTabs","setOpenTabs","selectAsNewQuery","visualQuery","patternType","Collapse","tabs","t","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","store","getDefaultEditorMode","getQueryWithDefaults","result","LokiQueryEditor","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","labelBrowserVisible","setLabelBrowserVisible","explain","setExplain","useFlag","onExplainChange","onEditorModeChange","newEditorMode","onChangeInternal","onClickLabelBrowserButton","visible","ConfirmModal","prevValue","QueryHeaderSwitch","QueryEditorModeToggle","LokiQueryEditorForAlerting","LokiQueryEditorByApp","FormField","DebugSection","derivedFields","className","debugText","setDebugText","debugFields","makeDebugFields","DebugFields","fields","field","testMatch","link","ArrayVector","Switch","DerivedField","suggestions","showInternalLink","setShowInternalLink","previousUid","usePrevious","handleChange","DataLinkInput","newValue","DataSourcePicker","ds","DerivedFields","showDebug","setShowDebug","newField","newDerivedFields","MaxLinesField","makeJsonUpdater","setMaxLines","setDerivedFields","ConfigEditor","onOptionsChange","DataSourceHttpSettings","SecureSocksProxySettings","AlertingSettings"],"sourceRoot":""}