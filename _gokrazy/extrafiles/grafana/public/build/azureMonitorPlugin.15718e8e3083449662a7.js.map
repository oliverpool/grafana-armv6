{"version":3,"file":"azureMonitorPlugin.15718e8e3083449662a7.js","mappings":"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CA,mCACA,iCACA,+BACA,uCACA,oCACA,4CACA,4BACA,yCACA,wCACA,6BACA,yCACA,sCACA,gCACA,8BACA,+BACA,uCACA,gCACA,4BACA,2BACA,2CACA,4BACA,iDACA,gDACA,wDACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,gCACA,gCACA,2CACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,mCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4CACA,uDACA,uEACA,8DACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,gBAAiB,CACf,qCACA,kCACA,gCACA,wBACA,kDACA,yBACA,2CACA,uCACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,gCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,oBAAqB,CACnB,qCACA,gCACA,wBACA,kDACA,yBACA,2CACA,uCACA,oCACA,4CACA,+BACA,oCACA,4BACA,yCACA,gCACA,8BACA,uCACA,gCACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,kBAAmB,CACjB,qCACA,gCACA,wBACA,kDACA,yBACA,2CACA,uCACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,gCACA,uCACA,gCACA,4BACA,4BACA,sCACA,kCAC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","sources":["webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/locations.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/resourceTypes.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/app_insights/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/app_insights/app_insights_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/insights_analytics/insights_analytics_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/resourcePicker/resourcePickerData.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateAnnotation.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/grafanaTemplateVariableFns.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/VariableEditor/VariableEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/variables.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/components/AnalyticsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/components/InsightsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.ts"],"sourcesContent":["import { config } from '@grafana/runtime';\n\nimport {\n  AzureAuthType,\n  AzureCloud,\n  AzureCredentials,\n  AzureDataSourceInstanceSettings,\n  AzureDataSourceSettings,\n  ConcealedSecret,\n} from './types';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nexport function getAuthType(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): AzureAuthType {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    }\n\n    // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud(): string {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n    case AzureCloud.Germany:\n      return 'germanyazuremonitor';\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud: string): string {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n    case 'germanyazuremonitor':\n      return 'https://portal.microsoftazure.de';\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\n\nexport function getAzureCloud(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): string {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      // In case of managed identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options: AzureDataSourceSettings): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n          defaultSubscriptionId: options.jsonData.subscriptionId,\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n        defaultSubscriptionId: options.jsonData.subscriptionId,\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: AzureDataSourceSettings,\n  credentials: AzureCredentials\n): AzureDataSourceSettings {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'msi',\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          clientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^()]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw?.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw?.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map((v) => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import { AnnotationEvent, dateTime, TimeSeries, VariableModel } from '@grafana/data';\nimport { concat, find, flattenDeep, forEach, get, map } from 'lodash';\n\nimport { AzureLogsTableData, AzureLogsVariable } from '../types';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\n\nexport default class ResponseParser {\n  declare columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.tables[0].columns;\n      const rows = this.results[i].result.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    forEach(rows, (row) => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        executedQueryString: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: map(columns, (col) => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        executedQueryString: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    forEach(queryResult, (result) => {\n      forEach(flattenDeep(result.rows), (row) => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    forEach(queryResult, (result) => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      forEach(result.rows, (row) => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n\n// matches (name):(type) = (defaultValue)\n// e.g. fromRangeStart:datetime = datetime(null)\n//  - name: fromRangeStart\n//  - type: datetime\n//  - defaultValue: datetime(null)\nconst METADATA_FUNCTION_PARAMS = /([\\w\\W]+):([\\w]+)(?:\\s?=\\s?([\\w\\W]+))?/;\n\nfunction transformMetadataFunction(sourceSchema: AzureLogAnalyticsMetadata) {\n  if (!sourceSchema.functions) {\n    return [];\n  }\n\n  return sourceSchema.functions.map((fn) => {\n    const params =\n      fn.parameters &&\n      fn.parameters\n        .split(', ')\n        .map((arg) => {\n          const match = arg.match(METADATA_FUNCTION_PARAMS);\n          if (!match) {\n            return;\n          }\n\n          const [, name, type, defaultValue] = match;\n\n          return {\n            name,\n            type,\n            defaultValue,\n            cslDefaultValue: defaultValue,\n          };\n        })\n        .filter(<T>(v: T): v is Exclude<T, undefined> => !!v);\n\n    return {\n      name: fn.name,\n      body: fn.body,\n      inputParameters: params || [],\n    };\n  });\n}\n\nexport function transformMetadataToKustoSchema(\n  sourceSchema: AzureLogAnalyticsMetadata,\n  nameOrIdOrSomething: string,\n  templateVariables: VariableModel[]\n) {\n  const database = {\n    name: nameOrIdOrSomething,\n    tables: sourceSchema.tables,\n    functions: transformMetadataFunction(sourceSchema),\n    majorVersion: 0,\n    minorVersion: 0,\n  };\n\n  // Adding macros as known functions\n  database.functions.push(\n    {\n      name: '$__timeFilter',\n      body: '{ true }',\n      inputParameters: [\n        {\n          name: 'timeColumn',\n          type: 'System.String',\n          defaultValue: 'TimeGenerated',\n          cslDefaultValue: 'TimeGenerated',\n        },\n      ],\n    },\n    {\n      name: '$__timeFrom',\n      body: '{ datetime(2018-06-05T18:09:58.907Z) }',\n      inputParameters: [],\n    },\n    {\n      name: '$__timeTo',\n      body: '{ datetime(2018-06-05T20:09:58.907Z) }',\n      inputParameters: [],\n    },\n    {\n      name: '$__escapeMulti',\n      body: `{ @'\\\\grafana-vm\\Network(eth0)\\Total', @'\\\\hello!'}`,\n      inputParameters: [\n        {\n          name: '$myVar',\n          type: 'System.String',\n          defaultValue: '$myVar',\n          cslDefaultValue: '$myVar',\n        },\n      ],\n    },\n    {\n      name: '$__contains',\n      body: `{ colName in ('value1','value2') }`,\n      inputParameters: [\n        {\n          name: 'colName',\n          type: 'System.String',\n          defaultValue: 'colName',\n          cslDefaultValue: 'colName',\n        },\n        {\n          name: '$myVar',\n          type: 'System.String',\n          defaultValue: '$myVar',\n          cslDefaultValue: '$myVar',\n        },\n      ],\n    }\n  );\n\n  // Adding macros as global parameters\n  const globalParameters = templateVariables.map((v) => {\n    return {\n      name: `$${v.name}`,\n      type: 'dynamic',\n    };\n  });\n\n  // It's not possible to define optional paramaters in Kusto\n  // and it's not possible to define the same function twice so\n  // we are defining $__timeFilter also as a parameter when used\n  // with no arguments as a workaround\n  globalParameters.push({\n    name: `$__timeFilter`,\n    type: 'boolean',\n  });\n\n  return {\n    clusterType: 'Engine',\n    cluster: {\n      connectionString: nameOrIdOrSomething,\n      databases: [database],\n    },\n    database: database,\n    globalParameters,\n  };\n}\n","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { map } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { isGUIDish } from '../components/ResourcePicker/utils';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport {\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport { interpolateVariable, routeNames } from '../utils/common';\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\n\ninterface AdhocQuery {\n  datasource: DataSourceRef;\n  path: string;\n  resultFormat: string;\n}\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorPath: string;\n  firstWorkspace?: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return (\n      item.hide !== true &&\n      !!item.azureLogAnalytics?.query &&\n      (!!item.azureLogAnalytics.resource || !!item.azureLogAnalytics.workspace)\n    );\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource(path).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.value, (val: any) => {\n        return {\n          text: val.name,\n          value: val.id,\n        };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorPath +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const templateSrv = getTemplateSrv();\n    const interpolatedUri = templateSrv.replace(resourceUri, {}, interpolateVariable);\n    const metadata = await this.getMetadata(interpolatedUri);\n    return transformMetadataToKustoSchema(metadata, interpolatedUri, templateSrv.getVariables());\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureLogAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resource = templateSrv.replace(item.resource, scopedVars);\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resource && this.firstWorkspace) {\n      workspace = this.firstWorkspace;\n    }\n\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.LogAnalytics,\n\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query,\n        resource,\n\n        // Workspace was removed in Grafana 8, but remains for backwards compat\n        workspace,\n      },\n    };\n  }\n\n  /**\n   * Augment the results with links back to the azure console\n   */\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res));\n      })\n    );\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(customMeta: Record<string, any>) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const workspaceId = customMeta.workspace;\n    const subscription = customMeta.subscription;\n\n    const details = await this.getWorkspaceDetails(workspaceId);\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url =\n      `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` +\n      `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n\n    const details = response.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  /*\n    In 7.5.x it used to be possible to set a default workspace id in the config on the auth page.\n    This has been deprecated, however is still used by a few legacy template queries.\n  */\n  getDeprecatedDefaultWorkSpace() {\n    return this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n  }\n\n  private buildQuery(query: string, options: any, workspace: string): AdhocQuery[] {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n\n    const querystring = querystringBuilder.generate().uriString;\n    const path = isGUIDish(workspace)\n      ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}`\n      : `${this.resourcePath}/v1${workspace}/query?${querystring}`;\n\n    const queries = [\n      {\n        datasource: this.getRef(),\n        path: path,\n        resultFormat: 'table',\n      },\n    ];\n\n    return queries;\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getFirstWorkspace(): Promise<string | undefined> {\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then((results) => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: AdhocQuery[]) {\n    return map(queries, (query) => {\n      return this.getResource(query.path)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return validationError;\n    }\n\n    let resourceOrWorkspace: string;\n    try {\n      const result = await this.getFirstWorkspace();\n      if (!result) {\n        return {\n          status: 'error',\n          message: 'Workspace not found.',\n        };\n      }\n      resourceOrWorkspace = result;\n    } catch (e) {\n      let message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n\n    try {\n      const path = isGUIDish(resourceOrWorkspace)\n        ? `${this.resourcePath}/v1/workspaces/${resourceOrWorkspace}/metadata`\n        : `${this.resourcePath}/v1${resourceOrWorkspace}/metadata`;\n\n      return await this.getResource(path).then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Azure Log Analytics service.',\n          title: 'Success',\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Log Analytics: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","// Unfortunately this list is manually maintained as there's no (nice) automated way to get\n// data from Azure.\n\nexport const locationMetadata = [\n  {\n    location: 'eastus',\n    displayName: 'East US',\n    supportsLogs: true,\n  },\n  {\n    location: 'eastus2',\n    displayName: 'East US 2',\n    supportsLogs: true,\n  },\n  {\n    location: 'southcentralus',\n    displayName: 'South Central US',\n    supportsLogs: true,\n  },\n  {\n    location: 'westus2',\n    displayName: 'West US 2',\n    supportsLogs: true,\n  },\n  {\n    location: 'westus3',\n    displayName: 'West US 3',\n    supportsLogs: true,\n  },\n  {\n    location: 'australiaeast',\n    displayName: 'Australia East',\n    supportsLogs: true,\n  },\n  {\n    location: 'southeastasia',\n    displayName: 'Southeast Asia',\n    supportsLogs: true,\n  },\n  {\n    location: 'northeurope',\n    displayName: 'North Europe',\n    supportsLogs: true,\n  },\n  {\n    location: 'uksouth',\n    displayName: 'UK South',\n    supportsLogs: true,\n  },\n  {\n    location: 'westeurope',\n    displayName: 'West Europe',\n    supportsLogs: true,\n  },\n  {\n    location: 'centralus',\n    displayName: 'Central US',\n    supportsLogs: true,\n  },\n  {\n    location: 'northcentralus',\n    displayName: 'North Central US',\n    supportsLogs: true,\n  },\n  {\n    location: 'westus',\n    displayName: 'West US',\n    supportsLogs: true,\n  },\n  {\n    location: 'southafricanorth',\n    displayName: 'South Africa North',\n    supportsLogs: true,\n  },\n  {\n    location: 'centralindia',\n    displayName: 'Central India',\n    supportsLogs: true,\n  },\n  {\n    location: 'eastasia',\n    displayName: 'East Asia',\n    supportsLogs: true,\n  },\n  {\n    location: 'japaneast',\n    displayName: 'Japan East',\n    supportsLogs: true,\n  },\n  {\n    location: 'jioindiawest',\n    displayName: 'Jio India West',\n    supportsLogs: true,\n  },\n  {\n    location: 'koreacentral',\n    displayName: 'Korea Central',\n    supportsLogs: true,\n  },\n  {\n    location: 'canadacentral',\n    displayName: 'Canada Central',\n    supportsLogs: true,\n  },\n  {\n    location: 'francecentral',\n    displayName: 'France Central',\n    supportsLogs: true,\n  },\n  {\n    location: 'germanywestcentral',\n    displayName: 'Germany West Central',\n    supportsLogs: true,\n  },\n  {\n    location: 'norwayeast',\n    displayName: 'Norway East',\n    supportsLogs: true,\n  },\n  {\n    location: 'switzerlandnorth',\n    displayName: 'Switzerland North',\n    supportsLogs: true,\n  },\n  {\n    location: 'uaenorth',\n    displayName: 'UAE North',\n    supportsLogs: true,\n  },\n  {\n    location: 'brazilsouth',\n    displayName: 'Brazil South',\n    supportsLogs: true,\n  },\n  {\n    location: 'centralusstage',\n    displayName: 'Central US (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'eastusstage',\n    displayName: 'East US (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'eastus2stage',\n    displayName: 'East US 2 (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'northcentralusstage',\n    displayName: 'North Central US (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'southcentralusstage',\n    displayName: 'South Central US (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'westusstage',\n    displayName: 'West US (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'westus2stage',\n    displayName: 'West US 2 (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'asia',\n    displayName: 'Asia',\n    supportsLogs: true,\n  },\n  {\n    location: 'asiapacific',\n    displayName: 'Asia Pacific',\n    supportsLogs: true,\n  },\n  {\n    location: 'australia',\n    displayName: 'Australia',\n    supportsLogs: true,\n  },\n  {\n    location: 'brazil',\n    displayName: 'Brazil',\n    supportsLogs: true,\n  },\n  {\n    location: 'canada',\n    displayName: 'Canada',\n    supportsLogs: true,\n  },\n  {\n    location: 'europe',\n    displayName: 'Europe',\n    supportsLogs: true,\n  },\n  {\n    location: 'global',\n    displayName: 'Global',\n    supportsLogs: true,\n  },\n  {\n    location: 'india',\n    displayName: 'India',\n    supportsLogs: true,\n  },\n  {\n    location: 'japan',\n    displayName: 'Japan',\n    supportsLogs: true,\n  },\n  {\n    location: 'uk',\n    displayName: 'United Kingdom',\n    supportsLogs: true,\n  },\n  {\n    location: 'unitedstates',\n    displayName: 'United States',\n    supportsLogs: true,\n  },\n  {\n    location: 'eastasiastage',\n    displayName: 'East Asia (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'southeastasiastage',\n    displayName: 'Southeast Asia (Stage)',\n    supportsLogs: true,\n  },\n  {\n    location: 'westcentralus',\n    displayName: 'West Central US',\n    supportsLogs: true,\n  },\n  {\n    location: 'southafricawest',\n    displayName: 'South Africa West',\n    supportsLogs: true,\n  },\n  {\n    location: 'australiacentral',\n    displayName: 'Australia Central',\n    supportsLogs: true,\n  },\n  {\n    location: 'australiacentral2',\n    displayName: 'Australia Central 2',\n    supportsLogs: true,\n  },\n  {\n    location: 'australiasoutheast',\n    displayName: 'Australia Southeast',\n    supportsLogs: true,\n  },\n  {\n    location: 'japanwest',\n    displayName: 'Japan West',\n    supportsLogs: true,\n  },\n  {\n    location: 'koreasouth',\n    displayName: 'Korea South',\n    supportsLogs: true,\n  },\n  {\n    location: 'southindia',\n    displayName: 'South India',\n    supportsLogs: true,\n  },\n  {\n    location: 'westindia',\n    displayName: 'West India',\n    supportsLogs: true,\n  },\n  {\n    location: 'canadaeast',\n    displayName: 'Canada East',\n    supportsLogs: true,\n  },\n  {\n    location: 'francesouth',\n    displayName: 'France South',\n    supportsLogs: true,\n  },\n  {\n    location: 'germanynorth',\n    displayName: 'Germany North',\n    supportsLogs: true,\n  },\n  {\n    location: 'norwaywest',\n    displayName: 'Norway West',\n    supportsLogs: true,\n  },\n  {\n    location: 'switzerlandwest',\n    displayName: 'Switzerland West',\n    supportsLogs: true,\n  },\n  {\n    location: 'ukwest',\n    displayName: 'UK West',\n    supportsLogs: true,\n  },\n  {\n    location: 'uaecentral',\n    displayName: 'UAE Central',\n    supportsLogs: true,\n  },\n  {\n    location: 'brazilsoutheast',\n    displayName: 'Brazil Southeast',\n    supportsLogs: true,\n  },\n  {\n    location: 'chinaeast',\n    displayName: 'China Eest',\n    supportsLogs: true,\n  },\n  {\n    location: 'chinaeast2',\n    displayName: 'China Eest 2',\n    supportsLogs: true,\n  },\n  {\n    location: 'chinanorth',\n    displayName: 'China North',\n    supportsLogs: true,\n  },\n  {\n    location: 'chinanorth2',\n    displayName: 'China North 2',\n    supportsLogs: true,\n  },\n  {\n    location: 'chinanorth3',\n    displayName: 'China North 3',\n    supportsLogs: true,\n  },\n];\n\nexport const logsSupportedLocationsKusto = locationMetadata\n  .filter((v) => v.supportsLogs)\n  .map((v) => `\"${v.location}\"`)\n  .join(',');\n\n// Object, keyed by location ID\nexport const locationDisplayNames: Record<string, string> = locationMetadata.reduce(\n  (acc, location) => ({\n    ...acc,\n    [location.location]: location.displayName,\n  }),\n  {}\n);\n","// Unfortunately this list is manually maintained as there's no (nice) automated way to get\n// data from Azure.\n\nexport const resourceTypeMetadata = [\n  {\n    resourceType: 'microsoft.analysisservices/servers',\n    displayName: 'Analysis Services',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.synapse/workspaces/bigdatapools',\n    displayName: 'Apache Spark pool',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.apimanagement/service',\n    displayName: 'API Management service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.appconfiguration/configurationstores',\n    displayName: 'App Configuration',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.web/sites/slots',\n    displayName: 'App Service (Slot)',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.web/hostingenvironments',\n    displayName: 'App Service Environment',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.web/serverfarms',\n    displayName: 'App Service plan',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.web/sites',\n    displayName: 'App Service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/applicationgateways',\n    displayName: 'Application gateway',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.insights/components',\n    displayName: 'Application Insights',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.automation/automationaccounts',\n    displayName: 'Automation Account',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.insights/autoscalesettings',\n    displayName: 'Autoscale Settings',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.aadiam/azureadmetrics',\n    displayName: 'Azure AD Metrics',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.cache/redis',\n    displayName: 'Azure Cache for Redis',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.documentdb/databaseaccounts',\n    displayName: 'Azure Cosmos DB account',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.kusto/clusters',\n    displayName: 'Azure Data Explorer Cluster',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.dbformariadb/servers',\n    displayName: 'Azure Database for MariaDB server',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.dbformysql/servers',\n    displayName: 'Azure Database for MySQL server',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.dbforpostgresql/flexibleservers',\n    displayName: 'Azure Database for PostgreSQL flexible server',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.dbforpostgresql/servergroupsv2',\n    displayName: 'Azure Database for PostgreSQL server group',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.dbforpostgresql/servers',\n    displayName: 'Azure Database for PostgreSQL server',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.dbforpostgresql/serversv2',\n    displayName: 'Azure Database for PostgreSQL server v2',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.resources/subscriptions',\n    displayName: 'Subscription',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.appplatform/spring',\n    displayName: 'Azure Spring Cloud',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.databoxedge/databoxedgedevices',\n    displayName: 'Azure Stack Edge / Data Box Gateway',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.azurestackresourcemonitor/storageaccountmonitor',\n    displayName: 'Azure Stack Resource Monitor',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.synapse/workspaces',\n    displayName: 'Synapse workspace',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/bastionhosts',\n    displayName: 'Bastion',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.batch/batchaccounts',\n    displayName: 'Batch account',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.botservice/botservices',\n    displayName: 'Bot Service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.netapp/netappaccounts/capacitypools',\n    displayName: 'Capacity pool',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.classiccompute/domainnames',\n    displayName: 'Cloud service (classic)',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.vmwarecloudsimple/virtualmachines',\n    displayName: 'CloudSimple Virtual Machine',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.cognitiveservices/accounts',\n    displayName: 'Cognitive Services',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/networkwatchers/connectionmonitors',\n    displayName: 'Connection Monitors',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/connections',\n    displayName: 'Connection',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.containerinstance/containergroups',\n    displayName: 'Container instances',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.containerregistry/registries',\n    displayName: 'Container registry',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.insights/qos',\n    displayName: 'Custom Metric Usage',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.customerinsights/hubs',\n    displayName: 'CustomerInsights',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.datafactory/datafactories',\n    displayName: 'Data factory',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.datafactory/factories',\n    displayName: 'Data factory (V2)',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.datalakeanalytics/accounts',\n    displayName: 'Data Lake Analytics',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.datalakestore/accounts',\n    displayName: 'Data Lake Storage Gen1',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.datashare/accounts',\n    displayName: 'Data Share',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.synapse/workspaces/sqlpools',\n    displayName: 'Dedicated SQL pool',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.devices/provisioningservices',\n    displayName: 'Device Provisioning Service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.compute/disks',\n    displayName: 'Disk',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/dnszones',\n    displayName: 'DNS zone',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.eventgrid/domains',\n    displayName: 'Event Grid Domain',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.eventgrid/systemtopics',\n    displayName: 'Event Grid System Topic',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.eventgrid/topics',\n    displayName: 'Event Grid Topic',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.eventhub/clusters',\n    displayName: 'Event Hubs Cluster',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.eventhub/namespaces',\n    displayName: 'Event Hubs Namespace',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/expressroutecircuits',\n    displayName: 'ExpressRoute circuit',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/expressrouteports',\n    displayName: 'ExpressRoute Direct',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/expressroutegateways',\n    displayName: 'ExpressRoute Gateways',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.fabric.admin/fabriclocations',\n    displayName: 'Fabric Locations',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/azurefirewalls',\n    displayName: 'Firewall',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/frontdoors',\n    displayName: 'Front Door',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.hdinsight/clusters',\n    displayName: 'HDInsight cluster',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.storagecache/caches',\n    displayName: 'HPC cache',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.logic/integrationserviceenvironments',\n    displayName: 'Integration Service Environment',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.iotcentral/iotapps',\n    displayName: 'IoT Central Application',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.devices/iothubs',\n    displayName: 'IoT Hub',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.keyvault/vaults',\n    displayName: 'Key vault',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.kubernetes/connectedclusters',\n    displayName: 'Kubernetes - Azure Arc',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.containerservice/managedclusters',\n    displayName: 'Kubernetes service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.media/mediaservices/liveevents',\n    displayName: 'Live event',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/loadbalancers',\n    displayName: 'Load balancer',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.operationalinsights/workspaces',\n    displayName: 'Log Analytics workspace',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.logic/workflows',\n    displayName: 'Logic app',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.machinelearningservices/workspaces',\n    displayName: 'Machine learning',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.media/mediaservices',\n    displayName: 'Media service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/natgateways',\n    displayName: 'NAT gateway',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/networkinterfaces',\n    displayName: 'Network interface',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/networkvirtualappliances',\n    displayName: 'Network Virtual Appliances',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/networkwatchers',\n    displayName: 'Network Watcher',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.notificationhubs/namespaces/notificationhubs',\n    displayName: 'Notification Hub',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/p2svpngateways',\n    displayName: 'P2S VPN Gateways',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.peering/peeringservices',\n    displayName: 'Peering Service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.powerbidedicated/capacities',\n    displayName: 'Power BI Embedded',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/privateendpoints',\n    displayName: 'Private endpoint',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/privatelinkservices',\n    displayName: 'Private link service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/publicipaddresses',\n    displayName: 'Public IP address',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.cache/redisenterprise',\n    displayName: 'Redis Enterprise',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.relay/namespaces',\n    displayName: 'Relay',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.synapse/workspaces/scopepools',\n    displayName: 'Scope pool',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.search/searchservices',\n    displayName: 'Search service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.servicebus/namespaces',\n    displayName: 'Service Bus Namespace',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.signalrservice/signalr',\n    displayName: 'SignalR',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.operationsmanagement/solutions',\n    displayName: 'Solution',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.sql/servers/databases',\n    displayName: 'SQL database',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.sql/servers/elasticpools',\n    displayName: 'SQL elastic pool',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.sql/managedinstances',\n    displayName: 'SQL managed instance',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.storage/storageaccounts',\n    displayName: 'Storage account',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.classicstorage/storageaccounts',\n    displayName: 'Storage account (classic)',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.storagesync/storagesyncservices',\n    displayName: 'Storage Sync Service',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.streamanalytics/streamingjobs',\n    displayName: 'Stream Analytics job',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.media/mediaservices/streamingendpoints',\n    displayName: 'Streaming Endpoint',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.timeseriesinsights/environments',\n    displayName: 'Time Series Insights environment',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/trafficmanagerprofiles',\n    displayName: 'Traffic Manager profile',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.compute/virtualmachinescalesets',\n    displayName: 'Virtual machine scale set',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.compute/virtualmachines',\n    displayName: 'Virtual machine',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.classiccompute/virtualmachines',\n    displayName: 'Virtual machine (classic)',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/virtualnetworkgateways',\n    displayName: 'Virtual network gateway',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.netapp/netappaccounts/capacitypools/volumes',\n    displayName: 'Volume',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.network/vpngateways',\n    displayName: 'VPN Gateways',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.cdn/cdnwebapplicationfirewallpolicies',\n    displayName: 'Content Delivery Network WAF policy',\n    supportsLogs: true,\n  },\n  {\n    resourceType: 'microsoft.web/hostingenvironments/workerpools',\n    displayName: 'WorkerPools',\n    supportsLogs: true,\n  },\n];\n\nexport const logsSupportedResourceTypesKusto = resourceTypeMetadata\n  .filter((v) => v.supportsLogs)\n  .map((v) => `\"${v.resourceType}\"`)\n  .join(',');\n\n// Object, keyed by resourceType ID\nexport const resourceTypeDisplayNames: Record<string, string> = resourceTypeMetadata.reduce(\n  (acc, resourceType) => ({\n    ...acc,\n    [resourceType.resourceType]: resourceType.displayName,\n  }),\n  {}\n);\n","import { find, get } from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorLocalizedValue,\n  AzureMonitorMetricAvailabilityMetadata,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorOption,\n} from '../types';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        const value = get(result.value[i], valueFieldName);\n        const text = get(result.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (\n        typeof result.value[i].type === 'string' &&\n        result.value[i].type.toLocaleLowerCase() === metricDefinition.toLocaleLowerCase()\n      ) {\n        list.push({\n          text: result.value[i].name,\n          value: result.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: AzureMonitorMetricsMetadataResponse, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n    const metricData = result?.value.find((v) => v.name.value === metricName);\n\n    if (!metricData) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n\n      supportedTimeGrains: [\n        { label: 'Auto', value: 'auto' },\n        ...ResponseParser.parseTimeGrains(metricData.metricAvailabilities ?? []),\n      ],\n      dimensions: ResponseParser.parseDimensions(metricData.dimensions ?? []),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: AzureMonitorMetricAvailabilityMetadata[]): AzureMonitorOption[] {\n    const timeGrains: AzureMonitorOption[] = [];\n\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach((avail) => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          label: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n\n    return timeGrains;\n  }\n\n  static parseDimensions(metadataDimensions: AzureMonitorLocalizedValue[]) {\n    return metadataDimensions.map((dimension) => {\n      return {\n        label: dimension.localizedValue || dimension.value,\n        value: dimension.value,\n      };\n    });\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${get(result.data.value[i], textFieldName)} - ${get(result.data.value[i], valueFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'customerId';\n    const textFieldName = 'name';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i].properties, valueFieldName)])) {\n        list.push({\n          label: get(result.data.value[i], textFieldName),\n          value: get(result.data.value[i].properties, valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.AppConfiguration/configurationStores',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.Cdn/cdnwebapplicationfirewallpolicies',\n      'Microsoft.Cdn/profiles',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforMySQL/flexibleServers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.DBforPostgreSQL/flexibleServers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.Network/natGateways',\n      'Microsoft.Network/vpngateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.SignalRService/SignalR',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.Cdn/cdnwebapplicationfirewallpolicies',\n      'Microsoft.Cdn/profiles',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.Cdn/cdnwebapplicationfirewallpolicies',\n      'Microsoft.Cdn/profiles',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.Cdn/cdnwebapplicationfirewallpolicies',\n      'Microsoft.Cdn/profiles',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = [baseUrl, subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    const urlPrefix = urlArray.join('/');\n    return `${urlPrefix}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = [baseUrl, subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    const urlPrefix = urlArray.join('/');\n    return (\n      `${urlPrefix}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}` +\n      `&metricnamespace=${encodeURIComponent(metricNamespace)}`\n    );\n  }\n}\n","import { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { filter, startsWith } from 'lodash';\n\nimport { resourceTypeDisplayNames } from '../azureMetadata';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorQuery,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport { routeNames } from '../utils/common';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport UrlBuilder from './url_builder';\n\nconst defaultDropdownValue = 'select';\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  listByResourceGroupApiVersion = '2021-04-01';\n  defaultSubscriptionId?: string;\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare resourceGroup: string;\n  declare resourceName: string;\n  supportedMetricNamespaces: string[] = [];\n  timeSrv: TimeSrv;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.timeSrv = getTimeSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = `${routeNames.azureMonitor}/subscriptions`;\n    this.supportedMetricNamespaces = new SupportedNamespaces(cloud).get();\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!(\n      item.hide !== true &&\n      item.azureMonitor &&\n      item.azureMonitor.resourceGroup &&\n      item.azureMonitor.resourceGroup !== defaultDropdownValue &&\n      item.azureMonitor.resourceName &&\n      item.azureMonitor.resourceName !== defaultDropdownValue &&\n      item.azureMonitor.metricDefinition &&\n      item.azureMonitor.metricDefinition !== defaultDropdownValue &&\n      item.azureMonitor.metricName &&\n      item.azureMonitor.metricName !== defaultDropdownValue &&\n      item.azureMonitor.aggregation &&\n      item.azureMonitor.aggregation !== defaultDropdownValue\n    );\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureMonitor;\n\n    if (!item) {\n      // return target;\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionFilters = (item.dimensionFilters ?? [])\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filter = templateSrv.replace(f.filter ?? '', scopedVars);\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filter: filter || '*', // send * when empty\n        };\n      });\n\n    return {\n      refId: target.refId,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace:\n          metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionFilters,\n        top: top || '10',\n        alias: item.alias,\n      },\n    };\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource(`${this.resourcePath}?api-version=2019-03-01`).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups?api-version=${this.listByResourceGroupApiVersion}`\n    ).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.listByResourceGroupApiVersion}`\n    )\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result) => {\n        return filter(result, (t) => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result.map((v) => ({\n          value: v.value,\n          text: resourceTypeDisplayNames[v.value.toLowerCase()] || v.value,\n        }));\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string, skipToken?: string) {\n    let url =\n      `${this.resourcePath}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?` +\n      `$filter=resourceType eq '${metricDefinition}'&` +\n      `api-version=${this.listByResourceGroupApiVersion}`;\n    if (skipToken) {\n      url += `&$skiptoken=${skipToken}`;\n    }\n    return this.getResource(url).then(async (result: any) => {\n      let list: Array<{ text: string; value: string }> = [];\n      if (startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n        for (let i = 0; i < list.length; i++) {\n          list[i].text += '/default';\n          list[i].value += '/default';\n        }\n      } else {\n        list = ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      if (result.nextLink) {\n        // If there is a nextLink, we should request more pages\n        const nextURL = new URL(result.nextLink);\n        const nextToken = nextURL.searchParams.get('$skiptoken');\n        if (!nextToken) {\n          throw Error('unable to request the next page of resources');\n        }\n        const nextPage = await this.getResourceNames(subscriptionId, resourceGroup, metricDefinition, nextToken);\n        list = list.concat(nextPage);\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return Promise.resolve(validationError);\n    }\n\n    try {\n      const url = `${this.resourcePath}?api-version=2019-03-01`;\n\n      return await this.getResource(url).then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Azure Monitor service.',\n          title: 'Success',\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Monitor: ';\n      message += e.statusText ? e.statusText + ': ' : '';\n\n      if (e.data && e.data.error && e.data.error.code) {\n        message += e.data.error.code + '. ' + e.data.error.message;\n      } else if (e.data && e.data.error) {\n        message += e.data.error;\n      } else if (e.data) {\n        message += e.data;\n      } else {\n        message += 'Cannot connect to Azure Monitor REST API.';\n      }\n      return {\n        status: 'error',\n        message: message,\n      };\n    }\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","// eslint-disable-next-line lodash/import-scope\nimport _ from 'lodash';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from '../types';\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { interpolateVariable } from '../utils/common';\n\nexport default class AzureResourceGraphDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!item.azureResourceGraph?.query;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureResourceGraph;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const variableNames = templateSrv.getVariables().map((v) => `$${v.name}`);\n    const subscriptionVar = _.find(target.subscriptions, (sub) => _.includes(variableNames, sub));\n    const interpolatedSubscriptions = templateSrv\n      .replace(subscriptionVar, scopedVars, (v: any) => v)\n      .split(',')\n      .filter((v) => v.length > 0);\n    const subscriptions = [\n      ...interpolatedSubscriptions,\n      ..._.filter(target.subscriptions, (sub) => !_.includes(variableNames, sub)),\n    ];\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.AzureResourceGraph,\n      subscriptions,\n      azureResourceGraph: {\n        resultFormat: 'table',\n        query,\n      },\n    };\n  }\n}\n","import { concat, filter, find, forEach, indexOf, intersection, isObject, map, without, keys as _keys } from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.Tables[0].Columns;\n        const rows = this.results[i].result.Tables[0].Rows;\n        data = concat(data, this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton));\n      } else {\n        const value = this.results[i].result.value;\n        const alias = this.results[i].query.alias;\n        data = concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = map(columns, (column) => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    forEach(yaxisesSplit, (yaxis) => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    forEach(rows, (row) => {\n      forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _keys(obj);\n    return indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _keys(segment);\n\n    return filter(without(keys, 'start', 'end'), (key) => {\n      return isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _keys(dataObj);\n    return intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { metrics: any }) {\n    const keys = _keys(result.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results && this.results.Tables) {\n      for (let i = 0; i < this.results.Tables[0].Rows.length; i++) {\n        const column = this.results.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import { DataQueryRequest, DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { isString } from 'lodash';\n\nimport TimegrainConverter from '../../../time_grain_converter';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorQuery,\n  DatasourceValidationResult,\n  DeprecatedAzureQueryType,\n} from '../../../types';\nimport { routeNames } from '../../../utils/common';\nimport ResponseParser from './response_parser';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\n\nexport default class AppInsightsDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  resourcePath: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId || '';\n\n    this.resourcePath = `${routeNames.appInsights}/${this.version}/apps/${this.applicationId}`;\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    if (item.xaxis && !item.timeColumn) {\n      item.timeColumn = item.xaxis;\n    }\n\n    if (item.yaxis && !item.valueColumn) {\n      item.valueColumn = item.yaxis;\n    }\n\n    if (item.spliton && !item.segmentColumn) {\n      item.segmentColumn = item.spliton;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: true,\n        rawQueryString: getTemplateSrv().replace(item.rawQueryString, options.scopedVars),\n        timeColumn: item.timeColumn,\n        valueColumn: item.valueColumn,\n        segmentColumn: item.segmentColumn,\n      },\n    };\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.appInsights;\n\n    if (!item) {\n      return target;\n    }\n\n    const old: any = item;\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (old.timeGrainCount) {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(old.timeGrainCount, item.timeGrainUnit);\n    } else if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    // migration for non-standard names\n    if (old.groupBy && !item.dimension) {\n      item.dimension = [old.groupBy];\n    }\n    if (old.filter && !item.dimensionFilter) {\n      item.dimensionFilter = old.filter;\n    }\n\n    // Migrate single dimension string to array\n    if (isString(item.dimension)) {\n      if (item.dimension === 'None') {\n        item.dimension = [];\n      } else {\n        item.dimension = [item.dimension as string];\n      }\n    }\n    if (!item.dimension) {\n      item.dimension = [];\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    return {\n      refId: target.refId,\n      queryType: DeprecatedAzureQueryType.ApplicationInsights,\n      appInsights: {\n        timeGrain: templateSrv.replace((item.timeGrain || '').toString(), scopedVars),\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        aggregation: templateSrv.replace(item.aggregation, scopedVars),\n        dimension: item.dimension.map((d) => templateSrv.replace(d, scopedVars)),\n        dimensionFilter: templateSrv.replace(item.dimensionFilter, scopedVars),\n        alias: item.alias,\n      },\n    };\n  }\n\n  testDatasource(): Promise<DatasourceValidationResult> {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path)\n      .then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Application Insights service.',\n          title: 'Success',\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  getMetricNames() {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const path = `${this.resourcePath}/query/schema`;\n    return this.getResource(path).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { AzureDataSourceJsonData, DeprecatedAzureQueryType } from '../../../types';\nimport AppInsightsDatasource from '../app_insights/app_insights_datasource';\nimport { DeprecatedAzureMonitorQuery } from '../types';\n\nexport default class InsightsAnalyticsDatasource extends AppInsightsDatasource {\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(target: DeprecatedAzureMonitorQuery, scopedVars: ScopedVars): DeprecatedAzureMonitorQuery {\n    const item = target.insightsAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const query = item.rawQueryString && !item.query ? item.rawQueryString : item.query;\n\n    return {\n      refId: target.refId,\n      queryType: DeprecatedAzureQueryType.InsightsAnalytics,\n      insightsAnalytics: {\n        query: getTemplateSrv().replace(query, scopedVars),\n        resultFormat: item.resultFormat,\n      },\n    };\n  }\n}\n","import { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { DataSourceInstanceSettings } from '../../../../../../packages/grafana-data/src';\nimport {\n  locationDisplayNames,\n  logsSupportedLocationsKusto,\n  logsSupportedResourceTypesKusto,\n  resourceTypeDisplayNames,\n} from '../azureMetadata';\nimport { ResourceRowGroup, ResourceRowType } from '../components/ResourcePicker/types';\nimport { parseResourceURI } from '../components/ResourcePicker/utils';\nimport {\n  AzureDataSourceJsonData,\n  AzureGraphResponse,\n  AzureMonitorQuery,\n  AzureResourceGraphOptions,\n  AzureResourceSummaryItem,\n  RawAzureResourceGroupItem,\n  RawAzureResourceItem,\n  RawAzureSubscriptionItem,\n} from '../types';\nimport { routeNames } from '../utils/common';\n\nconst RESOURCE_GRAPH_URL = '/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01';\n\nexport default class ResourcePickerData extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  private resourcePath: string;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.resourcePath = `${routeNames.resourceGraph}`;\n  }\n\n  async getSubscriptions(): Promise<ResourceRowGroup> {\n    const query = `\n    resources\n    | join kind=inner (\n              ResourceContainers\n                | where type == 'microsoft.resources/subscriptions'\n                | project subscriptionName=name, subscriptionURI=id, subscriptionId\n              ) on subscriptionId\n    | summarize count() by subscriptionName, subscriptionURI, subscriptionId\n    | order by subscriptionName desc\n  `;\n\n    let resources: RawAzureSubscriptionItem[] = [];\n\n    let allFetched = false;\n    let $skipToken = undefined;\n    while (!allFetched) {\n      // The response may include several pages\n      let options: Partial<AzureResourceGraphOptions> = {};\n      if ($skipToken) {\n        options = {\n          $skipToken,\n        };\n      }\n      const resourceResponse = await this.makeResourceGraphRequest<RawAzureSubscriptionItem[]>(query, 1, options);\n      if (!resourceResponse.data.length) {\n        throw new Error('No subscriptions were found');\n      }\n      resources = resources.concat(resourceResponse.data);\n      $skipToken = resourceResponse.$skipToken;\n      allFetched = !$skipToken;\n    }\n\n    return resources.map((subscription) => ({\n      name: subscription.subscriptionName,\n      id: subscription.subscriptionId,\n      uri: `/subscriptions/${subscription.subscriptionId}`,\n      typeLabel: 'Subscription',\n      type: ResourceRowType.Subscription,\n      children: [],\n    }));\n  }\n\n  async getResourceGroupsBySubscriptionId(subscriptionId: string): Promise<ResourceRowGroup> {\n    const query = `\n    resources\n     | join kind=inner (\n       ResourceContainers\n       | where type == 'microsoft.resources/subscriptions/resourcegroups'\n       | project resourceGroupURI=id, resourceGroupName=name, resourceGroup, subscriptionId\n     ) on resourceGroup, subscriptionId\n\n     | where type in (${logsSupportedResourceTypesKusto})\n     | where subscriptionId == '${subscriptionId}'\n     | summarize count() by resourceGroupName, resourceGroupURI\n     | order by resourceGroupURI asc`;\n\n    let resourceGroups: RawAzureResourceGroupItem[] = [];\n    let allFetched = false;\n    let $skipToken = undefined;\n    while (!allFetched) {\n      // The response may include several pages\n      let options: Partial<AzureResourceGraphOptions> = {};\n      if ($skipToken) {\n        options = {\n          $skipToken,\n        };\n      }\n      const resourceResponse = await this.makeResourceGraphRequest<RawAzureResourceGroupItem[]>(query, 1, options);\n      resourceGroups = resourceGroups.concat(resourceResponse.data);\n      $skipToken = resourceResponse.$skipToken;\n      allFetched = !$skipToken;\n    }\n\n    return resourceGroups.map((r) => {\n      const parsedUri = parseResourceURI(r.resourceGroupURI);\n      if (!parsedUri || !parsedUri.resourceGroup) {\n        throw new Error('unable to fetch resource groups');\n      }\n      return {\n        name: r.resourceGroupName,\n        uri: r.resourceGroupURI,\n        id: parsedUri.resourceGroup,\n        type: ResourceRowType.ResourceGroup,\n        typeLabel: 'Resource Group',\n        children: [],\n      };\n    });\n  }\n\n  async getResourcesForResourceGroup(resourceGroupId: string): Promise<ResourceRowGroup> {\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(`\n      resources\n      | where id hasprefix \"${resourceGroupId}\"\n      | where type in (${logsSupportedResourceTypesKusto}) and location in (${logsSupportedLocationsKusto})\n    `);\n\n    return response.map((item) => {\n      const parsedUri = parseResourceURI(item.id);\n      if (!parsedUri || !parsedUri.resource) {\n        throw new Error('unable to fetch resource details');\n      }\n      return {\n        name: item.name,\n        id: parsedUri.resource,\n        uri: item.id,\n        resourceGroupName: item.resourceGroup,\n        type: ResourceRowType.Resource,\n        typeLabel: resourceTypeDisplayNames[item.type] || item.type,\n        location: locationDisplayNames[item.location] || item.location,\n      };\n    });\n  }\n\n  // used to make the select resource button that launches the resource picker show a nicer file path to users\n  async getResourceURIDisplayProperties(resourceURI: string): Promise<AzureResourceSummaryItem> {\n    const { subscriptionID, resourceGroup, resource } = parseResourceURI(resourceURI) ?? {};\n\n    if (!subscriptionID) {\n      throw new Error('Invalid resource URI passed');\n    }\n\n    // resourceGroupURI and resourceURI could be invalid values, but that's okay because the join\n    // will just silently fail as expected\n    const subscriptionURI = `/subscriptions/${subscriptionID}`;\n    const resourceGroupURI = `${subscriptionURI}/resourceGroups/${resourceGroup}`;\n\n    const query = `\n    resourcecontainers\n    | where type == \"microsoft.resources/subscriptions\"\n    | where id =~ \"${subscriptionURI}\"\n    | project subscriptionName=name, subscriptionId\n\n    | join kind=leftouter (\n      resourcecontainers            \n            | where type == \"microsoft.resources/subscriptions/resourcegroups\"\n            | where id =~ \"${resourceGroupURI}\"\n            | project resourceGroupName=name, resourceGroup, subscriptionId\n        ) on subscriptionId\n\n        | join kind=leftouter (\n          resources\n            | where id =~ \"${resourceURI}\"\n            | project resourceName=name, subscriptionId\n        ) on subscriptionId\n\n        | project subscriptionName, resourceGroupName, resourceName\n    `;\n\n    const { data: response } = await this.makeResourceGraphRequest<AzureResourceSummaryItem[]>(query);\n\n    if (!response.length) {\n      throw new Error('unable to fetch resource details');\n    }\n\n    const { subscriptionName, resourceGroupName, resourceName } = response[0];\n    // if the name is undefined it could be because the id is undefined or because we are using a template variable.\n    // Either way we can use it as a fallback. We don't really want to interpolate these variables because we want\n    // to show the user when they are using template variables `$sub/$rg/$resource`\n    return {\n      subscriptionName: subscriptionName || subscriptionID,\n      resourceGroupName: resourceGroupName || resourceGroup,\n      resourceName: resourceName || resource,\n    };\n  }\n\n  async getResourceURIFromWorkspace(workspace: string) {\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(`\n      resources\n      | where properties['customerId'] == \"${workspace}\"\n      | project id\n    `);\n\n    if (!response.length) {\n      throw new Error('unable to find resource for workspace ' + workspace);\n    }\n\n    return response[0].id;\n  }\n\n  async makeResourceGraphRequest<T = unknown>(\n    query: string,\n    maxRetries = 1,\n    reqOptions?: Partial<AzureResourceGraphOptions>\n  ): Promise<AzureGraphResponse<T>> {\n    try {\n      return await this.postResource(this.resourcePath + RESOURCE_GRAPH_URL, {\n        query: query,\n        options: {\n          resultFormat: 'objectArray',\n          ...reqOptions,\n        },\n      });\n    } catch (error) {\n      if (maxRetries > 0) {\n        return this.makeResourceGraphRequest(query, maxRetries - 1);\n      }\n\n      throw error;\n    }\n  }\n}\n","import { AzureMonitorQuery, AzureQueryType } from '../types';\nimport { AnnotationQuery } from '@grafana/data';\n\n// The old Angular annotations editor put some properties (rawQuery, workspace, subscription)\n// on the root annotation object, rather than down in the 'targets' query value\n// This migration moves them to a Log Analytics query compatible with the React query editor\n// The old Angular annotations editor did not support any other query types.\nexport default function migrateAnnotation(annotation: AnnotationQuery<AzureMonitorQuery>) {\n  const oldQuery = typeof annotation.rawQuery === 'string' ? annotation.rawQuery : null;\n  const oldWorkspace = typeof annotation.workspace === 'string' ? annotation.workspace : null;\n\n  if (!(oldQuery && oldWorkspace && !annotation.target?.azureLogAnalytics?.query)) {\n    return annotation;\n  }\n\n  const newQuery: AzureMonitorQuery = {\n    ...(annotation.target ?? {}),\n    refId: annotation.target?.refId ?? 'Anno',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: oldQuery,\n      resource: oldWorkspace,\n    },\n  };\n\n  return {\n    ...annotation,\n    rawQuery: undefined,\n    workspace: undefined,\n    subscription: undefined,\n    queryType: undefined,\n    target: newQuery,\n  };\n}\n","import { AzureMonitorQuery, AzureQueryType } from './types';\nimport DataSource from './datasource';\nimport {\n  AppInsightsGroupByQuery,\n  AppInsightsMetricNameQuery,\n  GrafanaTemplateVariableQuery,\n  MetricDefinitionsQuery,\n  MetricNamespaceQuery,\n  MetricNamesQuery,\n  ResourceGroupsQuery,\n  ResourceNamesQuery,\n  SubscriptionsQuery,\n  WorkspacesQuery,\n} from './types/templateVariables';\nimport { isGUIDish } from './components/ResourcePicker/utils';\n\n/* \n  Grafana Template Variable Functions\n  ex: Subscriptions()\n\n  These are helper functions we have created and exposed to users to make the writing of template variables easier. \n  Due to legacy reasons, we still need to parse strings to determine if a query is a Grafana Template Variable Function \n  or if it's a KQL-type query\n*/\n\nexport const grafanaTemplateVariableFnMatches = (query: string) => {\n  return {\n    subscriptions: query.match(/^Subscriptions\\(\\)/i),\n    resourceGroups: query.match(/^ResourceGroups\\(\\)/i),\n    resourceGroupsWithSub: query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    metricDefinitions: query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    metricDefinitionsWithSub: query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNames: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNamesWithSub: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    metricNamespace: query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamespaceWithSub: query.match(/^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNames: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamesWithSub: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    appInsightsMetricNameQuery: query.match(/^AppInsightsMetricNames\\(\\)/i),\n    appInsightsGroupByQuery: query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    workspacesQuery: query.match(/^workspaces\\(\\)/i),\n    workspacesQueryWithSub: query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i),\n  };\n};\n\nconst isGrafanaTemplateVariableFnQuery = (query: string) => {\n  const matches: Record<string, RegExpMatchArray | null> = grafanaTemplateVariableFnMatches(query);\n  return Object.keys(matches).some((key) => !!matches[key]);\n};\n\nconst createGrafanaTemplateVariableQuery = (rawQuery: string, datasource: DataSource): AzureMonitorQuery => {\n  const matchesForQuery = grafanaTemplateVariableFnMatches(rawQuery);\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const createGrafanaTemplateVariableDetails = (): GrafanaTemplateVariableQuery => {\n    // deprecated app insights template variables (will most likely remove in grafana 9)\n    if (matchesForQuery.appInsightsMetricNameQuery) {\n      const queryDetails: AppInsightsMetricNameQuery = { rawQuery, kind: 'AppInsightsMetricNameQuery' };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.appInsightsGroupByQuery) {\n      const queryDetails: AppInsightsGroupByQuery = {\n        kind: 'AppInsightsGroupByQuery',\n        rawQuery,\n        metricName: matchesForQuery.appInsightsGroupByQuery[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.subscriptions) {\n      const queryDetails: SubscriptionsQuery = {\n        kind: 'SubscriptionsQuery',\n        rawQuery,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroupsWithSub) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceGroupsWithSub[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroups && defaultSubscriptionId) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricDefinitionsWithSub) {\n      const queryDetails: MetricDefinitionsQuery = {\n        kind: 'MetricDefinitionsQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricDefinitionsWithSub[1],\n        resourceGroup: matchesForQuery.metricDefinitionsWithSub[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricDefinitions && defaultSubscriptionId) {\n      const queryDetails: MetricDefinitionsQuery = {\n        kind: 'MetricDefinitionsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricDefinitions[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNamesWithSub) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceNamesWithSub[1],\n        resourceGroup: matchesForQuery.resourceNamesWithSub[2],\n        metricDefinition: matchesForQuery.resourceNamesWithSub[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNames && defaultSubscriptionId) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.resourceNames[1],\n        metricDefinition: matchesForQuery.resourceNames[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespaceWithSub) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamespaceWithSub[1],\n        resourceGroup: matchesForQuery.metricNamespaceWithSub[2],\n        metricDefinition: matchesForQuery.metricNamespaceWithSub[3],\n        resourceName: matchesForQuery.metricNamespaceWithSub[4],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespace && defaultSubscriptionId) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricNamespace[1],\n        metricDefinition: matchesForQuery.metricNamespace[2],\n        resourceName: matchesForQuery.metricNamespace[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNames && defaultSubscriptionId) {\n      if (matchesForQuery.metricNames[3].indexOf(',') === -1) {\n        const queryDetails: MetricNamesQuery = {\n          kind: 'MetricNamesQuery',\n          rawQuery,\n          subscription: defaultSubscriptionId,\n          resourceGroup: matchesForQuery.metricNames[1],\n          metricDefinition: matchesForQuery.metricNames[2],\n          resourceName: matchesForQuery.metricNames[3],\n          metricNamespace: matchesForQuery.metricNames[4],\n        };\n        return queryDetails;\n      }\n    }\n\n    if (matchesForQuery.metricNamesWithSub) {\n      const queryDetails: MetricNamesQuery = {\n        kind: 'MetricNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamesWithSub[1],\n        resourceGroup: matchesForQuery.metricNamesWithSub[2],\n        metricDefinition: matchesForQuery.metricNamesWithSub[3],\n        resourceName: matchesForQuery.metricNamesWithSub[4],\n        metricNamespace: matchesForQuery.metricNamesWithSub[5],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQueryWithSub) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: (matchesForQuery.workspacesQueryWithSub[1] || '').trim(),\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQuery && defaultSubscriptionId) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    // fallback\n    const queryDetails: SubscriptionsQuery = { kind: 'SubscriptionsQuery', rawQuery };\n    return queryDetails;\n  };\n\n  const query: AzureMonitorQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n    grafanaTemplateVariableFn: createGrafanaTemplateVariableDetails(),\n    subscription: defaultSubscriptionId,\n  };\n  return query;\n};\n\nconst createLogAnalyticsTemplateVariableQuery = async (\n  rawQuery: string,\n  datasource: DataSource\n): Promise<AzureMonitorQuery> => {\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  let resource = '';\n  // if there's an existing query, we try to get the resourcesuri from a deprecated default workspace\n  // a note this is very similar logic to what is used in useMigrations but moved out of the react-hook land\n  if (rawQuery) {\n    const defaultWorkspaceId = datasource.azureLogAnalyticsDatasource.getDeprecatedDefaultWorkSpace();\n    if (defaultWorkspaceId) {\n      const isWorkspaceGUID = isGUIDish(defaultWorkspaceId);\n      if (isWorkspaceGUID) {\n        resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(defaultWorkspaceId);\n      } else {\n        resource = defaultWorkspaceId;\n      }\n    } else {\n      const maybeFirstWorkspace = await datasource.azureLogAnalyticsDatasource.getFirstWorkspace();\n      resource = maybeFirstWorkspace || '';\n    }\n  }\n\n  return {\n    refId: 'A',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: rawQuery,\n      resource,\n    },\n    subscription: defaultSubscriptionId,\n  };\n};\n\nexport const migrateStringQueriesToObjectQueries = async (\n  rawQuery: string | AzureMonitorQuery,\n  options: { datasource: DataSource }\n): Promise<AzureMonitorQuery> => {\n  // no need to migrate already migrated queries\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  return isGrafanaTemplateVariableFnQuery(rawQuery)\n    ? createGrafanaTemplateVariableQuery(rawQuery, options.datasource)\n    : createLogAnalyticsTemplateVariableQuery(rawQuery, options.datasource);\n};\n","import { SelectableValue } from '@grafana/data';\nimport { Alert, InlineField, Input, Select } from '@grafana/ui';\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport DataSource from '../../datasource';\nimport useLastError from '../../utils/useLastError';\nimport { Space } from '../Space';\nimport { migrateStringQueriesToObjectQueries } from '../../grafanaTemplateVariableFns';\n\nconst AZURE_QUERY_VARIABLE_TYPE_OPTIONS = [\n  { label: 'Grafana Query Function', value: AzureQueryType.GrafanaTemplateVariableFn },\n  { label: 'Logs', value: AzureQueryType.LogAnalytics },\n];\n\nconst GrafanaTemplateVariableFnInput = ({\n  query,\n  updateQuery,\n  datasource,\n}: {\n  query: AzureMonitorQuery;\n  updateQuery: (val: AzureMonitorQuery) => void;\n  datasource: DataSource;\n}) => {\n  const [inputVal, setInputVal] = useState('');\n  useEffect(() => {\n    setInputVal(query.grafanaTemplateVariableFn?.rawQuery || '');\n  }, [query.grafanaTemplateVariableFn?.rawQuery]);\n\n  const onRunQuery = useCallback(\n    (newQuery: string) => {\n      migrateStringQueriesToObjectQueries(newQuery, { datasource }).then((updatedQuery) => {\n        if (updatedQuery.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n          updateQuery(updatedQuery);\n        } else {\n          updateQuery({\n            ...query,\n            grafanaTemplateVariableFn: {\n              kind: 'UnknownQuery',\n              rawQuery: newQuery,\n            },\n          });\n        }\n      });\n    },\n    [datasource, query, updateQuery]\n  );\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputVal(event.target.value);\n  };\n\n  return (\n    <InlineField label=\"Grafana template variable function\">\n      <Input\n        placeholder={'type a grafana template variable function, ex: Subscriptions()'}\n        value={inputVal}\n        onChange={onChange}\n        onBlur={() => onRunQuery(inputVal)}\n      />\n    </InlineField>\n  );\n};\n\ntype Props = {\n  query: AzureMonitorQuery | string;\n  onChange: (query: AzureMonitorQuery) => void;\n  datasource: DataSource;\n};\n\nconst VariableEditor = (props: Props) => {\n  const defaultQuery: AzureMonitorQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n  };\n  const [query, setQuery] = useState(defaultQuery);\n\n  useEffect(() => {\n    migrateStringQueriesToObjectQueries(props.query, { datasource: props.datasource }).then((migratedQuery) => {\n      setQuery(migratedQuery);\n    });\n  }, [props.query, props.datasource]);\n\n  const onQueryTypeChange = (selectableValue: SelectableValue) => {\n    if (selectableValue.value) {\n      setQuery({\n        ...query,\n        queryType: selectableValue.value,\n      });\n    }\n  };\n  const onLogsQueryChange = (queryChange: AzureMonitorQuery) => {\n    setQuery(queryChange);\n\n    // only hit backend if there's something to query (prevents error when selecting the resource before pinging a query)\n    if (queryChange.azureLogAnalytics?.query) {\n      props.onChange(queryChange);\n    }\n  };\n\n  const [errorMessage, setError] = useLastError();\n\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    // TODO: figure out a way to filter out the current variable from the variables list\n    // options: props.datasource.getVariables().map((v) => ({ label: v, value: v })),\n    options: [],\n  };\n\n  return (\n    <>\n      <InlineField label=\"Select query type\">\n        <Select\n          aria-label=\"select query type\"\n          onChange={onQueryTypeChange}\n          options={AZURE_QUERY_VARIABLE_TYPE_OPTIONS}\n          width={25}\n          value={query.queryType}\n        />\n      </InlineField>\n      {query.queryType === AzureQueryType.LogAnalytics && (\n        <>\n          <LogsQueryEditor\n            subscriptionId={query.subscription}\n            query={query}\n            datasource={props.datasource}\n            onChange={onLogsQueryChange}\n            variableOptionGroup={variableOptionGroup}\n            setError={setError}\n            hideFormatAs={true}\n          />\n          {errorMessage && (\n            <>\n              <Space v={2} />\n              <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n                {errorMessage}\n              </Alert>\n            </>\n          )}\n        </>\n      )}\n      {query.queryType === AzureQueryType.GrafanaTemplateVariableFn && (\n        <GrafanaTemplateVariableFnInput query={query} updateQuery={props.onChange} datasource={props.datasource} />\n      )}\n    </>\n  );\n};\n\nexport default VariableEditor;\n","import {\n  CustomVariableSupport,\n  DataQueryRequest,\n  DataQueryResponse,\n  MetricFindValue,\n  toDataFrame,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { from, lastValueFrom, Observable } from 'rxjs';\n\nimport VariableEditor from './components/VariableEditor/VariableEditor';\nimport DataSource from './datasource';\nimport { migrateStringQueriesToObjectQueries } from './grafanaTemplateVariableFns';\nimport { AzureMonitorQuery, AzureQueryType } from './types';\nimport { GrafanaTemplateVariableQuery } from './types/templateVariables';\nimport messageFromError from './utils/messageFromError';\n\nexport class VariableSupport extends CustomVariableSupport<DataSource, AzureMonitorQuery> {\n  constructor(private readonly datasource: DataSource) {\n    super();\n    this.datasource = datasource;\n    this.query = this.query.bind(this);\n  }\n\n  editor = VariableEditor;\n\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const promisedResults = async () => {\n      const queryObj = await migrateStringQueriesToObjectQueries(request.targets[0], { datasource: this.datasource });\n\n      if (queryObj.queryType === AzureQueryType.GrafanaTemplateVariableFn && queryObj.grafanaTemplateVariableFn) {\n        try {\n          const templateVariablesResults = await this.callGrafanaTemplateVariableFn(queryObj.grafanaTemplateVariableFn);\n          return {\n            data: templateVariablesResults?.length ? [toDataFrame(templateVariablesResults)] : [],\n          };\n        } catch (err) {\n          return { data: [], error: { message: messageFromError(err) } };\n        }\n      }\n      request.targets[0] = queryObj;\n      return lastValueFrom(this.datasource.query(request));\n    };\n\n    return from(promisedResults());\n  }\n\n  callGrafanaTemplateVariableFn(query: GrafanaTemplateVariableQuery): Promise<MetricFindValue[]> | null {\n    // deprecated app insights template variables (will most likely remove in grafana 9)\n    if (this.datasource.insightsAnalyticsDatasource) {\n      if (query.kind === 'AppInsightsMetricNameQuery') {\n        return this.datasource.insightsAnalyticsDatasource.getMetricNames();\n      }\n\n      if (query.kind === 'AppInsightsGroupByQuery') {\n        return this.datasource.insightsAnalyticsDatasource.getGroupBys(getTemplateSrv().replace(query.metricName));\n      }\n    }\n\n    if (query.kind === 'SubscriptionsQuery') {\n      return this.datasource.getSubscriptions();\n    }\n\n    if (query.kind === 'ResourceGroupsQuery') {\n      return this.datasource.getResourceGroups(this.replaceVariable(query.subscription));\n    }\n\n    if (query.kind === 'MetricDefinitionsQuery') {\n      return this.datasource.getMetricDefinitions(\n        this.replaceVariable(query.subscription),\n        this.replaceVariable(query.resourceGroup)\n      );\n    }\n\n    if (query.kind === 'ResourceNamesQuery') {\n      return this.datasource.getResourceNames(\n        this.replaceVariable(query.subscription),\n        this.replaceVariable(query.resourceGroup),\n        this.replaceVariable(query.metricDefinition)\n      );\n    }\n\n    if (query.kind === 'MetricNamespaceQuery') {\n      return this.datasource.getMetricNamespaces(\n        this.replaceVariable(query.subscription),\n        this.replaceVariable(query.resourceGroup),\n        this.replaceVariable(query.metricDefinition),\n        this.replaceVariable(query.resourceName)\n      );\n    }\n\n    if (query.kind === 'MetricNamesQuery') {\n      return this.datasource.getMetricNames(\n        this.replaceVariable(query.subscription),\n        this.replaceVariable(query.resourceGroup),\n        this.replaceVariable(query.metricDefinition),\n        this.replaceVariable(query.resourceName),\n        this.replaceVariable(query.metricNamespace)\n      );\n    }\n\n    if (query.kind === 'WorkspacesQuery') {\n      return this.datasource.azureLogAnalyticsDatasource.getWorkspaces(this.replaceVariable(query.subscription));\n    }\n\n    return null;\n  }\n\n  replaceVariable(metric: string) {\n    return getTemplateSrv().replace((metric || '').trim());\n  }\n}\n","import {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { cloneDeep, upperFirst } from 'lodash';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport AppInsightsDatasource from './components/deprecated/app_insights/app_insights_datasource';\nimport InsightsAnalyticsDatasource from './components/deprecated/insights_analytics/insights_analytics_datasource';\nimport { getAzureCloud } from './credentials';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n  DeprecatedAzureQueryType,\n} from './types';\nimport migrateAnnotation from './utils/migrateAnnotation';\nimport { datasourceMigrations } from './utils/migrateQuery';\nimport { VariableSupport } from './variables';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  annotations = {\n    prepareAnnotation: migrateAnnotation,\n  };\n\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n  /** @deprecated */\n  appInsightsDatasource?: AppInsightsDatasource;\n  /** @deprecated */\n  insightsAnalyticsDatasource?: InsightsAnalyticsDatasource;\n\n  pseudoDatasource: {\n    [key in AzureQueryType | DeprecatedAzureQueryType]?:\n      | AzureMonitorDatasource\n      | AzureLogAnalyticsDatasource\n      | AzureResourceGraphDatasource\n      | AppInsightsDatasource\n      | InsightsAnalyticsDatasource;\n  } = {};\n\n  declare optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings);\n\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource,\n    };\n\n    const cloud = getAzureCloud(instanceSettings);\n    if (cloud === 'azuremonitor' || cloud === 'chinaazuremonitor') {\n      // AppInsights and InsightAnalytics are only supported for Public and Azure China clouds\n      this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings);\n      this.insightsAnalyticsDatasource = new InsightsAnalyticsDatasource(instanceSettings);\n      this.pseudoDatasource[DeprecatedAzureQueryType.ApplicationInsights] = this.appInsightsDatasource;\n      this.pseudoDatasource[DeprecatedAzureQueryType.InsightsAnalytics] = this.insightsAnalyticsDatasource;\n    }\n\n    this.variables = new VariableSupport(this);\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    if (!item.queryType) {\n      return true;\n    }\n    const ds = this.pseudoDatasource[item.queryType];\n    return ds?.filterQuery?.(item) ?? true;\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const byType = new Map<AzureQueryType | DeprecatedAzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const baseTarget of options.targets) {\n      // Migrate old query structures\n      const target = datasourceMigrations(baseTarget);\n\n      // Skip hidden or invalid queries or ones without properties\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      const ds = this.pseudoDatasource[queryType];\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  targetContainsTemplate(query: AzureMonitorQuery) {\n    if (query.subscription && this.templateSrv.containsTemplate(query.subscription)) {\n      return true;\n    }\n\n    let subQuery;\n    if (query.queryType === AzureQueryType.AzureMonitor) {\n      subQuery = JSON.stringify(query.azureMonitor);\n    } else if (query.queryType === AzureQueryType.LogAnalytics) {\n      subQuery = JSON.stringify(query.azureLogAnalytics);\n    } else if (query.queryType === AzureQueryType.AzureResourceGraph) {\n      subQuery = JSON.stringify([query.azureResourceGraph, query.subscriptions]);\n    }\n\n    return !!subQuery && this.templateSrv.containsTemplate(subQuery);\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const promises: Array<Promise<DatasourceValidationResult>> = [];\n\n    promises.push(this.azureMonitorDatasource.testDatasource());\n    promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n\n    if (this.appInsightsDatasource?.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    return await Promise.all(promises).then((results) => {\n      let status: 'success' | 'error' = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.replaceTemplateVariable(subscriptionId));\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup)\n    );\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition)\n    );\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace)\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName)\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace),\n      this.replaceTemplateVariable(metricName)\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource?.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource?.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource?.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    const mapped = queries.map((query) => {\n      if (!query.queryType) {\n        return query;\n      }\n\n      const ds = this.pseudoDatasource[query.queryType];\n      return ds?.applyTemplateVariables(query, scopedVars) ?? query;\n    });\n\n    return mapped;\n  }\n\n  replaceTemplateVariable(variable: string) {\n    return this.templateSrv.replace(variable);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  isTemplateVariable(value: string) {\n    return this.getVariables().includes(value);\n  }\n}\n\nfunction hasQueryForType(query: AzureMonitorQuery): boolean {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.GrafanaTemplateVariableFn:\n      return !!query.grafanaTemplateVariableFn;\n\n    case DeprecatedAzureQueryType.ApplicationInsights:\n      return !!query.appInsights;\n\n    case DeprecatedAzureQueryType.InsightsAnalytics:\n      return !!query.insightsAnalytics;\n\n    default:\n      return false;\n  }\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Button, Select } from '@grafana/ui';\nimport { AzureAuthType, AzureCredentials } from '../types';\nimport { isCredentialsComplete } from '../credentials';\nconst { Input } = LegacyForms;\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange?: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n  children?: JSX.Element;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions, disabled } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              menuShouldPortal\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  aria-label=\"Azure Cloud\"\n                  menuShouldPortal\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {!disabled &&\n            (typeof credentials.clientSecret === 'symbol' ? (\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                  <Input data-testid=\"client-secret\" className=\"width-25\" placeholder=\"configured\" disabled={true} />\n                </div>\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset} disabled={disabled}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                  <div className=\"width-15\">\n                    <Input\n                      className=\"width-30\"\n                      placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                      value={credentials.clientSecret || ''}\n                      onChange={onClientSecretChange}\n                      disabled={disabled}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-30\">\n                <Select\n                  aria-label=\"Default Subscription\"\n                  menuShouldPortal\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {!disabled && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    type=\"button\"\n                    onClick={onLoadSubscriptions}\n                    disabled={!hasRequiredFields}\n                  >\n                    Load Subscriptions\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {props.children}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import { Alert, Button } from '@grafana/ui';\nimport React, { FunctionComponent, useMemo } from 'react';\n\nimport { getCredentials } from '../../../credentials';\nimport { AzureDataSourceSettings } from '../../../types';\nimport { AzureCredentialsForm } from '../../AzureCredentialsForm';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n}\n\nexport const AnalyticsConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions } = props;\n  const primaryCredentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  // Only show a section for setting LogAnalytics credentials if\n  // they were set from before with different values and the\n  // authType is supported\n  const logCredentialsEnabled =\n    primaryCredentials.authType === 'clientsecret' && props.options.jsonData.azureLogAnalyticsSameAs === false;\n\n  const onClearAzLogsCreds = () => {\n    updateOptions((options) => {\n      return {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureLogAnalyticsSameAs: true,\n        },\n      };\n    });\n  };\n\n  return logCredentialsEnabled ? (\n    <>\n      <h3 className=\"page-heading\">Azure Monitor Logs</h3>\n      <>\n        <Alert severity=\"error\" title=\"Deprecated\">\n          Using different credentials for Azure Monitor Logs is no longer supported. Authentication information above\n          will be used instead. Please create a new data source with the credentials below.\n        </Alert>\n\n        <AzureCredentialsForm\n          managedIdentityEnabled={false}\n          credentials={{\n            ...primaryCredentials,\n            authType: 'clientsecret',\n            // Use deprecated Log Analytics credentials read-only\n            // to help with a possible migration\n            tenantId: props.options.jsonData.logAnalyticsTenantId,\n            clientId: props.options.jsonData.logAnalyticsClientId,\n          }}\n          disabled={true}\n        >\n          <Button onClick={onClearAzLogsCreds}>Clear Azure Monitor Logs Credentials</Button>\n        </AzureCredentialsForm>\n      </>\n    </>\n  ) : null;\n};\n\nexport default AnalyticsConfig;\n","import {\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n  updateDatasourcePluginSecureJsonDataOption,\n} from '@grafana/data';\nimport { Alert, Button, InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport React, { PureComponent } from 'react';\n\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData } from '../../../types';\nimport { Props } from '../../ConfigEditor';\n\nconst { Input } = LegacyForms;\n\nexport class InsightsConfig extends PureComponent<Props> {\n  private onAppInsightsResetApiKey = () => {\n    this.resetSecureKey('appInsightsApiKey');\n  };\n\n  private onUpdateJsonDataOption =\n    (key: keyof AzureDataSourceJsonData) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n      updateDatasourcePluginJsonDataOption(this.props, key, event.currentTarget.value);\n    };\n\n  private onUpdateSecureJsonDataOption =\n    (key: keyof AzureDataSourceSecureJsonData) =>\n    (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n      updateDatasourcePluginSecureJsonDataOption(this.props, key, event.currentTarget.value);\n    };\n\n  private resetSecureKey = (key: keyof AzureDataSourceSecureJsonData) => {\n    updateDatasourcePluginResetOption(this.props, key);\n  };\n\n  render() {\n    const { options } = this.props;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Application Insights</h3>\n        <Alert severity=\"info\" title=\"Application Insights credentials are deprecated\">\n          Configure using Azure AD App Registration above and update existing queries to use Metrics or Logs.\n        </Alert>\n        <div className=\"gf-form-group\">\n          {options.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button\n                    variant=\"secondary\"\n                    type=\"button\"\n                    onClick={this.onAppInsightsResetApiKey}\n                    disabled={this.props.options.readOnly}\n                  >\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={options.secureJsonData!.appInsightsApiKey || ''}\n                    onChange={this.onUpdateSecureJsonDataOption('appInsightsApiKey')}\n                    disabled={this.props.options.readOnly}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={options.jsonData.appInsightsAppId || ''}\n                  onChange={this.onUpdateJsonDataOption('appInsightsAppId')}\n                  disabled={this.props.options.readOnly}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\nimport { getCredentials, updateCredentials } from '../credentials';\n\nconst azureClouds = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'germanyazuremonitor', label: 'Azure Germany' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n] as SelectableValue[];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const MonitorConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions, getSubscriptions } = props;\n  const credentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    updateOptions((options) => updateCredentials(options, credentials));\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Authentication</h3>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={azureClouds}\n        onCredentialsChange={onCredentialsChange}\n        getSubscriptions={getSubscriptions}\n        disabled={props.options.readOnly}\n      />\n    </>\n  );\n};\n\nexport default MonitorConfig;\n","import { DataSourcePluginOptionsEditorProps, SelectableValue, updateDatasourcePluginOption } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport React, { PureComponent } from 'react';\n\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { routeNames } from '../utils/common';\nimport { AnalyticsConfig } from './deprecated/components/AnalyticsConfig';\nimport { InsightsConfig } from './deprecated/components/InsightsConfig';\nimport { gtGrafana9, isAppInsightsConfigured } from './deprecated/utils';\nimport { MonitorConfig } from './MonitorConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\ninterface ErrorMessage {\n  title: string;\n  description: string;\n  details?: string;\n}\n\nexport interface State {\n  unsaved: boolean;\n  error?: ErrorMessage;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n  baseURL: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const query = `?api-version=2019-03-01`;\n    try {\n      const result = await getBackendSrv()\n        .fetch({\n          url: this.baseURL + query,\n          method: 'GET',\n        })\n        .toPromise();\n\n      this.setState({ error: undefined });\n      return ResponseParser.parseSubscriptionsForSelect(result);\n    } catch (err) {\n      this.setState({\n        error: {\n          title: 'Error requesting subscriptions',\n          description: 'Could not request subscriptions from Azure. Check your credentials and try again.',\n          details: err?.data?.message,\n        },\n      });\n      return Promise.resolve([]);\n    }\n  };\n\n  render() {\n    const { options } = this.props;\n    const { error } = this.state;\n\n    return (\n      <>\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n        {/* Remove with Grafana 9 */}\n        {!gtGrafana9() && (\n          <>\n            <AnalyticsConfig options={options} updateOptions={this.updateOptions} />\n            {isAppInsightsConfigured(options) && <InsightsConfig {...this.props} />}\n          </>\n        )}\n        {/* ===================== */}\n        {error && (\n          <Alert severity=\"error\" title={error.title}>\n            <p>{error.description}</p>\n            {error.details && <details style={{ whiteSpace: 'pre-wrap' }}>{error.details}</details>}\n          </Alert>\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { DataSourcePlugin } from '@grafana/data';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport AzureMonitorQueryEditor from './components/QueryEditor';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(AzureMonitorQueryEditor);\n"],"names":["concealed","Symbol","getAuthType","options","jsonData","azureAuthType","tenantId","clientId","config","getDefaultAzureCloud","AzureCloud","undefined","Error","getAzurePortalUrl","azureCloud","getAzureCloud","cloudName","getSecret","secureJsonFields","clientSecret","secret","secureJsonData","length","getCredentials","authType","defaultSubscriptionId","subscriptionId","LogAnalyticsQuerystringBuilder","constructor","rawQueryString","defaultTimeField","generate","queryString","this","macroRegexp","replace","match","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","interval","rawQuery","encodeURIComponent","uriString","from","range","dateTime","startOf","toISOString","rangeRaw","to","now","Date","until","timeFieldArg","timeField","inputs","firstCommaIndex","indexOf","field","substring","templateVar","toLowerCase","trim","split","map","v","join","ResponseParser","results","parseQueryResult","data","columns","i","result","tables","rows","query","resultFormat","concat","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","type","forEach","row","epoch","dateTimeToEpoch","metricName","name","bucket","findOrCreateBucket","datapoints","push","refId","meta","executedQueryString","col","text","parseToVariables","queryResult","variables","flattenDeep","value","transformToAnnotations","list","textIndex","tagsIndex","annotation","time","Math","floor","toString","tags","target","dataTarget","find","dateTimeValue","valueOf","valueFieldName","get","METADATA_FUNCTION_PARAMS","transformMetadataFunction","sourceSchema","functions","fn","params","parameters","arg","defaultValue","cslDefaultValue","filter","body","inputParameters","AzureLogAnalyticsDatasource","DataSourceWithBackend","instanceSettings","super","cache","Map","resourcePath","routeNames","azureMonitorPath","cloud","azurePortalUrl","isConfigured","validateDatasource","filterQuery","item","hide","azureLogAnalytics","resource","workspace","path","getResource","then","parseSubscriptions","subscription","response","getWorkspaceList","val","id","getTemplateSrv","workspaceListUrl","resourceUri","templateSrv","interpolatedUri","interpolateVariable","nameOrIdOrSomething","templateVariables","database","majorVersion","minorVersion","globalParameters","clusterType","cluster","connectionString","databases","transformMetadataToKustoSchema","getMetadata","getVariables","applyTemplateVariables","scopedVars","firstWorkspace","queryType","AzureQueryType","request","pipe","mergeMap","res","processResponse","df","encodedQuery","custom","url","buildDeepLink","fields","links","title","targetBlank","customMeta","base64Enc","workspaceId","details","getWorkspaceDetails","resourceGroup","o","properties","customerId","exec","getDeprecatedDefaultWorkSpace","logAnalyticsDefaultWorkspace","buildQuery","querystring","isGUIDish","datasource","getRef","getSubscriptions","getDefaultOrFirstSubscription","getWorkspaces","annotationQuery","Promise","reject","message","queries","promises","doQueries","all","catch","err","error","validationError","resourceOrWorkspace","getFirstWorkspace","status","e","getErrorMessage","statusText","code","isValidConfigField","locationMetadata","location","displayName","supportsLogs","logsSupportedLocationsKusto","locationDisplayNames","reduce","acc","resourceTypeMetadata","resourceType","logsSupportedResourceTypesKusto","resourceTypeDisplayNames","textFieldName","metricDefinition","toLocaleLowerCase","defaultAggTypes","metricData","primaryAggType","primaryAggregationType","supportedAggTypes","supportedAggregationTypes","supportedTimeGrains","label","parseTimeGrains","metricAvailabilities","dimensions","parseDimensions","timeGrains","avail","timeGrain","TimeGrainConverter","metadataDimensions","dimension","localizedValue","SupportedNamespaces","azuremonitor","govazuremonitor","germanyazuremonitor","chinaazuremonitor","supportedMetricNamespaces","UrlBuilder","baseUrl","resourceName","apiVersion","metricDefinitionArray","resourceNameArray","urlArray","shift","metricNamespace","defaultDropdownValue","AzureMonitorDatasource","timeSrv","getTimeSrv","azureMonitor","aggregation","timeGrainUnit","TimegrainConverter","top","dimensionFilters","f","operator","allowedTimeGrainsMs","alias","getResourceGroups","listByResourceGroupApiVersion","getMetricDefinitions","t","shouldHardcodeBlobStorage","getResourceNames","skipToken","async","startsWith","nextLink","nextToken","URL","searchParams","nextPage","getMetricNamespaces","buildAzureMonitorGetMetricNamespacesUrl","apiPreviewVersion","getMetricNames","buildAzureMonitorGetMetricNamesUrl","getMetricMetadata","resolve","AzureResourceGraphDatasource","azureResourceGraph","variableNames","subscriptionVar","_","subscriptions","sub","raw","xaxis","yaxises","yaxis","spliton","Tables","Columns","Rows","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","yaxisColumn","yaxisName","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","end","hasSegmentsField","segments","j","getTargetName","segment","metric","segmentName","segmentValue","prop","isObject","regex","g1","g2","group","obj","keys","_keys","without","key","dataObj","intersection","metrics","toTextValueList","parseMetadata","defaultAggregation","supportedAggregations","supportedGroupBy","parseGroupBys","parseQuerySchema","Type","columnTable","columnName","columnType","OrderedColumns","Name","values","AppInsightsDatasource","applicationId","appInsightsAppId","version","createRawQueryRequest","timeColumn","valueColumn","segmentColumn","appInsights","old","timeGrainCount","groupBy","dimensionFilter","isString","DeprecatedAzureQueryType","d","testDatasource","getGroupBys","getQuerySchema","InsightsAnalyticsDatasource","insightsAnalytics","ResourcePickerData","$skipToken","resources","allFetched","resourceResponse","makeResourceGraphRequest","subscriptionName","uri","typeLabel","ResourceRowType","children","resourceGroups","r","parsedUri","parseResourceURI","resourceGroupURI","resourceGroupName","resourceGroupId","resourceURI","subscriptionID","subscriptionURI","maxRetries","reqOptions","postResource","migrateAnnotation","oldQuery","oldWorkspace","newQuery","grafanaTemplateVariableFnMatches","resourceGroupsWithSub","metricDefinitions","metricDefinitionsWithSub","resourceNames","resourceNamesWithSub","metricNamespaceWithSub","metricNames","metricNamesWithSub","appInsightsMetricNameQuery","appInsightsGroupByQuery","workspacesQuery","workspacesQueryWithSub","migrateStringQueriesToObjectQueries","matches","Object","some","isGrafanaTemplateVariableFnQuery","matchesForQuery","azureMonitorDatasource","grafanaTemplateVariableFn","kind","createGrafanaTemplateVariableQuery","defaultWorkspaceId","azureLogAnalyticsDatasource","resourcePickerData","getResourceURIFromWorkspace","createLogAnalyticsTemplateVariableQuery","AZURE_QUERY_VARIABLE_TYPE_OPTIONS","GrafanaTemplateVariableFnInput","updateQuery","inputVal","setInputVal","useState","useEffect","onRunQuery","useCallback","updatedQuery","InlineField","Input","placeholder","onChange","event","onBlur","props","defaultQuery","setQuery","migratedQuery","errorMessage","setError","useLastError","Select","selectableValue","width","LogsQueryEditor","queryChange","variableOptionGroup","hideFormatAs","Space","Alert","severity","VariableSupport","CustomVariableSupport","VariableEditor","bind","queryObj","targets","templateVariablesResults","callGrafanaTemplateVariableFn","toDataFrame","messageFromError","lastValueFrom","promisedResults","insightsAnalyticsDatasource","replaceVariable","Datasource","DataSourceApi","prepareAnnotation","azureResourceGraphDatasource","pseudoDatasource","appInsightsDatasource","ds","byType","baseTarget","datasourceMigrations","hasQueryForType","has","queryForType","cloneDeep","requestId","set","observables","Array","entries","req","forkJoin","frame","state","LoadingState","of","targetContainsTemplate","containsTemplate","subQuery","JSON","stringify","upperFirst","replaceTemplateVariable","getAppInsightsMetricNames","getAppInsightsMetricMetadata","getAppInsightsColumns","logAnalyticsColumns","getAzureLogAnalyticsWorkspaces","interpolateVariablesInQueries","variable","isTemplateVariable","includes","LegacyForms","authTypeOptions","AzureCredentialsForm","credentials","azureCloudOptions","onCredentialsChange","disabled","hasRequiredFields","isCredentialsComplete","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","useReducer","updateSubscriptions","canceled","received","autoSelect","onSubscriptionChange","opt","selected","updated","className","managedIdentityEnabled","InlineFormLabel","tooltip","menuShouldPortal","Button","variant","onClick","size","AnalyticsConfig","updateOptions","primaryCredentials","useMemo","azureLogAnalyticsSameAs","logAnalyticsTenantId","logAnalyticsClientId","InsightsConfig","PureComponent","resetSecureKey","updateDatasourcePluginJsonDataOption","currentTarget","updateDatasourcePluginSecureJsonDataOption","updateDatasourcePluginResetOption","render","appInsightsApiKey","onAppInsightsResetApiKey","readOnly","onUpdateSecureJsonDataOption","onUpdateJsonDataOption","azureClouds","MonitorConfig","updateCredentials","ConfigEditor","optionsFunc","onOptionsChange","setState","unsaved","getBackendSrv","put","updateDatasourcePluginOption","saveOptions","fetch","baseURL","method","toPromise","description","gtGrafana9","isAppInsightsConfigured","style","whiteSpace","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","AzureMonitorQueryEditor"],"sourceRoot":""}