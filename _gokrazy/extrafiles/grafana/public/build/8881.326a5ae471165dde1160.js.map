{"version":3,"file":"8881.326a5ae471165dde1160.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/FormatAsField.tsx","webpack://grafana/./public/app/core/utils/deferred.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/EntryIcon.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedEntry.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedRow.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedRows.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedResourceTable.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/ResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/ResourceField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/useMigrations.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/SubscriptionField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/ArgQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/AggregationField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/DimensionFields.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/LegendFormatField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNameField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNamespaceField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/ResourceGroupsField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/ResourceNameField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/ResourceTypeField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TimeGrainField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TopField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/dataHooks.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/NewMetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/components/ApplicationInsightsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/components/InsightsAnalyticsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryTypeField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/usePreparedQuery.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/deprecated/utils.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/query.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/types.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateQuery.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useLastError.ts","webpack://grafana/../../opt/drone/yarncache/immer-npm-9.0.12-e8cd7358fa-bcbec6d76d.zip/node_modules/immer/dist/immer.esm.js"],"sourcesContent":["import React from 'react';\n\nimport { InlineField } from '@grafana/ui';\nimport { Props as InlineFieldProps } from '@grafana/ui/src/components/Forms/InlineField';\n\nconst DEFAULT_LABEL_WIDTH = 18;\n\nexport const Field = (props: InlineFieldProps) => {\n  return <InlineField labelWidth={DEFAULT_LABEL_WIDTH} {...props} />;\n};\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setFormatAs } from './setQueryValue';\n\nconst FORMAT_OPTIONS: Array<SelectableValue<string>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n];\n\nconst FormatAsField: React.FC<AzureQueryEditorFieldProps> = ({ query, variableOptionGroup, onQueryChange }) => {\n  const options = useMemo(() => [...FORMAT_OPTIONS, variableOptionGroup], [variableOptionGroup]);\n\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      const { value } = change;\n      if (!value) {\n        return;\n      }\n\n      const newQuery = setFormatAs(query, value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <Field label=\"Format as\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-logs-workspaces-field\"\n        value={query.azureLogAnalytics?.resultFormat}\n        onChange={handleChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default FormatAsField;\n","export class Deferred<T = any> {\n  resolve?: (reason: T | PromiseLike<T>) => void;\n  reject?: (reason?: any) => void;\n  promise: Promise<T>;\n\n  constructor() {\n    this.resolve = undefined;\n    this.reject = undefined;\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    Object.freeze(this);\n  }\n}\n","import React, { useCallback, useEffect, useRef } from 'react';\n\nimport { CodeEditor, Monaco, MonacoEditor } from '@grafana/ui';\nimport { Deferred } from 'app/core/utils/deferred';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nimport { setKustoQuery } from './setQueryValue';\n\ninterface MonacoPromise {\n  editor: MonacoEditor;\n  monaco: Monaco;\n}\n\ninterface MonacoLanguages {\n  kusto: {\n    getKustoWorker: () => Promise<\n      (url: any) => Promise<{\n        setSchema: (schema: any, clusterUrl: string, name: string) => void;\n      }>\n    >;\n  };\n}\n\nconst QueryField: React.FC<AzureQueryEditorFieldProps> = ({ query, datasource, onQueryChange }) => {\n  const monacoPromiseRef = useRef<Deferred<MonacoPromise>>();\n  function getPromise() {\n    if (!monacoPromiseRef.current) {\n      monacoPromiseRef.current = new Deferred<MonacoPromise>();\n    }\n\n    return monacoPromiseRef.current.promise;\n  }\n\n  useEffect(() => {\n    if (!query.azureLogAnalytics?.resource) {\n      return;\n    }\n\n    const promises = [\n      datasource.azureLogAnalyticsDatasource.getKustoSchema(query.azureLogAnalytics.resource),\n      getPromise(),\n    ] as const;\n\n    // the kusto schema call might fail, but its okay for that to happen silently\n    Promise.all(promises).then(([schema, { monaco, editor }]) => {\n      const languages = monaco.languages as unknown as MonacoLanguages;\n\n      languages.kusto\n        .getKustoWorker()\n        .then((kusto) => {\n          const model = editor.getModel();\n          return model && kusto(model.uri);\n        })\n        .then((worker) => {\n          worker?.setSchema(schema, 'https://help.kusto.windows.net', 'Samples');\n        });\n    });\n  }, [datasource.azureLogAnalyticsDatasource, query.azureLogAnalytics?.resource]);\n\n  const handleEditorMount = useCallback((editor: MonacoEditor, monaco: Monaco) => {\n    monacoPromiseRef.current?.resolve?.({ editor, monaco });\n  }, []);\n\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange(setKustoQuery(query, newQuery));\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureLogAnalytics?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width=\"100%\"\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n      onEditorDidMount={handleEditorMount}\n    />\n  );\n};\n\nexport default QueryField;\n","import React from 'react';\n\nimport { Icon } from '@grafana/ui';\n\nimport { ResourceRow, ResourceRowType } from './types';\n\ninterface EntryIconProps {\n  entry: ResourceRow;\n  isOpen: boolean;\n}\n\nexport const EntryIcon: React.FC<EntryIconProps> = ({ isOpen, entry: { type } }) => {\n  switch (type) {\n    case ResourceRowType.Subscription:\n      return <Icon name=\"layer-group\" />;\n\n    case ResourceRowType.ResourceGroup:\n      return <Icon name={isOpen ? 'folder-open' : 'folder'} />;\n\n    case ResourceRowType.Resource:\n      return <Icon name=\"cube\" />;\n\n    case ResourceRowType.VariableGroup:\n      return <Icon name=\"x\" />;\n\n    case ResourceRowType.Variable:\n      return <Icon name=\"x\" />;\n\n    default:\n      return null;\n  }\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    tableLayout: 'fixed',\n  }),\n\n  tableScroller: css({\n    maxHeight: '50vh',\n    overflow: 'auto',\n  }),\n\n  header: css({\n    background: theme.colors.background.secondary,\n  }),\n\n  row: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n    '&:last-of-type': {\n      borderBottomColor: theme.colors.border.medium,\n    },\n  }),\n\n  disabledRow: css({\n    opacity: 0.5,\n  }),\n\n  cell: css({\n    padding: theme.spacing(1, 1, 1, 0),\n    width: '25%',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    '&:first-of-type': {\n      width: '50%',\n      padding: theme.spacing(1, 1, 1, 2),\n    },\n  }),\n\n  collapseButton: css({ margin: 0 }),\n\n  loadingCell: css({\n    textAlign: 'center',\n  }),\n\n  spinner: css({\n    marginBottom: 0,\n  }),\n\n  nestedEntry: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n\n  entryContentItem: css({\n    margin: theme.spacing(0, 1, 0, 0),\n  }),\n\n  truncated: css({\n    minWidth: 0,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n\n  nestedRowCheckbox: css({\n    zIndex: 0,\n  }),\n});\n\nexport default getStyles;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect } from 'react';\n\nimport { Checkbox, IconButton, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { Space } from '../Space';\n\nimport { EntryIcon } from './EntryIcon';\nimport getStyles from './styles';\nimport { ResourceRow } from './types';\n\ninterface NestedEntryProps {\n  level: number;\n  entry: ResourceRow;\n  isSelected: boolean;\n  isSelectable: boolean;\n  isOpen: boolean;\n  isDisabled: boolean;\n  onToggleCollapse: (row: ResourceRow) => void;\n  onSelectedChange: (row: ResourceRow, selected: boolean) => void;\n}\n\nexport const NestedEntry: React.FC<NestedEntryProps> = ({\n  entry,\n  isSelected,\n  isDisabled,\n  isOpen,\n  isSelectable,\n  level,\n  onToggleCollapse,\n  onSelectedChange,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const hasChildren = !!entry.children;\n  // Subscriptions, resource groups, resources, and variables are all selectable, so\n  // the top-level variable group is the only thing that cannot be selected.\n  // const isSelectable = entry.type !== ResourceRowType.VariableGroup;\n  // const isSelectable = selectableEntryTypes?.some((e) => e === entry.type);\n\n  const handleToggleCollapse = useCallback(() => {\n    onToggleCollapse(entry);\n  }, [onToggleCollapse, entry]);\n\n  const handleSelectedChanged = useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const isSelected = ev.target.checked;\n      onSelectedChange(entry, isSelected);\n    },\n    [entry, onSelectedChange]\n  );\n\n  const checkboxId = `checkbox_${entry.id}`;\n\n  // Scroll to the selected element if it's not in the view\n  // Only do it once, when the component is mounted\n  useEffect(() => {\n    if (isSelected) {\n      document.getElementById(checkboxId)?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className={styles.nestedEntry} style={{ marginLeft: level * (3 * theme.spacing.gridSize) }}>\n      {/* When groups are selectable, I *think* we will want to show a 2-wide space instead\n              of the collapse button for leaf rows that have no children to get them to align */}\n\n      {hasChildren ? (\n        <IconButton\n          className={styles.collapseButton}\n          name={isOpen ? 'angle-down' : 'angle-right'}\n          aria-label={isOpen ? `Collapse ${entry.name}` : `Expand ${entry.name}`}\n          onClick={handleToggleCollapse}\n          id={entry.id}\n        />\n      ) : (\n        <Space layout=\"inline\" h={2} />\n      )}\n\n      <Space layout=\"inline\" h={2} />\n\n      {isSelectable && (\n        <>\n          <Checkbox\n            id={checkboxId}\n            onChange={handleSelectedChanged}\n            disabled={isDisabled}\n            value={isSelected}\n            className={styles.nestedRowCheckbox}\n          />\n          <Space layout=\"inline\" h={2} />\n        </>\n      )}\n\n      <EntryIcon entry={entry} isOpen={isOpen} />\n      <Space layout=\"inline\" h={1} />\n\n      <label htmlFor={checkboxId} className={cx(styles.entryContentItem, styles.truncated)}>\n        {entry.name}\n      </label>\n    </div>\n  );\n};\n","import { cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { FadeTransition, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\nimport { NestedEntry } from './NestedEntry';\nimport NestedRows from './NestedRows';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { findRow } from './utils';\n\ninterface NestedRowProps {\n  row: ResourceRow;\n  level: number;\n  selectedRows: ResourceRowGroup;\n  requestNestedRows: (row: ResourceRow) => Promise<void>;\n  onRowSelectedChange: (row: ResourceRow, selected: boolean) => void;\n  selectableEntryTypes: ResourceRowType[];\n}\n\nconst NestedRow: React.FC<NestedRowProps> = ({\n  row,\n  selectedRows,\n  level,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n}) => {\n  const styles = useStyles2(getStyles);\n  const [rowStatus, setRowStatus] = useState<'open' | 'closed' | 'loading'>('closed');\n\n  const isSelected = !!selectedRows.find((v) => v.id === row.id);\n  const isDisabled = selectedRows.length > 0 && !isSelected;\n  const isOpen = rowStatus === 'open';\n\n  const onRowToggleCollapse = async () => {\n    if (rowStatus === 'open') {\n      setRowStatus('closed');\n      return;\n    }\n    setRowStatus('loading');\n    requestNestedRows(row)\n      .then(() => setRowStatus('open'))\n      .catch(() => setRowStatus('closed'));\n  };\n\n  // opens the resource group on load of component if there was a previously saved selection\n  useEffect(() => {\n    // Assuming we don't have multi-select yet\n    const selectedRow = selectedRows[0];\n\n    const containsChild = selectedRow && !!findRow(row.children ?? [], selectedRow.id);\n\n    if (containsChild) {\n      setRowStatus('open');\n    }\n  }, [selectedRows, row]);\n\n  return (\n    <>\n      <tr className={cx(styles.row, isDisabled && styles.disabledRow)} key={row.id}>\n        <td className={styles.cell}>\n          <NestedEntry\n            level={level}\n            isSelected={isSelected}\n            isDisabled={isDisabled}\n            isOpen={isOpen}\n            entry={row}\n            onToggleCollapse={onRowToggleCollapse}\n            onSelectedChange={onRowSelectedChange}\n            isSelectable={selectableEntryTypes.some((type) => type === row.type)}\n          />\n        </td>\n\n        <td className={styles.cell}>{row.typeLabel}</td>\n\n        <td className={styles.cell}>{row.location ?? '-'}</td>\n      </tr>\n\n      {isOpen && row.children && Object.keys(row.children).length > 0 && (\n        <NestedRows\n          rows={row.children}\n          selectedRows={selectedRows}\n          level={level + 1}\n          requestNestedRows={requestNestedRows}\n          onRowSelectedChange={onRowSelectedChange}\n          selectableEntryTypes={selectableEntryTypes}\n        />\n      )}\n\n      <FadeTransition visible={rowStatus === 'loading'}>\n        <tr>\n          <td className={cx(styles.cell, styles.loadingCell)} colSpan={3}>\n            <LoadingPlaceholder text=\"Loading...\" className={styles.spinner} />\n          </td>\n        </tr>\n      </FadeTransition>\n    </>\n  );\n};\n\nexport default NestedRow;\n","import React from 'react';\n\nimport NestedRow from './NestedRow';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\n\ninterface NestedRowsProps {\n  rows: ResourceRowGroup;\n  level: number;\n  selectedRows: ResourceRowGroup;\n  requestNestedRows: (row: ResourceRow) => Promise<void>;\n  onRowSelectedChange: (row: ResourceRow, selected: boolean) => void;\n  selectableEntryTypes: ResourceRowType[];\n}\n\nconst NestedRows: React.FC<NestedRowsProps> = ({\n  rows,\n  selectedRows,\n  level,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n}) => (\n  <>\n    {rows.map((row) => (\n      <NestedRow\n        key={row.id}\n        row={row}\n        selectedRows={selectedRows}\n        level={level}\n        requestNestedRows={requestNestedRows}\n        onRowSelectedChange={onRowSelectedChange}\n        selectableEntryTypes={selectableEntryTypes}\n      />\n    ))}\n  </>\n);\n\nexport default NestedRows;\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nimport NestedRows from './NestedRows';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\n\ninterface NestedResourceTableProps {\n  rows: ResourceRowGroup;\n  selectedRows: ResourceRowGroup;\n  noHeader?: boolean;\n  requestNestedRows: (row: ResourceRow) => Promise<void>;\n  onRowSelectedChange: (row: ResourceRow, selected: boolean) => void;\n  selectableEntryTypes: ResourceRowType[];\n}\n\nconst NestedResourceTable: React.FC<NestedResourceTableProps> = ({\n  rows,\n  selectedRows,\n  noHeader,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <table className={styles.table}>\n        {!noHeader && (\n          <thead>\n            <tr className={cx(styles.row, styles.header)}>\n              <td className={styles.cell}>Scope</td>\n              <td className={styles.cell}>Type</td>\n              <td className={styles.cell}>Location</td>\n            </tr>\n          </thead>\n        )}\n      </table>\n\n      <div className={styles.tableScroller}>\n        <table className={styles.table}>\n          <tbody>\n            <NestedRows\n              rows={rows}\n              selectedRows={selectedRows}\n              level={0}\n              requestNestedRows={requestNestedRows}\n              onRowSelectedChange={onRowSelectedChange}\n              selectableEntryTypes={selectableEntryTypes}\n            />\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default NestedResourceTable;\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Icon, Input, LoadingPlaceholder, Tooltip, useStyles2, Collapse, Label } from '@grafana/ui';\n\nimport ResourcePickerData from '../../resourcePicker/resourcePickerData';\nimport messageFromError from '../../utils/messageFromError';\nimport { Space } from '../Space';\n\nimport NestedResourceTable from './NestedResourceTable';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { addResources, findRow, parseResourceURI } from './utils';\n\ninterface ResourcePickerProps {\n  resourcePickerData: ResourcePickerData;\n  resourceURI: string | undefined;\n  selectableEntryTypes: ResourceRowType[];\n\n  onApply: (resourceURI: string | undefined) => void;\n  onCancel: () => void;\n}\n\nconst ResourcePicker = ({\n  resourcePickerData,\n  resourceURI,\n  onApply,\n  onCancel,\n  selectableEntryTypes,\n}: ResourcePickerProps) => {\n  const styles = useStyles2(getStyles);\n\n  type LoadingStatus = 'NotStarted' | 'Started' | 'Done';\n  const [loadingStatus, setLoadingStatus] = useState<LoadingStatus>('NotStarted');\n  const [azureRows, setAzureRows] = useState<ResourceRowGroup>([]);\n  const [internalSelectedURI, setInternalSelectedURI] = useState<string | undefined>(resourceURI);\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(resourceURI?.includes('$'));\n  // Sync the resourceURI prop to internal state\n  useEffect(() => {\n    setInternalSelectedURI(resourceURI);\n  }, [resourceURI]);\n\n  // Request initial data on first mount\n  useEffect(() => {\n    if (loadingStatus === 'NotStarted') {\n      const loadInitialData = async () => {\n        try {\n          setLoadingStatus('Started');\n          let resources = await resourcePickerData.getSubscriptions();\n          if (!internalSelectedURI) {\n            setAzureRows(resources);\n            setLoadingStatus('Done');\n            return;\n          }\n\n          const parsedURI = parseResourceURI(internalSelectedURI ?? '');\n          if (parsedURI) {\n            const resourceGroupURI = `/subscriptions/${parsedURI.subscriptionID}/resourceGroups/${parsedURI.resourceGroup}`;\n\n            // if a resource group was previously selected, but the resource groups under the parent subscription have not been loaded yet\n            if (parsedURI.resourceGroup && !findRow(resources, resourceGroupURI)) {\n              const resourceGroups = await resourcePickerData.getResourceGroupsBySubscriptionId(\n                parsedURI.subscriptionID\n              );\n              resources = addResources(resources, `/subscriptions/${parsedURI.subscriptionID}`, resourceGroups);\n            }\n\n            // if a resource was previously selected, but the resources under the parent resource group have not been loaded yet\n            if (parsedURI.resource && !findRow(azureRows, parsedURI.resource ?? '')) {\n              const resourcesForResourceGroup = await resourcePickerData.getResourcesForResourceGroup(resourceGroupURI);\n              resources = addResources(resources, resourceGroupURI, resourcesForResourceGroup);\n            }\n          }\n          setAzureRows(resources);\n          setLoadingStatus('Done');\n        } catch (error) {\n          setLoadingStatus('Done');\n          setErrorMessage(messageFromError(error));\n        }\n      };\n\n      loadInitialData();\n    }\n  }, [resourcePickerData, internalSelectedURI, azureRows, loadingStatus]);\n\n  // Map the selected item into an array of rows\n  const selectedResourceRows = useMemo(() => {\n    const found = internalSelectedURI && findRow(azureRows, internalSelectedURI);\n\n    return found\n      ? [\n          {\n            ...found,\n            children: undefined,\n          },\n        ]\n      : [];\n  }, [internalSelectedURI, azureRows]);\n\n  // Request resources for a expanded resource group\n  const requestNestedRows = useCallback(\n    async (resourceGroupOrSubscription: ResourceRow) => {\n      // clear error message (also when loading cached resources)\n      setErrorMessage(undefined);\n\n      // If we already have children, we don't need to re-fetch them.\n      if (resourceGroupOrSubscription.children?.length) {\n        return;\n      }\n\n      try {\n        const rows =\n          resourceGroupOrSubscription.type === ResourceRowType.Subscription\n            ? await resourcePickerData.getResourceGroupsBySubscriptionId(resourceGroupOrSubscription.id)\n            : await resourcePickerData.getResourcesForResourceGroup(resourceGroupOrSubscription.id);\n\n        const newRows = addResources(azureRows, resourceGroupOrSubscription.uri, rows);\n\n        setAzureRows(newRows);\n      } catch (error) {\n        setErrorMessage(messageFromError(error));\n        throw error;\n      }\n    },\n    [resourcePickerData, azureRows]\n  );\n\n  const handleSelectionChanged = useCallback((row: ResourceRow, isSelected: boolean) => {\n    isSelected ? setInternalSelectedURI(row.uri) : setInternalSelectedURI(undefined);\n  }, []);\n\n  const handleApply = useCallback(() => {\n    onApply(internalSelectedURI);\n  }, [internalSelectedURI, onApply]);\n\n  return (\n    <div>\n      {loadingStatus === 'Started' ? (\n        <div className={styles.loadingWrapper}>\n          <LoadingPlaceholder text={'Loading...'} />\n        </div>\n      ) : (\n        <>\n          <NestedResourceTable\n            rows={azureRows}\n            requestNestedRows={requestNestedRows}\n            onRowSelectedChange={handleSelectionChanged}\n            selectedRows={selectedResourceRows}\n            selectableEntryTypes={selectableEntryTypes}\n          />\n\n          <div className={styles.selectionFooter}>\n            {selectedResourceRows.length > 0 && (\n              <>\n                <h5>Selection</h5>\n                <NestedResourceTable\n                  rows={selectedResourceRows}\n                  requestNestedRows={requestNestedRows}\n                  onRowSelectedChange={handleSelectionChanged}\n                  selectedRows={selectedResourceRows}\n                  noHeader={true}\n                  selectableEntryTypes={selectableEntryTypes}\n                />\n                <Space v={2} />\n              </>\n            )}\n            <Collapse\n              collapsible\n              label=\"Advanced\"\n              isOpen={isAdvancedOpen}\n              onToggle={() => setIsAdvancedOpen(!isAdvancedOpen)}\n            >\n              <Label htmlFor={`input-${internalSelectedURI}`}>\n                <h6>\n                  Resource URI{' '}\n                  <Tooltip\n                    content={\n                      <>\n                        Manually edit the{' '}\n                        <a\n                          href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/logs/log-standard-columns#_resourceid\"\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          resource uri.{' '}\n                        </a>\n                        Supports the use of multiple template variables (ex: /subscriptions/$subId/resourceGroups/$rg)\n                      </>\n                    }\n                    placement=\"right\"\n                    interactive={true}\n                  >\n                    <Icon name=\"info-circle\" />\n                  </Tooltip>\n                </h6>\n              </Label>\n              <Input\n                id={`input-${internalSelectedURI}`}\n                value={internalSelectedURI}\n                onChange={(event) => setInternalSelectedURI(event.currentTarget.value)}\n                placeholder=\"ex: /subscriptions/$subId\"\n              />\n            </Collapse>\n            <Space v={2} />\n\n            <Button disabled={!!errorMessage} onClick={handleApply}>\n              Apply\n            </Button>\n\n            <Space layout=\"inline\" h={1} />\n\n            <Button onClick={onCancel} variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n      {errorMessage && (\n        <>\n          <Space v={2} />\n          <Alert severity=\"error\" title=\"An error occurred while requesting resources from Azure Monitor\">\n            {errorMessage}\n          </Alert>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ResourcePicker;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  selectionFooter: css({\n    position: 'sticky',\n    bottom: 0,\n    background: theme.colors.background.primary,\n    paddingTop: theme.spacing(2),\n  }),\n  loadingWrapper: css({\n    textAlign: 'center',\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureQueryEditorFieldProps, AzureResourceSummaryItem } from '../../types';\nimport { Field } from '../Field';\nimport ResourcePicker from '../ResourcePicker';\nimport { ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceURI } from '../ResourcePicker/utils';\nimport { Space } from '../Space';\n\nimport { setResource } from './setQueryValue';\n\nfunction parseResourceDetails(resourceURI: string) {\n  const parsed = parseResourceURI(resourceURI);\n\n  if (!parsed) {\n    return undefined;\n  }\n\n  return {\n    subscriptionName: parsed.subscriptionID,\n    resourceGroupName: parsed.resourceGroup,\n    resourceName: parsed.resource,\n  };\n}\n\nconst ResourceField: React.FC<AzureQueryEditorFieldProps> = ({ query, datasource, onQueryChange }) => {\n  const styles = useStyles2(getStyles);\n  const { resource } = query.azureLogAnalytics ?? {};\n  const [pickerIsOpen, setPickerIsOpen] = useState(false);\n\n  const handleOpenPicker = useCallback(() => {\n    setPickerIsOpen(true);\n  }, []);\n\n  const closePicker = useCallback(() => {\n    setPickerIsOpen(false);\n  }, []);\n\n  const handleApply = useCallback(\n    (resourceURI: string | undefined) => {\n      onQueryChange(setResource(query, resourceURI));\n      closePicker();\n    },\n    [closePicker, onQueryChange, query]\n  );\n\n  return (\n    <>\n      <Modal\n        className={styles.modal}\n        title=\"Select a resource\"\n        isOpen={pickerIsOpen}\n        onDismiss={closePicker}\n        // The growing number of rows added to the modal causes a focus\n        // error in the modal, making it impossible to click on new elements\n        trapFocus={false}\n      >\n        <ResourcePicker\n          resourcePickerData={datasource.resourcePickerData}\n          resourceURI={resource}\n          onApply={handleApply}\n          onCancel={closePicker}\n          selectableEntryTypes={[\n            ResourceRowType.Subscription,\n            ResourceRowType.ResourceGroup,\n            ResourceRowType.Resource,\n            ResourceRowType.Variable,\n          ]}\n        />\n      </Modal>\n\n      <Field label=\"Resource\">\n        <Button variant=\"secondary\" onClick={handleOpenPicker} type=\"button\">\n          <ResourceLabel resource={resource} datasource={datasource} />\n        </Button>\n      </Field>\n    </>\n  );\n};\n\ninterface ResourceLabelProps {\n  resource: string | undefined;\n  datasource: Datasource;\n}\n\nconst ResourceLabel = ({ resource, datasource }: ResourceLabelProps) => {\n  const [resourceComponents, setResourceComponents] = useState(parseResourceDetails(resource ?? ''));\n\n  useEffect(() => {\n    if (resource && parseResourceDetails(resource)) {\n      datasource.resourcePickerData.getResourceURIDisplayProperties(resource).then(setResourceComponents);\n    } else {\n      setResourceComponents(undefined);\n    }\n  }, [datasource.resourcePickerData, resource]);\n\n  if (!resource) {\n    return <>Select a resource</>;\n  }\n\n  if (resourceComponents) {\n    return <FormattedResource resource={resourceComponents} />;\n  }\n\n  if (resource.startsWith('$')) {\n    return (\n      <span>\n        <Icon name=\"x\" /> {resource}\n      </span>\n    );\n  }\n\n  return <>{resource}</>;\n};\n\ninterface FormattedResourceProps {\n  resource: AzureResourceSummaryItem;\n}\n\nconst FormattedResource = ({ resource }: FormattedResourceProps) => {\n  return (\n    <span>\n      <Icon name=\"layer-group\" /> {resource.subscriptionName}\n      {resource.resourceGroupName && (\n        <>\n          <Separator />\n          <Icon name=\"folder\" /> {resource.resourceGroupName}\n        </>\n      )}\n      {resource.resourceName && (\n        <>\n          <Separator />\n          <Icon name=\"cube\" /> {resource.resourceName}\n        </>\n      )}\n    </span>\n  );\n};\n\nconst Separator = () => (\n  <>\n    <Space layout=\"inline\" h={2} />\n    {'/'}\n    <Space layout=\"inline\" h={2} />\n  </>\n);\n\nexport default ResourceField;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: theme.breakpoints.values.lg,\n  }),\n});\n","import { useEffect, useState } from 'react';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorQuery } from '../../types';\nimport { isGUIDish } from '../ResourcePicker/utils';\n\nasync function migrateWorkspaceQueryToResourceQuery(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  if (query.azureLogAnalytics?.workspace !== undefined && !query.azureLogAnalytics.resource) {\n    const isWorkspaceGUID = isGUIDish(query.azureLogAnalytics.workspace);\n    let resource: string;\n\n    if (isWorkspaceGUID) {\n      resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(query.azureLogAnalytics.workspace);\n    } else {\n      // The value of workspace is probably a template variable so we just migrate it over as-is\n      resource = query.azureLogAnalytics.workspace;\n    }\n\n    const newQuery = {\n      ...query,\n      azureLogAnalytics: {\n        ...query.azureLogAnalytics,\n        resource: resource,\n        workspace: undefined,\n      },\n    };\n\n    delete newQuery.azureLogAnalytics.workspace;\n\n    onChange(newQuery);\n  }\n}\n\ninterface ErrorMessage {\n  title: string;\n  message: string;\n}\n\nexport default function useMigrations(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  const [migrationError, setMigrationError] = useState<ErrorMessage>();\n\n  useEffect(() => {\n    migrateWorkspaceQueryToResourceQuery(datasource, query, onChange).catch((err) =>\n      setMigrationError({\n        title: 'Unable to migrate workspace as a resource',\n        message: err.message,\n      })\n    );\n  }, [datasource, query, onChange]);\n\n  return migrationError;\n}\n","import React from 'react';\n\nimport { Alert, InlineFieldRow } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\n\nimport FormatAsField from './FormatAsField';\nimport QueryField from './QueryField';\nimport ResourceField from './ResourceField';\nimport useMigrations from './useMigrations';\n\ninterface LogsQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n  hideFormatAs?: boolean;\n}\n\nconst LogsQueryEditor: React.FC<LogsQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n  hideFormatAs,\n}) => {\n  const migrationError = useMigrations(datasource, query, onChange);\n\n  return (\n    <div data-testid=\"azure-monitor-logs-query-editor\">\n      <InlineFieldRow>\n        <ResourceField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </InlineFieldRow>\n\n      <QueryField\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n      />\n\n      {!hideFormatAs && (\n        <FormatAsField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      )}\n\n      {migrationError && <Alert title={migrationError.title}>{migrationError.message}</Alert>}\n    </div>\n  );\n};\n\nexport default LogsQueryEditor;\n","import { AzureMonitorQuery } from '../../types';\n\nexport function setKustoQuery(query: AzureMonitorQuery, kustoQuery: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      query: kustoQuery,\n    },\n  };\n}\n\nexport function setFormatAs(query: AzureMonitorQuery, formatAs: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      resultFormat: formatAs,\n    },\n  };\n}\n\nexport function setResource(query: AzureMonitorQuery, resourceURI: string | undefined): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      resource: resourceURI,\n    },\n  };\n}\n","import { AzureMetricDimension, AzureMonitorQuery } from '../../types';\n\nexport function setSubscriptionID(query: AzureMonitorQuery, subscriptionID: string): AzureMonitorQuery {\n  if (query.subscription === subscriptionID) {\n    return query;\n  }\n\n  return {\n    ...query,\n    subscription: subscriptionID,\n    azureMonitor: {\n      ...query.azureMonitor,\n      resourceGroup: undefined,\n      metricDefinition: undefined,\n      metricNamespace: undefined,\n      resourceName: undefined,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setResourceGroup(query: AzureMonitorQuery, resourceGroup: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.resourceGroup === resourceGroup) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      resourceGroup: resourceGroup,\n      metricDefinition: undefined,\n      metricNamespace: undefined,\n      resourceName: undefined,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\n// In the query as \"metricDefinition\" for some reason\nexport function setResourceType(query: AzureMonitorQuery, resourceType: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricDefinition === resourceType) {\n    return query;\n  }\n\n  const newQuery = {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricDefinition: resourceType,\n      resourceName: undefined,\n      metricNamespace: undefined,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n\n  return newQuery;\n}\n\nexport function setResourceName(query: AzureMonitorQuery, resourceName: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.resourceName === resourceName) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      resourceName: resourceName,\n      metricNamespace: undefined,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setMetricNamespace(query: AzureMonitorQuery, metricNamespace: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricNamespace === metricNamespace) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricNamespace: metricNamespace,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setMetricName(query: AzureMonitorQuery, metricName: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricName === metricName) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricName: metricName,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setAggregation(query: AzureMonitorQuery, aggregation: string): AzureMonitorQuery {\n  if (query.azureMonitor?.aggregation === aggregation) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      aggregation: aggregation,\n    },\n  };\n}\n\nexport function setTimeGrain(query: AzureMonitorQuery, timeGrain: string): AzureMonitorQuery {\n  if (query.azureMonitor?.timeGrain === timeGrain) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      timeGrain: timeGrain,\n    },\n  };\n}\n\nexport function setDimensionFilters(query: AzureMonitorQuery, dimensions: AzureMetricDimension[]): AzureMonitorQuery {\n  if (query.azureMonitor?.dimensionFilters === dimensions) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      dimensionFilters: dimensions,\n    },\n  };\n}\n\nexport function appendDimensionFilter(\n  query: AzureMonitorQuery,\n  dimension = '',\n  operator = 'eq',\n  filter = ''\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n\n  return setDimensionFilters(query, [\n    ...existingFilters,\n    {\n      dimension,\n      operator,\n      filter,\n    },\n  ]);\n}\n\nexport function removeDimensionFilter(query: AzureMonitorQuery, indexToRemove: number): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  newFilters.splice(indexToRemove, 1);\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setDimensionFilterValue<Key extends keyof AzureMetricDimension>(\n  query: AzureMonitorQuery,\n  index: number,\n  fieldName: Key,\n  value: AzureMetricDimension[Key]\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  const newFilter = newFilters[index];\n  newFilter[fieldName] = value;\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setTop(query: AzureMonitorQuery, top: string): AzureMonitorQuery {\n  if (query.azureMonitor?.top === top) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      top: top,\n    },\n  };\n}\n\nexport function setLegendAlias(query: AzureMonitorQuery, alias: string): AzureMonitorQuery {\n  if (query.azureMonitor?.alias === alias) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      alias: alias,\n    },\n  };\n}\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, MultiSelect } from '@grafana/ui';\n\nimport { AzureMonitorQuery, AzureQueryEditorFieldProps, AzureMonitorOption, AzureQueryType } from '../types';\nimport { findOptions } from '../utils/common';\n\nimport { Field } from './Field';\n\ninterface SubscriptionFieldProps extends AzureQueryEditorFieldProps {\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  subscriptions: AzureMonitorOption[];\n  multiSelect?: boolean;\n}\n\nconst SubscriptionField: React.FC<SubscriptionFieldProps> = ({\n  query,\n  subscriptions,\n  variableOptionGroup,\n  onQueryChange,\n  multiSelect = false,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      let newQuery: AzureMonitorQuery = {\n        ...query,\n        subscription: change.value,\n      };\n\n      if (query.queryType === AzureQueryType.AzureMonitor) {\n        newQuery.azureMonitor = {\n          ...newQuery.azureMonitor,\n          resourceGroup: undefined,\n          metricDefinition: undefined,\n          metricNamespace: undefined,\n          resourceName: undefined,\n          metricName: undefined,\n          aggregation: undefined,\n          timeGrain: '',\n          dimensionFilters: [],\n        };\n      }\n\n      onQueryChange(newQuery);\n    },\n    [query, onQueryChange]\n  );\n\n  const onSubscriptionsChange = useCallback(\n    (change: Array<SelectableValue<string>>) => {\n      if (!change) {\n        return;\n      }\n\n      query.subscriptions = change.map((c) => c.value ?? '');\n\n      onQueryChange(query);\n    },\n    [query, onQueryChange]\n  );\n\n  const options = useMemo(() => [...subscriptions, variableOptionGroup], [subscriptions, variableOptionGroup]);\n\n  return multiSelect ? (\n    <Field label=\"Subscriptions\">\n      <MultiSelect\n        menuShouldPortal\n        isClearable\n        value={findOptions([...subscriptions, ...variableOptionGroup.options], query.subscriptions)}\n        inputId=\"azure-monitor-subscriptions-field\"\n        onChange={onSubscriptionsChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  ) : (\n    <Field label=\"Subscription\">\n      <Select\n        menuShouldPortal\n        value={query.subscription}\n        inputId=\"azure-monitor-subscriptions-field\"\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default SubscriptionField;\n","import React, { useCallback } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nconst QueryField: React.FC<AzureQueryEditorFieldProps> = ({ query, onQueryChange }) => {\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange({\n        ...query,\n        azureResourceGraph: {\n          ...query.azureResourceGraph,\n          query: newQuery,\n        },\n      });\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureResourceGraph?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width={1000}\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n    />\n  );\n};\n\nexport default QueryField;\n","import React, { useEffect, useState, useRef } from 'react';\n\nimport { InlineFieldRow } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport SubscriptionField from '../SubscriptionField';\n\nimport QueryField from './QueryField';\n\ninterface LogsQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst ERROR_SOURCE = 'arg-subscriptions';\nconst ArgQueryEditor: React.FC<LogsQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  const fetchedRef = useRef(false);\n  const [subscriptions, setSubscriptions] = useState<AzureMonitorOption[]>([]);\n\n  useEffect(() => {\n    if (fetchedRef.current) {\n      return;\n    }\n\n    fetchedRef.current = true;\n    datasource.azureMonitorDatasource\n      .getSubscriptions()\n      .then((results) => {\n        const fetchedSubscriptions = results.map((v) => ({ label: v.text, value: v.value, description: v.value }));\n        setSubscriptions(fetchedSubscriptions);\n        setError(ERROR_SOURCE, undefined);\n\n        if (!query.subscriptions?.length && fetchedSubscriptions?.length) {\n          onChange({\n            ...query,\n            subscriptions: [query.subscription ?? fetchedSubscriptions[0].value],\n          });\n        }\n      })\n      .catch((err) => setError(ERROR_SOURCE, err));\n  }, [datasource, onChange, query, setError]);\n\n  return (\n    <div data-testid=\"azure-monitor-logs-query-editor\">\n      <InlineFieldRow>\n        <SubscriptionField\n          multiSelect\n          subscriptions={subscriptions}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </InlineFieldRow>\n\n      <QueryField\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n      />\n    </div>\n  );\n};\n\nexport default ArgQueryEditor;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setAggregation } from './setQueryValue';\n\ninterface AggregationFieldProps extends AzureQueryEditorFieldProps {\n  aggregationOptions: AzureMonitorOption[];\n  isLoading: boolean;\n}\n\nconst AggregationField: React.FC<AggregationFieldProps> = ({\n  query,\n  variableOptionGroup,\n  onQueryChange,\n  aggregationOptions,\n  isLoading,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setAggregation(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(\n    () => [...aggregationOptions, variableOptionGroup],\n    [aggregationOptions, variableOptionGroup]\n  );\n\n  return (\n    <Field label=\"Aggregation\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-aggregation-field\"\n        value={query.azureMonitor?.aggregation}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        isLoading={isLoading}\n      />\n    </Field>\n  );\n};\n\nexport default AggregationField;\n","import React, { useMemo } from 'react';\n\nimport { Button, Select, Input, HorizontalGroup, VerticalGroup, InlineLabel } from '@grafana/ui';\n\nimport { AzureMetricDimension, AzureMonitorOption, AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { appendDimensionFilter, removeDimensionFilter, setDimensionFilterValue } from './setQueryValue';\n\ninterface DimensionFieldsProps extends AzureQueryEditorFieldProps {\n  dimensionOptions: AzureMonitorOption[];\n}\n\nconst DimensionFields: React.FC<DimensionFieldsProps> = ({ query, dimensionOptions, onQueryChange }) => {\n  const dimensionFilters = useMemo(\n    () => query.azureMonitor?.dimensionFilters ?? [],\n    [query.azureMonitor?.dimensionFilters]\n  );\n\n  const addFilter = () => {\n    onQueryChange(appendDimensionFilter(query));\n  };\n\n  const removeFilter = (index: number) => {\n    onQueryChange(removeDimensionFilter(query, index));\n  };\n\n  const onFieldChange = <Key extends keyof AzureMetricDimension>(\n    filterIndex: number,\n    fieldName: Key,\n    value: AzureMetricDimension[Key]\n  ) => {\n    onQueryChange(setDimensionFilterValue(query, filterIndex, fieldName, value));\n  };\n\n  const onFilterInputChange = (index: number, ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      onFieldChange(index, 'filter', ev.target.value);\n    }\n  };\n\n  return (\n    <Field label=\"Dimension\">\n      <VerticalGroup spacing=\"xs\">\n        {dimensionFilters.map((filter, index) => (\n          <HorizontalGroup key={index} spacing=\"xs\">\n            <Select\n              menuShouldPortal\n              placeholder=\"Field\"\n              value={filter.dimension}\n              options={dimensionOptions}\n              onChange={(v) => onFieldChange(index, 'dimension', v.value ?? '')}\n              width={38}\n            />\n            <InlineLabel aria-label=\"equals\">==</InlineLabel>\n            <Input placeholder=\"\" value={filter.filter} onChange={(ev) => onFilterInputChange(index, ev)} />\n            <Button\n              variant=\"secondary\"\n              size=\"md\"\n              icon=\"trash-alt\"\n              aria-label=\"Remove\"\n              onClick={() => removeFilter(index)}\n            ></Button>\n          </HorizontalGroup>\n        ))}\n\n        <Button variant=\"secondary\" size=\"md\" onClick={addFilter}>\n          Add new dimension\n        </Button>\n      </VerticalGroup>\n    </Field>\n  );\n};\n\nexport default DimensionFields;\n","import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setLegendAlias } from './setQueryValue';\n\nconst LegendFormatField: React.FC<AzureQueryEditorFieldProps> = ({ onQueryChange, query }) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.alias ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setLegendAlias(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Legend format\">\n      <Input\n        id=\"azure-monitor-metrics-legend-field\"\n        placeholder=\"Alias patterns\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default LegendFormatField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setMetricName } from './setQueryValue';\n\ninterface MetricNameProps extends AzureQueryEditorFieldProps {\n  metricNames: AzureMonitorOption[];\n}\n\nconst MetricNameField: React.FC<MetricNameProps> = ({ metricNames, query, variableOptionGroup, onQueryChange }) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setMetricName(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...metricNames, variableOptionGroup], [metricNames, variableOptionGroup]);\n\n  return (\n    <Field label=\"Metric\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-metric-field\"\n        value={query.azureMonitor?.metricName ?? null}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNameField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setMetricNamespace } from './setQueryValue';\n\ninterface MetricNamespaceFieldProps extends AzureQueryEditorFieldProps {\n  metricNamespaces: AzureMonitorOption[];\n}\n\nconst MetricNamespaceField: React.FC<MetricNamespaceFieldProps> = ({\n  metricNamespaces,\n  query,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setMetricNamespace(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...metricNamespaces, variableOptionGroup], [metricNamespaces, variableOptionGroup]);\n  const optionValues = metricNamespaces.map((m) => m.value).concat(variableOptionGroup.options.map((p) => p.value));\n  const value = query.azureMonitor?.metricNamespace;\n  if (value && !optionValues.includes(value)) {\n    options.push({ label: value, value });\n  }\n\n  return (\n    <Field label=\"Metric namespace\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-metric-namespace-field\"\n        value={query.azureMonitor?.metricNamespace}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNamespaceField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setResourceGroup } from './setQueryValue';\n\ninterface ResourceGroupsFieldProps extends AzureQueryEditorFieldProps {\n  resourceGroups: AzureMonitorOption[];\n}\n\nconst ResourceGroupsField: React.FC<ResourceGroupsFieldProps> = ({\n  query,\n  resourceGroups,\n  variableOptionGroup,\n  onQueryChange,\n  setError,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      const newQuery = setResourceGroup(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...resourceGroups, variableOptionGroup], [resourceGroups, variableOptionGroup]);\n\n  return (\n    <Field label=\"Resource group\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-resource-group-field\"\n        value={query.azureMonitor?.resourceGroup}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default ResourceGroupsField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setResourceName } from './setQueryValue';\n\ninterface ResourceNameFieldProps extends AzureQueryEditorFieldProps {\n  resourceNames: AzureMonitorOption[];\n}\n\nconst ResourceNameField: React.FC<ResourceNameFieldProps> = ({\n  resourceNames,\n  query,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      const newQuery = setResourceName(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...resourceNames, variableOptionGroup], [resourceNames, variableOptionGroup]);\n  const value = query.azureMonitor?.resourceName ?? null;\n\n  return (\n    <Field label=\"Resource name\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-resource-name-field\"\n        value={value}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default ResourceNameField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setResourceType } from './setQueryValue';\n\ninterface NamespaceFieldProps extends AzureQueryEditorFieldProps {\n  resourceTypes: AzureMonitorOption[];\n}\n\nconst NamespaceField: React.FC<NamespaceFieldProps> = ({\n  resourceTypes,\n  query,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setResourceType(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...resourceTypes, variableOptionGroup], [resourceTypes, variableOptionGroup]);\n\n  return (\n    <Field label=\"Resource type\">\n      {/* It's expected that the label reads Resource type but the property is metricDefinition */}\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-resource-type-field\"\n        value={query.azureMonitor?.metricDefinition}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default NamespaceField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport TimegrainConverter from '../../time_grain_converter';\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setTimeGrain } from './setQueryValue';\n\ninterface TimeGrainFieldProps extends AzureQueryEditorFieldProps {\n  timeGrainOptions: AzureMonitorOption[];\n}\n\nconst TimeGrainField: React.FC<TimeGrainFieldProps> = ({\n  query,\n  timeGrainOptions,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setTimeGrain(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const timeGrains = useMemo(() => {\n    const autoInterval = TimegrainConverter.findClosestTimeGrain(\n      '1m',\n      timeGrainOptions.map((o) => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n        '1m',\n        '5m',\n        '15m',\n        '30m',\n        '1h',\n        '6h',\n        '12h',\n        '1d',\n      ]\n    );\n\n    const baseTimeGrains = timeGrainOptions.map((v) => (v.value === 'auto' ? { ...v, description: autoInterval } : v));\n\n    return [...baseTimeGrains, variableOptionGroup];\n  }, [timeGrainOptions, variableOptionGroup]);\n\n  return (\n    <Field label=\"Time grain\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-metrics-time-grain-field\"\n        value={query.azureMonitor?.timeGrain}\n        onChange={handleChange}\n        options={timeGrains}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default TimeGrainField;\n","import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setTop } from './setQueryValue';\n\nconst TopField: React.FC<AzureQueryEditorFieldProps> = ({ onQueryChange, query }) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.top ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setTop(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Top\">\n      <Input\n        id=\"azure-monitor-metrics-top-field\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={16}\n      />\n    </Field>\n  );\n};\n\nexport default TopField;\n","import { useEffect, useMemo, useState } from 'react';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport { hasOption, toOption } from '../../utils/common';\n\nimport { setMetricNamespace, setSubscriptionID } from './setQueryValue';\n\nexport interface MetricMetadata {\n  aggOptions: AzureMonitorOption[];\n  timeGrains: AzureMonitorOption[];\n  dimensions: AzureMonitorOption[];\n  isLoading: boolean;\n\n  // These two properties are only used within the hook, and not elsewhere\n  supportedAggTypes: string[];\n  primaryAggType: string | undefined;\n}\n\ntype SetErrorFn = (source: string, error: AzureMonitorErrorish | undefined) => void;\ntype OnChangeFn = (newQuery: AzureMonitorQuery) => void;\n\nexport type DataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn,\n  setError: SetErrorFn\n) => AzureMonitorOption[];\n\nexport function useAsyncState<T>(asyncFn: () => Promise<T>, setError: Function, dependencies: unknown[]) {\n  // Use the lazy initial state functionality of useState to assign a random ID to the API call\n  // to track where errors come from. See useLastError.\n  const [errorSource] = useState(() => Math.random());\n  const [value, setValue] = useState<T>();\n\n  const finalValue = useMemo(() => value ?? [], [value]);\n\n  useEffect(() => {\n    asyncFn()\n      .then((results) => {\n        setValue(results);\n        setError(errorSource, undefined);\n      })\n      .catch((err) => {\n        setError(errorSource, err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  return finalValue;\n}\n\nexport const updateSubscriptions = (\n  query: AzureMonitorQuery,\n  subscriptionOptions: AzureMonitorOption[],\n  onChange: OnChangeFn,\n  defaultSubscription?: string\n) => {\n  const { subscription } = query;\n\n  // Return early if subscriptions havent loaded, or if the query already has a subscription\n  if (\n    !subscriptionOptions.length ||\n    (subscription && (hasOption(subscriptionOptions, subscription) || subscription.includes('$')))\n  ) {\n    return;\n  }\n\n  const defaultSub = defaultSubscription || subscriptionOptions[0].value;\n\n  if (!subscription && defaultSub && hasOption(subscriptionOptions, defaultSub)) {\n    onChange(setSubscriptionID(query, defaultSub));\n  }\n\n  // Check if the current subscription is in the list of subscriptions\n  if (subscription && !hasOption(subscriptionOptions, subscription)) {\n    if (hasOption(subscriptionOptions, defaultSub)) {\n      // Use the default sub if is on theh list\n      onChange(setSubscriptionID(query, defaultSub));\n    } else {\n      // Neither the current subscription nor the defaultSub is on the list, remove it\n      onChange(setSubscriptionID(query, ''));\n    }\n  }\n};\n\nexport const useSubscriptions: DataHook = (query, datasource, onChange, setError) => {\n  const defaultSubscription = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const { subscription } = query;\n\n  const subscriptionOptions = useAsyncState(\n    async () => {\n      const results = await datasource.azureMonitorDatasource.getSubscriptions();\n      const options = formatOptions(results, subscription);\n\n      return options;\n    },\n    setError,\n    []\n  );\n\n  useEffect(() => {\n    updateSubscriptions(query, subscriptionOptions, onChange, defaultSubscription);\n  }, [subscriptionOptions, query, defaultSubscription, onChange]);\n\n  return subscriptionOptions;\n};\n\nexport const useResourceGroups: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { resourceGroup } = query.azureMonitor ?? {};\n\n  return useAsyncState(\n    async () => {\n      if (!subscription) {\n        return;\n      }\n\n      const results = await datasource.getResourceGroups(subscription);\n      const options = formatOptions(results, resourceGroup);\n\n      return options;\n    },\n    setError,\n    [subscription]\n  );\n};\n\nexport const useResourceTypes: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { resourceGroup, metricDefinition } = query.azureMonitor ?? {};\n\n  return useAsyncState(\n    async () => {\n      if (!(subscription && resourceGroup)) {\n        return;\n      }\n\n      const results = await datasource.getMetricDefinitions(subscription, resourceGroup);\n      const options = formatOptions(results, metricDefinition);\n\n      return options;\n    },\n    setError,\n    [subscription, resourceGroup]\n  );\n};\n\nexport const useResourceNames: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { resourceGroup, metricDefinition, resourceName } = query.azureMonitor ?? {};\n\n  return useAsyncState(\n    async () => {\n      if (!(subscription && resourceGroup && metricDefinition)) {\n        return;\n      }\n\n      const results = await datasource.getResourceNames(subscription, resourceGroup, metricDefinition);\n      const options = formatOptions(results, resourceName);\n\n      return options;\n    },\n    setError,\n    [subscription, resourceGroup, metricDefinition]\n  );\n};\n\nexport const useMetricNamespaces: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { resourceGroup, metricDefinition, resourceName, metricNamespace } = query.azureMonitor ?? {};\n\n  const metricNamespaces = useAsyncState(\n    async () => {\n      if (!(subscription && resourceGroup && metricDefinition && resourceName)) {\n        return;\n      }\n\n      const results = await datasource.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n      const options = formatOptions(results, metricNamespace);\n\n      // Do some cleanup of the query state if need be\n      if (!metricNamespace && options.length) {\n        onChange(setMetricNamespace(query, options[0].value));\n      }\n\n      return options;\n    },\n    setError,\n    [subscription, resourceGroup, metricDefinition, resourceName]\n  );\n\n  return metricNamespaces;\n};\n\nexport const useMetricNames: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { resourceGroup, metricDefinition, resourceName, metricNamespace, metricName } = query.azureMonitor ?? {};\n\n  return useAsyncState(\n    async () => {\n      if (!(subscription && resourceGroup && metricDefinition && resourceName && metricNamespace)) {\n        return;\n      }\n\n      const results = await datasource.getMetricNames(\n        subscription,\n        resourceGroup,\n        metricDefinition,\n        resourceName,\n        metricNamespace\n      );\n\n      const options = formatOptions(results, metricName);\n\n      return options;\n    },\n    setError,\n    [subscription, resourceGroup, metricDefinition, resourceName, metricNamespace]\n  );\n};\n\nexport const useMetricMetadata = (query: AzureMonitorQuery, datasource: Datasource, onChange: OnChangeFn) => {\n  const [metricMetadata, setMetricMetadata] = useState<MetricMetadata>({\n    aggOptions: [],\n    timeGrains: [],\n    dimensions: [],\n    isLoading: false,\n    supportedAggTypes: [],\n    primaryAggType: undefined,\n  });\n\n  const { subscription } = query;\n  const { resourceGroup, metricDefinition, resourceName, metricNamespace, metricName, aggregation, timeGrain } =\n    query.azureMonitor ?? {};\n\n  // Fetch new metric metadata when the fields change\n  useEffect(() => {\n    if (!(subscription && resourceGroup && metricDefinition && resourceName && metricNamespace && metricName)) {\n      return;\n    }\n\n    datasource\n      .getMetricMetadata(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace, metricName)\n      .then((metadata) => {\n        // TODO: Move the aggregationTypes and timeGrain defaults into `getMetricMetadata`\n        const aggregations = (metadata.supportedAggTypes || [metadata.primaryAggType]).map((v) => ({\n          label: v,\n          value: v,\n        }));\n\n        setMetricMetadata({\n          aggOptions: aggregations,\n          timeGrains: metadata.supportedTimeGrains,\n          dimensions: metadata.dimensions,\n          isLoading: false,\n          supportedAggTypes: metadata.supportedAggTypes ?? [],\n          primaryAggType: metadata.primaryAggType,\n        });\n      });\n  }, [datasource, subscription, resourceGroup, metricDefinition, resourceName, metricNamespace, metricName]);\n\n  // Update the query state in response to the meta data changing\n  useEffect(() => {\n    const newAggregation = aggregation || metricMetadata.primaryAggType;\n    const newTimeGrain = timeGrain || 'auto';\n\n    if (newAggregation !== aggregation || newTimeGrain !== timeGrain) {\n      onChange({\n        ...query,\n        azureMonitor: {\n          ...query.azureMonitor,\n          aggregation: newAggregation,\n          timeGrain: newTimeGrain,\n        },\n      });\n    }\n  }, [onChange, metricMetadata, aggregation, timeGrain, query]);\n\n  return metricMetadata;\n};\n\nfunction formatOptions(\n  rawResults: Array<{\n    text: string;\n    value: string;\n  }>,\n  selectedValue?: string\n) {\n  const options = rawResults.map(toOption);\n\n  // account for custom values that might have been set in json file like ones crafted with a template variable (ex: \"cloud-datasource-resource-$Environment\")\n  if (selectedValue && !options.find((option) => option.value === selectedValue)) {\n    options.push({ label: selectedValue, value: selectedValue });\n  }\n\n  return options;\n}\n","import React from 'react';\n\nimport { InlineFieldRow } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorQuery, AzureMonitorOption, AzureMonitorErrorish } from '../../types';\nimport SubscriptionField from '../SubscriptionField';\n\nimport AggregationField from './AggregationField';\nimport DimensionFields from './DimensionFields';\nimport LegendFormatField from './LegendFormatField';\nimport MetricNameField from './MetricNameField';\nimport MetricNamespaceField from './MetricNamespaceField';\nimport ResourceGroupsField from './ResourceGroupsField';\nimport ResourceNameField from './ResourceNameField';\nimport ResourceTypeField from './ResourceTypeField';\nimport TimeGrainField from './TimeGrainField';\nimport TopField from './TopField';\nimport {\n  useMetricNames,\n  useMetricNamespaces,\n  useResourceGroups,\n  useResourceNames,\n  useResourceTypes,\n  useSubscriptions,\n  useMetricMetadata,\n} from './dataHooks';\n\ninterface MetricsQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst MetricsQueryEditor: React.FC<MetricsQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  const metricsMetadata = useMetricMetadata(query, datasource, onChange);\n  const subscriptions = useSubscriptions(query, datasource, onChange, setError);\n  const resourceGroups = useResourceGroups(query, datasource, onChange, setError);\n  const resourceTypes = useResourceTypes(query, datasource, onChange, setError);\n  const resourceNames = useResourceNames(query, datasource, onChange, setError);\n  const metricNames = useMetricNames(query, datasource, onChange, setError);\n  const metricNamespaces = useMetricNamespaces(query, datasource, onChange, setError);\n\n  return (\n    <div data-testid=\"azure-monitor-metrics-query-editor\">\n      <InlineFieldRow>\n        <SubscriptionField\n          subscriptions={subscriptions}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n\n        <ResourceGroupsField\n          resourceGroups={resourceGroups}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <ResourceTypeField\n          resourceTypes={resourceTypes}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n        <ResourceNameField\n          resourceNames={resourceNames}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <MetricNamespaceField\n          metricNamespaces={metricNamespaces}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n        <MetricNameField\n          metricNames={metricNames}\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <AggregationField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n          aggregationOptions={metricsMetadata?.aggOptions ?? []}\n          isLoading={metricsMetadata.isLoading}\n        />\n        <TimeGrainField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n          timeGrainOptions={metricsMetadata?.timeGrains ?? []}\n        />\n      </InlineFieldRow>\n      <DimensionFields\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n        dimensionOptions={metricsMetadata?.dimensions ?? []}\n      />\n      <TopField\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n      />\n      <LegendFormatField\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n      />\n    </div>\n  );\n};\n\nexport default MetricsQueryEditor;\n","import React from 'react';\n\ninterface MetricsQueryEditorProps {}\n\nconst MetricsQueryEditor: React.FC<MetricsQueryEditorProps> = ({}) => {\n  return <div data-testid=\"azure-monitor-metrics-query-editor-with-resource-picker\">New Query Editor</div>;\n};\n\nexport default MetricsQueryEditor;\n","import React from 'react';\n\nimport { Alert, Input } from '@grafana/ui';\n\nimport { Field } from '../../../Field';\nimport { DeprecatedAzureMonitorQuery } from '../../types';\n\nconst ReadOnlyTimeGrain = ({\n  timeGrainCount,\n  timeGrainType,\n  timeGrainUnit,\n}: {\n  timeGrainCount: string;\n  timeGrainType: string;\n  timeGrainUnit: string;\n}) => {\n  const timeFields = timeGrainType === 'specific' ? ['specific', timeGrainCount, timeGrainUnit] : [timeGrainType];\n\n  return (\n    <Field label=\"Timegrain\">\n      <>\n        {timeFields.map((timeField) => (\n          <Input value={timeField} disabled={true} onChange={() => {}} key={timeField} width={10} />\n        ))}\n      </>\n    </Field>\n  );\n};\n\nconst ApplicationInsightsEditor = ({ query }: { query: DeprecatedAzureMonitorQuery }) => {\n  const groupBy = query.appInsights?.dimension || [];\n\n  return (\n    <div data-testid=\"azure-monitor-application-insights-query-editor\">\n      <Field label=\"Metric\" disabled={true}>\n        <Input\n          value={query.appInsights?.metricName}\n          disabled={true}\n          onChange={() => {}}\n          id=\"azure-monitor-application-insights-metric\"\n        />\n      </Field>\n      <Field label=\"Aggregation\" disabled={true}>\n        <Input value={query.appInsights?.aggregation} disabled={true} onChange={() => {}} />\n      </Field>\n      {groupBy.length > 0 && (\n        <Field label=\"Group by\">\n          <>\n            {groupBy.map((dimension) => (\n              <Input value={dimension} disabled={true} onChange={() => {}} key={dimension} />\n            ))}\n          </>\n        </Field>\n      )}\n      <Field label=\"Filter\" disabled={true}>\n        <Input value={query.appInsights?.dimensionFilter} disabled={true} onChange={() => {}} />\n      </Field>\n      <ReadOnlyTimeGrain\n        timeGrainCount={query.appInsights?.timeGrainCount || ''}\n        timeGrainType={query.appInsights?.timeGrainType || 'auto'}\n        timeGrainUnit={query.appInsights?.timeGrainUnit || 'minute'}\n      />\n      <Field label=\"Legend format\" disabled={true}>\n        <Input placeholder=\"Alias patterns\" value={query.appInsights?.alias} onChange={() => {}} disabled={true} />\n      </Field>\n      <Alert severity=\"info\" title=\"Deprecated\">\n        Application Insights is deprecated and is now read only. Migrate your queries to Metrics to make changes.\n      </Alert>\n    </div>\n  );\n};\n\nexport default ApplicationInsightsEditor;\n","import React from 'react';\n\nimport { Alert, CodeEditor, Select } from '@grafana/ui';\n\nimport { AzureMonitorOption } from '../../../../types';\nimport { Field } from '../../../Field';\nimport { Space } from '../../../Space';\nimport { DeprecatedAzureMonitorQuery } from '../../types';\n\ninterface InsightsAnalyticsEditorProps {\n  query: DeprecatedAzureMonitorQuery;\n}\n\nconst FORMAT_OPTIONS: Array<AzureMonitorOption<string>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n];\n\nconst InsightsAnalyticsEditor: React.FC<InsightsAnalyticsEditorProps> = ({ query }) => {\n  return (\n    <div data-testid=\"azure-monitor-insights-analytics-query-editor\">\n      <CodeEditor\n        language=\"kusto\"\n        value={query.insightsAnalytics?.query ?? ''}\n        height={200}\n        width=\"100%\"\n        readOnly={true}\n        showMiniMap={false}\n      />\n\n      <Field label=\"Format as\">\n        <Select\n          menuShouldPortal\n          inputId=\"azure-monitor-logs-workspaces-field\"\n          value={query.insightsAnalytics?.resultFormat}\n          disabled={true}\n          options={FORMAT_OPTIONS}\n          onChange={() => {}}\n          width={38}\n        />\n      </Field>\n\n      <Space v={2} />\n\n      <Alert severity=\"info\" title=\"Deprecated\">\n        Insights Analytics is deprecated and is now read only. Migrate your queries to Logs to make changes.\n      </Alert>\n    </div>\n  );\n};\n\nexport default InsightsAnalyticsEditor;\n","import React, { useCallback, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureMonitorQuery, AzureQueryType, DeprecatedAzureQueryType } from '../../types';\nimport { Field } from '../Field';\nimport { gtGrafana9 } from '../deprecated/utils';\n\ninterface QueryTypeFieldProps {\n  query: AzureMonitorQuery;\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n}\n\nconst QueryTypeField: React.FC<QueryTypeFieldProps> = ({ query, onQueryChange }) => {\n  // Use useState to capture the initial value on first mount. We're not interested in when it changes\n  // We only show App Insights and Insights Analytics if they were initially selected. Otherwise, hide them.\n  const [initialQueryType] = useState(query.queryType);\n\n  const queryTypes: Array<{ value: AzureQueryType | DeprecatedAzureQueryType; label: string }> = [\n    { value: AzureQueryType.AzureMonitor, label: 'Metrics' },\n    { value: AzureQueryType.LogAnalytics, label: 'Logs' },\n    { value: AzureQueryType.AzureResourceGraph, label: 'Azure Resource Graph' },\n  ];\n\n  if (\n    !gtGrafana9() &&\n    (initialQueryType === DeprecatedAzureQueryType.ApplicationInsights ||\n      initialQueryType === DeprecatedAzureQueryType.InsightsAnalytics)\n  ) {\n    queryTypes.push(\n      { value: DeprecatedAzureQueryType.ApplicationInsights, label: 'Application Insights' },\n      { value: DeprecatedAzureQueryType.InsightsAnalytics, label: 'Insights Analytics' }\n    );\n  }\n\n  const handleChange = useCallback(\n    (change: SelectableValue<AzureQueryType | DeprecatedAzureQueryType>) => {\n      change.value &&\n        onQueryChange({\n          ...query,\n          queryType: change.value,\n        });\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <Field label=\"Service\">\n      <Select\n        menuShouldPortal\n        inputId=\"azure-monitor-query-type-field\"\n        value={query.queryType}\n        options={queryTypes}\n        onChange={handleChange}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default QueryTypeField;\n","import deepEqual from 'fast-deep-equal';\nimport { defaults } from 'lodash';\nimport { useEffect, useMemo } from 'react';\n\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\nimport migrateQuery from '../../utils/migrateQuery';\n\nconst DEFAULT_QUERY = {\n  queryType: AzureQueryType.AzureMonitor,\n};\n\nconst prepareQuery = (query: AzureMonitorQuery) => {\n  // Note: _.defaults does not apply default values deeply.\n  const withDefaults = defaults({}, query, DEFAULT_QUERY);\n  const migratedQuery = migrateQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedQuery = (query: AzureMonitorQuery, onChangeQuery: (newQuery: AzureMonitorQuery) => void) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedQuery;\n","import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nimport AzureMonitorDatasource from '../../datasource';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorErrorish,\n  AzureMonitorOption,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DeprecatedAzureQueryType,\n} from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport MetricsQueryEditor from '../MetricsQueryEditor';\nimport NewMetricsQueryEditor from '../NewMetricsQueryEditor/MetricsQueryEditor';\nimport { Space } from '../Space';\nimport ApplicationInsightsEditor from '../deprecated/components/ApplicationInsightsEditor';\nimport InsightsAnalyticsEditor from '../deprecated/components/InsightsAnalyticsEditor';\nimport { gtGrafana9 } from '../deprecated/utils';\n\nimport QueryTypeField from './QueryTypeField';\nimport usePreparedQuery from './usePreparedQuery';\n\nexport type AzureMonitorQueryEditorProps = QueryEditorProps<\n  AzureMonitorDatasource,\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n>;\n\nconst QueryEditor: React.FC<AzureMonitorQueryEditorProps> = ({\n  query: baseQuery,\n  datasource,\n  onChange,\n  onRunQuery: baseOnRunQuery,\n}) => {\n  const [errorMessage, setError] = useLastError();\n  const onRunQuery = useMemo(() => debounce(baseOnRunQuery, 500), [baseOnRunQuery]);\n\n  const onQueryChange = useCallback(\n    (newQuery: AzureMonitorQuery) => {\n      onChange(newQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const query = usePreparedQuery(baseQuery, onQueryChange);\n\n  const subscriptionId = query.subscription || datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map((v) => ({ label: v, value: v })),\n  };\n\n  return (\n    <div data-testid=\"azure-monitor-query-editor\">\n      <QueryTypeField query={query} onQueryChange={onQueryChange} />\n\n      <EditorForQueryType\n        subscriptionId={subscriptionId}\n        query={query}\n        datasource={datasource}\n        onChange={onQueryChange}\n        variableOptionGroup={variableOptionGroup}\n        setError={setError}\n      />\n\n      {errorMessage && (\n        <>\n          <Space v={2} />\n          <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n            {errorMessage}\n          </Alert>\n        </>\n      )}\n    </div>\n  );\n};\n\ninterface EditorForQueryTypeProps extends Omit<AzureMonitorQueryEditorProps, 'onRunQuery'> {\n  subscriptionId?: string;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst EditorForQueryType: React.FC<EditorForQueryTypeProps> = ({\n  subscriptionId,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      if (config.featureToggles.azureMonitorResourcePickerForMetrics) {\n        return <NewMetricsQueryEditor />;\n      }\n      return (\n        <MetricsQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.LogAnalytics:\n      return (\n        <LogsQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.AzureResourceGraph:\n      return (\n        <ArgQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    /** Remove with Grafana 9 */\n    case DeprecatedAzureQueryType.ApplicationInsights:\n      if (gtGrafana9()) {\n        return (\n          <Alert title=\"Deprecated\">\n            Application Insights has been deprecated.{' '}\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/#application-insights\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Use the Metrics service instead\n            </a>\n            .\n          </Alert>\n        );\n      }\n      return <ApplicationInsightsEditor query={query} />;\n\n    case DeprecatedAzureQueryType.InsightsAnalytics:\n      if (gtGrafana9()) {\n        return (\n          <Alert title=\"Deprecated\">\n            Insight Analytics has been deprecated.{' '}\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/#insights-analytics\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Queries can be written with Kusto in the Logs query type by selecting your Application Insights resource\n            </a>\n            .\n          </Alert>\n        );\n      }\n      return <InsightsAnalyticsEditor query={query} />;\n    /** ===================== */\n\n    default:\n      return <Alert title=\"Unknown query type\" />;\n  }\n\n  return null;\n};\n\nexport default QueryEditor;\n","export enum ResourceRowType {\n  Subscription = 'Subscription',\n  ResourceGroup = 'ResourceGroup',\n  Resource = 'Resource',\n  VariableGroup = 'TemplateVariableGroup',\n  Variable = 'TemplateVariable',\n}\n\nexport interface ResourceRow {\n  id: string; // azure's raw data id usually passes along a uri (except in the case of subscriptions), to make things less confusing for ourselves we parse the id string out of the uri or vice versa\n  uri: string; // ex: /subscriptions/subid123\n  name: string;\n  type: ResourceRowType;\n  typeLabel: string;\n  location?: string;\n  children?: ResourceRowGroup;\n}\n\nexport type ResourceRowGroup = ResourceRow[];\n","import produce from 'immer';\n\nimport { ResourceRow, ResourceRowGroup } from './types';\n\n// This regex matches URIs representing:\n//  - subscriptions: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572\n//  - resource groups: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources\n//  - resources: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources/providers/Microsoft.Compute/virtualMachines/GithubTestDataVM\nconst RESOURCE_URI_REGEX =\n  /\\/subscriptions\\/(?<subscriptionID>[^/]+)(?:\\/resourceGroups\\/(?<resourceGroup>[^/]+)(?:\\/providers.+\\/(?<resource>[^/]+))?)?/;\n\ntype RegexGroups = Record<string, string | undefined>;\n\nexport function parseResourceURI(resourceURI: string) {\n  const matches = RESOURCE_URI_REGEX.exec(resourceURI);\n  const groups: RegexGroups = matches?.groups ?? {};\n  const { subscriptionID, resourceGroup, resource } = groups;\n\n  if (!subscriptionID) {\n    return undefined;\n  }\n\n  return { subscriptionID, resourceGroup, resource };\n}\n\nexport function isGUIDish(input: string) {\n  return !!input.match(/^[A-Z0-9]+/i);\n}\n\nexport function findRow(rows: ResourceRowGroup, uri: string): ResourceRow | undefined {\n  for (const row of rows) {\n    if (row.uri.toLowerCase() === uri.toLowerCase()) {\n      return row;\n    }\n\n    if (row.children) {\n      const result = findRow(row.children, uri);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function addResources(rows: ResourceRowGroup, targetParentId: string, newResources: ResourceRowGroup) {\n  return produce(rows, (draftState) => {\n    const draftRow = findRow(draftState, targetParentId);\n\n    // we can't find the selected resource in our list of resources,\n    // probably means user has either mistyped in the input field\n    // or is using template variables.\n    // either way no need to throw, just show that none of the resources are checked\n    if (!draftRow) {\n      return;\n    }\n\n    draftRow.children = newResources;\n  });\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\n\nexport interface SpaceProps {\n  v?: number;\n  h?: number;\n  layout?: 'block' | 'inline';\n}\n\nexport const Space = (props: SpaceProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, props);\n\n  return <span className={cx(styles.wrapper)} />;\n};\n\nSpace.defaultProps = {\n  v: 0,\n  h: 0,\n  layout: 'block',\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2, props: SpaceProps) => ({\n  wrapper: css([\n    {\n      paddingRight: theme.spacing(props.h ?? 0),\n      paddingBottom: theme.spacing(props.v ?? 0),\n    },\n    props.layout === 'inline' && {\n      display: 'inline-block',\n    },\n    props.layout === 'block' && {\n      display: 'block',\n    },\n  ]),\n}));\n","import { gt, valid } from 'semver';\n\nimport { config } from '@grafana/runtime';\n\nimport { AzureDataSourceSettings } from '../../types';\n\nexport function isAppInsightsConfigured(options: AzureDataSourceSettings) {\n  return !!(options.jsonData.appInsightsAppId && options.secureJsonFields.appInsightsApiKey);\n}\n\nexport function gtGrafana9() {\n  // AppInsights configuration will be removed with Grafana 9\n  return valid(config.buildInfo.version) && gt(config.buildInfo.version, '9.0.0-beta1');\n}\n","import { includes, filter } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: any) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval: any, allowedTimeGrains: string[]) {\n    const timeGrains = filter(allowedTimeGrains, (o) => o !== 'auto');\n\n    let closest = timeGrains[0];\n    const intervalMs = rangeUtil.intervalToMs(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > rangeUtil.intervalToMs(timeGrains[i])) {\n        if (i + 1 < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') {\n      text = 'second';\n    }\n    if (unit === 'M') {\n      text = 'minute';\n    }\n    if (unit === 'H') {\n      text = 'hour';\n    }\n    if (unit === 'D') {\n      text = 'day';\n    }\n\n    if (value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n    if (unit === 'S') {\n      return 's';\n    }\n    if (unit === 'M') {\n      return 'm';\n    }\n    if (unit === 'H') {\n      return 'h';\n    }\n    if (unit === 'D') {\n      return 'd';\n    }\n\n    return '';\n  }\n}\n","import { DeprecatedAzureMonitorQuery } from '../components/deprecated/types';\n\nimport { GrafanaTemplateVariableQuery } from './templateVariables';\n\nexport enum AzureQueryType {\n  AzureMonitor = 'Azure Monitor',\n  LogAnalytics = 'Azure Log Analytics',\n  AzureResourceGraph = 'Azure Resource Graph',\n  GrafanaTemplateVariableFn = 'Grafana Template Variable Function',\n}\n\n// DeprecatedAzureQueryType won't be available after Grafana 9\nexport enum DeprecatedAzureQueryType {\n  ApplicationInsights = 'Application Insights',\n  InsightsAnalytics = 'Insights Analytics',\n}\n\n/**\n * Represents the query as it moves through the frontend query editor and datasource files.\n * It can represent new queries that are still being edited, so all properties are optional\n */\nexport interface AzureMonitorQuery extends DeprecatedAzureMonitorQuery {\n  queryType?: AzureQueryType | DeprecatedAzureQueryType;\n\n  subscription?: string;\n\n  /** ARG uses multiple subscriptions */\n  subscriptions?: string[];\n\n  azureMonitor?: AzureMetricQuery;\n  azureLogAnalytics?: AzureLogsQuery;\n  azureResourceGraph?: AzureResourceGraphQuery;\n  grafanaTemplateVariableFn?: GrafanaTemplateVariableQuery;\n}\n\n/**\n * Azure Monitor Metrics sub-query properties\n */\nexport interface AzureMetricQuery {\n  resourceGroup?: string;\n\n  /** Resource type */\n  metricDefinition?: string;\n\n  resourceName?: string;\n  metricNamespace?: string;\n  metricName?: string;\n  timeGrain?: string;\n  aggregation?: string;\n  dimensionFilters?: AzureMetricDimension[];\n  alias?: string;\n  top?: string;\n\n  /** @deprecated */\n  timeGrainUnit?: string;\n\n  /** @deprecated Remove this once angular is removed */\n  allowedTimeGrainsMs?: number[];\n\n  /** @deprecated This property was migrated to dimensionFilters and should only be accessed in the migration */\n  dimension?: string;\n\n  /** @deprecated This property was migrated to dimensionFilters and should only be accessed in the migration */\n  dimensionFilter?: string;\n}\n\n/**\n * Azure Monitor Logs sub-query properties\n */\nexport interface AzureLogsQuery {\n  query?: string;\n  resultFormat?: string;\n  resource?: string;\n\n  workspace?: string;\n}\n\n/**\n * Azure Monitor ARG sub-query properties\n */\nexport interface AzureResourceGraphQuery {\n  query?: string;\n  resultFormat?: string;\n}\n\nexport interface AzureMetricDimension {\n  dimension: string;\n  operator: string;\n  filter?: string;\n}\n","import { DataSourceInstanceSettings, DataSourceJsonData, DataSourceSettings, TableData } from '@grafana/data';\n\nimport Datasource from '../datasource';\n\nimport { AzureMonitorQuery } from './query';\n\nexport type AzureDataSourceSettings = DataSourceSettings<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\nexport type AzureDataSourceInstanceSettings = DataSourceInstanceSettings<AzureDataSourceJsonData>;\n\nexport interface DatasourceValidationResult {\n  status: 'success' | 'error';\n  message: string;\n  title?: string;\n}\n\n/**\n * Azure clouds known to Azure Monitor.\n */\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  Germany = 'AzureGermanCloud',\n  None = '',\n}\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport interface AzureDataSourceJsonData extends DataSourceJsonData {\n  cloudName: string;\n  azureAuthType?: AzureAuthType;\n\n  // monitor\n  tenantId?: string;\n  clientId?: string;\n  subscriptionId?: string;\n\n  // logs\n  /** @deprecated Azure Logs credentials */\n  azureLogAnalyticsSameAs?: boolean;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsTenantId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsClientId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsSubscriptionId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsDefaultWorkspace?: string;\n\n  // App Insights\n  appInsightsAppId?: string;\n}\n\nexport interface AzureDataSourceSecureJsonData {\n  clientSecret?: string;\n  appInsightsApiKey?: string;\n}\n\n// Represents an errors that come back from frontend requests.\n// Not totally sure how accurate this type is.\nexport type AzureMonitorErrorish = Error;\n\n// Azure Monitor API Types\nexport interface AzureMonitorMetricsMetadataResponse {\n  value: AzureMonitorMetricMetadataItem[];\n}\n\nexport interface AzureMonitorMetricMetadataItem {\n  id: string;\n  resourceId: string;\n  primaryAggregationType: string;\n  supportedAggregationTypes: string[];\n  name: AzureMonitorLocalizedValue;\n  dimensions?: AzureMonitorLocalizedValue[];\n  metricAvailabilities?: AzureMonitorMetricAvailabilityMetadata[];\n}\n\nexport interface AzureMonitorMetricAvailabilityMetadata {\n  timeGrain: string;\n  retention: string;\n}\n\nexport interface AzureMonitorLocalizedValue {\n  value: string;\n  localizedValue: string;\n}\n\nexport interface AzureMonitorMetricDefinitionsResponse {\n  data: {\n    value: Array<{ name: string; type: string; location?: string }>;\n  };\n  status: number;\n  statusText: string;\n}\n\nexport interface AzureMonitorResourceGroupsResponse {\n  data: {\n    value: Array<{ name: string }>;\n  };\n  status: number;\n  statusText: string;\n}\n\nexport interface AzureLogsVariable {\n  text: string;\n  value: string;\n}\n\nexport interface AzureLogsTableData extends TableData {\n  columns: AzureLogsTableColumn[];\n  rows: any[];\n  type: string;\n}\n\nexport interface AzureLogsTableColumn {\n  text: string;\n  type: string;\n}\n\nexport interface AzureMonitorOption<T = string> {\n  label: string;\n  value: T;\n  options?: AzureMonitorOption[];\n}\n\nexport interface AzureQueryEditorFieldProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nexport interface AzureResourceSummaryItem {\n  subscriptionName: string;\n  resourceGroupName: string | undefined;\n  resourceName: string | undefined;\n}\n\nexport interface RawAzureSubscriptionItem {\n  subscriptionName: string;\n  subscriptionId: string;\n}\n\nexport interface RawAzureResourceGroupItem {\n  resourceGroupURI: string;\n  resourceGroupName: string;\n}\n\nexport interface RawAzureResourceItem {\n  id: string;\n  name: string;\n  subscriptionId: string;\n  resourceGroup: string;\n  type: string;\n  location: string;\n}\n\nexport interface AzureGraphResponse<T = unknown> {\n  data: T;\n  // skipToken is used for pagination, to get the next page\n  $skipToken?: string;\n}\n\n// https://docs.microsoft.com/en-us/rest/api/azureresourcegraph/resourcegraph(2021-03-01)/resources/resources#queryrequestoptions\nexport interface AzureResourceGraphOptions {\n  $skip: number;\n  $skipToken: string;\n  $top: number;\n  allowPartialScopes: boolean;\n  resultFormat: 'objectArray' | 'table';\n}\n","import { map } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureMonitorOption } from '../types';\n\nexport const hasOption = (options: AzureMonitorOption[], value: string): boolean =>\n  options.some((v) => (v.options ? hasOption(v.options, value) : v.value === value));\n\nexport const findOptions = (options: AzureMonitorOption[], values: string[] = []) => {\n  if (values.length === 0) {\n    return [];\n  }\n  const set = values.reduce((accum, item) => {\n    accum.add(item);\n    return accum;\n  }, new Set());\n  return options.filter((option) => set.has(option.value));\n};\n\nexport const toOption = (v: { text: string; value: string }) => ({ value: v.value, label: v.text });\n\nexport function convertTimeGrainsToMs<T extends { value: string }>(timeGrains: T[]) {\n  const allowedTimeGrainsMs: number[] = [];\n  timeGrains.forEach((tg: any) => {\n    if (tg.value !== 'auto') {\n      allowedTimeGrainsMs.push(rangeUtil.intervalToMs(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value)));\n    }\n  });\n  return allowedTimeGrainsMs;\n}\n\n// Route definitions shared with the backend.\n// Check: /pkg/tsdb/azuremonitor/azuremonitor-resource-handler.go <registerRoutes>\nexport const routeNames = {\n  azureMonitor: 'azuremonitor',\n  logAnalytics: 'loganalytics',\n  appInsights: 'appinsights',\n  resourceGraph: 'resourcegraph',\n};\n\nexport function interpolateVariable(value: any, variable: { multi: any; includeAll: any }) {\n  if (typeof value === 'string') {\n    if (variable.multi || variable.includeAll) {\n      return \"'\" + value + \"'\";\n    } else {\n      return value;\n    }\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  const quotedValues = map(value, (val) => {\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    return \"'\" + val + \"'\";\n  });\n  return quotedValues.join(',');\n}\n","import { setKustoQuery } from '../components/LogsQueryEditor/setQueryValue';\nimport {\n  appendDimensionFilter,\n  setTimeGrain as setMetricsTimeGrain,\n} from '../components/MetricsQueryEditor/setQueryValue';\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureMonitorQuery, AzureQueryType, DeprecatedAzureQueryType } from '../types';\n\nconst OLD_DEFAULT_DROPDOWN_VALUE = 'select';\n\nexport default function migrateQuery(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  // The old angular controller also had a `migrateApplicationInsightsKeys` migraiton that\n  // migrated old properties to other properties that still do not appear to be used anymore, so\n  // we decided to not include that migration anymore\n  // See https://github.com/grafana/grafana/blob/a6a09add/public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts#L269-L288\n\n  workingQuery = migrateTimeGrains(workingQuery);\n  workingQuery = migrateLogAnalyticsToFromTimes(workingQuery);\n  workingQuery = migrateToDefaultNamespace(workingQuery);\n  workingQuery = migrateApplicationInsightsDimensions(workingQuery);\n  workingQuery = migrateMetricsDimensionFilters(workingQuery);\n\n  return workingQuery;\n}\n\nfunction migrateTimeGrains(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureMonitor?.timeGrainUnit && workingQuery.azureMonitor.timeGrain !== 'auto') {\n    const newTimeGrain = TimegrainConverter.createISO8601Duration(\n      workingQuery.azureMonitor.timeGrain ?? 'auto',\n      workingQuery.azureMonitor.timeGrainUnit\n    );\n    workingQuery = setMetricsTimeGrain(workingQuery, newTimeGrain);\n\n    delete workingQuery.azureMonitor?.timeGrainUnit;\n  }\n\n  if (workingQuery.appInsights?.timeGrainUnit && workingQuery.appInsights.timeGrain !== 'auto') {\n    const appInsights = {\n      ...workingQuery.appInsights,\n    };\n\n    if (workingQuery.appInsights.timeGrainCount) {\n      appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        workingQuery.appInsights.timeGrainCount,\n        workingQuery.appInsights.timeGrainUnit\n      );\n    } else {\n      appInsights.timeGrainCount = workingQuery.appInsights.timeGrain;\n\n      if (workingQuery.appInsights.timeGrain) {\n        appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n          workingQuery.appInsights.timeGrain,\n          workingQuery.appInsights.timeGrainUnit\n        );\n      }\n    }\n\n    workingQuery = {\n      ...workingQuery,\n      appInsights: appInsights,\n    };\n  }\n\n  return workingQuery;\n}\n\nfunction migrateLogAnalyticsToFromTimes(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__from\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ')\n    );\n  }\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__to\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ')\n    );\n  }\n\n  return workingQuery;\n}\n\nfunction migrateToDefaultNamespace(query: AzureMonitorQuery): AzureMonitorQuery {\n  const haveMetricNamespace =\n    query.azureMonitor?.metricNamespace && query.azureMonitor.metricNamespace !== OLD_DEFAULT_DROPDOWN_VALUE;\n\n  if (!haveMetricNamespace && query.azureMonitor?.metricDefinition) {\n    return {\n      ...query,\n      azureMonitor: {\n        ...query.azureMonitor,\n        metricNamespace: query.azureMonitor.metricDefinition,\n      },\n    };\n  }\n\n  return query;\n}\n\nfunction migrateApplicationInsightsDimensions(query: AzureMonitorQuery): AzureMonitorQuery {\n  const dimension = query?.appInsights?.dimension as unknown;\n\n  if (dimension && typeof dimension === 'string') {\n    return {\n      ...query,\n      appInsights: {\n        ...query.appInsights,\n        dimension: [dimension],\n      },\n    };\n  }\n\n  return query;\n}\n\n// Exported because its also used directly in the datasource.ts for some reason\nfunction migrateMetricsDimensionFilters(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  const oldDimension = workingQuery.azureMonitor?.dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    workingQuery = appendDimensionFilter(workingQuery, oldDimension, 'eq', workingQuery.azureMonitor?.dimensionFilter);\n  }\n\n  return workingQuery;\n}\n\n// datasource.ts also contains some migrations, which have been moved to here. Unsure whether\n// they should also do all the other migrations...\nexport function datasourceMigrations(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.queryType === DeprecatedAzureQueryType.ApplicationInsights && workingQuery.appInsights?.rawQuery) {\n    workingQuery = {\n      ...workingQuery,\n      queryType: DeprecatedAzureQueryType.InsightsAnalytics,\n      appInsights: undefined,\n      insightsAnalytics: {\n        query: workingQuery.appInsights.rawQuery,\n        resultFormat: 'time_series',\n      },\n    };\n  }\n\n  if (!workingQuery.queryType) {\n    workingQuery = {\n      ...workingQuery,\n      queryType: AzureQueryType.AzureMonitor,\n    };\n  }\n\n  if (workingQuery.queryType === AzureQueryType.AzureMonitor && workingQuery.azureMonitor) {\n    workingQuery = migrateMetricsDimensionFilters(workingQuery);\n  }\n\n  return workingQuery;\n}\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { AzureMonitorErrorish } from '../types';\n\nimport messageFromError from './messageFromError';\n\ntype SourcedError = [string, AzureMonitorErrorish];\n\nexport default function useLastError() {\n  const [errors, setErrors] = useState<SourcedError[]>([]);\n\n  // Handles errors from any child components that request data to display their options\n  const addError = useCallback((errorSource: string, error: AzureMonitorErrorish | undefined) => {\n    setErrors((errors) => {\n      const errorsCopy = [...errors];\n      const index = errors.findIndex(([vSource]) => vSource === errorSource);\n\n      // If there's already an error, remove it. If we're setting a new error\n      // below, we'll move it to the front\n      if (index > -1) {\n        errorsCopy.splice(index, 1);\n      }\n\n      // And then add the new error to the top of the array. If error is defined, it was already\n      // removed above.\n      if (error) {\n        errorsCopy.unshift([errorSource, error]);\n      }\n\n      return errorsCopy;\n    });\n  }, []);\n\n  const errorMessage = useMemo(() => {\n    const recentError = errors[0];\n    return recentError && messageFromError(recentError[1]);\n  }, [errors]);\n\n  return [errorMessage, addError] as const;\n}\n","function n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if(\"production\"!==process.env.NODE_ENV){var i=Y[n],o=i?\"function\"==typeof i?i.apply(null,t):i:\"unknown error nr: \"+n;throw Error(\"[Immer] \"+o)}throw Error(\"[Immer] minified error nr: \"+n+(t.length?\" \"+t.map((function(n){return\"'\"+n+\"'\"})).join(\",\"):\"\")+\". Find the full error at: https://bit.ly/3cXEKWf\")}function r(n){return!!n&&!!n[Q]}function t(n){return!!n&&(function(n){if(!n||\"object\"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,\"constructor\")&&r.constructor;return t===Object||\"function\"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v(n))}function e(t){return r(t)||n(23,t),t[Q].t}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&\"symbol\"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0),n)}function h(){n(2)}function y(n){return null==n||\"object\"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r)}function _(){return\"production\"===process.env.NODE_ENV||U||n(0),U}function j(n,r){r&&(b(\"Patches\"),n.u=[],n.s=[],n.v=r)}function O(n){g(n),n.p.forEach(S),n.p=null}function g(n){n===U&&(U=n.l)}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b(\"ES5\").S(e,r,o),o?(i[Q].P&&(O(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b(\"Patches\").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x(n,o,!1),t&&n.u&&b(\"Patches\").R(e,t,n.u,n.s)}return e.o}function A(e,i,o,a,c,s){if(\"production\"!==process.env.NODE_ENV&&c===o&&n(5),r(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!r(v))return;e.m=!1}if(t(c)&&!y(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c)}}function x(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d(r,t)}function z(n,r){var t=n[Q];return(t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function k(n){n.P||(n.P=!0,n.l&&k(n.l))}function E(n){n.o||(n.o=l(n.t))}function R(n,r,t){var e=s(r)?b(\"MapSet\").N(r,t):v(r)?b(\"MapSet\").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b(\"ES5\").J(r,t);return(t?t.A:_()).p.push(e),e}function D(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b(\"ES5\").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1}else e=F(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t))})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function N(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return\"production\"!==process.env.NODE_ENV&&f(r),en.get(r,n)},set:function(r){var t=this[Q];\"production\"!==process.env.NODE_ENV&&f(t),en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t)}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return!0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return!0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}function f(r){r.O&&n(3,JSON.stringify(p(r)))}var s={};m(\"ES5\",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,\"\"+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&\"object\"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.D,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)))})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t))}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}function T(){function e(n){if(!t(n))return n;if(Array.isArray(n))return n.map(e);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],e(n[1])]})));if(v(n))return new Set(Array.from(n).map(e));var r=Object.create(Object.getPrototypeOf(n));for(var i in n)r[i]=e(n[i]);return u(n,L)&&(r[L]=n[L]),r}function f(n){return r(n)?e(n):n}var c=\"add\";m(\"Patches\",{$:function(r,t){return t.forEach((function(t){for(var i=t.path,u=t.op,f=r,s=0;s<i.length-1;s++){var v=o(f),p=\"\"+i[s];0!==v&&1!==v||\"__proto__\"!==p&&\"constructor\"!==p||n(24),\"function\"==typeof f&&\"prototype\"===p&&n(24),\"object\"!=typeof(f=a(f,p))&&n(15,i.join(\"/\"))}var l=o(f),d=e(t.value),h=i[i.length-1];switch(u){case\"replace\":switch(l){case 2:return f.set(h,d);case 3:n(16);default:return f[h]=d}case c:switch(l){case 1:return\"-\"===h?f.push(d):f.splice(h,0,d);case 2:return f.set(h,d);case 3:return f.add(d);default:return f[h]=d}case\"remove\":switch(l){case 1:return f.splice(h,1);case 2:return f.delete(h);case 3:return f.delete(t.value);default:return delete f[h]}default:n(17,u)}})),r},R:function(n,r,t,e){switch(n.i){case 0:case 4:case 2:return function(n,r,t,e){var o=n.t,s=n.o;i(n.D,(function(n,i){var v=a(o,n),p=a(s,n),l=i?u(o,n)?\"replace\":c:\"remove\";if(v!==p||\"replace\"!==l){var d=r.concat(n);t.push(\"remove\"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:\"remove\",path:d}:\"remove\"===l?{op:c,path:d,value:f(v)}:{op:\"replace\",path:d,value:f(v)})}}))}(n,r,t,e);case 5:case 1:return function(n,r,t,e){var i=n.t,o=n.D,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,t];t=s[0],e=s[1]}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=r.concat([v]);t.push({op:\"replace\",path:p,value:f(u[v])}),e.push({op:\"replace\",path:p,value:f(i[v])})}for(var l=i.length;l<u.length;l++){var d=r.concat([l]);t.push({op:c,path:d,value:f(u[l])})}i.length<u.length&&e.push({op:\"replace\",path:r.concat([\"length\"]),value:i.length})}(n,r,t,e);case 3:return function(n,r,t,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=r.concat([u]);t.push({op:\"remove\",path:i,value:n}),e.unshift({op:c,path:i,value:n})}u++})),u=0,o.forEach((function(n){if(!i.has(n)){var o=r.concat([u]);t.push({op:c,path:o,value:n}),e.unshift({op:\"remove\",path:o,value:n})}u++}))}(n,r,t,e)}},M:function(n,r,t,e){t.push({op:\"replace\",path:[],value:r===H?void 0:r}),e.push({op:\"replace\",path:[],value:n})}})}function C(){function r(n,r){function t(){this.constructor=n}a(n,r),n.prototype=(t.prototype=r.prototype,new t)}function e(n){n.o||(n.D=new Map,n.o=new Map(n.t))}function o(n){n.o||(n.o=new Set,n.t.forEach((function(r){if(t(r)){var e=R(n.A.h,r,n);n.p.set(r,e),n.o.add(e)}else n.o.add(r)})))}function u(r){r.O&&n(3,JSON.stringify(p(r)))}var a=function(n,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)},f=function(){function n(n,r){return this[Q]={i:2,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,D:void 0,t:n,k:this,C:!1,O:!1},this}r(n,Map);var o=n.prototype;return Object.defineProperty(o,\"size\",{get:function(){return p(this[Q]).size}}),o.has=function(n){return p(this[Q]).has(n)},o.set=function(n,r){var t=this[Q];return u(t),p(t).has(n)&&p(t).get(n)===r||(e(t),k(t),t.D.set(n,!0),t.o.set(n,r),t.D.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),e(r),k(r),r.t.has(n)?r.D.set(n,!1):r.D.delete(n),r.o.delete(n),!0},o.clear=function(){var n=this[Q];u(n),p(n).size&&(e(n),k(n),n.D=new Map,i(n.t,(function(r){n.D.set(r,!1)})),n.o.clear())},o.forEach=function(n,r){var t=this;p(this[Q]).forEach((function(e,i){n.call(r,t.get(i),i,t)}))},o.get=function(n){var r=this[Q];u(r);var i=p(r).get(n);if(r.I||!t(i))return i;if(i!==r.t.get(n))return i;var o=R(r.A.h,i,r);return e(r),r.o.set(n,o),o},o.keys=function(){return p(this[Q]).keys()},o.values=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.values()},n.next=function(){var n=t.next();return n.done?n:{done:!1,value:r.get(n.value)}},n},o.entries=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.entries()},n.next=function(){var n=t.next();if(n.done)return n;var e=r.get(n.value);return{done:!1,value:[n.value,e]}},n},o[V]=function(){return this.entries()},n}(),c=function(){function n(n,r){return this[Q]={i:3,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,O:!1,C:!1},this}r(n,Set);var t=n.prototype;return Object.defineProperty(t,\"size\",{get:function(){return p(this[Q]).size}}),t.has=function(n){var r=this[Q];return u(r),r.o?!!r.o.has(n)||!(!r.p.has(n)||!r.o.has(r.p.get(n))):r.t.has(n)},t.add=function(n){var r=this[Q];return u(r),this.has(n)||(o(r),k(r),r.o.add(n)),this},t.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),o(r),k(r),r.o.delete(n)||!!r.p.has(n)&&r.o.delete(r.p.get(n))},t.clear=function(){var n=this[Q];u(n),p(n).size&&(o(n),k(n),n.o.clear())},t.values=function(){var n=this[Q];return u(n),o(n),n.o.values()},t.entries=function(){var n=this[Q];return u(n),o(n),n.o.entries()},t.keys=function(){return this.values()},t[V]=function(){return this.values()},t.forEach=function(n,r){for(var t=this.values(),e=t.next();!e.done;)n.call(r,e.value,e.value,this),e=t.next()},n}();m(\"MapSet\",{N:function(n,r){return new f(n,r)},T:function(n,r){return new c(n,r)}})}function J(){N(),C(),T()}function K(n){return n}function $(n){return n}var G,U,W=\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol(\"x\"),X=\"undefined\"!=typeof Map,q=\"undefined\"!=typeof Set,B=\"undefined\"!=typeof Proxy&&void 0!==Proxy.revocable&&\"undefined\"!=typeof Reflect,H=W?Symbol.for(\"immer-nothing\"):((G={})[\"immer-nothing\"]=!0,G),L=W?Symbol.for(\"immer-draftable\"):\"__$immer_draftable\",Q=W?Symbol.for(\"immer-state\"):\"__$immer_state\",V=\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\",Y={0:\"Illegal state\",1:\"Immer drafts cannot have computed properties\",2:\"This object has been frozen and should not be mutated\",3:function(n){return\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \"+n},4:\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",5:\"Immer forbids circular references\",6:\"The first or second argument to `produce` must be a function\",7:\"The third argument to `produce` must be a function or undefined\",8:\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",9:\"First argument to `finishDraft` must be a draft returned by `createDraft`\",10:\"The given draft is already finalized\",11:\"Object.defineProperty() cannot be used on an Immer draft\",12:\"Object.setPrototypeOf() cannot be used on an Immer draft\",13:\"Immer only supports deleting array indices\",14:\"Immer only supports setting array indices and the 'length' property\",15:function(n){return\"Cannot apply patch, path doesn't resolve: \"+n},16:'Sets cannot have \"replace\" patches.',17:function(n){return\"Unsupported patch operation: \"+n},18:function(n){return\"The plugin for '\"+n+\"' has not been loaded into Immer. To enable the plugin, import and call `enable\"+n+\"()` when initializing your application.\"},20:\"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",21:function(n){return\"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\"+n+\"'\"},22:function(n){return\"'current' expects a draft, got: \"+n},23:function(n){return\"'original' expects a draft, got: \"+n},24:\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"},Z=\"\"+Object.prototype.constructor,nn=\"undefined\"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?\"value\"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return!0;E(n),k(n)}return n.o[r]===t&&\"number\"!=typeof t&&(void 0!==t||r in n.o)||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E(n),k(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||\"length\"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),on.deleteProperty=function(r,t){return\"production\"!==process.env.NODE_ENV&&isNaN(parseInt(t))&&n(13),on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return\"production\"!==process.env.NODE_ENV&&\"length\"!==t&&isNaN(parseInt(t))&&n(14),en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.F=!0,this.produce=function(r,i,o){if(\"function\"==typeof r&&\"function\"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if(\"function\"!=typeof i&&n(6),void 0!==o&&\"function\"!=typeof o&&n(7),t(r)){var c=w(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?O(c):g(c)}return\"undefined\"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||\"object\"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.F&&d(f,!0),o){var p=[],l=[];b(\"Patches\").M(r,f,p,l),o(p,l)}return f}n(21,r)},this.produceWithPatches=function(n,r){if(\"function\"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return\"undefined\"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},\"boolean\"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),\"boolean\"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(r,t){var e=r&&r[Q];\"production\"!==process.env.NODE_ENV&&(e&&e.C||n(9),e.I&&n(10));var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n},i.setUseProxies=function(r){r&&!B&&n(20),this.g=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&\"replace\"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b(\"Patches\").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce,cn=an.produceWithPatches.bind(an),sn=an.setAutoFreeze.bind(an),vn=an.setUseProxies.bind(an),pn=an.applyPatches.bind(an),ln=an.createDraft.bind(an),dn=an.finishDraft.bind(an);export default fn;export{un as Immer,pn as applyPatches,K as castDraft,$ as castImmutable,ln as createDraft,D as current,J as enableAllPlugins,N as enableES5,C as enableMapSet,T as enablePatches,dn as finishDraft,d as freeze,L as immerable,r as isDraft,t as isDraftable,H as nothing,e as original,fn as produce,cn as produceWithPatches,sn as setAutoFreeze,vn as setUseProxies};\n//# sourceMappingURL=immer.esm.js.map\n"],"names":["Field","props","InlineField","labelWidth","FORMAT_OPTIONS","label","value","query","variableOptionGroup","onQueryChange","options","useMemo","handleChange","useCallback","change","newQuery","setFormatAs","Select","menuShouldPortal","inputId","azureLogAnalytics","resultFormat","onChange","width","Deferred","constructor","this","resolve","undefined","reject","promise","Promise","Object","freeze","datasource","monacoPromiseRef","useRef","useEffect","resource","promises","azureLogAnalyticsDatasource","getKustoSchema","current","all","then","schema","monaco","editor","languages","kusto","getKustoWorker","model","getModel","uri","worker","setSchema","handleEditorMount","setKustoQuery","CodeEditor","language","height","showMiniMap","onBlur","onSave","onEditorDidMount","EntryIcon","isOpen","entry","type","ResourceRowType","Icon","name","theme","table","css","tableLayout","tableScroller","maxHeight","overflow","header","background","colors","secondary","row","borderBottom","border","weak","borderBottomColor","medium","disabledRow","opacity","cell","padding","spacing","textOverflow","collapseButton","margin","loadingCell","textAlign","spinner","marginBottom","nestedEntry","display","alignItems","entryContentItem","truncated","minWidth","whiteSpace","nestedRowCheckbox","zIndex","NestedEntry","isSelected","isDisabled","isSelectable","level","onToggleCollapse","onSelectedChange","useTheme2","styles","useStyles2","getStyles","hasChildren","children","handleToggleCollapse","handleSelectedChanged","ev","target","checked","checkboxId","id","document","getElementById","scrollIntoView","behavior","block","className","style","marginLeft","gridSize","IconButton","onClick","Space","layout","h","Checkbox","disabled","htmlFor","cx","selectedRows","requestNestedRows","onRowSelectedChange","selectableEntryTypes","rowStatus","setRowStatus","useState","find","v","length","selectedRow","findRow","async","catch","some","typeLabel","location","keys","rows","FadeTransition","visible","colSpan","LoadingPlaceholder","text","map","noHeader","resourcePickerData","resourceURI","onApply","onCancel","loadingStatus","setLoadingStatus","azureRows","setAzureRows","internalSelectedURI","setInternalSelectedURI","errorMessage","setErrorMessage","isAdvancedOpen","setIsAdvancedOpen","includes","resources","getSubscriptions","parsedURI","parseResourceURI","resourceGroupURI","subscriptionID","resourceGroup","resourceGroups","getResourceGroupsBySubscriptionId","addResources","resourcesForResourceGroup","getResourcesForResourceGroup","error","messageFromError","loadInitialData","selectedResourceRows","found","resourceGroupOrSubscription","newRows","handleSelectionChanged","handleApply","loadingWrapper","selectionFooter","Collapse","collapsible","onToggle","Label","Tooltip","content","href","rel","placement","interactive","Input","event","currentTarget","placeholder","Button","variant","Alert","severity","title","position","bottom","primary","paddingTop","paddingBottom","color","parseResourceDetails","parsed","subscriptionName","resourceGroupName","resourceName","ResourceLabel","resourceComponents","setResourceComponents","getResourceURIDisplayProperties","FormattedResource","startsWith","Separator","pickerIsOpen","setPickerIsOpen","handleOpenPicker","closePicker","setResource","Modal","modal","onDismiss","trapFocus","breakpoints","values","lg","useMigrations","migrationError","setMigrationError","workspace","isGUIDish","getResourceURIFromWorkspace","migrateWorkspaceQueryToResourceQuery","err","message","subscriptionId","setError","hideFormatAs","InlineFieldRow","kustoQuery","formatAs","setSubscriptionID","subscription","azureMonitor","metricDefinition","metricNamespace","metricName","aggregation","timeGrain","dimensionFilters","setResourceGroup","setResourceType","resourceType","setResourceName","setMetricNamespace","setMetricName","setAggregation","setTimeGrain","setDimensionFilters","dimensions","appendDimensionFilter","dimension","operator","filter","existingFilters","removeDimensionFilter","indexToRemove","newFilters","splice","setDimensionFilterValue","index","fieldName","setTop","top","setLegendAlias","alias","subscriptions","multiSelect","queryType","AzureQueryType","onSubscriptionsChange","c","MultiSelect","isClearable","findOptions","allowCustomValue","azureResourceGraph","ERROR_SOURCE","fetchedRef","setSubscriptions","azureMonitorDatasource","results","fetchedSubscriptions","description","aggregationOptions","isLoading","dimensionOptions","onFieldChange","filterIndex","VerticalGroup","HorizontalGroup","InlineLabel","HTMLInputElement","onFilterInputChange","size","icon","removeFilter","setValue","handleBlur","metricNames","metricNamespaces","optionValues","m","concat","p","push","resourceNames","resourceTypes","timeGrainOptions","timeGrains","autoInterval","TimegrainConverter","o","useAsyncState","asyncFn","dependencies","errorSource","Math","random","finalValue","useSubscriptions","defaultSubscription","defaultSubscriptionId","subscriptionOptions","formatOptions","hasOption","defaultSub","updateSubscriptions","rawResults","selectedValue","toOption","option","metricsMetadata","metricMetadata","setMetricMetadata","aggOptions","supportedAggTypes","primaryAggType","getMetricMetadata","metadata","aggregations","supportedTimeGrains","newAggregation","newTimeGrain","useMetricMetadata","getResourceGroups","useResourceGroups","getMetricDefinitions","useResourceTypes","getResourceNames","useResourceNames","getMetricNames","useMetricNames","getMetricNamespaces","useMetricNamespaces","ResourceTypeField","ReadOnlyTimeGrain","timeGrainCount","timeGrainType","timeGrainUnit","timeFields","timeField","groupBy","appInsights","dimensionFilter","insightsAnalytics","readOnly","initialQueryType","queryTypes","gtGrafana9","DeprecatedAzureQueryType","DEFAULT_QUERY","onChangeQuery","preparedQuery","withDefaults","defaults","migratedQuery","migrateQuery","deepEqual","prepareQuery","EditorForQueryType","config","LogsQueryEditor","baseQuery","onRunQuery","baseOnRunQuery","useLastError","debounce","usePreparedQuery","getVariables","RESOURCE_URI_REGEX","matches","exec","groups","input","match","toLowerCase","result","targetParentId","newResources","produce","draftState","draftRow","wrapper","defaultProps","stylesFactory","paddingRight","isAppInsightsConfigured","jsonData","appInsightsAppId","secureJsonFields","appInsightsApiKey","valid","gt","TimeGrainConverter","toUpperCase","interval","slice","unit","indexOf","createISO8601Duration","toMinutes","allowedTimeGrains","closest","intervalMs","rangeUtil","i","duration","offset","substring","timeUnitToText","timeUnitToKbn","AzureCloud","set","reduce","accum","item","add","Set","has","routeNames","logAnalytics","resourceGraph","interpolateVariable","variable","multi","includeAll","val","join","OLD_DEFAULT_DROPDOWN_VALUE","workingQuery","setMetricsTimeGrain","migrateTimeGrains","replace","migrateLogAnalyticsToFromTimes","migrateToDefaultNamespace","migrateApplicationInsightsDimensions","migrateMetricsDimensionFilters","oldDimension","datasourceMigrations","rawQuery","errors","setErrors","addError","errorsCopy","findIndex","vSource","unshift","recentError","n","r","arguments","t","Array","e","Error","Q","getPrototypeOf","hasOwnProperty","call","Function","toString","Z","isArray","L","s","nn","forEach","u","prototype","a","get","f","delete","X","Map","q","l","rn","writable","configurable","enumerable","create","d","y","clear","isFrozen","b","tn","_","U","j","O","g","S","w","P","M","x","H","A","I","k","R","D","F","z","getOwnPropertyDescriptor","E","N","T","C","en","on","Proxy","revocable","revoke","proxy","J","K","from","G","W","Symbol","B","Reflect","for","iterator","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","getOwnPropertyDescriptors","deleteProperty","defineProperty","setPrototypeOf","apply","un","produceWithPatches","useProxies","setUseProxies","autoFreeze","setAutoFreeze","createDraft","finishDraft","applyPatches","path","op","$","an","fn","bind"],"sourceRoot":""}