{"version":3,"file":"UsersListPage.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/UsersListPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_: any, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\nexport const getUsersSearchPage = (state: UsersState) => state.searchPage;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { setUsersSearchQuery } from './state/reducers';\nimport { selectTotal } from '../invites/state/selectors';\nimport { getUsersSearchQuery } from './state/selectors';\nimport { RadioButtonGroup, LinkButton, FilterInput } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  searchQuery: string;\n  setUsersSearchQuery: typeof setUsersSearchQuery;\n  onShowInvites: () => void;\n  pendingInvitesCount: number;\n  canInvite: boolean;\n  showInvites: boolean;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n}\n\nexport class UsersActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      canInvite,\n      externalUserMngLinkName,\n      externalUserMngLinkUrl,\n      searchQuery,\n      pendingInvitesCount,\n      setUsersSearchQuery,\n      onShowInvites,\n      showInvites,\n    } = this.props;\n    const options = [\n      { label: 'Users', value: 'users' },\n      { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n    ];\n    const canAddToOrg = contextSrv.hasAccess(AccessControlAction.UsersCreate, canInvite);\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            value={searchQuery}\n            onChange={setUsersSearchQuery}\n            placeholder=\"Search user by login, email or name\"\n          />\n        </div>\n        {pendingInvitesCount > 0 && (\n          <div style={{ marginLeft: '1rem' }}>\n            <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n          </div>\n        )}\n        {canAddToOrg && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n        {externalUserMngLinkUrl && (\n          <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n            {externalUserMngLinkName}\n          </LinkButton>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  setUsersSearchQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersActionBar);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Invitee } from 'app/types';\nimport { revokeInvite } from './state/actions';\nimport { Button, ClipboardButton } from '@grafana/ui';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => revokeInvite(invitee.code)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\nimport { Invitee } from 'app/types';\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { ThunkResult } from '../../../types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { OrgUser } from 'app/types';\nimport { usersLoaded } from './reducers';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch) => {\n    const users = await getBackendSrv().get('/api/org/users', accessControlQueryParam());\n    dispatch(usersLoaded(users));\n  };\n}\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { renderMarkdown } from '@grafana/data';\nimport { HorizontalGroup, Pagination, VerticalGroup } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport UsersActionBar from './UsersActionBar';\nimport UsersTable from './UsersTable';\nimport InviteesTable from '../invites/InviteesTable';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\nimport { loadUsers, removeUser, updateUser } from './state/actions';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getUsers, getUsersSearchQuery, getUsersSearchPage } from './state/selectors';\nimport { setUsersSearchQuery, setUsersSearchPage } from './state/reducers';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    navModel: getNavModel(state.navIndex, 'users'),\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    searchPage: getUsersSearchPage(state.users),\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    hasFetched: state.users.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  setUsersSearchQuery,\n  setUsersSearchPage,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nconst pageLimit = 30;\n\nexport class UsersListPage extends PureComponent<Props, State> {\n  declare externalUserMngInfoHtml: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    if (this.props.externalUserMngInfo) {\n      this.externalUserMngInfoHtml = renderMarkdown(this.props.externalUserMngInfo);\n    }\n\n    this.state = {\n      showInvites: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.fetchInvitees();\n  }\n\n  async fetchUsers() {\n    return await this.props.loadUsers();\n  }\n\n  async fetchInvitees() {\n    return await this.props.fetchInvitees();\n  }\n\n  onRoleChange = (role: OrgRole, user: OrgUser) => {\n    const updatedUser = { ...user, role: role };\n\n    this.props.updateUser(updatedUser);\n  };\n\n  onShowInvites = () => {\n    this.setState((prevState) => ({\n      showInvites: !prevState.showInvites,\n    }));\n  };\n\n  getPaginatedUsers = (users: OrgUser[]) => {\n    const offset = (this.props.searchPage - 1) * pageLimit;\n    return users.slice(offset, offset + pageLimit);\n  };\n\n  renderTable() {\n    const { invitees, users, setUsersSearchPage } = this.props;\n    const paginatedUsers = this.getPaginatedUsers(users);\n    const totalPages = Math.ceil(users.length / pageLimit);\n\n    if (this.state.showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <VerticalGroup spacing=\"md\">\n          <UsersTable\n            users={paginatedUsers}\n            onRoleChange={(role, user) => this.onRoleChange(role, user)}\n            onRemoveUser={(user) => this.props.removeUser(user.userId)}\n          />\n          <HorizontalGroup justify=\"flex-end\">\n            <Pagination\n              onNavigate={setUsersSearchPage}\n              currentPage={this.props.searchPage}\n              numberOfPages={totalPages}\n              hideWhenSinglePage={true}\n            />\n          </HorizontalGroup>\n        </VerticalGroup>\n      );\n    }\n  }\n\n  render() {\n    const { navModel, hasFetched } = this.props;\n    const externalUserMngInfoHtml = this.externalUserMngInfoHtml;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <UsersActionBar onShowInvites={this.onShowInvites} showInvites={this.state.showInvites} />\n            {externalUserMngInfoHtml && (\n              <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n            )}\n            {hasFetched && this.renderTable()}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(UsersListPage);\n","import React, { FC, useEffect, useState } from 'react';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\nimport { contextSrv } from 'app/core/core';\nimport { fetchBuiltinRoles, fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = (props) => {\n  const { users, orgId, onRoleChange, onRemoveUser } = props;\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [builtinRoles, setBuiltinRoles] = useState<{ [key: string]: Role[] }>({});\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n\n        if (contextSrv.hasPermission(AccessControlAction.ActionBuiltinRolesList)) {\n          const builtInRoles = await fetchBuiltinRoles(orgId);\n          setBuiltinRoles(builtInRoles);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th />\n            <th>Login</th>\n            <th>Email</th>\n            <th>Name</th>\n            <th>Seen</th>\n            <th>Role</th>\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => {\n            return (\n              <tr key={`${user.userId}-${index}`}>\n                <td className=\"width-2 text-center\">\n                  <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n                </td>\n                <td className=\"max-width-6\">\n                  <span className=\"ellipsis\" title={user.login}>\n                    {user.login}\n                  </span>\n                </td>\n\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.email}>\n                    {user.email}\n                  </span>\n                </td>\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.name}>\n                    {user.name}\n                  </span>\n                </td>\n                <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n                <td className=\"width-8\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={user.userId}\n                      orgId={orgId}\n                      builtInRole={user.role}\n                      onBuiltinRoleChange={(newRole) => onRoleChange(newRole, user)}\n                      roleOptions={roleOptions}\n                      builtInRoles={builtinRoles}\n                      disabled={!contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRoleUpdate, user)}\n                    />\n                  ) : (\n                    <OrgRolePicker\n                      aria-label=\"Role\"\n                      value={user.role}\n                      disabled={!contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRoleUpdate, user)}\n                      onChange={(newRole) => onRoleChange(newRole, user)}\n                    />\n                  )}\n                </td>\n\n                {contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, user) && (\n                  <td>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        setUserToRemove(user);\n                      }}\n                      icon=\"times\"\n                      aria-label=\"Delete user\"\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default UsersTable;\n"],"names":["selectAll","selectById","selectTotal","selectors","selectInvitesMatchingQuery","createSelector","_","query","invites","searchQuery","regex","RegExp","filter","invite","test","name","email","getUsers","state","users","user","login","getUsersSearchQuery","getUsersSearchPage","searchPage","UsersActionBar","PureComponent","render","canInvite","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","setUsersSearchQuery","onShowInvites","showInvites","this","props","options","label","value","canAddToOrg","contextSrv","AccessControlAction","className","FilterInput","onChange","placeholder","style","marginLeft","RadioButtonGroup","LinkButton","href","target","rel","mapDispatchToProps","connect","revokeInvite","connector","InviteeRow","invitee","ClipboardButton","variant","size","getText","url","Button","icon","onClick","code","InviteesTable","invitees","width","map","index","id","loadUsers","async","getBackendSrv","get","accessControlQueryParam","dispatch","usersLoaded","fetchInvitees","setUsersSearchPage","updateUser","patch","userId","role","removeUser","delete","navModel","getNavModel","navIndex","externalUserMngInfo","hasFetched","UsersListPage","constructor","super","updatedUser","setState","prevState","offset","slice","externalUserMngInfoHtml","renderMarkdown","componentDidMount","fetchUsers","renderTable","paginatedUsers","getPaginatedUsers","totalPages","Math","ceil","length","VerticalGroup","spacing","UsersTable","onRoleChange","onRemoveUser","HorizontalGroup","justify","Pagination","onNavigate","currentPage","numberOfPages","hideWhenSinglePage","Page","isLoading","dangerouslySetInnerHTML","__html","orgId","userToRemove","setUserToRemove","useState","roleOptions","setRoleOptions","builtinRoles","setBuiltinRoles","useEffect","fetchRoleOptions","builtInRoles","fetchBuiltinRoles","e","console","error","fetchOptions","src","avatarUrl","alt","title","lastSeenAtAge","builtInRole","onBuiltinRoleChange","newRole","disabled","Boolean","ConfirmModal","body","confirmText","onDismiss","isOpen","onConfirm"],"sourceRoot":""}