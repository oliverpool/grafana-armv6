{"version":3,"file":"StorageFolderPage.86dbf7b7ff326062c26c.js","mappings":"qTAaO,SAASA,EAAkBC,EAAc,CAC9C,MAAMC,EAAOD,EAAM,MAAM,OAAO,MAAQ,GAClCE,KAAU,KAAS,OAChB,KAAkB,EAAE,KAAK,WAAaD,CAAI,EAChD,CAACA,CAAI,CAAC,EAEHE,EAAYF,EAAK,OAAS,EAAI,KAAKA,KAAU,KAC7CG,EAAUC,EAAmBJ,CAAI,EAEjCK,EAAgB,IAChBJ,EAAQ,MACIA,EAAQ,MAAM,OAAO,CAAC,EAAE,OAAO,QAAQ,EACxC,IAAKK,GAAiB,CACjC,IAAIC,EAAOD,EACX,MAAME,EAAWD,EAAK,QAAQ,GAAG,EAAI,EAC/BE,EAAS,CAACD,GAAYD,EAAK,SAAS,OAAO,EAC3CG,EAAM,GAAGR,IAAYK,IAE3B,OACE,gBAAC,IAAI,CAAC,IAAKA,EAAM,KAAMC,GAAYC,EAASC,EAAM,QAChD,gBAAC,iBAAcH,CAAK,EACpB,gBAAC,gBACC,gBAAC,IAAI,CAAC,KAAMC,EAAW,SAAWC,EAAS,UAAY,WAAY,KAAK,IAAK,EAC/E,CACF,CAEJ,CAAC,EAECR,EAAQ,QACH,gBAAC,IAAO,IAAC,EAEX,gBAAC,WAAI,GAAC,EAGTU,EAAWC,EAAuB,EAExC,OACE,gBAAC,IAAI,CAAC,SAAAD,EAAoB,QAAAR,CAAA,EACvB,CAAC,2BACA,gBAAC,WACC,gBAAC,IAAK,CAAC,MAAM,oCAAmC,kDAAgD,CAClG,EAEDE,EAAc,CACjB,CAEJ,CAEO,SAASD,EAAmBJ,EAAc,CAC/C,MAAMa,EAAQb,EAAK,MAAM,GAAG,EAC5B,IAAIc,EAA2B,CAAC,EAC5BJ,EAAM,IACNK,EAEJ,QAASC,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAChCN,GAAO,IAAIG,EAAMG,CAAC,IAClBF,EAAS,KAAK,CAAE,KAAMD,EAAMG,CAAC,EAAG,IAAAN,EAAK,WAAYK,CAAY,CAAC,EAC9DA,EAAcD,EAASA,EAAS,OAAS,CAAC,EAG5C,OAAOC,CACT,CAEO,SAASH,GAAmC,CACjD,MAAO,CAAE,KAAM,CAAE,KAAM,IAAK,EAAG,KAAM,CAAE,KAAM,UAAW,IAAK,IAAK,CAAE,CACtE,CAEA,QAAed,C","sources":["webpack://grafana/./public/app/features/storage/StorageFolderPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, NavModel, NavModelItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Card, Icon, Spinner } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getGrafanaStorage } from './storage';\n\nexport interface Props extends GrafanaRouteComponentProps<{ slug: string }> {}\n\nexport function StorageFolderPage(props: Props) {\n  const slug = props.match.params.slug ?? '';\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage().list('content/' + slug);\n  }, [slug]);\n\n  const childRoot = slug.length > 0 ? `g/${slug}/` : 'g/';\n  const pageNav = getPageNavFromSlug(slug);\n\n  const renderListing = () => {\n    if (listing.value) {\n      const names = listing.value.fields[0].values.toArray();\n      return names.map((item: string) => {\n        let name = item;\n        const isFolder = name.indexOf('.') < 0;\n        const isDash = !isFolder && name.endsWith('.json');\n        const url = `${childRoot}${name}`;\n\n        return (\n          <Card key={name} href={isFolder || isDash ? url : undefined}>\n            <Card.Heading>{name}</Card.Heading>\n            <Card.Figure>\n              <Icon name={isFolder ? 'folder' : isDash ? 'gf-grid' : 'file-alt'} size=\"sm\" />\n            </Card.Figure>\n          </Card>\n        );\n      });\n    }\n    if (listing.loading) {\n      return <Spinner />;\n    }\n    return <div>?</div>;\n  };\n\n  const navModel = getRootContentNavModel();\n\n  return (\n    <Page navModel={navModel} pageNav={pageNav}>\n      {!config.featureToggles.topnav && (\n        <div>\n          <Alert title=\"Enable the topnav feature toggle\">This page is designed assuming topnav is enabled</Alert>\n        </div>\n      )}\n      {renderListing()}\n    </Page>\n  );\n}\n\nexport function getPageNavFromSlug(slug: string) {\n  const parts = slug.split('/');\n  let pageNavs: NavModelItem[] = [];\n  let url = 'g';\n  let lastPageNav: NavModelItem | undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    url += `/${parts[i]}`;\n    pageNavs.push({ text: parts[i], url, parentItem: lastPageNav });\n    lastPageNav = pageNavs[pageNavs.length - 1];\n  }\n\n  return lastPageNav;\n}\n\nexport function getRootContentNavModel(): NavModel {\n  return { main: { text: 'C:' }, node: { text: 'Content', url: '/g' } };\n}\n\nexport default StorageFolderPage;\n"],"names":["StorageFolderPage","props","slug","listing","childRoot","pageNav","getPageNavFromSlug","renderListing","item","name","isFolder","isDash","url","navModel","getRootContentNavModel","parts","pageNavs","lastPageNav","i"],"sourceRoot":""}