{"version":3,"file":"prom-query-field.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/3/opt/drone/yarncache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useLatest.js","webpack://grafana/../../opt/drone/yarncache/monaco-promql-npm-1.7.2-7f61733ebe-54061d5c1c.zip/node_modules/monaco-promql/promql/promql.contribution.js","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/util.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/situation.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/completions.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/index.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/getOverrideServices.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryField.tsx"],"sourcesContent":["import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n","// The MIT License (MIT)\n//\n// Copyright (c) Celian Garcia and Augustin Husson @ Amadeus IT Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n'use strict';\n// noinspection JSUnusedGlobalSymbols\nexport var promLanguageDefinition = {\n    id: 'promql',\n    extensions: ['.promql'],\n    aliases: ['Prometheus', 'prometheus', 'prom', 'Prom', 'promql', 'Promql', 'promQL', 'PromQL'],\n    mimetypes: [],\n    loader: function () { return import('./promql'); } // eslint-disable-line @typescript-eslint/explicit-function-return-type\n};\n","// this helper class is used to make typescript warn you when you forget\n// a case-block in a switch statement.\n// example code that triggers the typescript-error:\n//\n// const x:'A'|'B'|'C' = 'A';\n//\n// switch(x) {\n//   case 'A':\n//     // something\n//   case 'B':\n//     // something\n//   default:\n//     throw new NeverCaseError(x);\n// }\n//\n//\n// typescript will show an error in this case,\n// when you add the missing `case 'C'` code,\n// the problem will be fixed.\n\nexport class NeverCaseError extends Error {\n  constructor(value: never) {\n    super('should never happen');\n  }\n}\n","import { parser } from 'lezer-promql';\nimport type { Tree, SyntaxNode } from '@lezer/common';\nimport { NeverCaseError } from './util';\n\ntype Direction = 'parent' | 'firstChild' | 'lastChild' | 'nextSibling';\ntype NodeTypeName =\n  | '⚠' // this is used as error-name\n  | 'AggregateExpr'\n  | 'AggregateModifier'\n  | 'FunctionCallBody'\n  | 'GroupingLabels'\n  | 'Identifier'\n  | 'LabelMatcher'\n  | 'LabelMatchers'\n  | 'LabelMatchList'\n  | 'LabelName'\n  | 'MetricIdentifier'\n  | 'PromQL'\n  | 'StringLiteral'\n  | 'VectorSelector'\n  | 'MatrixSelector'\n  | 'MatchOp'\n  | 'EqlSingle'\n  | 'Neq'\n  | 'EqlRegex'\n  | 'NeqRegex';\n\ntype Path = Array<[Direction, NodeTypeName]>;\n\nfunction move(node: SyntaxNode, direction: Direction): SyntaxNode | null {\n  switch (direction) {\n    case 'parent':\n      return node.parent;\n    case 'firstChild':\n      return node.firstChild;\n    case 'lastChild':\n      return node.lastChild;\n    case 'nextSibling':\n      return node.nextSibling;\n    default:\n      throw new NeverCaseError(direction);\n  }\n}\n\nfunction walk(node: SyntaxNode, path: Path): SyntaxNode | null {\n  let current: SyntaxNode | null = node;\n  for (const [direction, expectedType] of path) {\n    current = move(current, direction);\n    if (current === null) {\n      // we could not move in the direction, we stop\n      return null;\n    }\n    if (current.type.name !== expectedType) {\n      // the reached node has wrong type, we stop\n      return null;\n    }\n  }\n  return current;\n}\n\nfunction getNodeText(node: SyntaxNode, text: string): string {\n  return text.slice(node.from, node.to);\n}\n\nfunction parsePromQLStringLiteral(text: string): string {\n  // if it is a string-literal, it is inside quotes of some kind\n  const inside = text.slice(1, text.length - 1);\n\n  // FIXME: support https://prometheus.io/docs/prometheus/latest/querying/basics/#string-literals\n  // FIXME: maybe check other promql code, if all is supported or not\n\n  // for now we do only some very simple un-escaping\n\n  // we start with double-quotes\n  if (text.startsWith('\"') && text.endsWith('\"')) {\n    // NOTE: this is not 100% perfect, we only unescape the double-quote,\n    // there might be other characters too\n    return inside.replace(/\\\\\"/, '\"');\n  }\n\n  // then single-quote\n  if (text.startsWith(\"'\") && text.endsWith(\"'\")) {\n    // NOTE: this is not 100% perfect, we only unescape the single-quote,\n    // there might be other characters too\n    return inside.replace(/\\\\'/, \"'\");\n  }\n\n  // then backticks\n  if (text.startsWith('`') && text.endsWith('`')) {\n    return inside;\n  }\n\n  throw new Error('FIXME: invalid string literal');\n}\n\ntype LabelOperator = '=' | '!=' | '=~' | '!~';\n\nexport type Label = {\n  name: string;\n  value: string;\n  op: LabelOperator;\n};\n\nexport type Situation =\n  | {\n      type: 'IN_FUNCTION';\n    }\n  | {\n      type: 'AT_ROOT';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_DURATION';\n    }\n  | {\n      type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME';\n      metricName?: string;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_GROUPING';\n      metricName: string;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME';\n      metricName?: string;\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\ntype Resolver = {\n  path: NodeTypeName[];\n  fun: (node: SyntaxNode, text: string, pos: number) => Situation | null;\n};\n\nfunction isPathMatch(resolverPath: string[], cursorPath: string[]): boolean {\n  return resolverPath.every((item, index) => item === cursorPath[index]);\n}\n\nconst ERROR_NODE_NAME: NodeTypeName = '⚠'; // this is used as error-name\n\nconst RESOLVERS: Resolver[] = [\n  {\n    path: ['LabelMatchers', 'VectorSelector'],\n    fun: resolveLabelKeysWithEquals,\n  },\n  {\n    path: ['PromQL'],\n    fun: resolveTopLevel,\n  },\n  {\n    path: ['FunctionCallBody'],\n    fun: resolveInFunction,\n  },\n  {\n    path: ['StringLiteral', 'LabelMatcher'],\n    fun: resolveLabelMatcher,\n  },\n  {\n    path: [ERROR_NODE_NAME, 'LabelMatcher'],\n    fun: resolveLabelMatcher,\n  },\n  {\n    path: [ERROR_NODE_NAME, 'MatrixSelector'],\n    fun: resolveDurations,\n  },\n  {\n    path: ['GroupingLabels'],\n    fun: resolveLabelsForGrouping,\n  },\n];\n\nconst LABEL_OP_MAP = new Map<string, LabelOperator>([\n  ['EqlSingle', '='],\n  ['EqlRegex', '=~'],\n  ['Neq', '!='],\n  ['NeqRegex', '!~'],\n]);\n\nfunction getLabelOp(opNode: SyntaxNode): LabelOperator | null {\n  const opChild = opNode.firstChild;\n  if (opChild === null) {\n    return null;\n  }\n\n  return LABEL_OP_MAP.get(opChild.name) ?? null;\n}\n\nfunction getLabel(labelMatcherNode: SyntaxNode, text: string): Label | null {\n  if (labelMatcherNode.type.name !== 'LabelMatcher') {\n    return null;\n  }\n\n  const nameNode = walk(labelMatcherNode, [['firstChild', 'LabelName']]);\n\n  if (nameNode === null) {\n    return null;\n  }\n\n  const opNode = walk(nameNode, [['nextSibling', 'MatchOp']]);\n  if (opNode === null) {\n    return null;\n  }\n\n  const op = getLabelOp(opNode);\n  if (op === null) {\n    return null;\n  }\n\n  const valueNode = walk(labelMatcherNode, [['lastChild', 'StringLiteral']]);\n\n  if (valueNode === null) {\n    return null;\n  }\n\n  const name = getNodeText(nameNode, text);\n  const value = parsePromQLStringLiteral(getNodeText(valueNode, text));\n\n  return { name, value, op };\n}\nfunction getLabels(labelMatchersNode: SyntaxNode, text: string): Label[] {\n  if (labelMatchersNode.type.name !== 'LabelMatchers') {\n    return [];\n  }\n\n  let listNode: SyntaxNode | null = walk(labelMatchersNode, [['firstChild', 'LabelMatchList']]);\n\n  const labels: Label[] = [];\n\n  while (listNode !== null) {\n    const matcherNode = walk(listNode, [['lastChild', 'LabelMatcher']]);\n    if (matcherNode === null) {\n      // unexpected, we stop\n      return [];\n    }\n\n    const label = getLabel(matcherNode, text);\n    if (label !== null) {\n      labels.push(label);\n    }\n\n    // there might be more labels\n    listNode = walk(listNode, [['firstChild', 'LabelMatchList']]);\n  }\n\n  // our labels-list is last-first, so we reverse it\n  labels.reverse();\n\n  return labels;\n}\n\nfunction getNodeChildren(node: SyntaxNode): SyntaxNode[] {\n  let child: SyntaxNode | null = node.firstChild;\n  const children: SyntaxNode[] = [];\n  while (child !== null) {\n    children.push(child);\n    child = child.nextSibling;\n  }\n  return children;\n}\n\nfunction getNodeInSubtree(node: SyntaxNode, typeName: NodeTypeName): SyntaxNode | null {\n  // first we try the current node\n  if (node.type.name === typeName) {\n    return node;\n  }\n\n  // then we try the children\n  const children = getNodeChildren(node);\n  for (const child of children) {\n    const n = getNodeInSubtree(child, typeName);\n    if (n !== null) {\n      return n;\n    }\n  }\n\n  return null;\n}\n\nfunction resolveLabelsForGrouping(node: SyntaxNode, text: string, pos: number): Situation | null {\n  const aggrExpNode = walk(node, [\n    ['parent', 'AggregateModifier'],\n    ['parent', 'AggregateExpr'],\n  ]);\n  if (aggrExpNode === null) {\n    return null;\n  }\n  const bodyNode = aggrExpNode.getChild('FunctionCallBody');\n  if (bodyNode === null) {\n    return null;\n  }\n\n  const metricIdNode = getNodeInSubtree(bodyNode, 'MetricIdentifier');\n  if (metricIdNode === null) {\n    return null;\n  }\n\n  const idNode = walk(metricIdNode, [['firstChild', 'Identifier']]);\n  if (idNode === null) {\n    return null;\n  }\n\n  const metricName = getNodeText(idNode, text);\n  return {\n    type: 'IN_GROUPING',\n    metricName,\n    otherLabels: [],\n  };\n}\n\nfunction resolveLabelMatcher(node: SyntaxNode, text: string, pos: number): Situation | null {\n  // we can arrive here in two situation. `node` is either:\n  // - a StringNode (like in `{job=\"^\"}`)\n  // - or an error node (like in `{job=^}`)\n  const inStringNode = !node.type.isError;\n\n  const parent = walk(node, [['parent', 'LabelMatcher']]);\n  if (parent === null) {\n    return null;\n  }\n\n  const labelNameNode = walk(parent, [['firstChild', 'LabelName']]);\n  if (labelNameNode === null) {\n    return null;\n  }\n\n  const labelName = getNodeText(labelNameNode, text);\n\n  // now we need to go up, to the parent of LabelMatcher,\n  // there can be one or many `LabelMatchList` parents, we have\n  // to go through all of them\n\n  const firstListNode = walk(parent, [['parent', 'LabelMatchList']]);\n  if (firstListNode === null) {\n    return null;\n  }\n\n  let listNode = firstListNode;\n\n  // we keep going through the parent-nodes\n  // as long as they are LabelMatchList.\n  // as soon as we reawch LabelMatchers, we stop\n  let labelMatchersNode: SyntaxNode | null = null;\n  while (labelMatchersNode === null) {\n    const p = listNode.parent;\n    if (p === null) {\n      return null;\n    }\n\n    const { name } = p.type;\n\n    switch (name) {\n      case 'LabelMatchList':\n        //we keep looping\n        listNode = p;\n        continue;\n      case 'LabelMatchers':\n        // we reached the end, we can stop the loop\n        labelMatchersNode = p;\n        continue;\n      default:\n        // we reached some other node, we stop\n        return null;\n    }\n  }\n\n  // now we need to find the other names\n  const allLabels = getLabels(labelMatchersNode, text);\n\n  // we need to remove \"our\" label from all-labels, if it is in there\n  const otherLabels = allLabels.filter((label) => label.name !== labelName);\n\n  const metricNameNode = walk(labelMatchersNode, [\n    ['parent', 'VectorSelector'],\n    ['firstChild', 'MetricIdentifier'],\n    ['firstChild', 'Identifier'],\n  ]);\n\n  if (metricNameNode === null) {\n    // we are probably in a situation without a metric name\n    return {\n      type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME',\n      labelName,\n      betweenQuotes: inStringNode,\n      otherLabels,\n    };\n  }\n\n  const metricName = getNodeText(metricNameNode, text);\n\n  return {\n    type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME',\n    metricName,\n    labelName,\n    betweenQuotes: inStringNode,\n    otherLabels,\n  };\n}\n\nfunction resolveTopLevel(node: SyntaxNode, text: string, pos: number): Situation {\n  return {\n    type: 'AT_ROOT',\n  };\n}\n\nfunction resolveInFunction(node: SyntaxNode, text: string, pos: number): Situation {\n  return {\n    type: 'IN_FUNCTION',\n  };\n}\n\nfunction resolveDurations(node: SyntaxNode, text: string, pos: number): Situation {\n  return {\n    type: 'IN_DURATION',\n  };\n}\n\nfunction subTreeHasError(node: SyntaxNode): boolean {\n  return getNodeInSubtree(node, ERROR_NODE_NAME) !== null;\n}\n\nfunction resolveLabelKeysWithEquals(node: SyntaxNode, text: string, pos: number): Situation | null {\n  // for example `something{^}`\n\n  // there are some false positives that can end up in this situation, that we want\n  // to eliminate:\n  // `something{a~^}` (if this subtree contains any error-node, we stop)\n  if (subTreeHasError(node)) {\n    return null;\n  }\n\n  // next false positive:\n  // `something{a=\"1\"^}`\n  const child = walk(node, [['firstChild', 'LabelMatchList']]);\n  if (child !== null) {\n    // means the label-matching part contains at least one label already.\n    //\n    // in this case, we will need to have a `,` character at the end,\n    // to be able to suggest adding the next label.\n    // the area between the end-of-the-child-node and the cursor-pos\n    // must contain a `,` in this case.\n    const textToCheck = text.slice(child.to, pos);\n\n    if (!textToCheck.includes(',')) {\n      return null;\n    }\n  }\n\n  const metricNameNode = walk(node, [\n    ['parent', 'VectorSelector'],\n    ['firstChild', 'MetricIdentifier'],\n    ['firstChild', 'Identifier'],\n  ]);\n\n  const otherLabels = getLabels(node, text);\n\n  if (metricNameNode === null) {\n    // we are probably in a situation without a metric name.\n    return {\n      type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME',\n      otherLabels,\n    };\n  }\n\n  const metricName = getNodeText(metricNameNode, text);\n\n  return {\n    type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME',\n    metricName,\n    otherLabels,\n  };\n}\n\n// we find the first error-node in the tree that is at the cursor-position.\n// NOTE: this might be too slow, might need to optimize it\n// (ideas: we do not need to go into every subtree, based on from/to)\n// also, only go to places that are in the sub-tree of the node found\n// by default by lezer. problem is, `next()` will go upward too,\n// and we do not want to go higher than our node\nfunction getErrorNode(tree: Tree, pos: number): SyntaxNode | null {\n  const cur = tree.cursor(pos);\n  while (true) {\n    if (cur.from === pos && cur.to === pos) {\n      const { node } = cur;\n      if (node.type.isError) {\n        return node;\n      }\n    }\n\n    if (!cur.next()) {\n      break;\n    }\n  }\n  return null;\n}\n\nexport function getSituation(text: string, pos: number): Situation | null {\n  // there is a special-case when we are at the start of writing text,\n  // so we handle that case first\n\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  /*\n\tPromQL\nExpr\nVectorSelector\nLabelMatchers\n*/\n  const tree = parser.parse(text);\n\n  // if the tree contains error, it is very probable that\n  // our node is one of those error-nodes.\n  // also, if there are errors, the node lezer finds us,\n  // might not be the best node.\n  // so first we check if there is an error-node at the cursor-position\n  const maybeErrorNode = getErrorNode(tree, pos);\n\n  const cur = maybeErrorNode != null ? maybeErrorNode.cursor : tree.cursor(pos);\n  const currentNode = cur.node;\n\n  const names = [cur.name];\n  while (cur.parent()) {\n    names.push(cur.name);\n  }\n\n  for (let resolver of RESOLVERS) {\n    // i do not use a foreach because i want to stop as soon\n    // as i find something\n    if (isPathMatch(resolver.path, names)) {\n      return resolver.fun(currentNode, text, pos);\n    }\n  }\n\n  return null;\n}\n","import type { Situation, Label } from './situation';\nimport { NeverCaseError } from './util';\n// FIXME: we should not load this from the \"outside\", but we cannot do that while we have the \"old\" query-field too\nimport { FUNCTIONS } from '../../../promql';\nimport { escapeLabelValueInExactSelector } from '../../../language_utils';\n\nexport type CompletionType = 'HISTORY' | 'FUNCTION' | 'METRIC_NAME' | 'DURATION' | 'LABEL_NAME' | 'LABEL_VALUE';\n\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n  detail?: string;\n  documentation?: string;\n  triggerOnInsert?: boolean;\n};\n\ntype Metric = {\n  name: string;\n  help: string;\n  type: string;\n};\n\nexport type DataProvider = {\n  getHistory: () => Promise<string[]>;\n  getAllMetricNames: () => Promise<Metric[]>;\n  getAllLabelNames: () => Promise<string[]>;\n  getLabelValues: (labelName: string) => Promise<string[]>;\n  getSeries: (selector: string) => Promise<Record<string, string[]>>;\n};\n\n// we order items like: history, functions, metrics\n\nasync function getAllMetricNamesCompletions(dataProvider: DataProvider): Promise<Completion[]> {\n  const metrics = await dataProvider.getAllMetricNames();\n  return metrics.map((metric) => ({\n    type: 'METRIC_NAME',\n    label: metric.name,\n    insertText: metric.name,\n    detail: `${metric.name} : ${metric.type}`,\n    documentation: metric.help,\n  }));\n}\n\nconst FUNCTION_COMPLETIONS: Completion[] = FUNCTIONS.map((f) => ({\n  type: 'FUNCTION',\n  label: f.label,\n  insertText: f.insertText ?? '', // i don't know what to do when this is nullish. it should not be.\n  detail: f.detail,\n  documentation: f.documentation,\n}));\n\nasync function getAllFunctionsAndMetricNamesCompletions(dataProvider: DataProvider): Promise<Completion[]> {\n  const metricNames = await getAllMetricNamesCompletions(dataProvider);\n  return [...FUNCTION_COMPLETIONS, ...metricNames];\n}\n\nconst DURATION_COMPLETIONS: Completion[] = [\n  '$__interval',\n  '$__range',\n  '$__rate_interval',\n  '1m',\n  '5m',\n  '10m',\n  '30m',\n  '1h',\n  '1d',\n].map((text) => ({\n  type: 'DURATION',\n  label: text,\n  insertText: text,\n}));\n\nasync function getAllHistoryCompletions(dataProvider: DataProvider): Promise<Completion[]> {\n  // function getAllHistoryCompletions(queryHistory: PromHistoryItem[]): Completion[] {\n  // NOTE: the typescript types are wrong. historyItem.query.expr can be undefined\n  const allHistory = await dataProvider.getHistory();\n  // FIXME: find a better history-limit\n  return allHistory.slice(0, 10).map((expr) => ({\n    type: 'HISTORY',\n    label: expr,\n    insertText: expr,\n  }));\n}\n\nfunction makeSelector(metricName: string | undefined, labels: Label[]): string {\n  const allLabels = [...labels];\n\n  // we transform the metricName to a label, if it exists\n  if (metricName !== undefined) {\n    allLabels.push({ name: '__name__', value: metricName, op: '=' });\n  }\n\n  const allLabelTexts = allLabels.map(\n    (label) => `${label.name}${label.op}\"${escapeLabelValueInExactSelector(label.value)}\"`\n  );\n\n  return `{${allLabelTexts.join(',')}}`;\n}\n\nasync function getLabelNames(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<string[]> {\n  if (metric === undefined && otherLabels.length === 0) {\n    // if there is no filtering, we have to use a special endpoint\n    return dataProvider.getAllLabelNames();\n  } else {\n    const selector = makeSelector(metric, otherLabels);\n    const data = await dataProvider.getSeries(selector);\n    const possibleLabelNames = Object.keys(data); // all names from prometheus\n    const usedLabelNames = new Set(otherLabels.map((l) => l.name)); // names used in the query\n    return possibleLabelNames.filter((l) => !usedLabelNames.has(l));\n  }\n}\n\nasync function getLabelNamesForCompletions(\n  metric: string | undefined,\n  suffix: string,\n  triggerOnInsert: boolean,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  const labelNames = await getLabelNames(metric, otherLabels, dataProvider);\n  return labelNames.map((text) => ({\n    type: 'LABEL_NAME',\n    label: text,\n    insertText: `${text}${suffix}`,\n    triggerOnInsert,\n  }));\n}\n\nasync function getLabelNamesForSelectorCompletions(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  return getLabelNamesForCompletions(metric, '=', true, otherLabels, dataProvider);\n}\nasync function getLabelNamesForByCompletions(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  return getLabelNamesForCompletions(metric, '', false, otherLabels, dataProvider);\n}\n\nasync function getLabelValues(\n  metric: string | undefined,\n  labelName: string,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<string[]> {\n  if (metric === undefined && otherLabels.length === 0) {\n    // if there is no filtering, we have to use a special endpoint\n    return dataProvider.getLabelValues(labelName);\n  } else {\n    const selector = makeSelector(metric, otherLabels);\n    const data = await dataProvider.getSeries(selector);\n    return data[labelName] ?? [];\n  }\n}\n\nasync function getLabelValuesForMetricCompletions(\n  metric: string | undefined,\n  labelName: string,\n  betweenQuotes: boolean,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  const values = await getLabelValues(metric, labelName, otherLabels, dataProvider);\n  return values.map((text) => ({\n    type: 'LABEL_VALUE',\n    label: text,\n    insertText: betweenQuotes ? text : `\"${text}\"`, // FIXME: escaping strange characters?\n  }));\n}\n\nexport async function getCompletions(situation: Situation, dataProvider: DataProvider): Promise<Completion[]> {\n  switch (situation.type) {\n    case 'IN_DURATION':\n      return DURATION_COMPLETIONS;\n    case 'IN_FUNCTION':\n      return getAllFunctionsAndMetricNamesCompletions(dataProvider);\n    case 'AT_ROOT': {\n      return getAllFunctionsAndMetricNamesCompletions(dataProvider);\n    }\n    case 'EMPTY': {\n      const metricNames = await getAllMetricNamesCompletions(dataProvider);\n      const historyCompletions = await getAllHistoryCompletions(dataProvider);\n      return [...historyCompletions, ...FUNCTION_COMPLETIONS, ...metricNames];\n    }\n    case 'IN_LABEL_SELECTOR_NO_LABEL_NAME':\n      return getLabelNamesForSelectorCompletions(situation.metricName, situation.otherLabels, dataProvider);\n    case 'IN_GROUPING':\n      return getLabelNamesForByCompletions(situation.metricName, situation.otherLabels, dataProvider);\n    case 'IN_LABEL_SELECTOR_WITH_LABEL_NAME':\n      return getLabelValuesForMetricCompletions(\n        situation.metricName,\n        situation.labelName,\n        situation.betweenQuotes,\n        situation.otherLabels,\n        dataProvider\n      );\n    default:\n      throw new NeverCaseError(situation);\n  }\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { getSituation } from './situation';\nimport { getCompletions, DataProvider, CompletionType } from './completions';\nimport { NeverCaseError } from './util';\n\nexport function getSuggestOptions(): monacoTypes.editor.ISuggestOptions {\n  return {\n    // monaco-editor sometimes provides suggestions automatically, i am not\n    // sure based on what, seems to be by analyzing the words already\n    // written.\n    // to try it out:\n    // - enter `go_goroutines{job~`\n    // - have the cursor at the end of the string\n    // - press ctrl-enter\n    // - you will get two suggestions\n    // those were not provided by grafana, they are offered automatically.\n    // i want to remove those. the only way i found is:\n    // - every suggestion-item has a `kind` attribute,\n    //   that controls the icon to the left of the suggestion.\n    // - items auto-generated by monaco have `kind` set to `text`.\n    // - we make sure grafana-provided suggestions do not have `kind` set to `text`.\n    // - and then we tell monaco not to show suggestions of kind `text`\n    showWords: false,\n  };\n}\n\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'DURATION':\n      return monaco.languages.CompletionItemKind.Unit;\n    case 'FUNCTION':\n      return monaco.languages.CompletionItemKind.Variable;\n    case 'HISTORY':\n      return monaco.languages.CompletionItemKind.Snippet;\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'METRIC_NAME':\n      return monaco.languages.CompletionItemKind.Constructor;\n    default:\n      throw new NeverCaseError(type);\n  }\n}\nexport function getCompletionProvider(\n  monaco: Monaco,\n  dataProvider: DataProvider\n): monacoTypes.languages.CompletionItemProvider {\n  const provideCompletionItems = (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> => {\n    const word = model.getWordAtPosition(position);\n    const range =\n      word != null\n        ? monaco.Range.lift({\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          })\n        : monaco.Range.fromPositions(position);\n    // documentation says `position` will be \"adjusted\" in `getOffsetAt`\n    // i don't know what that means, to be sure i clone it\n    const positionClone = {\n      column: position.column,\n      lineNumber: position.lineNumber,\n    };\n    const offset = model.getOffsetAt(positionClone);\n    const situation = getSituation(model.getValue(), offset);\n    const completionsPromise = situation != null ? getCompletions(situation, dataProvider) : Promise.resolve([]);\n    return completionsPromise.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, monaco),\n        label: item.label,\n        insertText: item.insertText,\n        detail: item.detail,\n        documentation: item.documentation,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n        command: item.triggerOnInsert\n          ? {\n              id: 'editor.action.triggerSuggest',\n              title: '',\n            }\n          : undefined,\n      }));\n      return { suggestions };\n    });\n  };\n\n  return {\n    triggerCharacters: ['{', ',', '[', '(', '=', '~', ' ', '\"'],\n    provideCompletionItems,\n  };\n}\n","import { monacoTypes } from '@grafana/ui';\n\n// this thing here is a workaround in a way.\n// what we want to achieve, is that when the autocomplete-window\n// opens, the \"second, extra popup\" with the extra help,\n// also opens automatically.\n// but there is no API to achieve it.\n// the way to do it is to implement the `storageService`\n// interface, and provide our custom implementation,\n// which will default to `true` for the correct string-key.\n// unfortunately, while the typescript-interface exists,\n// it is not exported from monaco-editor,\n// so we cannot rely on typescript to make sure\n// we do it right. all we can do is to manually\n// lookup the interface, and make sure we code our code right.\n// our code is a \"best effort\" approach,\n// i am not 100% how the `scope` and `target` things work,\n// but so far it seems to work ok.\n// i would use an another approach, if there was one available.\n\nfunction makeStorageService() {\n  // we need to return an object that fulfills this interface:\n  // https://github.com/microsoft/vscode/blob/ff1e16eebb93af79fd6d7af1356c4003a120c563/src/vs/platform/storage/common/storage.ts#L37\n  // unfortunately it is not export from monaco-editor\n\n  const strings = new Map<string, string>();\n\n  // we want this to be true by default\n  strings.set('expandSuggestionDocs', true.toString());\n\n  return {\n    // we do not implement the on* handlers\n    onDidChangeValue: (data: unknown): void => undefined,\n    onDidChangeTarget: (data: unknown): void => undefined,\n    onWillSaveState: (data: unknown): void => undefined,\n\n    get: (key: string, scope: unknown, fallbackValue?: string): string | undefined => {\n      return strings.get(key) ?? fallbackValue;\n    },\n\n    getBoolean: (key: string, scope: unknown, fallbackValue?: boolean): boolean | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        // the interface-docs say the value will be converted\n        // to a boolean but do not specify how, so we improvise\n        return val === 'true';\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    getNumber: (key: string, scope: unknown, fallbackValue?: number): number | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        return parseInt(val, 10);\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    store: (\n      key: string,\n      value: string | boolean | number | undefined | null,\n      scope: unknown,\n      target: unknown\n    ): void => {\n      // the interface-docs say if the value is nullish, it should act as delete\n      if (value === null || value === undefined) {\n        strings.delete(key);\n      } else {\n        strings.set(key, value.toString());\n      }\n    },\n\n    remove: (key: string, scope: unknown): void => {\n      strings.delete(key);\n    },\n\n    keys: (scope: unknown, target: unknown): string[] => {\n      return Array.from(strings.keys());\n    },\n\n    logStorage: (): void => {\n      console.log('logStorage: not implemented');\n    },\n\n    migrate: (): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n\n    isNew: (scope: unknown): boolean => {\n      // we create a new storage for every session, we do not persist it,\n      // so we return `true`.\n      return true;\n    },\n\n    flush: (reason?: unknown): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n  };\n}\n\nlet overrideServices: monacoTypes.editor.IEditorOverrideServices | null = null;\n\nexport function getOverrideServices(): monacoTypes.editor.IEditorOverrideServices {\n  // only have one instance of this for every query editor\n  if (overrideServices === null) {\n    overrideServices = {\n      storageService: makeStorageService(),\n    };\n  }\n\n  return overrideServices;\n}\n","import React, { useRef, useEffect } from 'react';\nimport { useTheme2, ReactMonacoEditor, Monaco, monacoTypes } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { useLatest } from 'react-use';\nimport { promLanguageDefinition } from 'monaco-promql';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getCompletionProvider, getSuggestOptions } from './monaco-completion-provider';\nimport { Props } from './MonacoQueryFieldProps';\nimport { getOverrideServices } from './getOverrideServices';\n\nconst options: monacoTypes.editor.IStandaloneEditorConstructionOptions = {\n  codeLens: false,\n  contextmenu: false,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n  folding: false,\n  fontSize: 14,\n  lineDecorationsWidth: 8, // used as \"padding-left\"\n  lineNumbers: 'off',\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  padding: {\n    // these numbers were picked so that visually this matches the previous version\n    // of the query-editor the best\n    top: 4,\n    bottom: 5,\n  },\n  renderLineHighlight: 'none',\n  scrollbar: {\n    vertical: 'hidden',\n    verticalScrollbarSize: 8, // used as \"padding-right\"\n    horizontal: 'hidden',\n    horizontalScrollbarSize: 0,\n  },\n  scrollBeyondLastLine: false,\n  suggest: getSuggestOptions(),\n  suggestFontSize: 12,\n  wordWrap: 'on',\n};\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\nconst PROMQL_LANG_ID = promLanguageDefinition.id;\n\n// we must only run the promql-setup code once\nlet PROMQL_SETUP_STARTED = false;\n\nfunction ensurePromQL(monaco: Monaco) {\n  if (PROMQL_SETUP_STARTED === false) {\n    PROMQL_SETUP_STARTED = true;\n    const { aliases, extensions, mimetypes, loader } = promLanguageDefinition;\n    monaco.languages.register({ id: PROMQL_LANG_ID, aliases, extensions, mimetypes });\n\n    loader().then((mod) => {\n      monaco.languages.setMonarchTokensProvider(PROMQL_LANG_ID, mod.language);\n      monaco.languages.setLanguageConfiguration(PROMQL_LANG_ID, mod.languageConfiguration);\n    });\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      border-radius: ${theme.shape.borderRadius()};\n      border: 1px solid ${theme.components.input.borderColor};\n    `,\n  };\n};\n\nconst MonacoQueryField = (props: Props) => {\n  // we need only one instance of `overrideServices` during the lifetime of the react component\n  const overrideServicesRef = useRef(getOverrideServices());\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { languageProvider, history, onBlur, onRunQuery, initialValue } = props;\n\n  const lpRef = useLatest(languageProvider);\n  const historyRef = useLatest(history);\n  const onRunQueryRef = useLatest(onRunQuery);\n  const onBlurRef = useLatest(onBlur);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  return (\n    <div\n      aria-label={selectors.components.QueryField.container}\n      className={styles.container}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <ReactMonacoEditor\n        overrideServices={overrideServicesRef.current}\n        options={options}\n        language=\"promql\"\n        value={initialValue}\n        beforeMount={(monaco) => {\n          ensurePromQL(monaco);\n        }}\n        onMount={(editor, monaco) => {\n          // we setup on-blur\n          editor.onDidBlurEditorWidget(() => {\n            onBlurRef.current(editor.getValue());\n          });\n\n          // we construct a DataProvider object\n          const getSeries = (selector: string) => lpRef.current.getSeries(selector);\n\n          const getHistory = () =>\n            Promise.resolve(historyRef.current.map((h) => h.query.expr).filter((expr) => expr !== undefined));\n\n          const getAllMetricNames = () => {\n            const { metrics, metricsMetadata } = lpRef.current;\n            const result = metrics.map((m) => {\n              const metaItem = metricsMetadata?.[m];\n              return {\n                name: m,\n                help: metaItem?.help ?? '',\n                type: metaItem?.type ?? '',\n              };\n            });\n\n            return Promise.resolve(result);\n          };\n\n          const getAllLabelNames = () => Promise.resolve(lpRef.current.getLabelKeys());\n\n          const getLabelValues = (labelName: string) => lpRef.current.getLabelValues(labelName);\n\n          const dataProvider = { getSeries, getHistory, getAllMetricNames, getAllLabelNames, getLabelValues };\n          const completionProvider = getCompletionProvider(monaco, dataProvider);\n\n          // completion-providers in monaco are not registered directly to editor-instances,\n          // they are registered to languages. this makes it hard for us to have\n          // separate completion-providers for every query-field-instance\n          // (but we need that, because they might connect to different datasources).\n          // the trick we do is, we wrap the callback in a \"proxy\",\n          // and in the proxy, the first thing is, we check if we are called from\n          // \"our editor instance\", and if not, we just return nothing. if yes,\n          // we call the completion-provider.\n          const filteringCompletionProvider: monacoTypes.languages.CompletionItemProvider = {\n            ...completionProvider,\n            provideCompletionItems: (model, position, context, token) => {\n              // if the model-id does not match, then this call is from a different editor-instance,\n              // not \"our instance\", so return nothing\n              if (editor.getModel()?.id !== model.id) {\n                return { suggestions: [] };\n              }\n              return completionProvider.provideCompletionItems(model, position, context, token);\n            },\n          };\n\n          const { dispose } = monaco.languages.registerCompletionItemProvider(\n            PROMQL_LANG_ID,\n            filteringCompletionProvider\n          );\n\n          autocompleteDisposeFun.current = dispose;\n          // this code makes the editor resize itself so that the content fits\n          // (it will grow taller when necessary)\n          // FIXME: maybe move this functionality into CodeEditor, like:\n          // <CodeEditor resizingMode=\"single-line\"/>\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          // handle: shift + enter\n          // FIXME: maybe move this functionality into CodeEditor?\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n};\n\n// we will lazy-load this module using React.lazy,\n// and that only supports default-exports,\n// so we have to default-export this, even if\n// it is against the style-guidelines.\n\nexport default MonacoQueryField;\n"],"names":["value","ref","useRef","current","promLanguageDefinition","id","extensions","aliases","mimetypes","loader","NeverCaseError","Error","constructor","super","move","node","direction","parent","firstChild","lastChild","nextSibling","walk","path","expectedType","type","name","getNodeText","text","slice","from","to","isPathMatch","resolverPath","cursorPath","every","item","index","ERROR_NODE_NAME","RESOLVERS","fun","pos","getNodeInSubtree","subTreeHasError","child","includes","metricNameNode","otherLabels","getLabels","metricName","resolveLabelMatcher","aggrExpNode","bodyNode","getChild","metricIdNode","idNode","LABEL_OP_MAP","Map","getLabel","labelMatcherNode","nameNode","opNode","op","opChild","get","getLabelOp","valueNode","inside","length","startsWith","endsWith","replace","parsePromQLStringLiteral","labelMatchersNode","listNode","labels","matcherNode","label","push","reverse","typeName","children","getNodeChildren","n","inStringNode","isError","labelNameNode","labelName","firstListNode","p","filter","betweenQuotes","async","getAllMetricNamesCompletions","dataProvider","getAllMetricNames","map","metric","insertText","detail","documentation","help","FUNCTION_COMPLETIONS","FUNCTIONS","f","getAllFunctionsAndMetricNamesCompletions","metricNames","DURATION_COMPLETIONS","makeSelector","allLabels","undefined","escapeLabelValueInExactSelector","join","getLabelNamesForCompletions","suffix","triggerOnInsert","labelNames","getAllLabelNames","selector","data","getSeries","possibleLabelNames","Object","keys","usedLabelNames","Set","l","has","getLabelNames","getLabelValuesForMetricCompletions","values","getLabelValues","getCompletions","situation","historyCompletions","getHistory","expr","getAllHistoryCompletions","getLabelNamesForSelectorCompletions","getLabelNamesForByCompletions","getMonacoCompletionItemKind","monaco","languages","CompletionItemKind","Unit","Variable","Snippet","Enum","EnumMember","Constructor","getCompletionProvider","triggerCharacters","provideCompletionItems","model","position","word","getWordAtPosition","range","Range","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","offset","getOffsetAt","tree","parser","maybeErrorNode","cur","cursor","next","getErrorNode","currentNode","names","resolver","getSituation","getValue","Promise","resolve","then","items","maxIndexDigits","toString","suggestions","kind","sortText","padStart","command","title","makeStorageService","strings","set","onDidChangeValue","onDidChangeTarget","onWillSaveState","key","scope","fallbackValue","getBoolean","val","getNumber","parseInt","store","target","delete","remove","Array","logStorage","console","log","migrate","isNew","flush","reason","overrideServices","options","codeLens","contextmenu","fixedOverflowWidgets","folding","fontSize","lineDecorationsWidth","lineNumbers","minimap","enabled","overviewRulerBorder","overviewRulerLanes","padding","top","bottom","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","suggest","showWords","suggestFontSize","wordWrap","PROMQL_LANG_ID","PROMQL_SETUP_STARTED","props","overrideServicesRef","storageService","containerRef","languageProvider","history","onBlur","onRunQuery","initialValue","lpRef","useLatest","historyRef","onRunQueryRef","onBlurRef","autocompleteDisposeFun","styles","theme","container","css","shape","borderRadius","components","input","borderColor","getStyles","useTheme2","useEffect","selectors","className","ReactMonacoEditor","language","beforeMount","register","mod","setMonarchTokensProvider","setLanguageConfiguration","languageConfiguration","ensurePromQL","onMount","editor","onDidBlurEditorWidget","completionProvider","h","query","metrics","metricsMetadata","result","m","metaItem","getLabelKeys","filteringCompletionProvider","context","token","getModel","dispose","registerCompletionItemProvider","updateElementHeight","containerDiv","pixelHeight","getContentHeight","style","height","width","pixelWidth","clientWidth","layout","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter"],"sourceRoot":""}