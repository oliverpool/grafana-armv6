{"version":3,"file":"NotificationsListPage.23208779bd80045f70f2.js","mappings":"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C,GAAI,CAACC,EAAQ,MAAM,eAAe,EAAG,CACnC,MAAMC,EAAkBD,EACrB,MAAM;AAAA,CAAI,EACV,IAAKE,GAAS,KAAOA,CAAI,EACzB,KAAK;AAAA,CAAI,EACZF,EAAU,cAAcF;AAAA,EAAqBG;AAAA,UAC/C,CACA,OAAOD,CACT,C,gBCAO,MAAMG,GAAyC,CACpD,CACE,KAAM,WACN,KAAM,SACN,MAAO,mEACT,EACA,CACE,KAAM,SACN,KAAM,SACN,MAAO,4DACT,EACA,CACE,KAAM,SACN,KAAM,UACN,MAAO,+DACT,EACA,CACE,KAAM,gBACN,KAAM,UACN,MAAO,uBACT,EACA,CACE,KAAM,kBACN,KAAM,UACN,MAAO,yBACT,EACA,CACE,KAAM,cACN,KAAM,WACN,MAAO,sCACT,EACA,CACE,KAAM,eACN,KAAM,WACN,MAAO,gEACT,EACA,CACE,KAAM,oBACN,KAAM,WACN,MAAO,qEACT,EACA,CACE,KAAM,cACN,KAAM,SACN,MAAO,sDACT,CACF,EAEaC,GAAwC,CACnD,CACE,KAAM,SACN,KAAM,SACN,MAAO,qBACT,EACA,CACE,KAAM,SACN,KAAM,WACN,MAAO,sCACT,EACA,CACE,KAAM,cACN,KAAM,WACN,MAAO,2CACT,EACA,CACE,KAAM,SACN,KAAM,WACN,MACE,6IACJ,EACA,CACE,KAAM,WACN,KAAM,YACN,MAAO,gCACT,EACA,CACE,KAAM,SACN,KAAM,YACN,MACE,gJACJ,EACA,CACE,KAAM,eACN,KAAM,SACN,MAAO,kDACT,EACA,CACE,KAAM,aACN,KAAM,SACN,MAAO,qGACT,EACA,CACE,KAAM,eACN,KAAM,SACN,MAAO,2FACT,EACA,CACE,KAAM,WACN,KAAM,SACN,MAAO,iGACT,EACA,CACE,KAAM,cACN,KAAM,SACN,MAAO,qDACT,EACA,CACE,KAAM,cACN,KAAM,SACN,MAAO,oFACT,CACF,EAEaC,GAAoD,CAC/D,CACE,KAAM,cACN,QAAS,WACT,MAAO,iDACT,EACA,CACE,KAAM,SACN,KAAM,WACN,QAAS,WACT,MAAO,6DACT,EACA,CACE,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","sources":["webpack://grafana/./public/app/features/alerting/NotificationsListPage.tsx","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/utils/cloud-alertmanager-notifier-types.ts","webpack://grafana/./public/app/features/alerting/unified/utils/receiver-form.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CloudCommonChannelSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useControlledFieldArray.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/KeyValueMapInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/StringArrayInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CollapsibleSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/styles.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/SubformArrayField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/SubformField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/OptionField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ChannelOptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ChannelSubForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/DeletedSubform.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CloudReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GrafanaCommonChannelSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/TestContactPointModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GrafanaReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/templates.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateData.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateDataDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/alertManagerSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/snippets.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/templateDataSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/autocomplete.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/definition.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/register.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/GlobalConfigForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/NewReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/NewTemplateView.tsx","webpack://grafana/./public/app/plugins/datasource/alertmanager/consts.ts","webpack://grafana/./public/app/features/alerting/unified/utils/receivers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/ReceiversSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/ReceiversTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplatesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/ReceiversAndTemplatesView.tsx","webpack://grafana/./public/app/features/alerting/unified/Receivers.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/GrafanaAppBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/api/onCallApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/onCall.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/usePluginBridge.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts","webpack://grafana/./public/app/features/alerting/unified/types/pluginBridges.ts"],"sourcesContent":["import React, { useState, FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { appEvents } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AlertNotification } from 'app/types/alerting';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\n\nconst NotificationsListPage: FC = () => {\n  const navModel = useNavModel('channels');\n\n  const [notifications, setNotifications] = useState<AlertNotification[]>([]);\n\n  const getNotifications = async () => {\n    return await getBackendSrv().get(`/api/alert-notifications`);\n  };\n\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then((res) => {\n      setNotifications(res);\n    });\n  }, [fetchNotifications]);\n\n  const deleteNotification = (id: number) => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: 'Do you want to delete this notification channel?',\n        text2: `Deleting this notification channel will not delete from alerts any references to it`,\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          deleteNotificationConfirmed(id);\n        },\n      })\n    );\n  };\n\n  const deleteNotificationConfirmed = async (id: number) => {\n    await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n    const notifications = await fetchNotifications();\n    setNotifications(notifications);\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {state.error && <p>{state.error}</p>}\n        {!!notifications.length && (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"page-action-bar__spacer\" />\n              <LinkButton icon=\"channel-add\" href=\"alerting/notification/new\">\n                New channel\n              </LinkButton>\n            </div>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: '200px' }}>\n                    <strong>Name</strong>\n                  </th>\n                  <th style={{ minWidth: '100px' }}>Type</th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>\n                {notifications.map((notification) => (\n                  <tr key={notification.id}>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.name}</a>\n                    </td>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.type}</a>\n                    </td>\n                    <td className=\"text-right\">\n                      <HorizontalGroup justify=\"flex-end\">\n                        {notification.isDefault && (\n                          <Button disabled variant=\"secondary\" size=\"sm\">\n                            default\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          icon=\"times\"\n                          size=\"sm\"\n                          onClick={() => {\n                            deleteNotification(notification.id);\n                          }}\n                        />\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n\n        {!(notifications.length || state.loading) && (\n          <EmptyListCTA\n            title=\"There are no notification channels defined yet\"\n            buttonIcon=\"channel-add\"\n            buttonLink=\"alerting/notification/new\"\n            buttonTitle=\"Add channel\"\n            proTip=\"You can include images in your alert notifications.\"\n            proTipLink=\"http://docs.grafana.org/alerting/notifications/\"\n            proTipLinkTitle=\"Learn more\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default NotificationsListPage;\n","import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { NotificationChannelOption, NotifierDTO } from 'app/types';\n\nfunction option(\n  propertyName: string,\n  label: string,\n  description: string,\n  rest: Partial<NotificationChannelOption> = {}\n): NotificationChannelOption {\n  return {\n    propertyName,\n    label,\n    description,\n    element: 'input',\n    inputType: '',\n    required: false,\n    secure: false,\n    placeholder: '',\n    validationRule: '',\n    showWhen: { field: '', is: '' },\n    dependsOn: '',\n    ...rest,\n  };\n}\n\nconst basicAuthOption: NotificationChannelOption = option(\n  'basic_auth',\n  'Basic auth',\n  'Sets the `Authorization` header with the configured username and password. Password and password_file are mutually exclusive.',\n  {\n    element: 'subform',\n    subformOptions: [\n      option('username', 'Username', ''),\n      option('password', 'Password', ''),\n      option('password_file', 'Password file', ''),\n    ],\n  }\n);\n\nconst tlsConfigOption: NotificationChannelOption = option('tls_config', 'TLS config', 'Configures the TLS settings.', {\n  element: 'subform',\n  subformOptions: [\n    option('ca_file', 'CA file', 'CA certificate to validate the server certificate with.'),\n    option('cert_file', 'Cert file', 'Certificate for client cert authentication to the server.'),\n    option('key_file', 'Key file', 'Key file for client cert authentication to the server.'),\n    option('server_name', 'Server name', 'ServerName extension to indicate the name of the server.'),\n    option('insecure_skip_verify', 'Skip verify', 'Disable validation of the server certificate.', {\n      element: 'checkbox',\n    }),\n  ],\n});\n\nconst httpConfigOption: NotificationChannelOption = option(\n  'http_config',\n  'HTTP Config',\n  'Note that `basic_auth`, `bearer_token` and `bearer_token_file` options are mutually exclusive.',\n  {\n    element: 'subform',\n    subformOptions: [\n      option('bearer_token', 'Bearer token', 'Sets the `Authorization` header with the configured bearer token.'),\n      option(\n        'bearer_token_file',\n        'Bearer token file',\n        'Sets the `Authorization` header with the bearer token read from the configured file.'\n      ),\n      option('proxy_url', 'Proxy URL', 'Optional proxy URL.'),\n      basicAuthOption,\n      tlsConfigOption,\n    ],\n  }\n);\n\nexport const cloudNotifierTypes: NotifierDTO[] = [\n  {\n    name: 'Email',\n    description: 'Send notification over SMTP',\n    type: 'email',\n    info: '',\n    heading: 'Email settings',\n    options: [\n      option('to', 'To', 'The email address to send notifications to.', { required: true }),\n      option('from', 'From', 'The sender address.'),\n      option('smarthost', 'SMTP host', 'The SMTP host through which emails are sent.'),\n      option('hello', 'Hello', 'The hostname to identify to the SMTP server.'),\n      option('auth_username', 'Username', 'SMTP authentication information'),\n      option('auth_password', 'Password', 'SMTP authentication information'),\n      option('auth_secret', 'Secret', 'SMTP authentication information'),\n      option('auth_identity', 'Identity', 'SMTP authentication information'),\n      option('require_tls', 'Require TLS', 'The SMTP TLS requirement', { element: 'checkbox' }),\n      option('html', 'Email HTML body', 'The HTML body of the email notification.', {\n        placeholder: '{{ template \"email.default.html\" . }}',\n        element: 'textarea',\n      }),\n      option('text', 'Email text body', 'The text body of the email notification.', { element: 'textarea' }),\n      option(\n        'headers',\n        'Headers',\n        'Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.',\n        { element: 'key_value_map' }\n      ),\n      tlsConfigOption,\n    ],\n  },\n  {\n    name: 'PagerDuty',\n    description: 'Send notifications to PagerDuty',\n    type: 'pagerduty',\n    info: '',\n    heading: 'PagerDuty settings',\n    options: [\n      option(\n        'routing_key',\n        'Routing key',\n        'The PagerDuty integration key (when using PagerDuty integration type `Events API v2`)'\n      ),\n      option(\n        'service_key',\n        'Service key',\n        'The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).'\n      ),\n      option('url', 'URL', 'The URL to send API requests to'),\n      option('client', 'Client', 'The client identification of the Alertmanager.', {\n        placeholder: '{{ template \"pagerduty.default.client\" . }}',\n      }),\n      option('client_url', 'Client URL', 'A backlink to the sender of the notification.', {\n        placeholder: '{{ template \"pagerduty.default.clientURL\" . }}',\n      }),\n      option('description', 'Description', 'A description of the incident.', {\n        placeholder: '{{ template \"pagerduty.default.description\" .}}',\n      }),\n      option('severity', 'Severity', 'Severity of the incident.', { placeholder: 'error' }),\n      option(\n        'details',\n        'Details',\n        'A set of arbitrary key/value pairs that provide further detail about the incident.',\n        {\n          element: 'key_value_map',\n        }\n      ),\n      option('images', 'Images', 'Images to attach to the incident.', {\n        element: 'subform_array',\n        subformOptions: [\n          option('href', 'URL', '', { required: true }),\n          option('source', 'Source', '', { required: true }),\n          option('alt', 'Alt', '', { required: true }),\n        ],\n      }),\n      option('links', 'Links', 'Links to attach to the incident.', {\n        element: 'subform_array',\n        subformOptions: [option('href', 'URL', '', { required: true }), option('text', 'Text', '', { required: true })],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Pushover',\n    description: 'Send notifications to Pushover',\n    type: 'pushover',\n    info: '',\n    heading: 'Pushover settings',\n    options: [\n      option('user_key', 'User key', 'The recipient user’s user key.', { required: true }),\n      option('token', 'Token', 'Your registered application’s API token, see https://pushover.net/app', {\n        required: true,\n      }),\n      option('title', 'Title', 'Notification title.', {\n        placeholder: '{{ template \"pushover.default.title\" . }}',\n      }),\n      option('message', 'Message', 'Notification message.', {\n        placeholder: '{{ template \"pushover.default.message\" . }}',\n      }),\n      option('url', 'URL', 'A supplementary URL shown alongside the message.', {\n        placeholder: '{{ template \"pushover.default.url\" . }}',\n      }),\n      option('priority', 'Priority', 'Priority, see https://pushover.net/api#priority', {\n        placeholder: '{{ if eq .Status \"firing\" }}2{{ else }}0{{ end }}',\n      }),\n      option(\n        'retry',\n        'Retry',\n        'How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.',\n        {\n          placeholder: '1m',\n        }\n      ),\n      option(\n        'expire',\n        'Expire',\n        'How long your notification will continue to be retried for, unless the user acknowledges the notification.',\n        {\n          placeholder: '1h',\n        }\n      ),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Slack',\n    description: 'Send notifications to Slack',\n    type: 'slack',\n    info: '',\n    heading: 'Slack settings',\n    options: [\n      option('api_url', 'Webhook URL', 'The Slack webhook URL.'),\n      option('channel', 'Channel', 'The #channel or @user to send notifications to.', { required: true }),\n      option('icon_emoji', 'Emoji icon', ''),\n      option('icon_url', 'Icon URL', ''),\n      option('link_names', 'Names link', '', { element: 'checkbox' }),\n      option('username', 'Username', '', { placeholder: '{{ template \"slack.default.username\" . }}' }),\n      option('callback_id', 'Callback ID', '', { placeholder: '{{ template \"slack.default.callbackid\" . }}' }),\n      option('color', 'Color', '', { placeholder: '{{ if eq .Status \"firing\" }}danger{{ else }}good{{ end }}' }),\n      option('fallback', 'Fallback', '', { placeholder: '{{ template \"slack.default.fallback\" . }}' }),\n      option('footer', 'Footer', '', { placeholder: '{{ template \"slack.default.footer\" . }}' }),\n      option('mrkdwn_in', 'Mrkdwn fields', 'An array of field names that should be formatted by mrkdwn syntax.', {\n        element: 'string_array',\n      }),\n      option('pretext', 'Pre-text', '', { placeholder: '{{ template \"slack.default.pretext\" . }}' }),\n      option('short_fields', 'Short fields', '', { element: 'checkbox' }),\n      option('text', 'Message body', '', { element: 'textarea', placeholder: '{{ template \"slack.default.text\" . }}' }),\n      option('title', 'Title', '', { placeholder: '{{ template \"slack.default.title\" . }}' }),\n      option('title_link', 'Title link', '', { placeholder: '{{ template \"slack.default.titlelink\" . }}' }),\n      option('image_url', 'Image URL', ''),\n      option('thumb_url', 'Thumbnail URL', ''),\n      option('actions', 'Actions', '', {\n        element: 'subform_array',\n        subformOptions: [\n          option('text', 'Text', '', { required: true }),\n          option('type', 'Type', '', { required: true }),\n          option('url', 'URL', 'Either url or name and value are mandatory.'),\n          option('name', 'Name', ''),\n          option('value', 'Value', ''),\n          option('confirm', 'Confirm', '', {\n            element: 'subform',\n            subformOptions: [\n              option('text', 'Text', '', { required: true }),\n              option('dismiss_text', 'Dismiss text', ''),\n              option('ok_text', 'OK text', ''),\n              option('title', 'Title', ''),\n            ],\n          }),\n          option('style', 'Style', ''),\n        ],\n      }),\n      option('fields', 'Fields', '', {\n        element: 'subform_array',\n        subformOptions: [\n          option('title', 'Title', '', { required: true }),\n          option('value', 'Value', '', { required: true }),\n          option('short', 'Short', '', { element: 'checkbox' }),\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'OpsGenie',\n    description: 'Send notifications to OpsGenie',\n    type: 'opsgenie',\n    info: '',\n    heading: 'OpsGenie settings',\n    options: [\n      option('api_key', 'API key', 'The API key to use when talking to the OpsGenie API.'),\n      option('api_url', 'API URL', 'The host to send OpsGenie API requests to.'),\n      option('message', 'Message', 'Alert text limited to 130 characters.'),\n      option('description', 'Description', 'A description of the incident.', {\n        placeholder: '{{ template \"opsgenie.default.description\" . }}',\n      }),\n      option('source', 'Source', 'A backlink to the sender of the notification.', {\n        placeholder: '{{ template \"opsgenie.default.source\" . }}',\n      }),\n      option(\n        'details',\n        'Details',\n        'A set of arbitrary key/value pairs that provide further detail about the incident.',\n        {\n          element: 'key_value_map',\n        }\n      ),\n      option('tags', 'Tags', 'Comma separated list of tags attached to the notifications.'),\n      option('note', 'Note', 'Additional alert note.'),\n      option('priority', 'Priority', 'Priority level of alert. Possible values are P1, P2, P3, P4, and P5.'),\n      option('responders', 'Responders', 'List of responders responsible for notifications.', {\n        element: 'subform_array',\n        subformOptions: [\n          option('type', 'Type', '\"team\", \"user\", \"escalation\" or schedule\".', { required: true }),\n          option('id', 'ID', 'Exactly one of these fields should be defined.'),\n          option('name', 'Name', 'Exactly one of these fields should be defined.'),\n          option('username', 'Username', 'Exactly one of these fields should be defined.'),\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'VictorOps',\n    description: 'Send notifications to VictorOps',\n    type: 'victorops',\n    info: '',\n    heading: 'VictorOps settings',\n    options: [\n      option('api_key', 'API key', 'The API key to use when talking to the VictorOps API.'),\n      option('api_url', 'API URL', 'The VictorOps API URL.'),\n      option('routing_key', 'Routing key', 'A key used to map the alert to a team.', { required: true }),\n      option('message_type', 'Message type', 'Describes the behavior of the alert (CRITICAL, WARNING, INFO).'),\n      option('entity_display_name', 'Entity display name', 'Contains summary of the alerted problem.', {\n        placeholder: '{{ template \"victorops.default.entity_display_name\" . }}',\n      }),\n      option('state_message', 'State message', 'Contains long explanation of the alerted problem.', {\n        placeholder: '{{ template \"victorops.default.state_message\" . }}',\n      }),\n      option('monitoring_tool', 'Monitoring tool', 'The monitoring tool the state message is from.', {\n        placeholder: '{{ template \"victorops.default.monitoring_tool\" . }}',\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Webhook',\n    description: 'Send notifications to a webhook',\n    type: 'webhook',\n    info: '',\n    heading: 'Webhook settings',\n    options: [\n      option('url', 'URL', 'The endpoint to send HTTP POST requests to.', { required: true }),\n      option(\n        'max_alerts',\n        'Max alerts',\n        'The maximum number of alerts to include in a single webhook message. Alerts above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.',\n        { placeholder: '0', validationRule: '(^\\\\d+$|^$)' }\n      ),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Discord',\n    description: 'Sends notifications to Discord',\n    type: 'discord',\n    info: '',\n    heading: 'Discord settings',\n    options: [\n      option('title', 'Title', 'Templated title of the message', {\n        placeholder: '{{ template \"discord.default.title\" . }}',\n      }),\n      option(\n        'message',\n        'Message Content',\n        'Mention a group using @ or a user using <@ID> when notifying in a channel',\n        { placeholder: '{{ template \"discord.default.message\" . }}' }\n      ),\n      option('webhook_url', 'Webhook URL', '', { placeholder: 'Discord webhook URL', required: true }),\n      httpConfigOption,\n    ],\n  },\n];\n\nexport const globalConfigOptions: NotificationChannelOption[] = [\n  // email\n  option('smtp_from', 'SMTP from', 'The default SMTP From header field.'),\n  option(\n    'smtp_smarthost',\n    'SMTP smarthost',\n    'The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS). Example: smtp.example.org:587'\n  ),\n  option('smtp_hello', 'SMTP hello', 'The default hostname to identify to the SMTP server.', {\n    placeholder: 'localhost',\n  }),\n  option(\n    'smtp_auth_username',\n    'SMTP auth username',\n    \"SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.\"\n  ),\n  option('smtp_auth_password', 'SMTP auth password', 'SMTP Auth using LOGIN and PLAIN.'),\n  option('smtp_auth_identity', 'SMTP auth identity', 'SMTP Auth using PLAIN.'),\n  option('smtp_auth_secret', 'SMTP auth secret', 'SMTP Auth using CRAM-MD5.'),\n  option(\n    'smtp_require_tls',\n    'SMTP require TLS',\n    'The default SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.',\n    {\n      element: 'checkbox',\n    }\n  ),\n\n  // slack\n  option('slack_api_url', 'Slack API URL', ''),\n  option('victorops_api_key', 'VictorOps API key', ''),\n  option('victorops_api_url', 'VictorOps API URL', '', {\n    placeholder: 'https://alert.victorops.com/integrations/generic/20131114/alert/',\n  }),\n  option('pagerduty_url', 'PagerDuty URL', 'https://events.pagerduty.com/v2/enqueue'),\n  option('opsgenie_api_key', 'OpsGenie API key', ''),\n  option('opsgenie_api_url', 'OpsGenie API URL', '', { placeholder: 'https://api.opsgenie.com/' }),\n  option('wechat_api_url', 'WeChat API URL', '', { placeholder: 'https://qyapi.weixin.qq.com/cgi-bin/' }),\n  option('wechat_api_secret', 'WeChat API secret', ''),\n  option('wechat_api_corp_id', 'WeChat API corp id', ''),\n  httpConfigOption,\n  option(\n    'resolve_timeout',\n    'Resolve timeout',\n    'ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.',\n    {\n      placeholder: '5m',\n    }\n  ),\n];\n","import { isArray } from 'lodash';\n\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedReceiverConfig,\n  Receiver,\n  Route,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { CloudNotifierType, NotifierDTO, NotifierType } from 'app/types';\n\nimport {\n  CloudChannelConfig,\n  CloudChannelMap,\n  CloudChannelValues,\n  GrafanaChannelMap,\n  GrafanaChannelValues,\n  ReceiverFormValues,\n} from '../types/receiver-form';\n\nexport function grafanaReceiverToFormValues(\n  receiver: Receiver,\n  notifiers: NotifierDTO[]\n): [ReceiverFormValues<GrafanaChannelValues>, GrafanaChannelMap] {\n  const channelMap: GrafanaChannelMap = {};\n  // giving each form receiver item a unique id so we can use it to map back to \"original\" items\n  // as well as to use as `key` prop.\n  // @TODO use uid once backend is fixed to provide it. then we can get rid of the GrafanaChannelMap\n  let idCounter = 1;\n  const values = {\n    name: receiver.name,\n    items:\n      receiver.grafana_managed_receiver_configs?.map((channel) => {\n        const id = String(idCounter++);\n        channelMap[id] = channel;\n        const notifier = notifiers.find(({ type }) => type === channel.type);\n        return grafanaChannelConfigToFormChannelValues(id, channel, notifier);\n      }) ?? [],\n  };\n  return [values, channelMap];\n}\n\nexport function cloudReceiverToFormValues(\n  receiver: Receiver,\n  notifiers: NotifierDTO[]\n): [ReceiverFormValues<CloudChannelValues>, CloudChannelMap] {\n  const channelMap: CloudChannelMap = {};\n  // giving each form receiver item a unique id so we can use it to map back to \"original\" items\n  let idCounter = 1;\n  const items: CloudChannelValues[] = Object.entries(receiver)\n    // filter out only config items that are relevant to cloud\n    .filter(([type]) => type.endsWith('_configs') && type !== 'grafana_managed_receiver_configs')\n    // map property names to cloud notifier types by removing the `_config` suffix\n    .map(([type, configs]): [CloudNotifierType, CloudChannelConfig[]] => [\n      type.replace('_configs', '') as CloudNotifierType,\n      configs as CloudChannelConfig[],\n    ])\n    // convert channel configs to form values\n    .map(([type, configs]) =>\n      configs.map((config) => {\n        const id = String(idCounter++);\n        channelMap[id] = { type, config };\n        const notifier = notifiers.find((notifier) => notifier.type === type);\n        if (!notifier) {\n          throw new Error(`unknown cloud notifier: ${type}`);\n        }\n        return cloudChannelConfigToFormChannelValues(id, type, config);\n      })\n    )\n    .flat();\n  const values = {\n    name: receiver.name,\n    items,\n  };\n  return [values, channelMap];\n}\n\nexport function formValuesToGrafanaReceiver(\n  values: ReceiverFormValues<GrafanaChannelValues>,\n  channelMap: GrafanaChannelMap,\n  defaultChannelValues: GrafanaChannelValues\n): Receiver {\n  return {\n    name: values.name,\n    grafana_managed_receiver_configs: (values.items ?? []).map((channelValues) => {\n      const existing: GrafanaManagedReceiverConfig | undefined = channelMap[channelValues.__id];\n      return formChannelValuesToGrafanaChannelConfig(channelValues, defaultChannelValues, values.name, existing);\n    }),\n  };\n}\n\nexport function formValuesToCloudReceiver(\n  values: ReceiverFormValues<CloudChannelValues>,\n  defaults: CloudChannelValues\n): Receiver {\n  const recv: Receiver = {\n    name: values.name,\n  };\n  values.items.forEach(({ __id, type, settings, sendResolved }) => {\n    const channel = omitEmptyValues({\n      ...settings,\n      send_resolved: sendResolved ?? defaults.sendResolved,\n    });\n\n    const configsKey = `${type}_configs`;\n    if (!recv[configsKey]) {\n      recv[configsKey] = [channel];\n    } else {\n      (recv[configsKey] as unknown[]).push(channel);\n    }\n  });\n  return recv;\n}\n\n// will add new receiver, or replace exisitng one\nexport function updateConfigWithReceiver(\n  config: AlertManagerCortexConfig,\n  receiver: Receiver,\n  replaceReceiverName?: string\n): AlertManagerCortexConfig {\n  const oldReceivers = config.alertmanager_config.receivers ?? [];\n\n  // sanity check that name is not duplicated\n  if (receiver.name !== replaceReceiverName && !!oldReceivers.find(({ name }) => name === receiver.name)) {\n    throw new Error(`Duplicate receiver name ${receiver.name}`);\n  }\n\n  // sanity check that existing receiver exists\n  if (replaceReceiverName && !oldReceivers.find(({ name }) => name === replaceReceiverName)) {\n    throw new Error(`Expected receiver ${replaceReceiverName} to exist, but did not find it in the config`);\n  }\n\n  const updated: AlertManagerCortexConfig = {\n    ...config,\n    alertmanager_config: {\n      // @todo rename receiver on routes as necessary\n      ...config.alertmanager_config,\n      receivers: replaceReceiverName\n        ? oldReceivers.map((existingReceiver) =>\n            existingReceiver.name === replaceReceiverName ? receiver : existingReceiver\n          )\n        : [...oldReceivers, receiver],\n    },\n  };\n\n  // if receiver was renamed, rename it in routes as well\n  if (updated.alertmanager_config.route && replaceReceiverName && receiver.name !== replaceReceiverName) {\n    updated.alertmanager_config.route = renameReceiverInRoute(\n      updated.alertmanager_config.route,\n      replaceReceiverName,\n      receiver.name\n    );\n  }\n\n  return updated;\n}\n\nfunction renameReceiverInRoute(route: Route, oldName: string, newName: string) {\n  const updated: Route = {\n    ...route,\n  };\n  if (updated.receiver === oldName) {\n    updated.receiver = newName;\n  }\n  if (updated.routes) {\n    updated.routes = updated.routes.map((route) => renameReceiverInRoute(route, oldName, newName));\n  }\n  return updated;\n}\n\nfunction cloudChannelConfigToFormChannelValues(\n  id: string,\n  type: CloudNotifierType,\n  channel: CloudChannelConfig\n): CloudChannelValues {\n  return {\n    __id: id,\n    type,\n    settings: {\n      ...channel,\n    },\n    secureFields: {},\n    secureSettings: {},\n    sendResolved: channel.send_resolved,\n  };\n}\n\nfunction grafanaChannelConfigToFormChannelValues(\n  id: string,\n  channel: GrafanaManagedReceiverConfig,\n  notifier?: NotifierDTO\n): GrafanaChannelValues {\n  const values: GrafanaChannelValues = {\n    __id: id,\n    type: channel.type as NotifierType,\n    provenance: channel.provenance,\n    secureSettings: {},\n    settings: { ...channel.settings },\n    secureFields: { ...channel.secureFields },\n    disableResolveMessage: channel.disableResolveMessage,\n  };\n\n  // work around https://github.com/grafana/alerting-squad/issues/100\n  notifier?.options.forEach((option) => {\n    if (option.secure && values.settings[option.propertyName]) {\n      delete values.settings[option.propertyName];\n      values.secureFields[option.propertyName] = true;\n    }\n  });\n\n  return values;\n}\n\nexport function formChannelValuesToGrafanaChannelConfig(\n  values: GrafanaChannelValues,\n  defaults: GrafanaChannelValues,\n  name: string,\n  existing?: GrafanaManagedReceiverConfig\n): GrafanaManagedReceiverConfig {\n  const channel: GrafanaManagedReceiverConfig = {\n    settings: omitEmptyValues({\n      ...(existing && existing.type === values.type ? existing.settings ?? {} : {}),\n      ...(values.settings ?? {}),\n    }),\n    secureSettings: values.secureSettings ?? {},\n    type: values.type,\n    name,\n    disableResolveMessage:\n      values.disableResolveMessage ?? existing?.disableResolveMessage ?? defaults.disableResolveMessage,\n  };\n  if (existing) {\n    channel.uid = existing.uid;\n  }\n  return channel;\n}\n\n// will remove properties that have empty ('', null, undefined) object properties.\n// traverses nested objects and arrays as well. in place, mutates the object.\n// this is needed because form will submit empty string for not filled in fields,\n// but for cloud alertmanager receiver config to use global default value the property must be omitted entirely\n// this isn't a perfect solution though. No way for user to intentionally provide an empty string. Will need rethinking later\nexport function omitEmptyValues<T>(obj: T): T {\n  if (isArray(obj)) {\n    obj.forEach(omitEmptyValues);\n  } else if (typeof obj === 'object' && obj !== null) {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (value === '' || value === null || value === undefined) {\n        delete (obj as any)[key];\n      } else {\n        omitEmptyValues(value);\n      }\n    });\n  }\n  return obj;\n}\n","import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field } from '@grafana/ui';\n\nimport { CommonSettingsComponentProps } from '../../../types/receiver-form';\n\nexport const CloudCommonChannelSettings: FC<CommonSettingsComponentProps> = ({\n  pathPrefix,\n  className,\n  readOnly = false,\n}) => {\n  const { register } = useFormContext();\n  return (\n    <div className={className}>\n      <Field disabled={readOnly}>\n        <Checkbox\n          {...register(`${pathPrefix}sendResolved`)}\n          label=\"Send resolved\"\n          disabled={readOnly}\n          description=\"Whether or not to notify about resolved alerts.\"\n        />\n      </Field>\n    </div>\n  );\n};\n","import { set } from 'lodash';\nimport { useCallback } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\n\ninterface Options<R> {\n  name: string;\n  formAPI: UseFormReturn<any>;\n  defaults?: R[];\n\n  // if true, sets `__deleted: true` but does not remove item from the array in values\n  softDelete?: boolean;\n}\n\nexport type ControlledField<R> = R & {\n  __deleted?: boolean;\n};\n\nconst EMPTY_ARRAY = [] as const;\n\n/*\n * react-hook-form's own useFieldArray is uncontrolled and super buggy.\n * this is a simple controlled version. It's dead simple and more robust at the cost of re-rendering the form\n * on every change to the sub forms in the array.\n * Warning: you'll have to take care of your own unique identiifer to use as `key` for the ReactNode array.\n * Using index will cause problems.\n */\nexport function useControlledFieldArray<R>(options: Options<R>) {\n  const { name, formAPI, defaults, softDelete } = options;\n  const { watch, getValues, reset, setValue } = formAPI;\n\n  const fields: Array<ControlledField<R>> = watch(name) ?? defaults ?? EMPTY_ARRAY;\n\n  const update = useCallback(\n    (updateFn: (fields: R[]) => R[]) => {\n      const values = JSON.parse(JSON.stringify(getValues()));\n      const newItems = updateFn(fields ?? []);\n      reset(set(values, name, newItems));\n    },\n    [getValues, name, reset, fields]\n  );\n\n  return {\n    fields,\n    append: useCallback((values: R) => update((fields) => [...fields, values]), [update]),\n    remove: useCallback(\n      (index: number) => {\n        if (softDelete) {\n          setValue(`${name}.${index}.__deleted`, true);\n        } else {\n          update((items) => {\n            const newItems = items.slice();\n            newItems.splice(index, 1);\n            return newItems;\n          });\n        }\n      },\n      [update, name, setValue, softDelete]\n    ),\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { FC, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, useStyles2 } from '@grafana/ui';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\ninterface Props {\n  value?: Record<string, string>;\n  readOnly?: boolean;\n  onChange: (value: Record<string, string>) => void;\n}\n\nexport const KeyValueMapInput: FC<Props> = ({ value, onChange, readOnly = false }) => {\n  const styles = useStyles2(getStyles);\n  const [pairs, setPairs] = useState(recordToPairs(value));\n  useEffect(() => setPairs(recordToPairs(value)), [value]);\n\n  const emitChange = (pairs: Array<[string, string]>) => {\n    onChange(pairsToRecord(pairs));\n  };\n\n  const deleteItem = (index: number) => {\n    const newPairs = pairs.slice();\n    const removed = newPairs.splice(index, 1)[0];\n    setPairs(newPairs);\n    if (removed[0]) {\n      emitChange(newPairs);\n    }\n  };\n\n  const updatePair = (values: [string, string], index: number) => {\n    const old = pairs[index];\n    const newPairs = pairs.map((pair, i) => (i === index ? values : pair));\n    setPairs(newPairs);\n    if (values[0] || old[0]) {\n      emitChange(newPairs);\n    }\n  };\n\n  return (\n    <div>\n      {!!pairs.length && (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n              {!readOnly && <th></th>}\n            </tr>\n          </thead>\n          <tbody>\n            {pairs.map(([key, value], index) => (\n              <tr key={index}>\n                <td>\n                  <Input\n                    readOnly={readOnly}\n                    value={key}\n                    onChange={(e) => updatePair([e.currentTarget.value, value], index)}\n                  />\n                </td>\n                <td>\n                  <Input\n                    readOnly={readOnly}\n                    value={value}\n                    onChange={(e) => updatePair([key, e.currentTarget.value], index)}\n                  />\n                </td>\n                {!readOnly && (\n                  <td>\n                    <ActionIcon icon=\"trash-alt\" tooltip=\"delete\" onClick={() => deleteItem(index)} />\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      {!readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => setPairs([...pairs, ['', '']])}\n        >\n          Add\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  table: css`\n    tbody td {\n      padding: 0 ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    }\n  `,\n});\n\nconst pairsToRecord = (pairs: Array<[string, string]>): Record<string, string> => {\n  const record: Record<string, string> = {};\n  for (const [key, value] of pairs) {\n    if (key) {\n      record[key] = value;\n    }\n  }\n  return record;\n};\n\nconst recordToPairs = (obj?: Record<string, string>): Array<[string, string]> => Object.entries(obj ?? {});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, useStyles2 } from '@grafana/ui';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\ninterface Props {\n  value?: string[];\n  readOnly?: boolean;\n  onChange: (value: string[]) => void;\n}\n\nexport const StringArrayInput: FC<Props> = ({ value, onChange, readOnly = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const deleteItem = (index: number) => {\n    if (!value) {\n      return;\n    }\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    onChange(newValue);\n  };\n\n  const updateValue = (itemValue: string, index: number) => {\n    if (!value) {\n      return;\n    }\n    onChange(value.map((v, i) => (i === index ? itemValue : v)));\n  };\n\n  return (\n    <div>\n      {!!value?.length &&\n        value.map((v, index) => (\n          <div key={index} className={styles.row}>\n            <Input readOnly={readOnly} value={v} onChange={(e) => updateValue(e.currentTarget.value, index)} />\n            {!readOnly && (\n              <ActionIcon\n                className={styles.deleteIcon}\n                icon=\"trash-alt\"\n                tooltip=\"delete\"\n                onClick={() => deleteItem(index)}\n              />\n            )}\n          </div>\n        ))}\n      {!readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => onChange([...(value ?? []), ''])}\n        >\n          Add\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(1)};\n    align-items: center;\n  `,\n  deleteIcon: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  addButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconSize, useStyles2 } from '@grafana/ui';\n\nimport { CollapseToggle } from '../../CollapseToggle';\n\ninterface Props {\n  label: string;\n  description?: string;\n  className?: string;\n  size?: IconSize;\n}\n\nexport const CollapsibleSection = ({\n  label,\n  description,\n  children,\n  className,\n  size = 'xl',\n}: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const toggleCollapse = () => setIsCollapsed(!isCollapsed);\n\n  return (\n    <div className={cx(styles.wrapper, className)}>\n      <div className={styles.heading} onClick={toggleCollapse}>\n        <CollapseToggle className={styles.caret} size={size} onToggle={toggleCollapse} isCollapsed={isCollapsed} />\n        <h6>{label}</h6>\n      </div>\n      {description && <p className={styles.description}>{description}</p>}\n      <div className={isCollapsed ? styles.hidden : undefined}>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n  caret: css`\n    margin-left: -${theme.spacing(0.5)}; // make it align with fields despite icon size\n  `,\n  heading: css`\n    cursor: pointer;\n    h6 {\n      display: inline-block;\n    }\n  `,\n  hidden: css`\n    display: none;\n  `,\n  description: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n    font-weight: ${theme.typography.fontWeightRegular};\n    margin: 0;\n  `,\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getReceiverFormFieldStyles = (theme: GrafanaTheme2) => ({\n  collapsibleSection: css`\n    margin: 0;\n    padding: 0;\n  `,\n  wrapper: css`\n    margin: ${theme.spacing(2, 0)};\n    padding: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n    position: relative;\n  `,\n  description: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n    font-weight: ${theme.typography.fontWeightRegular};\n    margin: 0;\n  `,\n  deleteIcon: css`\n    position: absolute;\n    right: ${theme.spacing(1)};\n    top: ${theme.spacing(1)};\n  `,\n  addButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import React, { FC } from 'react';\nimport { FieldError, DeepMap, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useControlledFieldArray } from 'app/features/alerting/unified/hooks/useControlledFieldArray';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\nimport { CollapsibleSection } from '../CollapsibleSection';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValues?: any[];\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: Array<DeepMap<any, FieldError>>;\n  readOnly?: boolean;\n}\n\nexport const SubformArrayField: FC<Props> = ({ option, pathPrefix, errors, defaultValues, readOnly = false }) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const path = `${pathPrefix}${option.propertyName}`;\n  const formAPI = useFormContext();\n  const { fields, append, remove } = useControlledFieldArray({ name: path, formAPI, defaults: defaultValues });\n\n  return (\n    <div className={styles.wrapper}>\n      <CollapsibleSection\n        className={styles.collapsibleSection}\n        label={`${option.label} (${fields.length})`}\n        description={option.description}\n      >\n        {(fields ?? defaultValues ?? []).map((field, itemIndex) => {\n          return (\n            <div key={itemIndex} className={styles.wrapper}>\n              {!readOnly && (\n                <ActionIcon\n                  data-testid={`${path}.${itemIndex}.delete-button`}\n                  icon=\"trash-alt\"\n                  tooltip=\"delete\"\n                  onClick={() => remove(itemIndex)}\n                  className={styles.deleteIcon}\n                />\n              )}\n              {option.subformOptions?.map((option) => (\n                <OptionField\n                  readOnly={readOnly}\n                  defaultValue={field?.[option.propertyName]}\n                  key={option.propertyName}\n                  option={option}\n                  pathPrefix={`${path}.${itemIndex}.`}\n                  error={errors?.[itemIndex]?.[option.propertyName]}\n                />\n              ))}\n            </div>\n          );\n        })}\n        {!readOnly && (\n          <Button\n            data-testid={`${path}.add-button`}\n            className={styles.addButton}\n            type=\"button\"\n            variant=\"secondary\"\n            icon=\"plus\"\n            size=\"sm\"\n            onClick={() => append({ __id: String(Math.random()) })}\n          >\n            Add\n          </Button>\n        )}\n      </CollapsibleSection>\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { FieldError, DeepMap, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: DeepMap<any, FieldError>;\n  readOnly?: boolean;\n}\n\nexport const SubformField: FC<Props> = ({ option, pathPrefix, errors, defaultValue, readOnly = false }) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const name = `${pathPrefix}${option.propertyName}`;\n  const { watch } = useFormContext();\n  const _watchValue = watch(name);\n  const value = _watchValue === undefined ? defaultValue : _watchValue;\n\n  const [show, setShow] = useState(!!value);\n\n  return (\n    <div className={styles.wrapper} data-testid={`${name}.container`}>\n      <h6>{option.label}</h6>\n      {option.description && <p className={styles.description}>{option.description}</p>}\n      {show && (\n        <>\n          {!readOnly && (\n            <ActionIcon\n              data-testid={`${name}.delete-button`}\n              icon=\"trash-alt\"\n              tooltip=\"delete\"\n              onClick={() => setShow(false)}\n              className={styles.deleteIcon}\n            />\n          )}\n          {(option.subformOptions ?? []).map((subOption) => {\n            return (\n              <OptionField\n                readOnly={readOnly}\n                defaultValue={defaultValue?.[subOption.propertyName]}\n                key={subOption.propertyName}\n                option={subOption}\n                pathPrefix={`${name}.`}\n                error={errors?.[subOption.propertyName]}\n              />\n            );\n          })}\n        </>\n      )}\n      {!show && !readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => setShow(true)}\n          data-testid={`${name}.add-button`}\n        >\n          Add\n        </Button>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { FC, useEffect } from 'react';\nimport { useFormContext, FieldError, DeepMap } from 'react-hook-form';\n\nimport { Checkbox, Field, Input, InputControl, Select, TextArea } from '@grafana/ui';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { KeyValueMapInput } from './KeyValueMapInput';\nimport { StringArrayInput } from './StringArrayInput';\nimport { SubformArrayField } from './SubformArrayField';\nimport { SubformField } from './SubformField';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  invalid?: boolean;\n  pathPrefix: string;\n  pathSuffix?: string;\n  error?: FieldError | DeepMap<any, FieldError>;\n  readOnly?: boolean;\n}\n\nexport const OptionField: FC<Props> = ({\n  option,\n  invalid,\n  pathPrefix,\n  pathSuffix = '',\n  error,\n  defaultValue,\n  readOnly = false,\n}) => {\n  const optionPath = `${pathPrefix}${pathSuffix}`;\n\n  if (option.element === 'subform') {\n    return (\n      <SubformField\n        readOnly={readOnly}\n        defaultValue={defaultValue}\n        option={option}\n        errors={error as DeepMap<any, FieldError> | undefined}\n        pathPrefix={optionPath}\n      />\n    );\n  }\n  if (option.element === 'subform_array') {\n    return (\n      <SubformArrayField\n        readOnly={readOnly}\n        defaultValues={defaultValue}\n        option={option}\n        pathPrefix={optionPath}\n        errors={error as Array<DeepMap<any, FieldError>> | undefined}\n      />\n    );\n  }\n  return (\n    <Field\n      label={option.element !== 'checkbox' ? option.label : undefined}\n      description={option.description || undefined}\n      invalid={!!error}\n      error={error?.message}\n    >\n      <OptionInput\n        id={`${optionPath}${option.propertyName}`}\n        defaultValue={defaultValue}\n        option={option}\n        invalid={invalid}\n        pathPrefix={optionPath}\n        readOnly={readOnly}\n        pathIndex={pathPrefix}\n      />\n    </Field>\n  );\n};\n\nconst OptionInput: FC<Props & { id: string; pathIndex?: string }> = ({\n  option,\n  invalid,\n  id,\n  pathPrefix = '',\n  pathIndex = '',\n  readOnly = false,\n}) => {\n  const { control, register, unregister, getValues } = useFormContext();\n  const name = `${pathPrefix}${option.propertyName}`;\n\n  // workaround for https://github.com/react-hook-form/react-hook-form/issues/4993#issuecomment-829012506\n  useEffect(\n    () => () => {\n      unregister(name, { keepValue: false });\n    },\n    [unregister, name]\n  );\n  switch (option.element) {\n    case 'checkbox':\n      return (\n        <Checkbox\n          id={id}\n          readOnly={readOnly}\n          disabled={readOnly}\n          className={styles.checkbox}\n          {...register(name)}\n          label={option.label}\n          description={option.description}\n        />\n      );\n    case 'input':\n      return (\n        <Input\n          id={id}\n          readOnly={readOnly || determineReadOnly(option, getValues, pathIndex)}\n          invalid={invalid}\n          type={option.inputType}\n          {...register(name, {\n            required: determineRequired(option, getValues, pathIndex),\n            validate: (v) => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n          placeholder={option.placeholder}\n        />\n      );\n\n    case 'select':\n      return (\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              disabled={readOnly}\n              {...field}\n              options={option.selectOptions ?? undefined}\n              invalid={invalid}\n              onChange={(value) => onChange(value.value)}\n            />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n\n    case 'textarea':\n      return (\n        <TextArea\n          id={id}\n          readOnly={readOnly}\n          invalid={invalid}\n          placeholder={option.placeholder}\n          {...register(name, {\n            required: option.required ? 'Required' : false,\n            validate: (v) => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n        />\n      );\n    case 'string_array':\n      return (\n        <InputControl\n          render={({ field: { value, onChange } }) => (\n            <StringArrayInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n    case 'key_value_map':\n      return (\n        <InputControl\n          render={({ field: { value, onChange } }) => (\n            <KeyValueMapInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n\n    default:\n      console.error('Element not supported', option.element);\n      return null;\n  }\n};\n\nconst styles = {\n  checkbox: css`\n    height: auto; // native checkbox has fixed height which does not take into account description\n  `,\n};\n\nconst validateOption = (value: string, validationRule: string) => {\n  return RegExp(validationRule).test(value) ? true : 'Invalid format';\n};\n\nconst determineRequired = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return option.required ? 'Required' : false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    const dependentOn = getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n    return !Boolean(dependentOn) && option.required ? 'Required' : false;\n  } else {\n    const dependentOn: boolean = getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n    return !dependentOn && option.required ? 'Required' : false;\n  }\n};\n\nconst determineReadOnly = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    return getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n  } else {\n    return getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n  }\n};\n","import React from 'react';\nimport { useFormContext, FieldError, FieldErrors, DeepMap } from 'react-hook-form';\n\nimport { Button, Field, Input } from '@grafana/ui';\nimport { NotificationChannelOption, NotificationChannelSecureFields } from 'app/types';\n\nimport { ChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\n\nimport { OptionField } from './fields/OptionField';\n\nexport interface Props<R extends ChannelValues> {\n  defaultValues: R;\n  selectedChannelOptions: NotificationChannelOption[];\n  secureFields: NotificationChannelSecureFields;\n\n  onResetSecureField: (key: string) => void;\n  errors?: FieldErrors<R>;\n  pathPrefix?: string;\n  readOnly?: boolean;\n}\n\nexport function ChannelOptions<R extends ChannelValues>({\n  defaultValues,\n  selectedChannelOptions,\n  onResetSecureField,\n  secureFields,\n  errors,\n  pathPrefix = '',\n  readOnly = false,\n}: Props<R>): JSX.Element {\n  const { watch } = useFormContext<ReceiverFormValues<R>>();\n  const currentFormValues = watch(); // react hook form types ARE LYING!\n  return (\n    <>\n      {selectedChannelOptions.map((option: NotificationChannelOption, index: number) => {\n        const key = `${option.label}-${index}`;\n        // Some options can be dependent on other options, this determines what is selected in the dependency options\n        // I think this needs more thought.\n        // pathPrefix = items.index.\n        const paths = pathPrefix.split('.');\n        const selectedOptionValue =\n          paths.length >= 2 ? currentFormValues.items[Number(paths[1])].settings[option.showWhen.field] : undefined;\n\n        if (option.showWhen.field && selectedOptionValue !== option.showWhen.is) {\n          return null;\n        }\n\n        if (secureFields && secureFields[option.propertyName]) {\n          return (\n            <Field key={key} label={option.label} description={option.description || undefined}>\n              <Input\n                readOnly={true}\n                value=\"Configured\"\n                suffix={\n                  readOnly ? null : (\n                    <Button onClick={() => onResetSecureField(option.propertyName)} fill=\"text\" type=\"button\" size=\"sm\">\n                      Clear\n                    </Button>\n                  )\n                }\n              />\n            </Field>\n          );\n        }\n\n        const error: FieldError | DeepMap<any, FieldError> | undefined = (\n          (option.secure ? errors?.secureSettings : errors?.settings) as DeepMap<any, FieldError> | undefined\n        )?.[option.propertyName];\n\n        const defaultValue = defaultValues?.settings?.[option.propertyName];\n\n        return (\n          <OptionField\n            defaultValue={defaultValue}\n            readOnly={readOnly}\n            key={key}\n            error={error}\n            pathPrefix={pathPrefix}\n            pathSuffix={option.secure ? 'secureSettings.' : 'settings.'}\n            option={option}\n          />\n        );\n      })}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useFormContext, FieldErrors, FieldValues } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Button, Field, InputControl, Select, useStyles2 } from '@grafana/ui';\nimport { NotifierDTO } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelValues, CommonSettingsComponentType } from '../../../types/receiver-form';\n\nimport { ChannelOptions } from './ChannelOptions';\nimport { CollapsibleSection } from './CollapsibleSection';\n\ninterface Props<R extends FieldValues> {\n  defaultValues: R;\n  pathPrefix: string;\n  notifiers: NotifierDTO[];\n  onDuplicate: () => void;\n  onTest?: () => void;\n  commonSettingsComponent: CommonSettingsComponentType;\n\n  secureFields?: Record<string, boolean>;\n  errors?: FieldErrors<R>;\n  onDelete?: () => void;\n  isEditable?: boolean;\n  isTestable?: boolean;\n}\n\nexport function ChannelSubForm<R extends ChannelValues>({\n  defaultValues,\n  pathPrefix,\n  onDuplicate,\n  onDelete,\n  onTest,\n  notifiers,\n  errors,\n  secureFields,\n  commonSettingsComponent: CommonSettingsComponent,\n  isEditable = true,\n  isTestable,\n}: Props<R>): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const name = (fieldName: string) => `${pathPrefix}${fieldName}`;\n  const { control, watch, register, trigger, formState, setValue } = useFormContext();\n  const selectedType = watch(name('type')) ?? defaultValues.type; // nope, setting \"default\" does not work at all.\n  const { loading: testingReceiver } = useUnifiedAlertingSelector((state) => state.testReceivers);\n\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    /* Need to manually register secureFields or else they'll\n     be lost when testing a contact point */\n    register(`${pathPrefix}.secureFields`);\n  }, [register, pathPrefix]);\n\n  const [_secureFields, setSecureFields] = useState(secureFields ?? {});\n\n  const onResetSecureField = (key: string) => {\n    if (_secureFields[key]) {\n      const updatedSecureFields = { ...secureFields };\n      delete updatedSecureFields[key];\n      setSecureFields(updatedSecureFields);\n      setValue(`${pathPrefix}.secureFields`, updatedSecureFields);\n    }\n  };\n\n  const typeOptions = useMemo(\n    (): SelectableValue[] =>\n      notifiers\n        .map(({ name, type }) => ({\n          label: name,\n          value: type,\n        }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [notifiers]\n  );\n\n  const handleTest = async () => {\n    await trigger();\n    const isValid = Object.keys(formState.errors).length === 0;\n\n    if (isValid && onTest) {\n      onTest();\n    }\n  };\n\n  const notifier = notifiers.find(({ type }) => type === selectedType);\n  // if there are mandatory options defined, optional options will be hidden by a collapse\n  // if there aren't mandatory options, all options will be shown without collapse\n  const mandatoryOptions = notifier?.options.filter((o) => o.required);\n  const optionalOptions = notifier?.options.filter((o) => !o.required);\n\n  const contactPointTypeInputId = `contact-point-type-${pathPrefix}`;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"item-container\">\n      <div className={styles.topRow}>\n        <div>\n          <Field label=\"Integration\" htmlFor={contactPointTypeInputId} data-testid={`${pathPrefix}type`}>\n            <InputControl\n              name={name('type')}\n              defaultValue={defaultValues.type}\n              render={({ field: { ref, onChange, ...field } }) => (\n                <Select\n                  disabled={!isEditable}\n                  inputId={contactPointTypeInputId}\n                  {...field}\n                  width={37}\n                  options={typeOptions}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              control={control}\n              rules={{ required: true }}\n            />\n          </Field>\n        </div>\n        <div className={styles.buttons}>\n          {isTestable && onTest && (\n            <Button\n              disabled={testingReceiver}\n              size=\"xs\"\n              variant=\"secondary\"\n              type=\"button\"\n              onClick={() => handleTest()}\n              icon={testingReceiver ? 'fa fa-spinner' : 'message'}\n            >\n              Test\n            </Button>\n          )}\n          {isEditable && (\n            <>\n              <Button size=\"xs\" variant=\"secondary\" type=\"button\" onClick={() => onDuplicate()} icon=\"copy\">\n                Duplicate\n              </Button>\n              {onDelete && (\n                <Button\n                  data-testid={`${pathPrefix}delete-button`}\n                  size=\"xs\"\n                  variant=\"secondary\"\n                  type=\"button\"\n                  onClick={() => onDelete()}\n                  icon=\"trash-alt\"\n                >\n                  Delete\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      {notifier && (\n        <div className={styles.innerContent}>\n          <ChannelOptions<R>\n            defaultValues={defaultValues}\n            selectedChannelOptions={mandatoryOptions?.length ? mandatoryOptions! : optionalOptions!}\n            secureFields={_secureFields}\n            errors={errors}\n            onResetSecureField={onResetSecureField}\n            pathPrefix={pathPrefix}\n            readOnly={!isEditable}\n          />\n          {!!(mandatoryOptions?.length && optionalOptions?.length) && (\n            <CollapsibleSection label={`Optional ${notifier.name} settings`}>\n              {notifier.info !== '' && (\n                <Alert title=\"\" severity=\"info\">\n                  {notifier.info}\n                </Alert>\n              )}\n              <ChannelOptions<R>\n                defaultValues={defaultValues}\n                selectedChannelOptions={optionalOptions!}\n                secureFields={_secureFields}\n                onResetSecureField={onResetSecureField}\n                errors={errors}\n                pathPrefix={pathPrefix}\n                readOnly={!isEditable}\n              />\n            </CollapsibleSection>\n          )}\n          <CollapsibleSection label=\"Notification settings\">\n            <CommonSettingsComponent pathPrefix={pathPrefix} readOnly={!isEditable} />\n          </CollapsibleSection>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  innerContent: css`\n    max-width: 536px;\n  `,\n  wrapper: css`\n    margin: ${theme.spacing(2, 0)};\n    padding: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n    max-width: ${theme.breakpoints.values.xl}${theme.breakpoints.unit};\n  `,\n  topRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  `,\n  channelSettingsHeader: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import React, { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\ninterface Props {\n  pathPrefix: string;\n}\n\n// we can't drop the deleted item from list entirely because\n// there will be a rece condition with register/unregister calls in react-hook-form\n// and fields will become randomly erroneously unregistered\nexport function DeletedSubForm({ pathPrefix }: Props): JSX.Element {\n  const { register } = useFormContext();\n\n  // required to be registered or react-hook-form will randomly drop the values when it feels like it\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    register(`${pathPrefix}.__deleted`);\n  }, [register, pathPrefix]);\n\n  return <></>;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { useForm, FormProvider, FieldErrors, Validate } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Field, Input, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO } from 'app/types';\n\nimport { useControlledFieldArray } from '../../../hooks/useControlledFieldArray';\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelValues, CommonSettingsComponentType, ReceiverFormValues } from '../../../types/receiver-form';\nimport { makeAMLink } from '../../../utils/misc';\nimport { initialAsyncRequestState } from '../../../utils/redux';\n\nimport { ChannelSubForm } from './ChannelSubForm';\nimport { DeletedSubForm } from './fields/DeletedSubform';\n\ninterface Props<R extends ChannelValues> {\n  config: AlertManagerCortexConfig;\n  notifiers: NotifierDTO[];\n  defaultItem: R;\n  alertManagerSourceName: string;\n  onTestChannel?: (channel: R) => void;\n  onSubmit: (values: ReceiverFormValues<R>) => void;\n  takenReceiverNames: string[]; // will validate that user entered receiver name is not one of these\n  commonSettingsComponent: CommonSettingsComponentType;\n  initialValues?: ReceiverFormValues<R>;\n  isEditable: boolean;\n  isTestable?: boolean;\n}\n\nexport function ReceiverForm<R extends ChannelValues>({\n  config,\n  initialValues,\n  defaultItem,\n  notifiers,\n  alertManagerSourceName,\n  onSubmit,\n  onTestChannel,\n  takenReceiverNames,\n  commonSettingsComponent,\n  isEditable,\n  isTestable,\n}: Props<R>): JSX.Element {\n  const notifyApp = useAppNotification();\n  const styles = useStyles2(getStyles);\n\n  const defaultValues = initialValues || {\n    name: '',\n    items: [\n      {\n        ...defaultItem,\n        __id: String(Math.random()),\n      } as any,\n    ],\n  };\n\n  const formAPI = useForm<ReceiverFormValues<R>>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(JSON.stringify(defaultValues)),\n  });\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    getValues,\n  } = formAPI;\n\n  const { fields, append, remove } = useControlledFieldArray<R>({ name: 'items', formAPI, softDelete: true });\n\n  const validateNameIsAvailable: Validate<string> = useCallback(\n    (name: string) =>\n      takenReceiverNames.map((name) => name.trim().toLowerCase()).includes(name.trim().toLowerCase())\n        ? 'Another receiver with this name already exists.'\n        : true,\n    [takenReceiverNames]\n  );\n\n  const submitCallback = (values: ReceiverFormValues<R>) => {\n    onSubmit({\n      ...values,\n      items: values.items.filter((item) => !item.__deleted),\n    });\n  };\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      {!config.alertmanager_config.route && (\n        <Alert severity=\"warning\" title=\"Attention\">\n          Because there is no default policy configured yet, this contact point will automatically be set as default.\n        </Alert>\n      )}\n      <form onSubmit={handleSubmit(submitCallback, onInvalid)}>\n        <h4 className={styles.heading}>\n          {!isEditable ? 'Contact point' : initialValues ? 'Update contact point' : 'Create contact point'}\n        </h4>\n        <Field label=\"Name\" invalid={!!errors.name} error={errors.name && errors.name.message} required>\n          <Input\n            readOnly={!isEditable}\n            id=\"name\"\n            {...register('name', {\n              required: 'Name is required',\n              validate: { nameIsAvailable: validateNameIsAvailable },\n            })}\n            width={39}\n            placeholder=\"Name\"\n          />\n        </Field>\n        {fields.map((field, index) => {\n          const pathPrefix = `items.${index}.`;\n          if (field.__deleted) {\n            return <DeletedSubForm key={field.__id} pathPrefix={pathPrefix} />;\n          }\n          const initialItem = initialValues?.items.find(({ __id }) => __id === field.__id);\n          return (\n            <ChannelSubForm<R>\n              defaultValues={field}\n              key={field.__id}\n              onDuplicate={() => {\n                const currentValues: R = getValues().items[index];\n                append({ ...currentValues, __id: String(Math.random()) });\n              }}\n              onTest={\n                onTestChannel\n                  ? () => {\n                      const currentValues: R = getValues().items[index];\n                      onTestChannel(currentValues);\n                    }\n                  : undefined\n              }\n              onDelete={() => remove(index)}\n              pathPrefix={pathPrefix}\n              notifiers={notifiers}\n              secureFields={initialItem?.secureFields}\n              errors={errors?.items?.[index] as FieldErrors<R>}\n              commonSettingsComponent={commonSettingsComponent}\n              isEditable={isEditable}\n              isTestable={isTestable}\n            />\n          );\n        })}\n        <>\n          {isEditable && (\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              variant=\"secondary\"\n              onClick={() => append({ ...defaultItem, __id: String(Math.random()) } as R)}\n            >\n              New contact point integration\n            </Button>\n          )}\n          <div className={styles.buttons}>\n            {isEditable && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save contact point</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              data-testid=\"cancel-button\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </div>\n        </>\n      </form>\n    </FormProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  buttons: css`\n    margin-top: ${theme.spacing(4)};\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n","import React, { FC, useMemo } from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { updateAlertManagerConfigAction } from '../../../state/actions';\nimport { CloudChannelValues, ReceiverFormValues, CloudChannelMap } from '../../../types/receiver-form';\nimport { cloudNotifierTypes } from '../../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport {\n  cloudReceiverToFormValues,\n  formValuesToCloudReceiver,\n  updateConfigWithReceiver,\n} from '../../../utils/receiver-form';\n\nimport { CloudCommonChannelSettings } from './CloudCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\n\ninterface Props {\n  alertManagerSourceName: string;\n  config: AlertManagerCortexConfig;\n  existing?: Receiver;\n}\n\nconst defaultChannelValues: CloudChannelValues = Object.freeze({\n  __id: '',\n  sendResolved: true,\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  type: 'email',\n});\n\nexport const CloudReceiverForm: FC<Props> = ({ existing, alertManagerSourceName, config }) => {\n  const dispatch = useDispatch();\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  // transform receiver DTO to form values\n  const [existingValue] = useMemo((): [ReceiverFormValues<CloudChannelValues> | undefined, CloudChannelMap] => {\n    if (!existing) {\n      return [undefined, {}];\n    }\n    return cloudReceiverToFormValues(existing, cloudNotifierTypes);\n  }, [existing]);\n\n  const onSubmit = (values: ReceiverFormValues<CloudChannelValues>) => {\n    const newReceiver = formValuesToCloudReceiver(values, defaultChannelValues);\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: updateConfigWithReceiver(config, newReceiver, existing?.name),\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: existing ? 'Contact point updated.' : 'Contact point created.',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const takenReceiverNames = useMemo(\n    () => config.alertmanager_config.receivers?.map(({ name }) => name).filter((name) => name !== existing?.name) ?? [],\n    [config, existing]\n  );\n\n  // this basically checks if we can manage the selected alert manager data source, either because it's a Grafana Managed one\n  // or a Mimir-based AlertManager\n  const isManageableAlertManagerDataSource = !isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  return (\n    <>\n      {!isVanillaAM && (\n        <Alert title=\"Info\" severity=\"info\">\n          Note that empty string values will be replaced with global defaults where appropriate.\n        </Alert>\n      )}\n      <ReceiverForm<CloudChannelValues>\n        isEditable={isManageableAlertManagerDataSource}\n        isTestable={isManageableAlertManagerDataSource}\n        config={config}\n        onSubmit={onSubmit}\n        initialValues={existingValue}\n        notifiers={cloudNotifierTypes}\n        alertManagerSourceName={alertManagerSourceName}\n        defaultItem={defaultChannelValues}\n        takenReceiverNames={takenReceiverNames}\n        commonSettingsComponent={CloudCommonChannelSettings}\n      />\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field } from '@grafana/ui';\n\nimport { CommonSettingsComponentProps } from '../../../types/receiver-form';\n\nexport const GrafanaCommonChannelSettings: FC<CommonSettingsComponentProps> = ({\n  pathPrefix,\n  className,\n  readOnly = false,\n}) => {\n  const { register } = useFormContext();\n  return (\n    <div className={className}>\n      <Field>\n        <Checkbox\n          {...register(`${pathPrefix}disableResolveMessage`)}\n          label=\"Disable resolved message\"\n          description=\"Disable the resolve message [OK] that is sent when alerting state returns to false\"\n          disabled={readOnly}\n        />\n      </Field>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Label, useStyles2, RadioButtonGroup } from '@grafana/ui';\nimport { TestReceiversAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { Annotations, Labels } from 'app/types/unified-alerting-dto';\n\nimport AnnotationsField from '../../rule-editor/AnnotationsField';\nimport LabelsField from '../../rule-editor/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onTest: (alert?: TestReceiversAlert) => void;\n}\n\ntype AnnoField = {\n  key: string;\n  value: string;\n};\n\ninterface FormFields {\n  annotations: AnnoField[];\n  labels: AnnoField[];\n}\n\nenum NotificationType {\n  predefined = 'Predefined',\n  custom = 'Custom',\n}\n\nconst notificationOptions = Object.values(NotificationType).map((value) => ({ label: value, value: value }));\n\nconst defaultValues: FormFields = {\n  annotations: [{ key: '', value: '' }],\n  labels: [{ key: '', value: '' }],\n};\n\nexport const TestContactPointModal = ({ isOpen, onDismiss, onTest }: Props) => {\n  const [notificationType, setNotificationType] = useState<NotificationType>(NotificationType.predefined);\n  const styles = useStyles2(getStyles);\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n\n  const onSubmit = (data: FormFields) => {\n    if (notificationType === NotificationType.custom) {\n      const alert = {\n        annotations: data.annotations\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {} as Annotations),\n        labels: data.labels\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {} as Labels),\n      };\n      onTest(alert);\n    } else {\n      onTest();\n    }\n  };\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={isOpen} title={'Test contact point'}>\n      <div className={styles.section}>\n        <Label>Notification message</Label>\n        <RadioButtonGroup\n          options={notificationOptions}\n          value={notificationType}\n          onChange={(value) => setNotificationType(value)}\n        />\n      </div>\n\n      <FormProvider {...formMethods}>\n        <form onSubmit={formMethods.handleSubmit(onSubmit)}>\n          {notificationType === NotificationType.predefined && (\n            <div className={styles.section}>\n              You will send a test notification that uses a predefined alert. If you have defined a custom template or\n              message, for better results switch to <strong>custom</strong> notification message, from above.\n            </div>\n          )}\n          {notificationType === NotificationType.custom && (\n            <>\n              <div className={styles.section}>\n                You will send a test notification that uses the annotations defined below. This is a good option if you\n                use custom templates and messages.\n              </div>\n              <div className={styles.section}>\n                <AnnotationsField />\n              </div>\n              <div className={styles.section}>\n                <LabelsField />\n              </div>\n            </>\n          )}\n\n          <Modal.ButtonRow>\n            <Button type=\"submit\">Send test notification</Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React, { FC, useEffect, useMemo, useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedReceiverConfig,\n  Receiver,\n  TestReceiversAlert,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport {\n  fetchGrafanaNotifiersAction,\n  testReceiversAction,\n  updateAlertManagerConfigAction,\n} from '../../../state/actions';\nimport { GrafanaChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport {\n  formChannelValuesToGrafanaChannelConfig,\n  formValuesToGrafanaReceiver,\n  grafanaReceiverToFormValues,\n  updateConfigWithReceiver,\n} from '../../../utils/receiver-form';\nimport { ProvisionedResource, ProvisioningAlert } from '../../Provisioning';\n\nimport { GrafanaCommonChannelSettings } from './GrafanaCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { TestContactPointModal } from './TestContactPointModal';\n\ninterface Props {\n  alertManagerSourceName: string;\n  config: AlertManagerCortexConfig;\n  existing?: Receiver;\n}\n\nconst defaultChannelValues: GrafanaChannelValues = Object.freeze({\n  __id: '',\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  disableResolveMessage: false,\n  type: 'email',\n});\n\nexport const GrafanaReceiverForm: FC<Props> = ({ existing, alertManagerSourceName, config }) => {\n  const grafanaNotifiers = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n  const [testChannelValues, setTestChannelValues] = useState<GrafanaChannelValues>();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!(grafanaNotifiers.result || grafanaNotifiers.loading)) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [grafanaNotifiers, dispatch]);\n\n  // transform receiver DTO to form values\n  const [existingValue, id2original] = useMemo((): [\n    ReceiverFormValues<GrafanaChannelValues> | undefined,\n    Record<string, GrafanaManagedReceiverConfig>\n  ] => {\n    if (!existing || !grafanaNotifiers.result) {\n      return [undefined, {}];\n    }\n    return grafanaReceiverToFormValues(existing, grafanaNotifiers.result!);\n  }, [existing, grafanaNotifiers.result]);\n\n  const onSubmit = (values: ReceiverFormValues<GrafanaChannelValues>) => {\n    const newReceiver = formValuesToGrafanaReceiver(values, id2original, defaultChannelValues);\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: updateConfigWithReceiver(config, newReceiver, existing?.name),\n        oldConfig: config,\n        alertManagerSourceName: GRAFANA_RULES_SOURCE_NAME,\n        successMessage: existing ? 'Contact point updated.' : 'Contact point created',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const onTestChannel = (values: GrafanaChannelValues) => {\n    setTestChannelValues(values);\n  };\n\n  const testNotification = (alert?: TestReceiversAlert) => {\n    if (testChannelValues) {\n      const existing: GrafanaManagedReceiverConfig | undefined = id2original[testChannelValues.__id];\n      const chan = formChannelValuesToGrafanaChannelConfig(testChannelValues, defaultChannelValues, 'test', existing);\n\n      const payload = {\n        alertManagerSourceName,\n        receivers: [\n          {\n            name: 'test',\n            grafana_managed_receiver_configs: [chan],\n          },\n        ],\n        alert,\n      };\n\n      dispatch(testReceiversAction(payload));\n    }\n  };\n\n  const takenReceiverNames = useMemo(\n    () => config.alertmanager_config.receivers?.map(({ name }) => name).filter((name) => name !== existing?.name) ?? [],\n    [config, existing]\n  );\n\n  // if any receivers in the contact point have a \"provenance\", the entire contact point should be readOnly\n  const hasProvisionedItems = existing\n    ? (existing.grafana_managed_receiver_configs ?? []).some((item) => Boolean(item.provenance))\n    : false;\n\n  // this basically checks if we can manage the selected alert manager data source, either because it's a Grafana Managed one\n  // or a Mimir-based AlertManager\n  const isManageableAlertManagerDataSource = !isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  const isEditable = isManageableAlertManagerDataSource && !hasProvisionedItems;\n  const isTestable = isManageableAlertManagerDataSource || hasProvisionedItems;\n\n  if (grafanaNotifiers.result) {\n    return (\n      <>\n        {hasProvisionedItems && <ProvisioningAlert resource={ProvisionedResource.ContactPoint} />}\n\n        <ReceiverForm<GrafanaChannelValues>\n          isEditable={isEditable}\n          isTestable={isTestable}\n          config={config}\n          onSubmit={onSubmit}\n          initialValues={existingValue}\n          onTestChannel={onTestChannel}\n          notifiers={grafanaNotifiers.result}\n          alertManagerSourceName={alertManagerSourceName}\n          defaultItem={defaultChannelValues}\n          takenReceiverNames={takenReceiverNames}\n          commonSettingsComponent={GrafanaCommonChannelSettings}\n        />\n        <TestContactPointModal\n          onDismiss={() => setTestChannelValues(undefined)}\n          isOpen={!!testChannelValues}\n          onTest={(alert) => testNotification(alert)}\n        />\n      </>\n    );\n  } else {\n    return <LoadingPlaceholder text=\"Loading notifiers...\" />;\n  }\n};\n","import React, { FC } from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  receiverName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const EditReceiverView: FC<Props> = ({ config, receiverName, alertManagerSourceName }) => {\n  const receiver = config.alertmanager_config.receivers?.find(({ name }) => name === receiverName);\n  if (!receiver) {\n    return (\n      <Alert severity=\"error\" title=\"Receiver not found\">\n        Sorry, this receiver does not seem to exist.\n      </Alert>\n    );\n  }\n\n  if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm config={config} alertManagerSourceName={alertManagerSourceName} existing={receiver} />;\n  } else {\n    return <CloudReceiverForm config={config} alertManagerSourceName={alertManagerSourceName} existing={receiver} />;\n  }\n};\n","export function ensureDefine(templateName: string, templateContent: string): string {\n  // notification template content must be wrapped in {{ define \"name\" }} tag,\n  // but this is not obvious because user also has to provide name separately in the form.\n  // so if user does not manually add {{ define }} tag, we do it automatically\n  let content = templateContent.trim();\n  if (!content.match(/\\{\\{\\s*define/)) {\n    const indentedContent = content\n      .split('\\n')\n      .map((line) => '  ' + line)\n      .join('\\n');\n    content = `{{ define \"${templateName}\" }}\\n${indentedContent}\\n{{ end }}`;\n  }\n  return content;\n}\n","export interface TemplateDataItem {\n  name: string;\n  type: 'string' | '[]Alert' | 'KeyValue' | 'time.Time';\n  notes: string;\n}\n\ninterface TemplateFunctionItem {\n  name: string;\n  args?: '[]string';\n  returns: 'KeyValue' | '[]string';\n  notes?: string;\n}\n\nexport const GlobalTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Receiver',\n    type: 'string',\n    notes: 'Name of the contact point that the notification is being sent to.',\n  },\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing if at least one alert is firing, otherwise resolved',\n  },\n  {\n    name: 'Alerts',\n    type: '[]Alert',\n    notes: 'List of alert objects that are included in this notification.',\n  },\n  {\n    name: 'Alerts.Firing',\n    type: '[]Alert',\n    notes: 'List of firing alerts',\n  },\n  {\n    name: 'Alerts.Resolved',\n    type: '[]Alert',\n    notes: 'List of resolved alerts',\n  },\n  {\n    name: 'GroupLabels',\n    type: 'KeyValue',\n    notes: 'Labels these alerts were grouped by.',\n  },\n  {\n    name: 'CommonLabels',\n    type: 'KeyValue',\n    notes: 'Labels common to all the alerts included in this notification.',\n  },\n  {\n    name: 'CommonAnnotations',\n    type: 'KeyValue',\n    notes: 'Annotations common to all the alerts included in this notification.',\n  },\n  {\n    name: 'ExternalURL',\n    type: 'string',\n    notes: 'Back link to the Grafana that sent the notification.',\n  },\n];\n\nexport const AlertTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing or resolved.',\n  },\n  {\n    name: 'Labels',\n    type: 'KeyValue',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'Annotations',\n    type: 'KeyValue',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'Values',\n    type: 'KeyValue',\n    notes:\n      'The values of all instant queries, reduce and math expressions, and classic conditions for the alert. It does not contain time series data.',\n  },\n  {\n    name: 'StartsAt',\n    type: 'time.Time',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'EndsAt',\n    type: 'time.Time',\n    notes:\n      'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n  },\n  {\n    name: 'GeneratorURL',\n    type: 'string',\n    notes: 'A back link to Grafana or external Alertmanager.',\n  },\n  {\n    name: 'SilenceURL',\n    type: 'string',\n    notes: 'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'DashboardURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'PanelURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'Fingerprint',\n    type: 'string',\n    notes: 'Fingerprint that can be used to identify the alert.',\n  },\n  {\n    name: 'ValueString',\n    type: 'string',\n    notes: 'String that contains the labels and value of each reduced expression in the alert.',\n  },\n];\n\nexport const KeyValueTemplateFunctions: TemplateFunctionItem[] = [\n  {\n    name: 'SortedPairs',\n    returns: 'KeyValue',\n    notes: 'Returns sorted list of key & value string pairs',\n  },\n  {\n    name: 'Remove',\n    args: '[]string',\n    returns: 'KeyValue',\n    notes: 'Returns a copy of the Key/Value map without the given keys.',\n  },\n  {\n    name: 'Names',\n    returns: '[]string',\n    notes: 'List of label names',\n  },\n  {\n    name: 'Values',\n    returns: '[]string',\n    notes: 'List of label values',\n  },\n];\n\nexport const KeyValueCodeSnippet = `{\n  \"summary\": \"alert summary\",\n  \"description\": \"alert description\"\n}\n`;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport {\n  AlertTemplateData,\n  GlobalTemplateData,\n  KeyValueCodeSnippet,\n  KeyValueTemplateFunctions,\n  TemplateDataItem,\n} from './TemplateData';\n\nexport function TemplateDataDocs() {\n  const styles = useStyles2(getTemplateDataDocsStyles);\n\n  const AlertTemplateDataTable = (\n    <TemplateDataTable\n      caption={\n        <h4 className={styles.header}>\n          Alert template data <span>Available only when in the context of an Alert (e.g. inside .Alerts loop)</span>\n        </h4>\n      }\n      dataItems={AlertTemplateData}\n    />\n  );\n\n  return (\n    <Stack gap={2} flexGrow={1}>\n      <TemplateDataTable\n        caption={<h4 className={styles.header}>Template Data</h4>}\n        dataItems={GlobalTemplateData}\n        typeRenderer={(type) =>\n          type === '[]Alert' ? (\n            <HoverCard content={AlertTemplateDataTable}>\n              <div className={styles.interactiveType}>{type}</div>\n            </HoverCard>\n          ) : type === 'KeyValue' ? (\n            <HoverCard content={<KeyValueTemplateDataTable />}>\n              <div className={styles.interactiveType}>{type}</div>\n            </HoverCard>\n          ) : (\n            type\n          )\n        }\n      />\n    </Stack>\n  );\n}\n\nconst getTemplateDataDocsStyles = (theme: GrafanaTheme2) => ({\n  header: css`\n    color: ${theme.colors.text.primary};\n\n    span {\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    }\n  `,\n  interactiveType: css`\n    color: ${theme.colors.text.link};\n  `,\n});\n\ninterface TemplateDataTableProps {\n  dataItems: TemplateDataItem[];\n  caption: JSX.Element | string;\n  typeRenderer?: (type: TemplateDataItem['type']) => React.ReactNode;\n}\n\nfunction TemplateDataTable({ dataItems, caption, typeRenderer }: TemplateDataTableProps) {\n  const styles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <table className={styles.table}>\n      <caption>{caption}</caption>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Type</th>\n          <th>Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        {dataItems.map(({ name, type, notes }, index) => (\n          <tr key={index}>\n            <td>{name}</td>\n            <td>{typeRenderer ? typeRenderer(type) : type}</td>\n            <td>{notes}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction KeyValueTemplateDataTable() {\n  const tableStyles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <div>\n      KeyValue is a set of key/value string pairs that represent labels and annotations.\n      <pre>\n        <code>{KeyValueCodeSnippet}</code>\n      </pre>\n      <table className={tableStyles.table}>\n        <caption>Key-value methods</caption>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Arguments</th>\n            <th>Returns</th>\n            <th>Notes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {KeyValueTemplateFunctions.map(({ name, args, returns, notes }) => (\n            <tr key={name}>\n              <td>{name}</td>\n              <td>{args}</td>\n              <td>{returns}</td>\n              <td>{notes}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst getTemplateDataTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    border-collapse: collapse;\n    width: 100%;\n\n    caption {\n      caption-side: top;\n    }\n\n    td,\n    th {\n      padding: ${theme.spacing(1, 1)};\n    }\n\n    thead {\n      font-weight: ${theme.typography.fontWeightBold};\n    }\n\n    tbody tr:nth-child(2n + 1) {\n      background-color: ${theme.colors.background.secondary};\n    }\n\n    tbody td:nth-child(1) {\n      font-weight: ${theme.typography.fontWeightBold};\n    }\n\n    tbody td:nth-child(2) {\n      font-style: italic;\n    }\n  `,\n});\n","import type { Monaco } from '@grafana/ui';\n\nimport { AlertmanagerTemplateFunction } from './language';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\nexport function getAlertManagerSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Function;\n  return [\n    {\n      label: AlertmanagerTemplateFunction.toUpper,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.toLower,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.title,\n      documentation: 'Capitalizes the first letter of each word',\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.join,\n      documentation: { value: 'Joins an array of strings using the separator provided.' },\n      detail: 'function(separator string, s []string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.match,\n      detail: 'function',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.safeHtml,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.reReplaceAll,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.stringSlice,\n      detail: 'function(s ...string)',\n      kind,\n    },\n  ];\n}\n","export const alertsLoopSnippet = `\n{{ range .Alerts }}\n  Status: {{ .Status }}\n  Starts at: {{ .StartsAt }}\n{{ end }}\n`;\n\nexport const alertDetailsSnippet = `\n[{{.Status}}] {{ .Labels.alertname }}\n\nLabels:\n{{ range .Labels.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n\n{{ if gt (len .Annotations) 0 }}\nAnnotations:\n{{ range .Annotations.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n{{ end }}\n\n{{ if gt (len .SilenceURL ) 0 }}\n  Silence alert: {{ .SilenceURL }}\n{{ end }}\n{{ if gt (len .DashboardURL ) 0 }}\n  Go to dashboard: {{ .DashboardURL }}\n{{ end }}\n`;\n\nexport const groupLabelsLoopSnippet = getKeyValueTemplate('GroupLabels');\nexport const commonLabelsLoopSnippet = getKeyValueTemplate('CommonLabels');\nexport const commonAnnotationsLoopSnippet = getKeyValueTemplate('CommonAnnotations');\nexport const labelsLoopSnippet = getKeyValueTemplate('Labels');\nexport const annotationsLoopSnippet = getKeyValueTemplate('Annotations');\n\nfunction getKeyValueTemplate(arrayName: string) {\n  return `\n{{ range .${arrayName} }}\n  {{ .Name }} = {{ .Value }}\n{{ end }}`;\n}\n","import type { Monaco } from '@grafana/ui';\n\nimport {\n  alertDetailsSnippet,\n  alertsLoopSnippet,\n  annotationsLoopSnippet,\n  commonAnnotationsLoopSnippet,\n  commonLabelsLoopSnippet,\n  groupLabelsLoopSnippet,\n  labelsLoopSnippet,\n} from './snippets';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\n// Suggestions available at the top level of a template\nexport function getGlobalSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: 'Alerts',\n      kind,\n      detail: 'Alert[]',\n      documentation: { value: 'An Array containing all alerts' },\n    },\n    { label: 'Receiver', kind, detail: 'string' },\n    { label: 'Status', kind, detail: 'string' },\n    { label: 'GroupLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonAnnotations', kind, detail: '[]KeyValue' },\n    { label: 'ExternalURL', kind, detail: 'string' },\n  ];\n}\n\n// Suggestions that are valid only in the scope of an alert (e.g. in the .Alerts loop)\nexport function getAlertSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: { label: 'Status', detail: '(Alert)', description: 'string' },\n      kind,\n      detail: 'string',\n      documentation: { value: 'Status of the alert. It can be `firing` or `resolved`' },\n    },\n    {\n      label: { label: 'Labels', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: { value: 'A set of labels attached to the alert.' },\n    },\n    {\n      label: { label: 'Annotations', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: 'A set of annotations attached to the alert.',\n    },\n    {\n      label: { label: 'StartsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation: 'Time the alert started firing.',\n    },\n    {\n      label: { label: 'EndsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation:\n        'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n    },\n    {\n      label: { label: 'GeneratorURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Back link to Grafana or external Alertmanager.',\n    },\n    {\n      label: { label: 'SilenceURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation:\n        'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'DashboardURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'PanelURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'Fingerprint', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Fingerprint that can be used to identify the alert.',\n    },\n    {\n      label: { label: 'ValueString', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'String that contains labels and values of each reduced expression in the alert.',\n    },\n  ];\n}\n\n// Suggestions for .Alerts\nexport function getAlertsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'Firing', kind, detail: 'Alert[]' },\n    { label: 'Resolved', kind, detail: 'Alert[]' },\n  ];\n}\n\n// Suggestions for the KeyValue types\nexport function getKeyValueSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'SortedPairs', kind, detail: '[]KeyValue' },\n    { label: 'Names', kind, detail: '[]string' },\n    { label: 'Values', kind, detail: '[]string' },\n    {\n      label: 'Remove',\n      detail: 'KeyValue[] function(keys []string)',\n      kind: monaco.languages.CompletionItemKind.Method,\n    },\n  ];\n}\n\nexport const snippets = {\n  alerts: {\n    label: 'alertsloop',\n    description: 'Renders a loop through alerts',\n    snippet: alertsLoopSnippet,\n  },\n  alertDetails: {\n    label: 'alertdetails',\n    description: 'Renders all information available about the alert',\n    snippet: alertDetailsSnippet,\n  },\n  groupLabels: {\n    label: 'grouplabelsloop',\n    description: 'Renders a loop through group labels',\n    snippet: groupLabelsLoopSnippet,\n  },\n  commonLabels: {\n    label: 'commonlabelsloop',\n    description: 'Renders a loop through common labels',\n    snippet: commonLabelsLoopSnippet,\n  },\n  commonAnnotations: {\n    label: 'commonannotationsloop',\n    description: 'Renders a loop through common annotations',\n    snippet: commonAnnotationsLoopSnippet,\n  },\n  labels: {\n    label: 'labelsloop',\n    description: 'Renders a loop through labels',\n    snippet: labelsLoopSnippet,\n  },\n  annotations: {\n    label: 'annotationsloop',\n    description: 'Renders a loop through annotations',\n    snippet: annotationsLoopSnippet,\n  },\n};\n\n// Snippets\nexport function getSnippetsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const snippetKind = monaco.languages.CompletionItemKind.Snippet;\n  const snippetInsertRule = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n\n  const { alerts, alertDetails, groupLabels, commonLabels, commonAnnotations, labels, annotations } = snippets;\n\n  return [\n    {\n      label: alerts.label,\n      documentation: alerts.description,\n      kind: snippetKind,\n      insertText: alerts.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: {\n        label: alertDetails.label,\n        detail: '(Alert)',\n      },\n      documentation: alertDetails.description,\n      kind: snippetKind,\n      insertText: alertDetails.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: groupLabels.label,\n      documentation: groupLabels.description,\n      kind: snippetKind,\n      insertText: groupLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonLabels.label,\n      documentation: commonLabels.description,\n      kind: snippetKind,\n      insertText: commonLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonAnnotations.label,\n      documentation: commonAnnotations.description,\n      kind: snippetKind,\n      insertText: commonAnnotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: labels.label, detail: '(Alert)' },\n      documentation: labels.description,\n      kind: snippetKind,\n      insertText: labels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: annotations.label, detail: '(Alert)' },\n      documentation: annotations.description,\n      kind: snippetKind,\n      insertText: annotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n  ];\n}\n","import { concat } from 'lodash';\nimport type { languages, editor, Position, IRange, IDisposable } from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport type { Monaco } from '@grafana/ui';\n\nimport { getAlertManagerSuggestions } from './alertManagerSuggestions';\nimport { SuggestionDefinition } from './suggestionDefinition';\nimport {\n  getAlertsSuggestions,\n  getAlertSuggestions,\n  getGlobalSuggestions,\n  getKeyValueSuggestions,\n  getSnippetsSuggestions,\n} from './templateDataSuggestions';\n\nexport function registerGoTemplateAutocomplete(monaco: Monaco): IDisposable {\n  const goTemplateAutocompleteProvider: languages.CompletionItemProvider = {\n    triggerCharacters: ['.'],\n    provideCompletionItems(model, position, context): languages.ProviderResult<languages.CompletionList> {\n      const word = model.getWordUntilPosition(position);\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      };\n\n      const completionProvider = new CompletionProvider(monaco, range);\n\n      const insideExpression = isInsideGoExpression(model, position);\n      if (!insideExpression) {\n        return completionProvider.getSnippetsSuggestions();\n      }\n\n      if (context.triggerKind === monaco.languages.CompletionTriggerKind.Invoke && !context.triggerCharacter) {\n        return completionProvider.getFunctionsSuggestions();\n      }\n\n      const wordBeforeDot = model.getWordUntilPosition({\n        lineNumber: position.lineNumber,\n        column: position.column - 1,\n      });\n\n      return completionProvider.getTemplateDataSuggestions(wordBeforeDot.word);\n    },\n  };\n\n  return monaco.languages.registerCompletionItemProvider('go-template', goTemplateAutocompleteProvider);\n}\n\nfunction isInsideGoExpression(model: editor.ITextModel, position: Position) {\n  const searchRange = {\n    startLineNumber: position.lineNumber,\n    endLineNumber: position.lineNumber,\n    startColumn: model.getLineMinColumn(position.lineNumber),\n    endColumn: model.getLineMaxColumn(position.lineNumber),\n  };\n\n  const goSyntaxRegex = '\\\\{\\\\{[a-zA-Z0-9._() \"]+\\\\}\\\\}';\n  const matches = model.findMatches(goSyntaxRegex, searchRange, true, false, null, true);\n\n  return matches.some((match) => match.range.containsPosition(position));\n}\n\nexport class CompletionProvider {\n  constructor(private readonly monaco: Monaco, private readonly range: IRange) {}\n\n  getSnippetsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getSnippetsSuggestions(this.monaco));\n  };\n\n  getFunctionsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getAlertManagerSuggestions(this.monaco));\n  };\n\n  getTemplateDataSuggestions = (wordContext: string): languages.ProviderResult<languages.CompletionList> => {\n    switch (wordContext) {\n      case '':\n        return this.getCompletionsFromDefinitions(getGlobalSuggestions(this.monaco), getAlertSuggestions(this.monaco));\n      case 'Alerts':\n        return this.getCompletionsFromDefinitions(getAlertsSuggestions(this.monaco));\n      case 'GroupLabels':\n      case 'CommonLabels':\n      case 'CommonAnnotations':\n      case 'Labels':\n      case 'Annotations':\n        return this.getCompletionsFromDefinitions(getKeyValueSuggestions(this.monaco));\n      default:\n        return { suggestions: [] };\n    }\n  };\n\n  private getCompletionsFromDefinitions = (...args: SuggestionDefinition[][]): languages.CompletionList => {\n    const allDefinitions = concat(...args);\n\n    return {\n      suggestions: allDefinitions.map((definition) => buildAutocompleteSuggestion(definition, this.range)),\n    };\n  };\n}\n\nfunction buildAutocompleteSuggestion(\n  { label, detail, documentation, kind, insertText }: SuggestionDefinition,\n  range: IRange\n): languages.CompletionItem {\n  const insertFallback = typeof label === 'string' ? label : label.label;\n  const labelObject = typeof label === 'string' ? { label: label, description: detail } : { ...label };\n\n  labelObject.description ??= detail;\n\n  return {\n    label: labelObject,\n    kind: kind,\n    insertText: insertText ?? insertFallback,\n    range,\n    documentation: documentation,\n    detail: detail,\n  };\n}\n","import { LanguageDefinition } from './register';\n\nexport const GO_TEMPLATE_LANGUAGE_ID = 'go-template';\n\nconst goTemplateLanguageDefinition: LanguageDefinition = {\n  id: GO_TEMPLATE_LANGUAGE_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default goTemplateLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition\n  // completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    // monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","/**\n * This file contains the template editor we'll be using for alertmanager templates.\n *\n * It includes auto-complete for template data and syntax highlighting\n */\nimport { editor, IDisposable } from 'monaco-editor';\nimport React, { FC, useEffect, useRef } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\nimport { CodeEditorProps } from '@grafana/ui/src/components/Monaco/types';\n\nimport { registerGoTemplateAutocomplete } from './editor/autocomplete';\nimport goTemplateLanguageDefinition, { GO_TEMPLATE_LANGUAGE_ID } from './editor/definition';\nimport { registerLanguage } from './editor/register';\n\ntype TemplateEditorProps = Omit<CodeEditorProps, 'language' | 'theme'> & {\n  autoHeight?: boolean;\n};\n\nconst TemplateEditor: FC<TemplateEditorProps> = (props) => {\n  const shouldAutoHeight = Boolean(props.autoHeight);\n  const disposeSuggestions = useRef<IDisposable | null>(null);\n\n  const onEditorDidMount = (editor: editor.IStandaloneCodeEditor) => {\n    if (shouldAutoHeight) {\n      const contentHeight = editor.getContentHeight();\n\n      try {\n        // we're passing NaN in to the width because the type definition wants a number (NaN is a number, go figure)\n        // but the width could be defined as a string \"auto\", passing NaN seems to just ignore our width update here\n        editor.layout({ height: contentHeight, width: NaN });\n      } catch (err) {}\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      disposeSuggestions.current?.dispose();\n    };\n  }, []);\n\n  return (\n    <CodeEditor\n      showLineNumbers={true}\n      showMiniMap={false}\n      {...props}\n      onEditorDidMount={onEditorDidMount}\n      onBeforeEditorMount={(monaco) => {\n        registerLanguage(monaco, goTemplateLanguageDefinition);\n        disposeSuggestions.current = registerGoTemplateAutocomplete(monaco);\n      }}\n      language={GO_TEMPLATE_LANGUAGE_ID}\n    />\n  );\n};\n\nexport { TemplateEditor };\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useForm, Validate } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Alert, Button, Field, FieldSet, Input, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { makeAMLink } from '../../utils/misc';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { ensureDefine } from '../../utils/templates';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\nimport { TemplateDataDocs } from './TemplateDataDocs';\nimport { TemplateEditor } from './TemplateEditor';\nimport { snippets } from './editor/templateDataSuggestions';\n\ninterface Values {\n  name: string;\n  content: string;\n}\n\nconst defaults: Values = Object.freeze({\n  name: '',\n  content: '',\n});\n\ninterface Props {\n  existing?: Values;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n  provenance?: string;\n}\n\nexport const TemplateForm: FC<Props> = ({ existing, alertManagerSourceName, config, provenance }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const submit = (values: Values) => {\n    // wrap content in \"define\" if it's not already wrapped, in case user did not do it/\n    // it's not obvious that this is needed for template to work\n    const content = ensureDefine(values.name, values.content);\n\n    // add new template to template map\n    const template_files = {\n      ...config.template_files,\n      [values.name]: content,\n    };\n\n    // delete existing one (if name changed, otherwise it was overwritten in previous step)\n    if (existing && existing.name !== values.name) {\n      delete template_files[existing.name];\n    }\n\n    // make sure name for the template is configured on the alertmanager config object\n    const templates = [\n      ...(config.alertmanager_config.templates ?? []).filter((name) => name !== existing?.name),\n      values.name,\n    ];\n\n    const newConfig: AlertManagerCortexConfig = {\n      template_files,\n      alertmanager_config: {\n        ...config.alertmanager_config,\n        templates,\n      },\n    };\n    dispatch(\n      updateAlertManagerConfigAction({\n        alertManagerSourceName,\n        newConfig,\n        oldConfig: config,\n        successMessage: 'Template saved.',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    getValues,\n    setValue,\n  } = useForm<Values>({\n    mode: 'onSubmit',\n    defaultValues: existing ?? defaults,\n  });\n\n  const validateNameIsUnique: Validate<string> = (name: string) => {\n    return !config.template_files[name] || existing?.name === name\n      ? true\n      : 'Another template with this name already exists.';\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submit)}>\n      <h4>{existing ? 'Edit notification template' : 'Create notification template'}</h4>\n      {error && (\n        <Alert severity=\"error\" title=\"Error saving template\">\n          {error.message || (error as any)?.data?.message || String(error)}\n        </Alert>\n      )}\n      {provenance && <ProvisioningAlert resource={ProvisionedResource.Template} />}\n      <FieldSet disabled={Boolean(provenance)}>\n        <Field label=\"Template name\" error={errors?.name?.message} invalid={!!errors.name?.message} required>\n          <Input\n            {...register('name', {\n              required: { value: true, message: 'Required.' },\n              validate: { nameIsUnique: validateNameIsUnique },\n            })}\n            placeholder=\"Give your template a name\"\n            width={42}\n            autoFocus={true}\n          />\n        </Field>\n        <TemplatingGuideline />\n        <div className={styles.contentContainer}>\n          <div>\n            <Field label=\"Content\" error={errors?.content?.message} invalid={!!errors.content?.message} required>\n              <div className={styles.editWrapper}>\n                <AutoSizer>\n                  {({ width, height }) => (\n                    <TemplateEditor\n                      value={getValues('content')}\n                      width={width}\n                      height={height}\n                      onBlur={(value) => setValue('content', value)}\n                    />\n                  )}\n                </AutoSizer>\n              </div>\n            </Field>\n            <div className={styles.buttons}>\n              {loading && (\n                <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                  Saving...\n                </Button>\n              )}\n              {!loading && (\n                <Button type=\"submit\" variant=\"primary\">\n                  Save template\n                </Button>\n              )}\n              <LinkButton\n                disabled={loading}\n                href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n                variant=\"secondary\"\n                type=\"button\"\n                fill=\"outline\"\n              >\n                Cancel\n              </LinkButton>\n            </div>\n          </div>\n          <TemplateDataDocs />\n        </div>\n      </FieldSet>\n    </form>\n  );\n};\n\nfunction TemplatingGuideline() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Alert title=\"Templating guideline\" severity=\"info\">\n      <Stack direction=\"row\">\n        <div>\n          Grafana uses Go templating language to create notification messages.\n          <br />\n          To find out more about templating please visit our documentation.\n        </div>\n        <div>\n          <LinkButton\n            href=\"https://grafana.com/docs/grafana/latest/alerting/manage-notifications/template-notifications/\"\n            target=\"_blank\"\n            icon=\"external-link-alt\"\n          >\n            Templating documentation\n          </LinkButton>\n        </div>\n      </Stack>\n\n      <div className={styles.snippets}>\n        To make templating easier, we provide a few snippets in the content editor to help you speed up your workflow.\n        <div className={styles.code}>\n          {Object.values(snippets)\n            .map((s) => s.label)\n            .join(', ')}\n        </div>\n      </div>\n    </Alert>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contentContainer: css`\n    display: flex;\n    gap: ${theme.spacing(2)};\n    flex-direction: row;\n    align-items: flex-start;\n    flex-wrap: wrap;\n    ${theme.breakpoints.up('xxl')} {\n      flex-wrap: nowrap;\n    }\n  `,\n  snippets: css`\n    margin-top: ${theme.spacing(2)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  code: css`\n    color: ${theme.colors.text.secondary};\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  textarea: css`\n    max-width: 758px;\n  `,\n  editWrapper: css`\n    display: block;\n    position: relative;\n    width: 640px;\n    height: 320px;\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { InfoBox } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  templateName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const EditTemplateView: FC<Props> = ({ config, templateName, alertManagerSourceName }) => {\n  const template = config.template_files?.[templateName];\n  const provenance = config.template_file_provenances?.[templateName];\n\n  if (!template) {\n    return (\n      <InfoBox severity=\"error\" title=\"Template not found\">\n        Sorry, this template does not seem to exit.\n      </InfoBox>\n    );\n  }\n  return (\n    <TemplateForm\n      alertManagerSourceName={alertManagerSourceName}\n      config={config}\n      existing={{ name: templateName, content: template }}\n      provenance={provenance}\n    />\n  );\n};\n","import React, { FC } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { Alert, Button, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { globalConfigOptions } from '../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { omitEmptyValues } from '../../utils/receiver-form';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { OptionField } from './form/fields/OptionField';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\ntype FormValues = Record<string, unknown>;\n\nconst defaultValues: FormValues = {\n  smtp_require_tls: true,\n} as const;\n\nexport const GlobalConfigForm: FC<Props> = ({ config, alertManagerSourceName }) => {\n  const dispatch = useDispatch();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  const formAPI = useForm<FormValues>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(\n      JSON.stringify({\n        ...defaultValues,\n        ...(config.alertmanager_config.global ?? {}),\n      })\n    ),\n  });\n\n  const {\n    handleSubmit,\n    formState: { errors },\n  } = formAPI;\n\n  const onSubmitCallback = (values: FormValues) => {\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...config,\n          alertmanager_config: {\n            ...config.alertmanager_config,\n            global: omitEmptyValues(values),\n          },\n        },\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: 'Global config updated.',\n        redirectPath: makeAMLink('/alerting/notifications', alertManagerSourceName),\n      })\n    );\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmitCallback)}>\n        {error && (\n          <Alert severity=\"error\" title=\"Error saving receiver\">\n            {error.message || String(error)}\n          </Alert>\n        )}\n        {globalConfigOptions.map((option) => (\n          <OptionField\n            readOnly={readOnly}\n            defaultValue={defaultValues[option.propertyName]}\n            key={option.propertyName}\n            option={option}\n            error={errors[option.propertyName]}\n            pathPrefix={''}\n          />\n        ))}\n        <div>\n          <HorizontalGroup>\n            {!readOnly && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save global config</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </HorizontalGroup>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const NewReceiverView: FC<Props> = ({ alertManagerSourceName, config }) => {\n  if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm alertManagerSourceName={alertManagerSourceName} config={config} />;\n  } else {\n    return <CloudReceiverForm alertManagerSourceName={alertManagerSourceName} config={config} />;\n  }\n};\n","import React, { FC } from 'react';\n\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const NewTemplateView: FC<Props> = ({ config, alertManagerSourceName }) => {\n  return <TemplateForm config={config} alertManagerSourceName={alertManagerSourceName} />;\n};\n","export const receiverTypeNames: Record<string, string> = {\n  pagerduty: 'PagerDuty',\n  pushover: 'Pushover',\n  slack: 'Slack',\n  opsgenie: 'OpsGenie',\n  webhook: 'Webhook',\n  victorops: 'VictorOps',\n  wechat: 'WeChat',\n};\n","import { capitalize } from 'lodash';\n\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO } from 'app/types';\n\n// extract notifier type name to count map, eg { Slack: 1, Email: 2 }\n\ntype NotifierTypeCounts = Record<string, number>; // name : count\n\nexport function extractNotifierTypeCounts(receiver: Receiver, grafanaNotifiers: NotifierDTO[]): NotifierTypeCounts {\n  if (receiver['grafana_managed_receiver_configs']) {\n    return getGrafanaNotifierTypeCounts(receiver.grafana_managed_receiver_configs ?? [], grafanaNotifiers);\n  }\n  return getCortexAlertManagerNotifierTypeCounts(receiver);\n}\n\nfunction getCortexAlertManagerNotifierTypeCounts(receiver: Receiver): NotifierTypeCounts {\n  return Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs')) // filter out only properties that are alertmanager notifier\n    .filter(([_, value]) => Array.isArray(value) && !!value.length) // check that there are actually notifiers of this type configured\n    .reduce<NotifierTypeCounts>((acc, [key, value]) => {\n      const type = key.replace('_configs', ''); // remove the `_config` part from the key, making it intto a notifier name\n      const name = receiverTypeNames[type] ?? capitalize(type);\n      return {\n        ...acc,\n        [name]: (acc[name] ?? 0) + (Array.isArray(value) ? value.length : 1),\n      };\n    }, {});\n}\n\nfunction getGrafanaNotifierTypeCounts(\n  configs: GrafanaManagedReceiverConfig[],\n  grafanaNotifiers: NotifierDTO[]\n): NotifierTypeCounts {\n  return configs\n    .map((recv) => recv.type) // extract types from config\n    .map((type) => grafanaNotifiers.find((r) => r.type === type)?.name ?? capitalize(type)) // get readable name from notifier cofnig, or if not available, just capitalize\n    .reduce<NotifierTypeCounts>(\n      (acc, type) => ({\n        ...acc,\n        [type]: (acc[type] ?? 0) + 1,\n      }),\n      {}\n    );\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  title: string;\n  description: string;\n  addButtonLabel: string;\n  addButtonTo: string;\n  className?: string;\n  showButton?: boolean;\n}\n\nexport const ReceiversSection = ({\n  className,\n  title,\n  description,\n  addButtonLabel,\n  addButtonTo,\n  children,\n  showButton = true,\n}: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <div className={cx(styles.heading, className)}>\n        <div>\n          <h4>{title}</h4>\n          <div className={styles.description}>{description}</div>\n        </div>\n        {showButton && (\n          <Link to={addButtonTo}>\n            <Button type=\"button\" icon=\"plus\">\n              {addButtonLabel}\n            </Button>\n          </Link>\n        )}\n      </div>\n      {children}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  `,\n  description: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import pluralize from 'pluralize';\nimport React, { FC, useMemo, useState } from 'react';\n\nimport { dateTime, dateTimeFormat } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, ConfirmModal, Modal, useStyles2, Badge, Icon } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch, AccessControlAction, ContactPointsState, NotifiersState, ReceiversState } from 'app/types';\n\nimport { useGetContactPointsState } from '../../api/receiversApi';\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteReceiverAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { isReceiverUsed } from '../../utils/alertmanager';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { extractNotifierTypeCounts } from '../../utils/receivers';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { ReceiversSection } from './ReceiversSection';\nimport { GrafanaAppBadge } from './grafanaAppReceivers/GrafanaAppBadge';\nimport { useGetReceiversWithGrafanaAppTypes } from './grafanaAppReceivers/grafanaApp';\nimport { ReceiverWithTypes } from './grafanaAppReceivers/types';\n\ninterface UpdateActionProps extends ActionProps {\n  onClickDeleteReceiver: (receiverName: string) => void;\n}\n\nfunction UpdateActions({ permissions, alertManagerName, receiverName, onClickDeleteReceiver }: UpdateActionProps) {\n  return (\n    <>\n      <Authorize actions={[permissions.update]}>\n        <ActionIcon\n          aria-label=\"Edit\"\n          data-testid=\"edit\"\n          to={makeAMLink(\n            `/alerting/notifications/receivers/${encodeURIComponent(receiverName)}/edit`,\n            alertManagerName\n          )}\n          tooltip=\"Edit contact point\"\n          icon=\"pen\"\n        />\n      </Authorize>\n      <Authorize actions={[permissions.delete]}>\n        <ActionIcon\n          onClick={() => onClickDeleteReceiver(receiverName)}\n          tooltip=\"Delete contact point\"\n          icon=\"trash-alt\"\n        />\n      </Authorize>\n    </>\n  );\n}\ninterface ActionProps {\n  permissions: {\n    read: AccessControlAction;\n    create: AccessControlAction;\n    update: AccessControlAction;\n    delete: AccessControlAction;\n  };\n  alertManagerName: string;\n  receiverName: string;\n}\n\nfunction ViewAction({ permissions, alertManagerName, receiverName }: ActionProps) {\n  return (\n    <Authorize actions={[permissions.update]}>\n      <ActionIcon\n        data-testid=\"view\"\n        to={makeAMLink(`/alerting/notifications/receivers/${encodeURIComponent(receiverName)}/edit`, alertManagerName)}\n        tooltip=\"View contact point\"\n        icon=\"file-alt\"\n      />\n    </Authorize>\n  );\n}\ninterface ReceiverErrorProps {\n  errorCount: number;\n  errorDetail?: string;\n  showErrorCount: boolean;\n}\n\nfunction ReceiverError({ errorCount, errorDetail, showErrorCount }: ReceiverErrorProps) {\n  const text = showErrorCount ? `${errorCount} ${pluralize('error', errorCount)}` : 'Error';\n  return <Badge color=\"orange\" icon=\"exclamation-triangle\" text={text} tooltip={errorDetail ?? 'Error'} />;\n}\ninterface NotifierHealthProps {\n  errorsByNotifier: number;\n  errorDetail?: string;\n  lastNotify: string;\n}\n\nfunction NotifierHealth({ errorsByNotifier, errorDetail, lastNotify }: NotifierHealthProps) {\n  const noErrorsColor = isLastNotifyNullDate(lastNotify) ? 'orange' : 'green';\n  const noErrorsText = isLastNotifyNullDate(lastNotify) ? 'No attempts' : 'OK';\n  return errorsByNotifier > 0 ? (\n    <ReceiverError errorCount={errorsByNotifier} errorDetail={errorDetail} showErrorCount={false} />\n  ) : (\n    <Badge color={noErrorsColor} text={noErrorsText} tooltip=\"\" />\n  );\n}\n\ninterface ReceiverHealthProps {\n  errorsByReceiver: number;\n  someWithNoAttempt: boolean;\n}\n\nfunction ReceiverHealth({ errorsByReceiver, someWithNoAttempt }: ReceiverHealthProps) {\n  const noErrorsColor = someWithNoAttempt ? 'orange' : 'green';\n  const noErrorsText = someWithNoAttempt ? 'No attempts' : 'OK';\n  return errorsByReceiver > 0 ? (\n    <ReceiverError errorCount={errorsByReceiver} showErrorCount={true} />\n  ) : (\n    <Badge color={noErrorsColor} text={noErrorsText} tooltip=\"\" />\n  );\n}\n\nconst useContactPointsState = (alertManagerName: string) => {\n  const contactPointsState = useGetContactPointsState(alertManagerName);\n  const receivers: ReceiversState = contactPointsState?.receivers ?? {};\n  const errorStateAvailable = Object.keys(receivers).length > 0;\n  return { contactPointsState, errorStateAvailable };\n};\ninterface ReceiverItem {\n  name: string;\n  types: string[];\n  provisioned?: boolean;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\ninterface NotifierStatus {\n  lastError?: null | string;\n  lastNotify: string;\n  lastNotifyDuration: string;\n  type: string;\n  sendResolved?: boolean;\n}\n\ntype RowTableColumnProps = DynamicTableColumnProps<ReceiverItem>;\ntype RowItemTableProps = DynamicTableItemProps<ReceiverItem>;\n\ntype NotifierTableColumnProps = DynamicTableColumnProps<NotifierStatus>;\ntype NotifierItemTableProps = DynamicTableItemProps<NotifierStatus>;\n\ninterface NotifiersTableProps {\n  notifiersState: NotifiersState;\n}\nconst isLastNotifyNullDate = (lastNotify: string) => lastNotify === '0001-01-01T00:00:00.000Z';\n\nfunction LastNotify({ lastNotifyDate }: { lastNotifyDate: string }) {\n  if (isLastNotifyNullDate(lastNotifyDate)) {\n    return <>{'-'}</>;\n  } else {\n    return (\n      <Stack alignItems=\"center\">\n        <div>{`${dateTime(lastNotifyDate).locale('en').fromNow(true)} ago`}</div>\n        <Icon name=\"clock-nine\" />\n        <div>{`${dateTimeFormat(lastNotifyDate, { format: 'YYYY-MM-DD HH:mm:ss' })}`}</div>\n      </Stack>\n    );\n  }\n}\n\nconst possibleNullDurations = ['', '0', '0ms', '0s', '0m', '0h', '0d', '0w', '0y'];\nconst durationIsNull = (duration: string) => possibleNullDurations.includes(duration);\n\nfunction NotifiersTable({ notifiersState }: NotifiersTableProps) {\n  function getNotifierColumns(): NotifierTableColumnProps[] {\n    return [\n      {\n        id: 'health',\n        label: 'Health',\n        renderCell: ({ data: { lastError, lastNotify } }) => {\n          return (\n            <NotifierHealth\n              errorsByNotifier={lastError ? 1 : 0}\n              errorDetail={lastError ?? undefined}\n              lastNotify={lastNotify}\n            />\n          );\n        },\n        size: 0.5,\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: ({ data: { type }, id }) => <>{`${type}[${id}]`}</>,\n        size: 1,\n      },\n      {\n        id: 'lastNotify',\n        label: 'Last delivery attempt',\n        renderCell: ({ data: { lastNotify } }) => <LastNotify lastNotifyDate={lastNotify} />,\n        size: 3,\n      },\n      {\n        id: 'lastNotifyDuration',\n        label: 'Last duration',\n        renderCell: ({ data: { lastNotify, lastNotifyDuration } }) => (\n          <>{isLastNotifyNullDate(lastNotify) && durationIsNull(lastNotifyDuration) ? '-' : lastNotifyDuration}</>\n        ),\n        size: 1,\n      },\n      {\n        id: 'sendResolved',\n        label: 'Send resolved',\n        renderCell: ({ data: { sendResolved } }) => <>{String(Boolean(sendResolved))}</>,\n        size: 1,\n      },\n    ];\n  }\n  const notifierRows: NotifierItemTableProps[] = Object.entries(notifiersState).flatMap((typeState) =>\n    typeState[1].map((notifierStatus, index) => {\n      return {\n        id: index,\n        data: {\n          type: typeState[0],\n          lastError: notifierStatus.lastNotifyAttemptError,\n          lastNotify: notifierStatus.lastNotifyAttempt,\n          lastNotifyDuration: notifierStatus.lastNotifyAttemptDuration,\n          sendResolved: notifierStatus.sendResolved,\n        },\n      };\n    })\n  );\n\n  return <DynamicTable items={notifierRows} cols={getNotifierColumns()} />;\n}\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const ReceiversTable: FC<Props> = ({ config, alertManagerName }) => {\n  const dispatch = useDispatch();\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n  const permissions = getNotificationsPermissions(alertManagerName);\n  const grafanaNotifiers = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n\n  const { contactPointsState, errorStateAvailable } = useContactPointsState(alertManagerName);\n\n  // receiver name slated for deletion. If this is set, a confirmation modal is shown. If user approves, this receiver is deleted\n  const [receiverToDelete, setReceiverToDelete] = useState<string>();\n  const [showCannotDeleteReceiverModal, setShowCannotDeleteReceiverModal] = useState(false);\n\n  const onClickDeleteReceiver = (receiverName: string): void => {\n    if (isReceiverUsed(receiverName, config)) {\n      setShowCannotDeleteReceiverModal(true);\n    } else {\n      setReceiverToDelete(receiverName);\n    }\n  };\n\n  const deleteReceiver = () => {\n    if (receiverToDelete) {\n      dispatch(deleteReceiverAction(receiverToDelete, alertManagerName));\n    }\n    setReceiverToDelete(undefined);\n  };\n  const receivers = useGetReceiversWithGrafanaAppTypes(config.alertmanager_config.receivers ?? []);\n  const rows: RowItemTableProps[] = useMemo(() => {\n    return (\n      receivers?.map((receiver: ReceiverWithTypes) => ({\n        id: receiver.name,\n        data: {\n          name: receiver.name,\n          types: Object.entries(extractNotifierTypeCounts(receiver, grafanaNotifiers.result ?? [])).map(\n            ([type, count]) => {\n              if (count > 1) {\n                return `${type} (${count})`;\n              }\n              return type;\n            }\n          ),\n          grafanaAppReceiverType: receiver.grafanaAppReceiverType,\n          provisioned: receiver.grafana_managed_receiver_configs?.some((receiver) => receiver.provenance),\n        },\n      })) ?? []\n    );\n  }, [grafanaNotifiers.result, receivers]);\n\n  const columns = useGetColumns(\n    alertManagerName,\n    errorStateAvailable,\n    contactPointsState,\n    onClickDeleteReceiver,\n    permissions,\n    isVanillaAM\n  );\n\n  return (\n    <ReceiversSection\n      title=\"Contact points\"\n      description=\"Define where the notifications will be sent to, for example email or Slack.\"\n      showButton={!isVanillaAM && contextSrv.hasPermission(permissions.create)}\n      addButtonLabel={'New contact point'}\n      addButtonTo={makeAMLink('/alerting/notifications/receivers/new', alertManagerName)}\n    >\n      <DynamicTable\n        items={rows}\n        cols={columns}\n        isExpandable={errorStateAvailable}\n        renderExpandedContent={\n          errorStateAvailable\n            ? ({ data: { name } }) => (\n                <NotifiersTable notifiersState={contactPointsState?.receivers[name]?.notifiers ?? {}} />\n              )\n            : undefined\n        }\n      />\n      {!!showCannotDeleteReceiverModal && (\n        <Modal\n          isOpen={true}\n          title=\"Cannot delete contact point\"\n          onDismiss={() => setShowCannotDeleteReceiverModal(false)}\n        >\n          <p>\n            Contact point cannot be deleted because it is used in more policies. Please update or delete these policies\n            first.\n          </p>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={() => setShowCannotDeleteReceiverModal(false)} fill=\"outline\">\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      )}\n      {!!receiverToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete contact point\"\n          body={`Are you sure you want to delete contact point \"${receiverToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteReceiver}\n          onDismiss={() => setReceiverToDelete(undefined)}\n        />\n      )}\n    </ReceiversSection>\n  );\n};\nconst errorsByReceiver = (contactPointsState: ContactPointsState, receiverName: string) =>\n  contactPointsState?.receivers[receiverName]?.errorCount ?? 0;\n\nconst someNotifiersWithNoAttempt = (contactPointsState: ContactPointsState, receiverName: string) => {\n  const notifiers = Object.values(contactPointsState?.receivers[receiverName]?.notifiers ?? {});\n  const hasSomeWitNoAttempt =\n    notifiers.length === 0 || notifiers.flat().some((status) => isLastNotifyNullDate(status.lastNotifyAttempt));\n  return hasSomeWitNoAttempt;\n};\n\nfunction useGetColumns(\n  alertManagerName: string,\n  errorStateAvailable: boolean,\n  contactPointsState: ContactPointsState | undefined,\n  onClickDeleteReceiver: (receiverName: string) => void,\n  permissions: {\n    read: AccessControlAction;\n    create: AccessControlAction;\n    update: AccessControlAction;\n    delete: AccessControlAction;\n  },\n  isVanillaAM: boolean\n): RowTableColumnProps[] {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const baseColumns: RowTableColumnProps[] = [\n    {\n      id: 'name',\n      label: 'Contact point name',\n      renderCell: ({ data: { name, provisioned } }) => (\n        <Stack alignItems=\"center\">\n          <div>{name}</div>\n          {provisioned && <ProvisioningBadge />}\n        </Stack>\n      ),\n      size: 1,\n    },\n    {\n      id: 'type',\n      label: 'Type',\n      renderCell: ({ data: { types, grafanaAppReceiverType } }) => (\n        <>{grafanaAppReceiverType ? <GrafanaAppBadge grafanaAppType={grafanaAppReceiverType} /> : types.join(', ')}</>\n      ),\n      size: 1,\n    },\n  ];\n  const healthColumn: RowTableColumnProps = {\n    id: 'health',\n    label: 'Health',\n    renderCell: ({ data: { name } }) => {\n      return (\n        contactPointsState && (\n          <ReceiverHealth\n            errorsByReceiver={errorsByReceiver(contactPointsState, name)}\n            someWithNoAttempt={someNotifiersWithNoAttempt(contactPointsState, name)}\n          />\n        )\n      );\n    },\n    size: 1,\n  };\n\n  return [\n    ...baseColumns,\n    ...(errorStateAvailable ? [healthColumn] : []),\n    {\n      id: 'actions',\n      label: 'Actions',\n      renderCell: ({ data: { provisioned, name } }) => (\n        <Authorize actions={[permissions.update, permissions.delete]}>\n          <div className={tableStyles.actionsCell}>\n            {!isVanillaAM && !provisioned && (\n              <UpdateActions\n                permissions={permissions}\n                alertManagerName={alertManagerName}\n                receiverName={name}\n                onClickDeleteReceiver={onClickDeleteReceiver}\n              />\n            )}\n            {(isVanillaAM || provisioned) && (\n              <ViewAction permissions={permissions} alertManagerName={alertManagerName} receiverName={name} />\n            )}\n          </div>\n        </Authorize>\n      ),\n      size: '100px',\n    },\n  ];\n}\n","import React, { FC, Fragment, useMemo, useState } from 'react';\n\nimport { ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { deleteTemplateAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { DetailsField } from '../DetailsField';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { ReceiversSection } from './ReceiversSection';\nimport { TemplateEditor } from './TemplateEditor';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const TemplatesTable: FC<Props> = ({ config, alertManagerName }) => {\n  const dispatch = useDispatch();\n  const [expandedTemplates, setExpandedTemplates] = useState<Record<string, boolean>>({});\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const permissions = getNotificationsPermissions(alertManagerName);\n\n  const templateRows = useMemo(() => {\n    const templates = Object.entries(config.template_files);\n\n    return templates.map(([name, template]) => ({\n      name,\n      template,\n      provenance: (config.template_file_provenances ?? {})[name],\n    }));\n  }, [config]);\n  const [templateToDelete, setTemplateToDelete] = useState<string>();\n\n  const deleteTemplate = () => {\n    if (templateToDelete) {\n      dispatch(deleteTemplateAction(templateToDelete, alertManagerName));\n    }\n    setTemplateToDelete(undefined);\n  };\n\n  return (\n    <ReceiversSection\n      title=\"Notification templates\"\n      description=\"Notification templates customize notifications sent from contact points.\"\n      addButtonLabel=\"New template\"\n      addButtonTo={makeAMLink('/alerting/notifications/templates/new', alertManagerName)}\n      showButton={contextSrv.hasPermission(permissions.create)}\n    >\n      <table className={tableStyles.table} data-testid=\"templates-table\">\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>Template</th>\n            <Authorize actions={[permissions.update, permissions.delete]}>\n              <th>Actions</th>\n            </Authorize>\n          </tr>\n        </thead>\n        <tbody>\n          {!templateRows.length && (\n            <tr className={tableStyles.evenRow}>\n              <td colSpan={3}>No templates defined.</td>\n            </tr>\n          )}\n          {templateRows.map(({ name, template, provenance }, idx) => {\n            const isExpanded = !!expandedTemplates[name];\n            return (\n              <Fragment key={name}>\n                <tr key={name} className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                  <td>\n                    <CollapseToggle\n                      isCollapsed={!expandedTemplates[name]}\n                      onToggle={() => setExpandedTemplates({ ...expandedTemplates, [name]: !isExpanded })}\n                    />\n                  </td>\n                  <td>\n                    {name} {provenance && <ProvisioningBadge />}\n                  </td>\n                  <td className={tableStyles.actionsCell}>\n                    {provenance && (\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                          alertManagerName\n                        )}\n                        tooltip=\"view template\"\n                        icon=\"file-alt\"\n                      />\n                    )}\n                    {!provenance && (\n                      <Authorize actions={[permissions.update, permissions.delete]}>\n                        <Authorize actions={[permissions.update]}>\n                          <ActionIcon\n                            to={makeAMLink(\n                              `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                              alertManagerName\n                            )}\n                            tooltip=\"edit template\"\n                            icon=\"pen\"\n                          />\n                        </Authorize>\n                        <Authorize actions={[permissions.delete]}>\n                          <ActionIcon\n                            onClick={() => setTemplateToDelete(name)}\n                            tooltip=\"delete template\"\n                            icon=\"trash-alt\"\n                          />\n                        </Authorize>\n                      </Authorize>\n                    )}\n                  </td>\n                </tr>\n                {isExpanded && (\n                  <tr className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                    <td></td>\n                    <td colSpan={2}>\n                      <DetailsField label=\"Description\" horizontal={true}>\n                        <TemplateEditor\n                          width={'auto'}\n                          height={'auto'}\n                          autoHeight={true}\n                          value={template}\n                          showLineNumbers={false}\n                          monacoOptions={{\n                            readOnly: true,\n                            scrollBeyondLastLine: false,\n                          }}\n                        />\n                      </DetailsField>\n                    </td>\n                  </tr>\n                )}\n              </Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {!!templateToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete template\"\n          body={`Are you sure you want to delete template \"${templateToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteTemplate}\n          onDismiss={() => setTemplateToDelete(undefined)}\n        />\n      )}\n    </ReceiversSection>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Alert, LinkButton } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\n\nimport { ReceiversTable } from './ReceiversTable';\nimport { TemplatesTable } from './TemplatesTable';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const ReceiversAndTemplatesView: FC<Props> = ({ config, alertManagerName }) => {\n  const isCloud = alertManagerName !== GRAFANA_RULES_SOURCE_NAME;\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n\n  return (\n    <Stack direction=\"column\" gap={4}>\n      <ReceiversTable config={config} alertManagerName={alertManagerName} />\n      {!isVanillaAM && <TemplatesTable config={config} alertManagerName={alertManagerName} />}\n      {isCloud && (\n        <Authorize actions={[AccessControlAction.AlertingNotificationsExternalWrite]}>\n          <Alert severity=\"info\" title=\"Global config for contact points\">\n            <p>\n              For each external Alertmanager you can define global settings, like server addresses, usernames and\n              password, for all the supported contact points.\n            </p>\n            <LinkButton href={makeAMLink('alerting/notifications/global-config', alertManagerName)} variant=\"secondary\">\n              {isVanillaAM ? 'View global config' : 'Edit global config'}\n            </LinkButton>\n          </Alert>\n        </Authorize>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect } from 'react';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation, useParams } from 'react-router-dom';\n\nimport { NavModelItem, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Alert, LoadingPlaceholder, withErrorBoundary, useStyles2, Icon } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { ContactPointsState } from '../../../types';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { EditReceiverView } from './components/receivers/EditReceiverView';\nimport { EditTemplateView } from './components/receivers/EditTemplateView';\nimport { GlobalConfigForm } from './components/receivers/GlobalConfigForm';\nimport { NewReceiverView } from './components/receivers/NewReceiverView';\nimport { NewTemplateView } from './components/receivers/NewTemplateView';\nimport { ReceiversAndTemplatesView } from './components/receivers/ReceiversAndTemplatesView';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, fetchGrafanaNotifiersAction } from './state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nexport interface NotificationErrorProps {\n  errorCount: number;\n}\n\nfunction NotificationError({ errorCount }: NotificationErrorProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.warning} data-testid=\"receivers-notification-error\">\n      <Stack alignItems=\"flex-end\" direction=\"column\">\n        <Stack alignItems=\"center\">\n          <Icon name=\"exclamation-triangle\" />\n          <div className={styles.countMessage}>\n            {`${errorCount} ${pluralize('error', errorCount)} with contact points`}\n          </div>\n        </Stack>\n        <div>{'Some alert notifications might not be delivered'}</div>\n      </Stack>\n    </div>\n  );\n}\n\ntype PageType = 'receivers' | 'templates' | 'global-config';\n\nconst Receivers = () => {\n  const { useGetAlertmanagerChoiceQuery } = alertmanagerApi;\n\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { id, type } = useParams<{ id?: string; type?: PageType }>();\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/notifications');\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const {\n    result: config,\n    loading,\n    error,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const receiverTypes = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n\n  const shouldLoadConfig = isRoot || !config;\n  const shouldRenderNotificationStatus = isRoot;\n\n  useEffect(() => {\n    if (alertManagerSourceName && shouldLoadConfig) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch, shouldLoadConfig]);\n\n  useEffect(() => {\n    if (\n      alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME &&\n      !(receiverTypes.result || receiverTypes.loading || receiverTypes.error)\n    ) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [alertManagerSourceName, dispatch, receiverTypes]);\n\n  const contactPointsState: ContactPointsState = useGetContactPointsState(alertManagerSourceName ?? '');\n  const integrationsErrorCount = contactPointsState?.errorCount ?? 0;\n\n  const { data: alertmanagerChoice } = useGetAlertmanagerChoiceQuery();\n\n  const disableAmSelect = !isRoot;\n\n  let pageNav = getPageNavigationModel(type, id);\n\n  if (!alertManagerSourceName) {\n    return isRoot ? (\n      <AlertingPageWrapper pageId=\"receivers\" pageNav={pageNav}>\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    ) : (\n      <Redirect to=\"/alerting/notifications\" />\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"receivers\" pageNav={pageNav}>\n      <div className={styles.headingContainer}>\n        <AlertManagerPicker\n          current={alertManagerSourceName}\n          disabled={disableAmSelect}\n          onChange={setAlertManagerSourceName}\n          dataSources={alertManagers}\n        />\n        {shouldRenderNotificationStatus && integrationsErrorCount > 0 && (\n          <NotificationError errorCount={integrationsErrorCount} />\n        )}\n      </div>\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      <GrafanaAlertmanagerDeliveryWarning\n        alertmanagerChoice={alertmanagerChoice}\n        currentAlertmanager={alertManagerSourceName}\n      />\n      {loading && !config && <LoadingPlaceholder text=\"loading configuration...\" />}\n      {config && !error && (\n        <Switch>\n          <Route exact={true} path=\"/alerting/notifications\">\n            <ReceiversAndTemplatesView config={config} alertManagerName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/new\">\n            <NewTemplateView config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/:name/edit\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <EditTemplateView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  templateName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/receivers/new\">\n            <NewReceiverView config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/receivers/:name/edit\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <EditReceiverView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  receiverName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/global-config\">\n            <GlobalConfigForm config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nfunction getPageNavigationModel(type: PageType | undefined, id: string | undefined) {\n  let pageNav: NavModelItem | undefined;\n  if (type === 'receivers' || type === 'templates') {\n    const objectText = type === 'receivers' ? 'contact point' : 'notification template';\n    if (id) {\n      pageNav = {\n        text: id,\n        subTitle: `Edit the settings for a specific ${objectText}`,\n      };\n    } else {\n      pageNav = {\n        text: `New ${objectText}`,\n        subTitle: `Create a new ${objectText} for your notifications`,\n      };\n    }\n  } else if (type === 'global-config') {\n    pageNav = {\n      text: 'Global config',\n      subTitle: 'Manage your global configuration',\n    };\n  }\n  return pageNav;\n}\n\nexport default withErrorBoundary(Receivers, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warning: css`\n    color: ${theme.colors.warning.text};\n  `,\n  countMessage: css`\n    padding-left: 10px;\n  `,\n  headingContainer: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n});\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoice: build.query<AlertmanagerChoice, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n      transformResponse: (response: AlertmanagersChoiceResponse) => response.alertmanagersChoice,\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  alertmanagerChoice?: AlertmanagerChoice;\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({\n  alertmanagerChoice,\n  currentAlertmanager,\n}: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  if (currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME) {\n    return null;\n  }\n\n  if (alertmanagerChoice !== AlertmanagerChoice.External) {\n    return null;\n  }\n\n  return (\n    <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n      Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n      will not affect delivery of your alerts!\n      <div className={styles.adminHint}>\n        You can change the configuration on the Alerting Admin page. If you do not have access, contact your\n        Administrator\n      </div>\n    </Alert>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport interface ReceiverWithTypes extends Receiver {\n  grafanaAppReceiverType?: SupportedPlugin;\n}\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from './types';\n\nexport const GrafanaAppBadge = ({ grafanaAppType }: { grafanaAppType: SupportedPlugin }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.wrapper}>\n      <HorizontalGroup align=\"center\" spacing=\"xs\">\n        <img src={GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[grafanaAppType]} alt=\"\" height=\"12px\" />\n        <span>{grafanaAppType}</span>\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    text-align: left;\n    height: 22px;\n    display: inline-flex;\n    padding: 1px 4px;\n    border-radius: 3px;\n    border: 1px solid rgba(245, 95, 62, 1);\n    color: rgba(245, 95, 62, 1);\n    font-weight: ${theme.typography.fontWeightRegular};\n  `,\n});\n","import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { alertingApi } from './alertingApi';\nexport interface OnCallIntegration {\n  integration_url: string;\n}\nexport type OnCallIntegrationsResponse = OnCallIntegration[];\nexport type OnCallIntegrationsUrls = string[];\n\nexport const onCallApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getOnCallIntegrations: build.query<OnCallIntegrationsUrls, void>({\n      queryFn: async () => {\n        const integrations = await fetchOnCallIntegrations();\n        return { data: integrations };\n      },\n      providesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\nexport async function fetchOnCallIntegrations(): Promise<OnCallIntegrationsUrls> {\n  try {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<OnCallIntegrationsResponse>({\n        url: '/api/plugin-proxy/grafana-oncall-app/api/internal/v1/alert_receive_channels/',\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return response.data.map((result) => result.integration_url);\n  } catch (error) {\n    return [];\n  }\n}\nexport const { useGetOnCallIntegrationsQuery } = onCallApi;\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nexport const isInOnCallIntegrations = (url: string, integrationsUrls: string[]) => {\n  return integrationsUrls.includes(url);\n};\n\nexport const isOnCallReceiver = (receiver: Receiver, integrationsUrls: string[]) => {\n  if (!receiver.grafana_managed_receiver_configs) {\n    return false;\n  }\n  // A receiver it's an onCall contact point if it includes only one integration, and this integration it's an onCall\n  // An integration it's an onCall type if it's included in the list of integrations returned by the onCall api endpoint\n  const onlyOneIntegration = receiver.grafana_managed_receiver_configs.length === 1;\n  const isOncall = isInOnCallIntegrations(\n    receiver.grafana_managed_receiver_configs[0]?.settings?.url ?? '',\n    integrationsUrls\n  );\n  return onlyOneIntegration && isOncall;\n};\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useGetOnCallIntegrationsQuery } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver, ReceiverWithTypes } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = useGetOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n\nexport const useGetReceiversWithGrafanaAppTypes = (receivers: Receiver[]): ReceiverWithTypes[] => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  return receivers.map((receiver: Receiver) => {\n    return {\n      ...receiver,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n  });\n};\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { useAsync } from 'react-use';\n\nimport { PluginMeta } from '@grafana/data';\nimport { getPluginSettings } from 'app/features/plugins/pluginSettings';\n\nimport { PluginID } from '../components/PluginBridge';\ninterface PluginBridgeHookResponse {\n  loading: boolean;\n  installed?: boolean;\n  error?: Error;\n  settings?: PluginMeta<{}>;\n}\n\nexport function usePluginBridge(plugin: PluginID): PluginBridgeHookResponse {\n  const { loading, error, value } = useAsync(() => getPluginSettings(plugin, { showErrorAlert: false }));\n\n  const installed = value && !error && !loading;\n  const enabled = value?.enabled;\n  const isLoading = loading && !value;\n\n  if (isLoading) {\n    return { loading: true };\n  }\n\n  if (!installed || !enabled) {\n    return { loading: false, installed: false };\n  }\n\n  return { loading, installed: true, settings: value };\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n","export enum SupportedPlugin {\n  Incident = 'grafana-incident-app',\n  OnCall = 'grafana-oncall-app',\n  MachineLearning = 'grafana-ml-app',\n}\n"],"names":["navModel","notifications","setNotifications","getNotifications","state","fetchNotifications","res","deleteNotification","id","deleteNotificationConfirmed","notification","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","alertManagerSourceName","contactPointsStateEmpty","contactPointsState","propertyName","label","description","rest","basicAuthOption","tlsConfigOption","httpConfigOption","cloudNotifierTypes","globalConfigOptions","grafanaReceiverToFormValues","receiver","notifiers","channelMap","idCounter","channel","notifier","type","grafanaChannelConfigToFormChannelValues","cloudReceiverToFormValues","items","configs","config","cloudChannelConfigToFormChannelValues","formValuesToGrafanaReceiver","values","defaultChannelValues","channelValues","existing","formChannelValuesToGrafanaChannelConfig","formValuesToCloudReceiver","defaults","recv","__id","settings","sendResolved","omitEmptyValues","configsKey","updateConfigWithReceiver","replaceReceiverName","oldReceivers","name","updated","existingReceiver","renameReceiverInRoute","route","oldName","newName","option","obj","key","value","CloudCommonChannelSettings","pathPrefix","className","readOnly","register","Field","Checkbox","EMPTY_ARRAY","useControlledFieldArray","options","formAPI","softDelete","watch","getValues","reset","setValue","fields","update","updateFn","newItems","index","KeyValueMapInput","onChange","styles","getStyles","pairs","setPairs","recordToPairs","emitChange","pairsToRecord","deleteItem","newPairs","removed","updatePair","old","pair","i","Input","e","ActionIcon","Button","theme","record","StringArrayInput","newValue","updateValue","itemValue","v","CollapsibleSection","children","size","isCollapsed","setIsCollapsed","toggleCollapse","CollapseToggle","getReceiverFormFieldStyles","SubformArrayField","errors","defaultValues","path","append","remove","field","itemIndex","OptionField","SubformField","defaultValue","_watchValue","show","setShow","subOption","invalid","pathSuffix","optionPath","OptionInput","pathIndex","control","unregister","determineReadOnly","determineRequired","validateOption","InputControl","ref","Select","TextArea","validationRule","dependentOn","ChannelOptions","selectedChannelOptions","onResetSecureField","secureFields","currentFormValues","paths","selectedOptionValue","ChannelSubForm","onDuplicate","onDelete","onTest","CommonSettingsComponent","isEditable","isTestable","fieldName","trigger","formState","selectedType","testingReceiver","useUnifiedAlertingSelector","_secureFields","setSecureFields","updatedSecureFields","typeOptions","a","b","handleTest","mandatoryOptions","o","optionalOptions","contactPointTypeInputId","Alert","DeletedSubForm","ReceiverForm","initialValues","defaultItem","onSubmit","onTestChannel","takenReceiverNames","commonSettingsComponent","notifyApp","useCleanup","loading","handleSubmit","validateNameIsAvailable","submitCallback","item","onInvalid","initialItem","currentValues","CloudReceiverForm","dispatch","isVanillaAM","existingValue","newReceiver","isManageableAlertManagerDataSource","GrafanaCommonChannelSettings","NotificationType","notificationOptions","TestContactPointModal","isOpen","onDismiss","notificationType","setNotificationType","formMethods","data","alert","acc","Modal","Label","RadioButtonGroup","AnnotationsField","LabelsField","GrafanaReceiverForm","grafanaNotifiers","testChannelValues","setTestChannelValues","id2original","testNotification","chan","payload","hasProvisionedItems","Provisioning","LoadingPlaceholder","EditReceiverView","receiverName","ensureDefine","templateName","templateContent","content","indentedContent","line","GlobalTemplateData","AlertTemplateData","KeyValueTemplateFunctions","KeyValueCodeSnippet","TemplateDataDocs","getTemplateDataDocsStyles","AlertTemplateDataTable","TemplateDataTable","HoverCard","KeyValueTemplateDataTable","dataItems","caption","typeRenderer","getTemplateDataTableStyles","notes","tableStyles","args","returns","getAlertManagerSuggestions","monaco","kind","alertsLoopSnippet","alertDetailsSnippet","groupLabelsLoopSnippet","getKeyValueTemplate","commonLabelsLoopSnippet","commonAnnotationsLoopSnippet","labelsLoopSnippet","annotationsLoopSnippet","arrayName","getGlobalSuggestions","getAlertSuggestions","getAlertsSuggestions","getKeyValueSuggestions","snippets","getSnippetsSuggestions","snippetKind","snippetInsertRule","alerts","alertDetails","groupLabels","commonLabels","commonAnnotations","labels","annotations","registerGoTemplateAutocomplete","goTemplateAutocompleteProvider","model","position","context","word","range","completionProvider","CompletionProvider","isInsideGoExpression","wordBeforeDot","searchRange","goSyntaxRegex","match","wordContext","definition","buildAutocompleteSuggestion","detail","documentation","insertText","insertFallback","labelObject","GO_TEMPLATE_LANGUAGE_ID","registerLanguage","language","loader","l","monarch","TemplateEditor","props","shouldAutoHeight","disposeSuggestions","onEditorDidMount","editor","contentHeight","CodeEditor","TemplateForm","provenance","submit","template_files","templates","newConfig","validateNameIsUnique","FieldSet","TemplatingGuideline","width","height","s","EditTemplateView","template","InfoBox","GlobalConfigForm","onSubmitCallback","NewReceiverView","NewTemplateView","receiverTypeNames","extractNotifierTypeCounts","getGrafanaNotifierTypeCounts","getCortexAlertManagerNotifierTypeCounts","_","ReceiversSection","title","addButtonLabel","addButtonTo","showButton","UpdateActions","permissions","alertManagerName","onClickDeleteReceiver","Authorize","ViewAction","ReceiverError","errorCount","errorDetail","showErrorCount","text","Badge","NotifierHealth","errorsByNotifier","lastNotify","noErrorsColor","isLastNotifyNullDate","noErrorsText","ReceiverHealth","errorsByReceiver","someWithNoAttempt","useContactPointsState","receivers","errorStateAvailable","LastNotify","lastNotifyDate","Icon","possibleNullDurations","durationIsNull","duration","NotifiersTable","notifiersState","getNotifierColumns","lastError","lastNotifyDuration","notifierRows","typeState","notifierStatus","DynamicTable","ReceiversTable","receiverToDelete","setReceiverToDelete","showCannotDeleteReceiverModal","setShowCannotDeleteReceiverModal","deleteReceiver","rows","count","columns","useGetColumns","ConfirmModal","someNotifiersWithNoAttempt","status","baseColumns","provisioned","types","grafanaAppReceiverType","GrafanaAppBadge","healthColumn","TemplatesTable","expandedTemplates","setExpandedTemplates","templateRows","templateToDelete","setTemplateToDelete","deleteTemplate","idx","isExpanded","DetailsField","ReceiversAndTemplatesView","isCloud","NotificationError","Receivers","useGetAlertmanagerChoiceQuery","alertmanagerApi","alertManagers","setAlertManagerSourceName","useAlertManagerSourceName","isRoot","configRequests","receiverTypes","shouldLoadConfig","shouldRenderNotificationStatus","integrationsErrorCount","alertmanagerChoice","disableAmSelect","pageNav","getPageNavigationModel","AlertingPageWrapper","AlertManagerPicker","GrafanaAlertmanagerDeliveryWarning","NoAlertManagerWarning","objectText","response","pageId","isLoading","actions","fallback","action","currentAlertmanager","NoAlertManagersAvailable","OtherAlertManagersAvailable","availableAlertManagers","hasOtherAMs","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE","grafanaAppType","onCallApi","fetchOnCallIntegrations","lastValueFrom","result","useGetOnCallIntegrationsQuery","isInOnCallIntegrations","url","integrationsUrls","isOnCallReceiver","onlyOneIntegration","isOncall","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","useGetReceiversWithGrafanaAppTypes","tooltip","icon","to","target","onClick","tooltipPlacement","ariaLabel","useIsAlertManagerAvailable","am","queryParams","updateQueryParams","isAlertManagerAvailable","querySource","storeSource","useAlertManagersByPermission","accessType","plugin","installed","enabled","getAlertTableStyles","SupportedPlugin"],"sourceRoot":""}