{"version":3,"file":"CorrelationsPage.f2c05179b3b74c13b59e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/correlations/Forms/QueryEditorField.tsx","webpack://grafana/./public/app/features/correlations/Forms/CorrelationDetailsFormPart.tsx","webpack://grafana/./public/app/features/correlations/Forms/AddCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/EditCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/components/EmptyCorrelationsCTA.tsx","webpack://grafana/./public/app/features/correlations/CorrelationsPage.tsx","webpack://grafana/./public/app/features/correlations/useCorrelations.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Controller } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, DataQuery, getDefaultTimeRange, GrafanaTheme2 } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport {\n  Field,\n  LoadingPlaceholder,\n  Alert,\n  Button,\n  HorizontalGroup,\n  Icon,\n  FieldValidationMessage,\n  useStyles2,\n} from '@grafana/ui';\n\nimport { generateKey } from '../../../core/utils/explore';\nimport { QueryTransaction } from '../../../types';\nimport { runRequest } from '../../query/state/runRequest';\n\ninterface Props {\n  dsUid?: string;\n  name: string;\n  invalid?: boolean;\n  error?: string;\n}\n\nfunction getStyle(theme: GrafanaTheme2) {\n  return {\n    valid: css`\n      color: ${theme.colors.success.text};\n    `,\n  };\n}\n\nexport const QueryEditorField = ({ dsUid, invalid, error, name }: Props) => {\n  const [isValidQuery, setIsValidQuery] = useState<boolean | undefined>(undefined);\n\n  const style = useStyles2(getStyle);\n\n  const {\n    value: datasource,\n    loading: dsLoading,\n    error: dsError,\n  } = useAsync(async () => {\n    if (!dsUid) {\n      return;\n    }\n    return getDataSourceSrv().get(dsUid);\n  }, [dsUid]);\n\n  const QueryEditor = datasource?.components?.QueryEditor;\n\n  const handleValidation = (value: DataQuery) => {\n    const interval = '1s';\n    const intervalMs = 1000;\n    const id = generateKey();\n    const queries = [{ ...value, refId: 'A' }];\n\n    const transaction: QueryTransaction = {\n      queries,\n      request: {\n        app: CoreApp.Correlations,\n        timezone: 'utc',\n        startTime: Date.now(),\n        interval,\n        intervalMs,\n        targets: queries,\n        range: getDefaultTimeRange(),\n        requestId: 'correlations_' + id,\n        scopedVars: {\n          __interval: { text: interval, value: interval },\n          __interval_ms: { text: intervalMs, value: intervalMs },\n        },\n      },\n      id,\n      done: false,\n    };\n\n    if (datasource) {\n      runRequest(datasource, transaction.request).subscribe((panelData) => {\n        if (\n          !panelData ||\n          panelData.state === 'Error' ||\n          (panelData.state === 'Done' && panelData.series.length === 0)\n        ) {\n          setIsValidQuery(false);\n        } else if (\n          panelData.state === 'Done' &&\n          panelData.series.length > 0 &&\n          Boolean(panelData.series.find((element) => element.length > 0))\n        ) {\n          setIsValidQuery(true);\n        } else {\n          setIsValidQuery(undefined);\n        }\n      });\n    }\n  };\n\n  return (\n    <Field label=\"Query\" invalid={invalid} error={error}>\n      <Controller\n        name={name}\n        rules={{\n          validate: {\n            hasQueryEditor: () =>\n              QueryEditor !== undefined || 'The selected target data source must export a query editor.',\n          },\n        }}\n        render={({ field: { value, onChange } }) => {\n          if (dsLoading) {\n            return <LoadingPlaceholder text=\"Loading query editor...\" />;\n          }\n          if (dsError) {\n            return <Alert title=\"Error loading data source\">The selected data source could not be loaded.</Alert>;\n          }\n          if (!datasource) {\n            return (\n              <Alert title=\"No data source selected\" severity=\"info\">\n                Please select a target data source first.\n              </Alert>\n            );\n          }\n          if (!QueryEditor) {\n            return <Alert title=\"Data source does not export a query editor.\"></Alert>;\n          }\n          return (\n            <>\n              <QueryEditor\n                app={CoreApp.Correlations}\n                onRunQuery={() => handleValidation(value)}\n                onChange={(value) => {\n                  setIsValidQuery(undefined);\n                  onChange(value);\n                }}\n                datasource={datasource}\n                query={value}\n              />\n              <HorizontalGroup justify=\"flex-end\">\n                {isValidQuery ? (\n                  <div className={style.valid}>\n                    <Icon name=\"check\" /> This query is valid.\n                  </div>\n                ) : isValidQuery === false ? (\n                  <FieldValidationMessage>This query is not valid.</FieldValidationMessage>\n                ) : null}\n                <Button variant=\"secondary\" icon={'check'} type=\"button\" onClick={() => handleValidation(value)}>\n                  Validate query\n                </Button>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      />\n    </Field>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { Correlation } from '../types';\n\nimport { QueryEditorField } from './QueryEditorField';\nimport { FormDTO } from './types';\n\nconst getInputId = (inputName: string, correlation?: CorrelationBaseData) => {\n  if (!correlation) {\n    return inputName;\n  }\n\n  return `${inputName}_${correlation.sourceUID}-${correlation.uid}`;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  label: css`\n    max-width: ${theme.spacing(32)};\n  `,\n  description: css`\n    max-width: ${theme.spacing(80)};\n  `,\n});\n\ntype CorrelationBaseData = Pick<Correlation, 'uid' | 'sourceUID' | 'targetUID'>;\ninterface Props {\n  readOnly?: boolean;\n  correlation?: CorrelationBaseData;\n}\n\nexport function CorrelationDetailsFormPart({ readOnly = false, correlation }: Props) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<FormDTO>();\n  const targetUID: string | undefined = useWatch({ name: 'targetUID' }) || correlation?.targetUID;\n\n  return (\n    <>\n      <input type=\"hidden\" {...register('config.type')} />\n\n      <Field label=\"Label\" className={styles.label}>\n        <Input\n          id={getInputId('label', correlation)}\n          {...register('label')}\n          readOnly={readOnly}\n          placeholder=\"i.e. Tempo traces\"\n        />\n      </Field>\n\n      <Field\n        label=\"Description\"\n        // the Field component automatically adds margin to itself, so we are forced to workaround it by overriding  its styles\n        className={cx(styles.description)}\n      >\n        <TextArea id={getInputId('description', correlation)} {...register('description')} readOnly={readOnly} />\n      </Field>\n\n      <Field\n        label=\"Target field\"\n        className={styles.label}\n        invalid={!!errors?.config?.field}\n        error={errors?.config?.field?.message}\n      >\n        <Input\n          id={getInputId('field', correlation)}\n          {...register('config.field', { required: 'This field is required.' })}\n          readOnly={readOnly}\n        />\n      </Field>\n\n      <QueryEditorField\n        name=\"config.target\"\n        dsUid={targetUID}\n        invalid={!!errors?.config?.target}\n        // @ts-expect-error react-hook-form's errors do not work well with object types\n        error={errors?.config?.target?.message}\n      />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, Field, HorizontalGroup, PanelContainer, useStyles2 } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { useCorrelations } from '../useCorrelations';\n\nimport { CorrelationDetailsFormPart } from './CorrelationDetailsFormPart';\nimport { FormDTO } from './types';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelContainer: css`\n    position: relative;\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  linksToContainer: css`\n    flex-grow: 1;\n    /* This is the width of the textarea minus the sum of the label&description fields,\n     * so that this element takes exactly the remaining space and the inputs will be\n     * nicely aligned with the textarea\n    **/\n    max-width: ${theme.spacing(80 - 64)};\n    margin-top: ${theme.spacing(3)};\n    text-align: right;\n    padding-right: ${theme.spacing(1)};\n  `,\n  // we can't use HorizontalGroup because it wraps elements in divs and sets margins on them\n  horizontalGroup: css`\n    display: flex;\n  `,\n});\n\ninterface Props {\n  onClose: () => void;\n  onCreated: () => void;\n}\n\nconst withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n\nexport const AddCorrelationForm = ({ onClose, onCreated }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    create: { execute, loading, error, value },\n  } = useCorrelations();\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onCreated();\n    }\n  }, [error, loading, value, onCreated]);\n\n  const methods = useForm<FormDTO>({ defaultValues: { config: { type: 'query', target: {} } } });\n\n  return (\n    <PanelContainer className={styles.panelContainer}>\n      <CloseButton onClick={onClose} />\n      <FormProvider {...methods}>\n        <form onSubmit={methods.handleSubmit(execute)}>\n          <div className={styles.horizontalGroup}>\n            <Controller\n              control={methods.control}\n              name=\"sourceUID\"\n              rules={{\n                required: { value: true, message: 'This field is required.' },\n                validate: {\n                  writable: (uid: string) =>\n                    !getDatasourceSrv().getInstanceSettings(uid)?.readOnly ||\n                    \"Source can't be a read-only data source.\",\n                },\n              }}\n              render={({ field: { onChange, value } }) => (\n                <Field\n                  label=\"Source\"\n                  htmlFor=\"source\"\n                  invalid={!!methods.formState.errors.sourceUID}\n                  error={methods.formState.errors.sourceUID?.message}\n                >\n                  <DataSourcePicker\n                    onChange={withDsUID(onChange)}\n                    noDefault\n                    current={value}\n                    inputId=\"source\"\n                    width={32}\n                  />\n                </Field>\n              )}\n            />\n            <div className={styles.linksToContainer}>Links to</div>\n            <Controller\n              control={methods.control}\n              name=\"targetUID\"\n              rules={{ required: { value: true, message: 'This field is required.' } }}\n              render={({ field: { onChange, value } }) => (\n                <Field\n                  label=\"Target\"\n                  htmlFor=\"target\"\n                  invalid={!!methods.formState.errors.targetUID}\n                  error={methods.formState.errors.targetUID?.message}\n                >\n                  <DataSourcePicker\n                    onChange={withDsUID(onChange)}\n                    noDefault\n                    current={value}\n                    inputId=\"target\"\n                    width={32}\n                  />\n                </Field>\n              )}\n            />\n          </div>\n\n          <CorrelationDetailsFormPart />\n\n          <HorizontalGroup justify=\"flex-end\">\n            <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'plus'} type=\"submit\" disabled={loading}>\n              Add\n            </Button>\n          </HorizontalGroup>\n        </form>\n      </FormProvider>\n    </PanelContainer>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { Button, HorizontalGroup } from '@grafana/ui';\n\nimport { Correlation } from '../types';\nimport { useCorrelations } from '../useCorrelations';\n\nimport { CorrelationDetailsFormPart } from './CorrelationDetailsFormPart';\nimport { EditFormDTO } from './types';\n\ninterface Props {\n  onUpdated: () => void;\n  correlation: Correlation;\n  readOnly?: boolean;\n}\n\nexport const EditCorrelationForm = ({ onUpdated, correlation, readOnly = false }: Props) => {\n  const {\n    update: { execute, loading, error, value },\n  } = useCorrelations();\n\n  const onSubmit = (data: EditFormDTO) => {\n    return execute({ ...data, sourceUID: correlation.sourceUID, uid: correlation.uid });\n  };\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onUpdated();\n    }\n  }, [error, loading, value, onUpdated]);\n\n  const { uid, sourceUID, targetUID, ...otherCorrelation } = correlation;\n\n  const methods = useForm<EditFormDTO>({ defaultValues: otherCorrelation });\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={readOnly ? (e) => e.preventDefault() : methods.handleSubmit(onSubmit)}>\n        <CorrelationDetailsFormPart readOnly={readOnly} correlation={correlation} />\n\n        {!readOnly && (\n          <HorizontalGroup justify=\"flex-end\">\n            <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'save'} type=\"submit\" disabled={loading}>\n              Save\n            </Button>\n          </HorizontalGroup>\n        )}\n      </form>\n    </FormProvider>\n  );\n};\n","import React from 'react';\n\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\ninterface Props {\n  onClick?: () => void;\n}\nexport const EmptyCorrelationsCTA = ({ onClick }: Props) => {\n  // TODO: if there are no datasources show a different message\n\n  return (\n    <EmptyListCTA\n      title=\"You haven't defined any correlation yet.\"\n      buttonIcon=\"gf-glue\"\n      onClick={onClick}\n      buttonTitle=\"Add correlation\"\n      proTip=\"you can also define correlations via datasource provisioning\"\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { negate } from 'lodash';\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError, reportInteraction } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  DeleteButton,\n  HorizontalGroup,\n  LoadingPlaceholder,\n  useStyles2,\n  Alert,\n  InteractiveTable,\n  type Column,\n  type CellProps,\n  type SortByFn,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AccessControlAction } from 'app/types';\n\nimport { AddCorrelationForm } from './Forms/AddCorrelationForm';\nimport { EditCorrelationForm } from './Forms/EditCorrelationForm';\nimport { EmptyCorrelationsCTA } from './components/EmptyCorrelationsCTA';\nimport type { RemoveCorrelationParams } from './types';\nimport { CorrelationData, useCorrelations } from './useCorrelations';\n\nconst sortDatasource: SortByFn<CorrelationData> = (a, b, column) =>\n  a.values[column].name.localeCompare(b.values[column].name);\n\nconst isSourceReadOnly = ({ source }: Pick<CorrelationData, 'source'>) => source.readOnly;\n\nconst loaderWrapper = css`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function CorrelationsPage() {\n  const navModel = useNavModel('correlations');\n  const [isAdding, setIsAdding] = useState(false);\n  const {\n    remove,\n    get: { execute: fetchCorrelations, ...get },\n  } = useCorrelations();\n\n  useEffect(() => {\n    fetchCorrelations();\n    // we only want to fetch data on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  const handleAdded = useCallback(() => {\n    reportInteraction('grafana_correlations_added');\n    fetchCorrelations();\n    setIsAdding(false);\n  }, [fetchCorrelations]);\n\n  const handleUpdated = useCallback(() => {\n    reportInteraction('grafana_correlations_edited');\n    fetchCorrelations();\n  }, [fetchCorrelations]);\n\n  const handleDelete = useCallback(\n    (params: RemoveCorrelationParams) => {\n      remove.execute(params);\n    },\n    [remove]\n  );\n\n  // onDelete - triggers when deleting a correlation\n  useEffect(() => {\n    if (remove.value) {\n      reportInteraction('grafana_correlations_deleted');\n    }\n  }, [remove.value]);\n\n  useEffect(() => {\n    if (!remove.error && !remove.loading && remove.value) {\n      fetchCorrelations();\n    }\n  }, [remove.error, remove.loading, remove.value, fetchCorrelations]);\n\n  const RowActions = useCallback(\n    ({\n      row: {\n        original: {\n          source: { uid: sourceUID, readOnly },\n          uid,\n        },\n      },\n    }: CellProps<CorrelationData, void>) =>\n      !readOnly && (\n        <DeleteButton\n          aria-label=\"delete correlation\"\n          onConfirm={() => handleDelete({ sourceUID, uid })}\n          closeOnConfirm\n        />\n      ),\n    [handleDelete]\n  );\n\n  const columns = useMemo<Array<Column<CorrelationData>>>(\n    () => [\n      {\n        id: 'info',\n        cell: InfoCell,\n        disableGrow: true,\n        visible: (data) => data.some(isSourceReadOnly),\n      },\n      {\n        id: 'source',\n        header: 'Source',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      {\n        id: 'target',\n        header: 'Target',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      { id: 'label', header: 'Label', sortType: 'alphanumeric' },\n      {\n        id: 'actions',\n        cell: RowActions,\n        disableGrow: true,\n        visible: (data) => canWriteCorrelations && data.some(negate(isSourceReadOnly)),\n      },\n    ],\n    [RowActions, canWriteCorrelations]\n  );\n\n  const data = useMemo(() => get.value, [get.value]);\n\n  const showEmptyListCTA = data?.length === 0 && !isAdding && !get.error;\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <HorizontalGroup justify=\"space-between\">\n            <div>\n              <h4>Correlations</h4>\n              <p>Define how data living in different data sources relates to each other.</p>\n            </div>\n            {canWriteCorrelations && data?.length !== 0 && data !== undefined && !isAdding && (\n              <Button icon=\"plus\" onClick={() => setIsAdding(true)}>\n                Add new\n              </Button>\n            )}\n          </HorizontalGroup>\n        </div>\n\n        <div>\n          {!data && get.loading && (\n            <div className={loaderWrapper}>\n              <LoadingPlaceholder text=\"loading...\" />\n            </div>\n          )}\n\n          {showEmptyListCTA && <EmptyCorrelationsCTA onClick={() => setIsAdding(true)} />}\n\n          {\n            // This error is not actionable, it'd be nice to have a recovery button\n            get.error && (\n              <Alert severity=\"error\" title=\"Error fetching correlation data\" topSpacing={2}>\n                {(isFetchError(get.error) && get.error.data?.message) ||\n                  'An unknown error occurred while fetching correlation data. Please try again.'}\n              </Alert>\n            )\n          }\n\n          {isAdding && <AddCorrelationForm onClose={() => setIsAdding(false)} onCreated={handleAdded} />}\n\n          {data && data.length >= 1 && (\n            <InteractiveTable\n              renderExpandedRow={(correlation) => (\n                <ExpendedRow\n                  correlation={correlation}\n                  onUpdated={handleUpdated}\n                  readOnly={isSourceReadOnly({ source: correlation.source }) || !canWriteCorrelations}\n                />\n              )}\n              columns={columns}\n              data={data}\n              getRowId={(correlation) => `${correlation.source.uid}-${correlation.uid}`}\n            />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ninterface ExpandedRowProps {\n  correlation: CorrelationData;\n  readOnly: boolean;\n  onUpdated: () => void;\n}\nfunction ExpendedRow({ correlation: { source, target, ...correlation }, readOnly, onUpdated }: ExpandedRowProps) {\n  useEffect(\n    () => reportInteraction('grafana_correlations_details_expanded'),\n    // we only want to fire this on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <EditCorrelationForm\n      correlation={{ ...correlation, sourceUID: source.uid, targetUID: target.uid }}\n      onUpdated={onUpdated}\n      readOnly={readOnly}\n    />\n  );\n}\n\nconst getDatasourceCellStyles = (theme: GrafanaTheme2) => ({\n  root: css`\n    display: flex;\n    align-items: center;\n  `,\n  dsLogo: css`\n    margin-right: ${theme.spacing()};\n    height: 16px;\n    width: 16px;\n  `,\n});\n\nconst DataSourceCell = memo(\n  function DataSourceCell({\n    cell: { value },\n  }: CellProps<CorrelationData, CorrelationData['source'] | CorrelationData['target']>) {\n    const styles = useStyles2(getDatasourceCellStyles);\n\n    return (\n      <span className={styles.root}>\n        <img src={value.meta.info.logos.small} alt=\"\" className={styles.dsLogo} />\n        {value.name}\n      </span>\n    );\n  },\n  ({ cell: { value } }, { cell: { value: prevValue } }) => {\n    return value.type === prevValue.type && value.name === prevValue.name;\n  }\n);\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst InfoCell = memo(\n  function InfoCell({ ...props }: CellProps<CorrelationData, void>) {\n    const readOnly = props.row.original.source.readOnly;\n\n    if (readOnly) {\n      return <Badge text=\"Read only\" color=\"purple\" className={noWrap} />;\n    } else {\n      return null;\n    }\n  },\n  (props, prevProps) => props.row.original.source.readOnly === prevProps.row.original.source.readOnly\n);\n","import { useAsyncFn } from 'react-use';\nimport { lastValueFrom } from 'rxjs';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { getDataSourceSrv, FetchResponse } from '@grafana/runtime';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\n\nimport { Correlation, CreateCorrelationParams, RemoveCorrelationParams, UpdateCorrelationParams } from './types';\n\nexport interface CorrelationData extends Omit<Correlation, 'sourceUID' | 'targetUID'> {\n  source: DataSourceInstanceSettings;\n  target: DataSourceInstanceSettings;\n}\n\nconst toEnrichedCorrelationData = ({ sourceUID, targetUID, ...correlation }: Correlation): CorrelationData => ({\n  ...correlation,\n  source: getDataSourceSrv().getInstanceSettings(sourceUID)!,\n  target: getDataSourceSrv().getInstanceSettings(targetUID)!,\n});\n\nconst toEnrichedCorrelationsData = (correlations: Correlation[]) => correlations.map(toEnrichedCorrelationData);\nfunction getData<T>(response: FetchResponse<T>) {\n  return response.data;\n}\n\n/**\n * hook for managing correlations data.\n * TODO: ideally this hook shouldn't have any side effect like showing notifications on error\n * and let consumers handle them. It works nicely with the correlations settings page, but when we'll\n * expose this we'll have to remove those side effects.\n */\nexport const useCorrelations = () => {\n  const { backend } = useGrafana();\n\n  const [getInfo, get] = useAsyncFn<() => Promise<CorrelationData[]>>(\n    () =>\n      lastValueFrom(\n        backend.fetch<Correlation[]>({ url: '/api/datasources/correlations', method: 'GET', showErrorAlert: false })\n      )\n        .then(getData)\n        .then(toEnrichedCorrelationsData),\n    [backend]\n  );\n\n  const [createInfo, create] = useAsyncFn<(params: CreateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, ...correlation }) =>\n      backend.post(`/api/datasources/uid/${sourceUID}/correlations`, correlation).then(toEnrichedCorrelationData),\n    [backend]\n  );\n\n  const [removeInfo, remove] = useAsyncFn<(params: RemoveCorrelationParams) => Promise<{ message: string }>>(\n    ({ sourceUID, uid }) => backend.delete(`/api/datasources/uid/${sourceUID}/correlations/${uid}`),\n    [backend]\n  );\n\n  const [updateInfo, update] = useAsyncFn<(params: UpdateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, uid, ...correlation }) =>\n      backend\n        .patch(`/api/datasources/uid/${sourceUID}/correlations/${uid}`, correlation)\n        .then(toEnrichedCorrelationData),\n    [backend]\n  );\n\n  return {\n    create: {\n      execute: create,\n      ...createInfo,\n    },\n    update: {\n      execute: update,\n      ...updateInfo,\n    },\n    get: {\n      execute: get,\n      ...getInfo,\n    },\n    remove: {\n      execute: remove,\n      ...removeInfo,\n    },\n  };\n};\n"],"names":["getStyle","theme","QueryEditorField","dsUid","invalid","error","name","isValidQuery","setIsValidQuery","style","datasource","dsLoading","dsError","useAsync","QueryEditor","handleValidation","value","interval","id","queries","transaction","runRequest","panelData","element","Field","onChange","LoadingPlaceholder","Alert","Icon","FieldValidationMessage","Button","getInputId","inputName","correlation","getStyles","CorrelationDetailsFormPart","readOnly","styles","register","errors","targetUID","Input","TextArea","withDsUID","fn","ds","AddCorrelationForm","onClose","onCreated","execute","loading","useCorrelations","methods","PanelContainer","CloseButton","uid","DataSourcePicker","EditCorrelationForm","onUpdated","onSubmit","data","sourceUID","otherCorrelation","e","EmptyCorrelationsCTA","onClick","EmptyListCTA","sortDatasource","a","b","column","isSourceReadOnly","source","loaderWrapper","CorrelationsPage","navModel","useNavModel","isAdding","setIsAdding","remove","fetchCorrelations","get","canWriteCorrelations","handleAdded","handleUpdated","handleDelete","params","RowActions","DeleteButton","columns","InfoCell","DataSourceCell","showEmptyListCTA","Page","InteractiveTable","ExpendedRow","target","getDatasourceCellStyles","prevValue","noWrap","props","Badge","prevProps","toEnrichedCorrelationData","toEnrichedCorrelationsData","correlations","getData","response","backend","getInfo","createInfo","create","removeInfo","updateInfo","update"],"sourceRoot":""}