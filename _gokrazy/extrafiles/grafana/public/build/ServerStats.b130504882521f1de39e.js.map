{"version":3,"file":"ServerStats.b130504882521f1de39e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/CrawlerStartButton.tsx","webpack://grafana/./public/app/features/admin/CrawlerStatus.tsx","webpack://grafana/./public/app/features/admin/state/apis.tsx","webpack://grafana/./public/app/features/admin/ServerStats.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Modal, useTheme2 } from '@grafana/ui';\n\nexport const CrawlerStartButton = () => {\n  const styles = getStyles(useTheme2());\n  const [open, setOpen] = useState(false);\n  const [body, setBody] = useState({\n    mode: 'thumbs',\n    theme: config.theme2.isLight ? 'light' : 'dark',\n  });\n  const onDismiss = () => setOpen(false);\n  const doStart = () => {\n    getBackendSrv()\n      .post('/api/admin/crawler/start', body)\n      .then((v) => {\n        console.log('GOT', v);\n        onDismiss();\n      });\n  };\n\n  return (\n    <>\n      <Modal title={'Start crawler'} isOpen={open} onDismiss={onDismiss}>\n        <div className={styles.wrap}>\n          <CodeEditor\n            height={200}\n            value={JSON.stringify(body, null, 2) ?? ''}\n            showLineNumbers={false}\n            readOnly={false}\n            language=\"json\"\n            showMiniMap={false}\n            onBlur={(text: string) => {\n              setBody(JSON.parse(text)); // force JSON?\n            }}\n          />\n        </div>\n        <Modal.ButtonRow>\n          <Button type=\"submit\" onClick={doStart}>\n            Start\n          </Button>\n          <Button variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n\n      <Button onClick={() => setOpen(true)} variant=\"primary\">\n        Start\n      </Button>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 2px solid #111;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { CrawlerStartButton } from './CrawlerStartButton';\n\ninterface CrawlerStatusMessage {\n  state: string;\n  started: string;\n  finished: string;\n  complete: number;\n  queue: number;\n  last: string;\n}\n\nexport const CrawlerStatus = () => {\n  const styles = getStyles(useTheme2());\n  const [status, setStatus] = useState<CrawlerStatusMessage>();\n\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv()\n      .getStream<CrawlerStatusMessage>({\n        scope: LiveChannelScope.Grafana,\n        namespace: 'broadcast',\n        path: 'crawler',\n      })\n      .subscribe({\n        next: (evt) => {\n          if (isLiveChannelMessageEvent(evt)) {\n            setStatus(evt.message);\n          } else if (isLiveChannelStatusEvent(evt)) {\n            setStatus(evt.message);\n          }\n        },\n      });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  if (!status) {\n    return (\n      <div className={styles.wrap}>\n        No status (never run)\n        <br />\n        <CrawlerStartButton />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrap}>\n      <pre>{JSON.stringify(status, null, 2)}</pre>\n      {status.state !== 'running' && <CrawlerStartButton />}\n      {status.state !== 'stopped' && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            getBackendSrv().post('/api/admin/crawler/stop');\n          }}\n        >\n          Stop\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 4px solid red;\n    `,\n    running: css`\n      border: 4px solid green;\n    `,\n  };\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nexport interface ServerStat {\n  activeAdmins: number;\n  activeEditors: number;\n  activeSessions: number;\n  activeUsers: number;\n  activeViewers: number;\n  admins: number;\n  alerts: number;\n  dashboards: number;\n  datasources: number;\n  editors: number;\n  orgs: number;\n  playlists: number;\n  snapshots: number;\n  stars: number;\n  tags: number;\n  users: number;\n  viewers: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat | null> => {\n  return getBackendSrv()\n    .get('api/admin/stats')\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CardContainer, LinkButton, useStyles2 } from '@grafana/ui';\nimport { AccessControlAction } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\nimport { Loader } from '../plugins/admin/components/Loader';\n\nimport { CrawlerStatus } from './CrawlerStatus';\nimport { getServerStats, ServerStat } from './state/apis';\n\nexport const ServerStats = () => {\n  const [stats, setStats] = useState<ServerStat | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToDataSources = contextSrv.hasAccess(AccessControlAction.DataSourcesRead, contextSrv.isGrafanaAdmin);\n  const hasAccessToAdminUsers = contextSrv.hasAccess(AccessControlAction.UsersRead, contextSrv.isGrafanaAdmin);\n\n  useEffect(() => {\n    if (contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n      setIsLoading(true);\n      getServerStats().then((stats) => {\n        setStats(stats);\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  if (!contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2 className={styles.title}>Instance statistics</h2>\n      {isLoading ? (\n        <div className={styles.loader}>\n          <Loader text={'Loading instance stats...'} />\n        </div>\n      ) : stats ? (\n        <div className={styles.row}>\n          <StatCard\n            content={[\n              { name: 'Dashboards (starred)', value: `${stats.dashboards} (${stats.stars})` },\n              { name: 'Tags', value: stats.tags },\n              { name: 'Playlists', value: stats.playlists },\n              { name: 'Snapshots', value: stats.snapshots },\n            ]}\n            footer={\n              <LinkButton href={'/dashboards'} variant={'secondary'}>\n                Manage dashboards\n              </LinkButton>\n            }\n          />\n\n          <div className={styles.doubleRow}>\n            <StatCard\n              content={[{ name: 'Data sources', value: stats.datasources }]}\n              footer={\n                hasAccessToDataSources && (\n                  <LinkButton href={'/datasources'} variant={'secondary'}>\n                    Manage data sources\n                  </LinkButton>\n                )\n              }\n            />\n            <StatCard\n              content={[{ name: 'Alerts', value: stats.alerts }]}\n              footer={\n                <LinkButton href={'/alerting/list'} variant={'secondary'}>\n                  Alerts\n                </LinkButton>\n              }\n            />\n          </div>\n          <StatCard\n            content={[\n              { name: 'Organisations', value: stats.orgs },\n              { name: 'Users total', value: stats.users },\n              { name: 'Active users in last 30 days', value: stats.activeUsers },\n              { name: 'Active sessions', value: stats.activeSessions },\n            ]}\n            footer={\n              hasAccessToAdminUsers && (\n                <LinkButton href={'/admin/users'} variant={'secondary'}>\n                  Manage users\n                </LinkButton>\n              )\n            }\n          />\n        </div>\n      ) : (\n        <p className={styles.notFound}>No stats found.</p>\n      )}\n\n      {config.featureToggles.dashboardPreviews && config.featureToggles.dashboardPreviewsAdmin && <CrawlerStatus />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n\n      & > div:not(:last-of-type) {\n        margin-right: ${theme.spacing(2)};\n      }\n\n      & > div {\n        width: 33.3%;\n      }\n    `,\n    doubleRow: css`\n      display: flex;\n      flex-direction: column;\n\n      & > div:first-of-type {\n        margin-bottom: ${theme.spacing(2)};\n      }\n    `,\n\n    loader: css`\n      height: 290px;\n    `,\n\n    notFound: css`\n      font-size: ${theme.typography.h6.fontSize};\n      text-align: center;\n      height: 290px;\n    `,\n  };\n};\n\ntype StatCardProps = {\n  content: Array<Record<string, number | string>>;\n  footer?: JSX.Element | boolean;\n};\n\nconst StatCard = ({ content, footer }: StatCardProps) => {\n  const styles = useStyles2(getCardStyles);\n  return (\n    <CardContainer className={styles.container} disableHover>\n      <div className={styles.inner}>\n        <div className={styles.content}>\n          {content.map((item) => {\n            return (\n              <div key={item.name} className={styles.row}>\n                <span>{item.name}</span>\n                <span>{item.value}</span>\n              </div>\n            );\n          })}\n        </div>\n        {footer && <div>{footer}</div>}\n      </div>\n    </CardContainer>\n  );\n};\n\nconst getCardStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      padding: ${theme.spacing(2)};\n    `,\n    inner: css`\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n    `,\n    content: css`\n      flex: 1 0 auto;\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin-bottom: ${theme.spacing(2)};\n      align-items: center;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <div className=\"page-loader-wrapper\">\n      <LoadingPlaceholder text={text} />\n    </div>\n  );\n};\n"],"names":["CrawlerStartButton","styles","getStyles","open","setOpen","body","setBody","config","onDismiss","doStart","Modal","CodeEditor","text","Button","theme","CrawlerStatus","status","setStatus","subscription","evt","getServerStats","err","ServerStats","stats","setStats","isLoading","setIsLoading","hasAccessToDataSources","hasAccessToAdminUsers","Loader","StatCard","content","footer","getCardStyles","CardContainer","item"],"sourceRoot":""}