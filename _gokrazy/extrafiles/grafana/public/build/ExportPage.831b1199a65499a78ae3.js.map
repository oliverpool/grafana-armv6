{"version":3,"file":"ExportPage.831b1199a65499a78ae3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/storage/ExportPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useAsync, useLocalStorage } from 'react-use';\n\nimport { isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope, SelectableValue } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv, config } from '@grafana/runtime';\nimport {\n  Button,\n  CodeEditor,\n  Collapse,\n  Field,\n  HorizontalGroup,\n  InlineField,\n  InlineFieldRow,\n  InlineSwitch,\n  Input,\n  LinkButton,\n  Select,\n  Switch,\n  Alert,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport const EXPORT_LOCAL_STORAGE_KEY = 'grafana.export.config';\n\ninterface ExportStatusMessage {\n  running: boolean;\n  target: string;\n  started: number;\n  finished: number;\n  update: number;\n  count: number;\n  current: number;\n  last: string;\n  status: string;\n}\n\ninterface ExportJob {\n  format: string; // 'git';\n  generalFolderPath: string;\n  history: boolean;\n  exclude: Record<string, boolean>;\n\n  git?: {};\n}\n\nconst defaultJob: ExportJob = {\n  format: 'git',\n  generalFolderPath: 'general',\n  history: true,\n  exclude: {},\n  git: {},\n};\n\ninterface ExporterInfo {\n  key: string;\n  name: string;\n  description: string;\n  children?: ExporterInfo[];\n}\n\nenum StorageFormat {\n  Git = 'git',\n  EntityStore = 'entityStore',\n}\n\nconst formats: Array<SelectableValue<string>> = [\n  { label: 'GIT', value: StorageFormat.Git, description: 'Exports a fresh git repository' },\n  { label: 'Entity store', value: StorageFormat.EntityStore, description: 'Export to the SQL based entity store' },\n];\n\ninterface Props extends GrafanaRouteComponentProps {}\n\nconst labelWith = 18;\n\nexport default function ExportPage(props: Props) {\n  const navModel = useNavModel('export');\n  const [status, setStatus] = useState<ExportStatusMessage>();\n  const [body, setBody] = useLocalStorage<ExportJob>(EXPORT_LOCAL_STORAGE_KEY, defaultJob);\n  const [details, setDetails] = useState(false);\n\n  const serverOptions = useAsync(() => {\n    return getBackendSrv().get<{ exporters: ExporterInfo[] }>('/api/admin/export/options');\n  }, []);\n\n  const doStart = () => {\n    getBackendSrv()\n      .post('/api/admin/export', body)\n      .then((v) => {\n        if (v.cfg && v.status.running) {\n          setBody(v.cfg); // saves the valid parsed body\n        }\n      });\n  };\n\n  const doStop = () => {\n    getBackendSrv().post('/api/admin/export/stop');\n  };\n\n  const setInclude = useCallback(\n    (k: string, v: boolean) => {\n      if (!serverOptions.value || !body) {\n        return;\n      }\n      const exclude: Record<string, boolean> = {};\n      if (k === '*') {\n        if (!v) {\n          for (let exp of serverOptions.value.exporters) {\n            exclude[exp.key] = true;\n          }\n        }\n        setBody({ ...body, exclude });\n        return;\n      }\n\n      for (let exp of serverOptions.value.exporters) {\n        let val = body.exclude?.[exp.key];\n        if (k === exp.key) {\n          val = !v;\n        }\n        if (val) {\n          exclude[exp.key] = val;\n        }\n      }\n      setBody({ ...body, exclude });\n    },\n    [body, setBody, serverOptions]\n  );\n\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv()\n      .getStream<ExportStatusMessage>({\n        scope: LiveChannelScope.Grafana,\n        namespace: 'broadcast',\n        path: 'export',\n      })\n      .subscribe({\n        next: (evt) => {\n          if (isLiveChannelMessageEvent(evt)) {\n            setStatus(evt.message);\n          } else if (isLiveChannelStatusEvent(evt)) {\n            setStatus(evt.message);\n          }\n        },\n      });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderView = () => {\n    const isEntityStoreEnabled = body?.format === StorageFormat.EntityStore && config.featureToggles.entityStore;\n    const shouldDisplayContent = isEntityStoreEnabled || body?.format === StorageFormat.Git;\n\n    const statusFragment = status && (\n      <div>\n        <h3>Status</h3>\n        <pre>{JSON.stringify(status, null, 2)}</pre>\n        {status.running && (\n          <div>\n            <Button variant=\"secondary\" onClick={doStop}>\n              Stop\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n\n    const formFragment = !Boolean(status?.running) && (\n      <div>\n        <Field label=\"Format\">\n          <Select\n            options={formats}\n            width={40}\n            value={formats.find((v) => v.value === body?.format)}\n            onChange={(v) => setBody({ ...body!, format: v.value! })}\n          />\n        </Field>\n        {!isEntityStoreEnabled && body?.format !== StorageFormat.Git && (\n          <div>\n            <Alert title=\"Missing feature flag\">Enable the `entityStore` feature flag</Alert>\n          </div>\n        )}\n        {body?.format === StorageFormat.Git && (\n          <>\n            <Field label=\"Keep history\">\n              <Switch value={body?.history} onChange={(v) => setBody({ ...body!, history: v.currentTarget.checked })} />\n            </Field>\n\n            <Field label=\"Include\">\n              <>\n                <InlineFieldRow>\n                  <InlineField label=\"Toggle all\" labelWidth={labelWith}>\n                    <InlineSwitch\n                      value={Object.keys(body?.exclude ?? {}).length === 0}\n                      onChange={(v) => setInclude('*', v.currentTarget.checked)}\n                    />\n                  </InlineField>\n                </InlineFieldRow>\n                {serverOptions.value && (\n                  <div>\n                    {serverOptions.value.exporters.map((ex) => (\n                      <InlineFieldRow key={ex.key}>\n                        <InlineField label={ex.name} labelWidth={labelWith} tooltip={ex.description}>\n                          <InlineSwitch\n                            value={body?.exclude?.[ex.key] !== true}\n                            onChange={(v) => setInclude(ex.key, v.currentTarget.checked)}\n                          />\n                        </InlineField>\n                      </InlineFieldRow>\n                    ))}\n                  </div>\n                )}\n              </>\n            </Field>\n          </>\n        )}\n\n        {shouldDisplayContent && (\n          <>\n            <Field label=\"General folder\" description=\"Set the folder name for items without a real folder\">\n              <Input\n                width={40}\n                value={body?.generalFolderPath ?? ''}\n                onChange={(v) => setBody({ ...body!, generalFolderPath: v.currentTarget.value })}\n                placeholder=\"root folder path\"\n              />\n            </Field>\n\n            <HorizontalGroup>\n              <Button onClick={doStart} variant=\"primary\">\n                Export\n              </Button>\n              <LinkButton href=\"admin/storage/\" variant=\"secondary\">\n                Cancel\n              </LinkButton>\n            </HorizontalGroup>\n          </>\n        )}\n      </div>\n    );\n\n    const requestDetailsFragment = (isEntityStoreEnabled || body?.format === StorageFormat.Git) && (\n      <Collapse label=\"Request details\" isOpen={details} onToggle={setDetails} collapsible={true}>\n        <CodeEditor\n          height={275}\n          value={JSON.stringify(body, null, 2) ?? ''}\n          showLineNumbers={false}\n          readOnly={false}\n          language=\"json\"\n          showMiniMap={false}\n          onBlur={(text: string) => {\n            setBody(JSON.parse(text)); // force JSON?\n          }}\n        />\n      </Collapse>\n    );\n\n    return (\n      <div>\n        {statusFragment}\n        {formFragment}\n        <br />\n        <br />\n        {requestDetailsFragment}\n      </div>\n    );\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>{renderView()}</Page.Contents>\n    </Page>\n  );\n}\n"],"names":["EXPORT_LOCAL_STORAGE_KEY","defaultJob","StorageFormat","formats","labelWith","ExportPage","props","navModel","status","setStatus","body","setBody","details","setDetails","serverOptions","doStart","v","doStop","setInclude","k","exclude","exp","val","subscription","evt","renderView","isEntityStoreEnabled","shouldDisplayContent","statusFragment","formFragment","ex","requestDetailsFragment","text"],"sourceRoot":""}