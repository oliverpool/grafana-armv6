{"version":3,"file":"heatmapPanel.5cfc2e8c02f8255c3740.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/models.gen.ts","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span>{display(min)}</span>\n            <span>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css`\n    width: 100%;\n    font-size: 11px;\n    opacity: 1;\n  `,\n  scaleGradient: css`\n    background: linear-gradient(90deg, ${colors.join()});\n    height: 10px;\n    pointer-events: none;\n  `,\n  legendValues: css`\n    display: flex;\n    justify-content: space-between;\n    pointer-events: none;\n  `,\n  hoverValue: css`\n    position: absolute;\n    margin-top: -14px;\n    padding: 3px 15px;\n    background: ${theme.colors.background.primary};\n    transform: translateX(-50%);\n  `,\n  followerContainer: css`\n    position: relative;\n    pointer-events: none;\n    white-space: nowrap;\n  `,\n  follower: css`\n    position: absolute;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border: 2px solid ${theme.colors.text.primary};\n    margin-top: 5px;\n  `,\n});\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  TimeRange,\n} from '@grafana/data';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { DataHoverView } from '../geomap/components/DataHoverView';\n\nimport { HeatmapData } from './fields';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n  timeRange: TimeRange;\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} header={'Exemplar'} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram }: Props) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: any) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values.toArray();\n  const yVals = yField?.values.toArray();\n  const countVals = countField?.values.toArray();\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: any) => formattedValueToString(yField.display!(v)) : (v: any) => `${v}`;\n\n  const yValueIdx = index % data.yBucketCount! ?? 0;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  if (meta.yOrdinalDisplay) {\n    const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n    const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n    yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n    yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n    // e.g. \"pod-xyz123\"\n    if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n      nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n    }\n  } else {\n    const value = yVals?.[yValueIdx];\n\n    if (data.yLayout === HeatmapCellLayout.le) {\n      yBucketMax = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) - 1 / data.yLogSplit!;\n        yBucketMin = `${data.yLog ** exp}`;\n      } else {\n        yBucketMin = `${value - data.yBucketSize!}`;\n      }\n    } else {\n      yBucketMin = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) + 1 / data.yLogSplit!;\n        yBucketMax = `${data.yLog ** exp}`;\n      } else {\n        yBucketMax = `${value + data.yBucketSize!}`;\n      }\n    }\n  }\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  if (data.xLayout === HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize!;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize!;\n  }\n\n  const count = countVals?.[index];\n\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of visibleFields ?? []) {\n    // TODO: Currently always undefined? (getLinks)\n    if (field.getLinks) {\n      const v = field.values.get(index);\n      const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n      field.getLinks({ calculatedValue: disp, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext('2d');\n\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n\n          while (xVals[fromIdx--] === xVals[index]) {}\n\n          fromIdx++;\n\n          let toIdx = fromIdx + data.yBucketCount!;\n\n          let maxCount = 0;\n\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount! + 1);\n\n              let p = i === index ? pHov : pRest;\n\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount!),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n\n            i++;\n            j++;\n          }\n\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n          histCtx.fillStyle = '#ffffff80';\n          histCtx.fill(pRest);\n\n          histCtx.fillStyle = '#ff000080';\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBucket = () => {\n    if (nonNumericOrdinalDisplay) {\n      return <div>Name: {nonNumericOrdinalDisplay}</div>;\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        <div>{xDisp(xBucketMax)}</div>\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCanWidth + 'px', height: histCanHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBucket()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n","import { MutableRefObject, RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DashboardCursorSync,\n  DataFrameType,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  EventBus,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { PanelFieldConfig, YAxisConfig } from './models.gen';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\nexport interface HeatmapHoverEvent {\n  seriesIdx: number;\n  dataIdx: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface HeatmapZoomEvent {\n  xMin: number;\n  xMax: number;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  eventBus: EventBus;\n  onhover?: null | ((evt?: HeatmapHoverEvent | null) => void);\n  onclick?: null | ((evt?: Object) => void);\n  onzoom?: null | ((evt: HeatmapZoomEvent) => void);\n  isToolTipOpen: MutableRefObject<boolean>;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  palette: string[];\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  sync?: () => DashboardCursorSync;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    eventBus,\n    onhover,\n    onclick,\n    onzoom,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    palette,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n  } = opts;\n\n  const xScaleKey = 'x';\n  const xScaleUnit = 'time';\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  let rect: DOMRect;\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n\n    onclick &&\n      u.over.addEventListener(\n        'mouseup',\n        (e) => {\n          // @ts-ignore\n          let isDragging: boolean = u.cursor.drag._x || u.cursor.drag._y;\n\n          if (!isDragging) {\n            onclick(e);\n          }\n        },\n        true\n      );\n  });\n\n  onzoom &&\n    builder.addHook('setSelect', (u) => {\n      onzoom({\n        xMin: u.posToVal(u.select.left, xScaleKey),\n        xMax: u.posToVal(u.select.left + u.select.width, xScaleKey),\n      });\n      u.setSelect({ left: 0, top: 0, width: 0, height: 0 }, false);\n    });\n\n  // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n  // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n  builder.addHook('setData', (u) => {\n    //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n    let { min: xMin, max: xMax } = u.scales!.x;\n\n    let min = getTimeRange().from.valueOf();\n    let max = getTimeRange().to.valueOf();\n\n    if (xMin !== min || xMax !== max) {\n      queueMicrotask(() => {\n        u.setScale(xScaleKey, { min, max });\n      });\n    }\n  });\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  const payload: DataHoverPayload = {\n    point: {\n      [xScaleUnit]: null,\n    },\n    data: dataRef.current?.heatmap,\n  };\n  const hoverEvent = new DataHoverEvent(payload);\n\n  let pendingOnleave: ReturnType<typeof setTimeout> | 0;\n\n  onhover &&\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null) {\n            const { left, top } = u.cursor;\n            payload.rowIndex = sel;\n            payload.point[xScaleUnit] = u.posToVal(left!, xScaleKey);\n            eventBus.publish(hoverEvent);\n\n            if (!isToolTipOpen.current) {\n              if (pendingOnleave) {\n                clearTimeout(pendingOnleave);\n                pendingOnleave = 0;\n              }\n              onhover({\n                seriesIdx: i,\n                dataIdx: sel,\n                pageX: rect.left + left!,\n                pageY: rect.top + top!,\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (!isToolTipOpen.current) {\n        // if tiles have gaps, reduce flashing / re-render (debounce onleave by 100ms)\n        if (!pendingOnleave) {\n          pendingOnleave = setTimeout(() => {\n            onhover(null);\n            payload.rowIndex = undefined;\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(hoverEvent);\n          }, 100);\n        }\n      }\n    });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime: true,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: () => {\n      return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n    },\n  });\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    isTime: true,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  // eslint-ignore @typescript-eslint/no-explicit-any\n  const yFieldConfig = yField.config?.custom as PanelFieldConfig | undefined;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdinalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdinalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdinalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdinalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdinalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, decimals)),\n    splits: isOrdinalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdinalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n        ? 1\n        : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => {\n            let countFacetIdx = !isSparseHeatmap ? 2 : 3;\n            return valuesToFills(\n              u.data[seriesIdx][countFacetIdx] as unknown as number[],\n              palette,\n              dataRef.current?.minValue!,\n              dataRef.current?.maxValue!\n            );\n          },\n          index: palette,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const cursor: Cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  if (sync && sync() !== DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: '__global_',\n      scales: [xScaleKey, yScaleKey],\n      filters: {\n        pub: (type: string, src: uPlot, x: number, y: number, w: number, h: number, dataIdx: number) => {\n          if (x < 0) {\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(new DataHoverClearEvent());\n          } else {\n            payload.point[xScaleUnit] = src.posToVal(x, xScaleKey);\n            eventBus.publish(hoverEvent);\n          }\n\n          return true;\n        },\n      },\n    };\n\n    builder.setSync();\n  }\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n          yVal -= 0.5; // center vertically in bucket (when tiles are le)\n          // y-randomize vertically to distribute exemplars in same bucket at same time\n          let randSign = Math.round(Math.random()) * 2 - 1;\n          yVal += randSign * 0.5 * Math.random();\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx;\n          let y = yMinPx;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number) => {\n  let range = Math.max(maxValue - minValue, 1);\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n        ? paletteSize - 1\n        : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n","import {\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  LinkModel,\n  outerJoinDataFrames,\n  PanelData,\n  ValueFormatter,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { CellValues, PanelOptions } from './models.gen';\nimport { boundedMinMax } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // color scale range\n  minValue?: number;\n  maxValue?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(\n  data: PanelData,\n  options: PanelOptions,\n  theme: GrafanaTheme2,\n  getFieldLinks?: (exemplars: DataFrame, field: Field) => (config: ValueLinkConfig) => Array<LinkModel<Field>>\n): HeatmapData {\n  let frames = data.series;\n  if (!frames?.length) {\n    return {};\n  }\n\n  const exemplars = data.annotations?.find((f) => f.name === 'exemplar');\n\n  if (getFieldLinks) {\n    exemplars?.fields.forEach((field, index) => {\n      exemplars.fields[index].getLinks = getFieldLinks(exemplars, field);\n    });\n  }\n\n  if (options.calculate) {\n    return getDenseHeatmapData(calculateHeatmapFromData(frames, options.calculation ?? {}), exemplars, options, theme);\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, theme)\n          : getSparseHeatmapData(frame, exemplars, options, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (!rowsHeatmap) {\n    if (frames.length > 1) {\n      rowsHeatmap = [\n        outerJoinDataFrames({\n          frames,\n        })!,\n      ][0];\n    } else {\n      rowsHeatmap = frames[0];\n    }\n  }\n\n  return getDenseHeatmapData(\n    rowsToCellsHeatmap({\n      unit: options.yAxis?.unit, // used to format the ordinal lookup values\n      decimals: options.yAxis?.decimals,\n      ...options.rowsFrame,\n      frame: rowsHeatmap,\n    }),\n    exemplars,\n    options,\n    theme\n  );\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  // cell value display\n  const disp = updateFieldDisplay(frame.fields[3], options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    frame.fields[3].values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    minValue,\n    maxValue,\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values.toArray();\n  const ys = frame.fields[1].values.toArray();\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    minValue,\n    maxValue,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { AxisConfig, AxisPlacement, HideableFieldConfig, ScaleDistributionConfig, VisibilityMode } from '@grafana/schema';\nimport { HeatmapCellLayout, HeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nexport const modelVersion = Object.freeze([1, 0]);\n\nexport enum HeatmapColorMode {\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\nexport enum HeatmapColorScale {\n  Linear = 'linear',\n  Exponential = 'exponential',\n}\n\nexport interface HeatmapColorOptions {\n  mode: HeatmapColorMode;\n  scheme: string; // when in scheme mode -- the d3 scheme name\n  fill: string; // when opacity mode, the target color\n  scale: HeatmapColorScale; // for opacity mode\n  exponent: number; // when scale== sqrt\n  steps: number; // 2-128\n\n  reverse: boolean;\n\n  // Clamp the colors to the value range\n  min?: number;\n  max?: number;\n}\nexport interface YAxisConfig extends AxisConfig {\n  unit?: string;\n  reverse?: boolean;\n  decimals?: number;\n  // Only used when the axis is not ordinal\n  min?: number;\n  max?: number;\n}\n\nexport interface CellValues {\n  unit?: string;\n  decimals?: number;\n}\n\nexport interface FilterValueRange {\n  le?: number;\n  ge?: number;\n}\n\nexport interface HeatmapTooltip {\n  show: boolean;\n  yHistogram?: boolean;\n}\nexport interface HeatmapLegend {\n  show: boolean;\n}\n\nexport interface ExemplarConfig {\n  color: string;\n}\n\nexport interface RowsHeatmapOptions {\n  value?: string; // value field name\n  layout?: HeatmapCellLayout;\n}\n\nexport interface PanelOptions {\n  calculate?: boolean;\n  calculation?: HeatmapCalculationOptions;\n\n  color: HeatmapColorOptions;\n  filterValues?: FilterValueRange; // was hideZeroBuckets\n  rowsFrame?: RowsHeatmapOptions;\n  showValue: VisibilityMode;\n\n  cellGap?: number; // was cardPadding\n  cellRadius?: number; // was cardRadius (not used, but migrated from angular)\n  cellValues?: CellValues;\n\n  yAxis: YAxisConfig;\n\n  legend: HeatmapLegend;\n\n  tooltip: HeatmapTooltip;\n  exemplars: ExemplarConfig;\n}\n\nexport const defaultPanelOptions: PanelOptions = {\n  calculate: false,\n  color: {\n    mode: HeatmapColorMode.Scheme,\n    scheme: 'Oranges',\n    fill: 'dark-orange',\n    scale: HeatmapColorScale.Exponential,\n    reverse: false,\n    exponent: 0.5,\n    steps: 64,\n  },\n  rowsFrame: {\n    layout: HeatmapCellLayout.auto,\n  },\n  yAxis: {\n    axisPlacement: AxisPlacement.Left,\n  },\n  cellValues: {\n\n  },\n  showValue: VisibilityMode.Auto,\n  tooltip: {\n    show: true,\n    yHistogram: false,\n  },\n  legend: {\n    show: true,\n  },\n  exemplars: {\n    color: 'rgba(255,0,255,0.7)',\n  },\n  filterValues: {\n    le: 1e-9,\n  },\n  cellGap: 1,\n};\n\nexport interface PanelFieldConfig extends HideableFieldConfig {\n  scaleDistribution?: ScaleDistributionConfig;\n}\n\nexport const defaultPanelFieldConfig: PanelFieldConfig = {};\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './models.gen';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultPanelOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DataFrame, DataFrameType, Field, getLinksSupplier, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions } from './models.gen';\nimport { quantizeScheme } from './palettes';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<PanelOptions> {}\n\nexport const HeatmapPanel: React.FC<HeatmapPanelProps> = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync } = usePanelContext();\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const getFieldLinksSupplier = useCallback(\n    (exemplars: DataFrame, field: Field) => {\n      return getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n    },\n    [replaceVariables]\n  );\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data, options, theme, getFieldLinksSupplier);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data, options, theme, getFieldLinksSupplier]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] = []; // \"Time\" field\n    let exemplarsyFacet: number[] = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values.toArray();\n\n      // ordinal/labeled heatmap-buckets?\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields\n          .find((field) => field.name === meta.yMatchWithLabel)!\n          .values.toArray();\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label)) as number[];\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values.toArray() as number[]; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values.toArray()), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom\n      ?.scaleDistribution as ScaleDistributionConfig;\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      palette,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values.get(hover.dataIdx);\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.minValue!}\n            max={dataRef.current.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight} timeRange={timeRange}>\n            {/*children ? children(config, alignedFrame) : null*/}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      <Portal>\n        {hover && options.tooltip.show && (\n          <VizTooltipContainer\n            position={{ x: hover.pageX, y: hover.pageY }}\n            offset={{ x: 10, y: 10 }}\n            allowPointerEvents={isToolTipOpen.current}\n          >\n            {shouldDisplayCloseButton && (\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  paddingBottom: '6px',\n                }}\n              >\n                <CloseButton\n                  onClick={onCloseToolTip}\n                  style={{\n                    position: 'relative',\n                    top: 'auto',\n                    right: 'auto',\n                    marginRight: 0,\n                  }}\n                />\n              </div>\n            )}\n            <HeatmapHoverView\n              timeRange={timeRange}\n              data={info}\n              hover={hover}\n              showHistogram={options.tooltip.yHistogram}\n            />\n          </VizTooltipContainer>\n        )}\n      </Portal>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `,\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport { AxisPlacement, ScaleDistribution, VisibilityMode } from '@grafana/schema';\nimport {\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode } from './models.gen';\nimport { colorSchemes } from './palettes';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<PanelOptions> => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: PanelOptions } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultPanelOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: PanelOptions = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultPanelOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultPanelOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultPanelOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current = color.colorScheme as string;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultPanelOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: any, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions, defaultPanelOptions } from './models.gen';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const info = prepareHeatmapData(builder.data, defaultPanelOptions, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<PanelOptions, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelData, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AxisPlacement, GraphFieldConfig, ScaleDistribution, ScaleDistributionConfig } from '@grafana/schema';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './models.gen';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<PanelOptions, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor as any,\n        override: ScaleDistributionEditor as any,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultPanelOptions;\n\n    let isOrdinalY = false;\n\n    try {\n      const v = prepareHeatmapData({ series: context.data } as PanelData, opts, config.theme2);\n      isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n    } catch {}\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultPanelOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultPanelOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultPanelOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultPanelOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultPanelOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultPanelOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultPanelOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultPanelOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultPanelOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultPanelOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultPanelOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultPanelOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultPanelOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultPanelOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultPanelOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultPanelOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultPanelOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultPanelOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultPanelOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultPanelOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultPanelOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.show',\n      name: 'Show tooltip',\n      defaultValue: defaultPanelOptions.tooltip.show,\n      category,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultPanelOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.show,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultPanelOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultPanelOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier());\n"],"names":["GRADIENT_STOPS","ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","scaleHover","setScaleHover","percent","setPercent","theme","styles","getStyles","getGradientStops","onScaleMouseMove","event","divOffset","offsetWidth","normPercentage","scaleValue","onScaleMouseLeave","clampPercent100","colorArray","stops","colorCount","incr","per","color","gradientEnd","skip","gradientStops","i","v","HeatmapHoverView","props","DataHoverView","HeatmapHoverCell","data","hover","showHistogram","index","xField","yField","countField","xDisp","tooltipTimeFormat","xVals","yVals","countVals","meta","yDisp","yValueIdx","yBucketMin","yBucketMax","nonNumericOrdinalDisplay","yMinIdx","yMaxIdx","value","exp","xBucketMin","xBucketMax","count","visibleFields","f","links","linkLookup","field","disp","link","key","can","histCssWidth","histCssHeight","histCanWidth","histCanHeight","histCtx","fromIdx","toIdx","maxCount","c","pHov","pRest","j","pctY","pctX","isSparse","renderYBucket","prepConfig","opts","dataRef","eventBus","onhover","onclick","onzoom","isToolTipOpen","timeZone","getTimeRange","palette","cellGap","hideLE","hideGE","yAxisConfig","ySizeDivisor","sync","xScaleKey","xScaleUnit","pxRatio","heatmapType","exemplarFillColor","qt","hRect","builder","UPlotConfigBuilder","rect","u","el","e","xMin","xMax","r","payload","hoverEvent","pendingOnleave","sel","left","top","s","yScale","yAxisReverse","isSparseHeatmap","shouldUseLogScale","isOrdinalY","yScaleKey","dataMin","dataMax","scaleMin","scaleMax","yExp","log","explicitMin","explicitMax","minLog","maxLog","minExpanded","maxExpanded","bucketSize","dispY","decimals","self","splits","idx","pathBuilder","heatmapPathsSparse","heatmapPathsDense","seriesIdx","dataIdx","x","xSize","ySize","countFacetIdx","valuesToFills","heatmapPathsPoints","cursor","cx","cy","o","isHovered","type","src","y","w","h","CRISP_EDGES_GAP_MIN","each","gap","xAlign","yAlign","round","series","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","arc","d","xs","ys","counts","dlen","fills","fillPalette","fillPaths","yBinQty","xBinQty","yBinIncr","xBinIncr","xOffset","yOffset","cys","cxs","fillPath","p","exemplarColor","points","yVal","randSign","xMaxs","yMins","yMaxs","xOffs","yOffs","yMin","yMax","xSizeUniform","xMaxPx","yMinPx","yMaxPx","boundedMinMax","values","minValue","maxValue","range","paletteSize","indexedFills","prepareHeatmapData","options","getFieldLinks","frames","exemplars","getDenseHeatmapData","rowsHeatmap","frame","getSparseHeatmapData","updateFieldDisplay","xName","yName","valueField","calcX","calcY","unit","modelVersion","HeatmapColorMode","HeatmapColorScale","defaultPanelOptions","defaultPanelFieldConfig","colorSchemes","DEFAULT_SCHEME","scheme","quantizeScheme","steps","fill","scale","fnName","interpolate","rgbStr","rgb","HeatmapPanel","id","timeRange","width","height","fieldConfig","onChangeTimeRange","replaceVariables","timeRangeRef","getFieldLinksSupplier","info","ex","facets","exemplarsXFacet","exemplarsyFacet","label","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","onCloseToolTip","evt","scaleConfig","renderLegend","countFieldIdx","VizLayout","PanelDataErrorView","vizWidth","vizHeight","Portal","VizTooltipContainer","CloseButton","heatmapMigrationHandler","panel","heatmapChangedHandler","prevPluginId","prevOptions","prevFieldConfig","angularToReactHeatmap","bucketFrame","angular","calculate","calculation","oldYAxis","asNumber","getHeatmapCellLayout","current","defaultValue","num","HeatmapSuggestionsSupplier","dataSummary","config","PanelPlugin","context","category"],"sourceRoot":""}