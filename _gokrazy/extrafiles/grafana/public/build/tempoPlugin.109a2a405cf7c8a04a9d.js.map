{"version":3,"file":"tempoPlugin.109a2a405cf7c8a04a9d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/KeyValueInput.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/TraceToLogsSettings.tsx","webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ServiceGraphSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/SearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/datasource.ts","webpack://grafana/./public/app/plugins/datasource/tempo/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/NativeSearch.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/syntax.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/module.ts","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/CheatSheet.tsx"],"sourcesContent":["import React from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme, KeyValue } from '@grafana/data';\nimport { SegmentInput, useStyles, InlineLabel, Icon } from '@grafana/ui';\nimport React from 'react';\n\nconst EQ_WIDTH = 3; // = 24px in inline label\n\ninterface Props {\n  values: Array<KeyValue<string>>;\n  onChange: (values: Array<KeyValue<string>>) => void;\n  id?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n}\n\nconst KeyValueInput = ({\n  values,\n  onChange,\n  id,\n  keyPlaceholder = 'Key',\n  valuePlaceholder = 'Value (optional)',\n}: Props) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {values.length ? (\n        values.map((value, idx) => (\n          <div className={styles.pair} key={idx}>\n            <SegmentInput\n              id={`${id}-key-${idx}`}\n              placeholder={keyPlaceholder}\n              value={value.key}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.key = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <InlineLabel aria-label=\"equals\" className={styles.operator} width={EQ_WIDTH}>\n              =\n            </InlineLabel>\n            <SegmentInput\n              id={`${id}-value-${idx}`}\n              placeholder={valuePlaceholder}\n              value={value.value}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.value = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <button\n              onClick={() => onChange([...values.slice(0, idx), ...values.slice(idx + 1)])}\n              className=\"gf-form-label query-part\"\n              aria-label=\"Remove tag\"\n            >\n              <Icon name=\"times\" />\n            </button>\n            {idx === values.length - 1 ? (\n              <button\n                onClick={() => onChange([...values, { key: '', value: '' }])}\n                className=\"gf-form-label query-part\"\n                aria-label=\"Add tag\"\n              >\n                <Icon name=\"plus\" />\n              </button>\n            ) : null}\n          </div>\n        ))\n      ) : (\n        <button\n          onClick={() => onChange([...values, { key: '', value: '' }])}\n          className=\"gf-form-label query-part\"\n          aria-label=\"Add tag\"\n        >\n          <Icon name=\"plus\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing.xs} 0;\n  `,\n  pair: css`\n    display: flex;\n    justify-content: start;\n    align-items: center;\n  `,\n  operator: css`\n    color: ${theme.palette.orange};\n  `,\n});\n","import { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\nimport React from 'react';\nimport KeyValueInput from './KeyValueInput';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: Array<KeyValue<string>>;\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean;\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            pluginId=\"loki\"\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToLogs?.mapTagNamesEnabled ? (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <KeyValueInput\n              keyPlaceholder=\"Tag\"\n              values={\n                options.jsonData.tracesToLogs?.mappedTags ??\n                options.jsonData.tracesToLogs?.tags?.map((tag) => ({ key: tag })) ??\n                []\n              }\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  mappedTags: v,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <TagsInput\n              tags={options.jsonData.tracesToLogs?.tags}\n              width={40}\n              onChange={(tags) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  tags: tags,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Map tag names\"\n          labelWidth={26}\n          grow\n          tooltip=\"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\"\n        >\n          <InlineSwitch\n            id=\"mapTagNames\"\n            value={options.jsonData.tracesToLogs?.mapTagNamesEnabled ?? false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                mapTagNamesEnabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField label=\"Loki Search\" labelWidth={26} grow tooltip=\"Use this logs data source to search for traces.\">\n          <InlineSwitch\n            id=\"lokiSearch\"\n            defaultChecked={true}\n            value={options.jsonData.tracesToLogs?.lokiSearch}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                lokiSearch: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]] as Array<[number, number]>;\n  }, [] as Array<[number, number]>);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are it's children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined): {\n  [id: string]: { span: T; children: string[] };\n} {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import { css } from '@emotion/css';\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { TempoJsonData } from '../datasource';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function ServiceGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Service Graph</h3>\n\n      <div className={styles.infoText}>\n        To allow querying service graph data you have to select a Prometheus instance where the data is stored.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source with the service graph data\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"service-graph-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.serviceMap?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        <Button\n          type={'button'}\n          variant={'secondary'}\n          size={'sm'}\n          fill={'text'}\n          onClick={() => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n              datasourceUid: undefined,\n            });\n          }}\n        >\n          Clear\n        </Button>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { TempoJsonData } from '../datasource';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function SearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Search</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Removes the Search tab from the Tempo query editor.\" label=\"Hide search\" labelWidth={26}>\n          <InlineSwitch\n            id=\"hideSearch\"\n            value={options.jsonData.search?.hide}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n                ...options.jsonData.search,\n                hide: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { EMPTY, from, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, mergeMap, toArray } from 'rxjs/operators';\nimport {\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  isValidGoDuration,\n  LoadingState,\n} from '@grafana/data';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { config, BackendSrvRequest, DataSourceWithBackend, getBackendSrv } from '@grafana/runtime';\nimport { serializeParams } from 'app/core/utils/fetch';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { identity, pick, pickBy, groupBy, startCase } from 'lodash';\nimport { LokiOptions, LokiQuery } from '../loki/types';\nimport { PrometheusDatasource } from '../prometheus/datasource';\nimport { PromQuery } from '../prometheus/types';\nimport {\n  failedMetric,\n  histogramMetric,\n  mapPromMetricsToServiceMap,\n  serviceMapMetrics,\n  totalsMetric,\n} from './graphTransform';\nimport {\n  transformTrace,\n  transformTraceList,\n  transformFromOTLP as transformFromOTEL,\n  createTableFrameFromSearch,\n} from './resultTransformer';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\n\n// search = Loki search, nativeSearch = Tempo search for backwards compatibility\nexport type TempoQueryType = 'search' | 'traceId' | 'serviceMap' | 'upload' | 'nativeSearch' | 'clear';\n\nexport interface TempoJsonData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n  };\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport interface TempoQuery extends DataQuery {\n  query: string;\n  // Query to find list of traces, e.g., via Loki\n  linkedQuery?: LokiQuery;\n  search: string;\n  queryType: TempoQueryType;\n  serviceName?: string;\n  spanName?: string;\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  serviceMapQuery?: string;\n}\n\ninterface SearchQueryParams {\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  tags: string;\n  start?: number;\n  end?: number;\n}\n\nexport const DEFAULT_LIMIT = 20;\n\nexport class TempoDatasource extends DataSourceWithBackend<TempoQuery, TempoJsonData> {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n  };\n  nodeGraph?: NodeGraphOptions;\n  uploadedJson?: string | ArrayBuffer | null = null;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<TempoJsonData>) {\n    super(instanceSettings);\n    this.tracesToLogs = instanceSettings.jsonData.tracesToLogs;\n    this.serviceMap = instanceSettings.jsonData.serviceMap;\n    this.search = instanceSettings.jsonData.search;\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const filteredTargets = options.targets.filter((target) => !target.hide);\n    const targets: { [type: string]: TempoQuery[] } = groupBy(filteredTargets, (t) => t.queryType || 'traceId');\n\n    if (targets.clear) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    // Run search queries on linked datasource\n    if (this.tracesToLogs?.datasourceUid && targets.search?.length > 0) {\n      const dsSrv = getDatasourceSrv();\n      subQueries.push(\n        from(dsSrv.get(this.tracesToLogs.datasourceUid)).pipe(\n          mergeMap((linkedDatasource: DataSourceApi) => {\n            // Wrap linked query into a data request based on original request\n            const linkedRequest: DataQueryRequest = { ...options, targets: targets.search.map((t) => t.linkedQuery!) };\n            // Find trace matchers in derived fields of the linked datasource that's identical to this datasource\n            const settings: DataSourceInstanceSettings<LokiOptions> = (linkedDatasource as any).instanceSettings;\n            const traceLinkMatcher: string[] =\n              settings.jsonData.derivedFields\n                ?.filter((field) => field.datasourceUid === this.uid && field.matcherRegex)\n                .map((field) => field.matcherRegex) || [];\n            if (!traceLinkMatcher || traceLinkMatcher.length === 0) {\n              return throwError(\n                () =>\n                  new Error(\n                    'No Loki datasource configured for search. Set up Derived Fields for traces in a Loki datasource settings and link it to this Tempo datasource.'\n                  )\n              );\n            } else {\n              return (linkedDatasource.query(linkedRequest) as Observable<DataQueryResponse>).pipe(\n                map((response) =>\n                  response.error ? response : transformTraceList(response, this.uid, this.name, traceLinkMatcher)\n                )\n              );\n            }\n          })\n        )\n      );\n    }\n\n    if (targets.nativeSearch?.length) {\n      try {\n        const timeRange = config.featureToggles.tempoBackendSearch\n          ? { startTime: options.range.from.unix(), endTime: options.range.to.unix() }\n          : undefined;\n        const searchQuery = this.buildSearchQuery(targets.nativeSearch[0], timeRange);\n        subQueries.push(\n          this._request('/api/search', searchQuery).pipe(\n            map((response) => {\n              return {\n                data: [createTableFrameFromSearch(response.data.traces, this.instanceSettings)],\n              };\n            }),\n            catchError((error) => {\n              return of({ error: { message: error.data.message }, data: [] });\n            })\n          )\n        );\n      } catch (error) {\n        return of({ error: { message: error.message }, data: [] });\n      }\n    }\n\n    if (targets.upload?.length) {\n      if (this.uploadedJson) {\n        const otelTraceData = JSON.parse(this.uploadedJson as string);\n        if (!otelTraceData.batches) {\n          subQueries.push(of({ error: { message: 'JSON is not valid OpenTelemetry format' }, data: [] }));\n        } else {\n          subQueries.push(of(transformFromOTEL(otelTraceData.batches, this.nodeGraph?.enabled)));\n        }\n      } else {\n        subQueries.push(of({ data: [], state: LoadingState.Done }));\n      }\n    }\n\n    if (this.serviceMap?.datasourceUid && targets.serviceMap?.length > 0) {\n      subQueries.push(serviceMapQuery(options, this.serviceMap.datasourceUid));\n    }\n\n    if (targets.traceId?.length > 0) {\n      subQueries.push(this.handleTraceIdQuery(options, targets.traceId));\n    }\n\n    return merge(...subQueries);\n  }\n\n  /**\n   * Handles the simplest of the queries where we have just a trace id and return trace data for it.\n   * @param options\n   * @param targets\n   * @private\n   */\n  private handleTraceIdQuery(\n    options: DataQueryRequest<TempoQuery>,\n    targets: TempoQuery[]\n  ): Observable<DataQueryResponse> {\n    const validTargets = targets.filter((t) => t.query);\n    if (!validTargets.length) {\n      return EMPTY;\n    }\n\n    const traceRequest: DataQueryRequest<TempoQuery> = { ...options, targets: validTargets };\n    return super.query(traceRequest).pipe(\n      map((response) => {\n        if (response.error) {\n          return response;\n        }\n        return transformTrace(response, this.nodeGraph?.enabled);\n      })\n    );\n  }\n\n  async metadataRequest(url: string, params = {}) {\n    return await this._request(url, params, { method: 'GET', hideFromInspector: true }).toPromise();\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = { ...options, url };\n\n    return getBackendSrv().fetch(req);\n  }\n\n  async testDatasource(): Promise<any> {\n    const options: BackendSrvRequest = {\n      headers: {},\n      method: 'GET',\n      url: `${this.instanceSettings.url}/api/echo`,\n    };\n    const response = await getBackendSrv().fetch<any>(options).toPromise();\n\n    if (response?.ok) {\n      return { status: 'success', message: 'Data source is working' };\n    }\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    if (query.queryType === 'nativeSearch') {\n      let result = [];\n      for (const key of ['serviceName', 'spanName', 'search', 'minDuration', 'maxDuration', 'limit']) {\n        if (query.hasOwnProperty(key) && query[key as keyof TempoQuery]) {\n          result.push(`${startCase(key)}: ${query[key as keyof TempoQuery]}`);\n        }\n      }\n      return result.join(', ');\n    }\n    return query.query;\n  }\n\n  buildSearchQuery(query: TempoQuery, timeRange?: { startTime: number; endTime?: number }): SearchQueryParams {\n    let tags = query.search ?? '';\n\n    let tempoQuery = pick(query, ['minDuration', 'maxDuration', 'limit']);\n    // Remove empty properties\n    tempoQuery = pickBy(tempoQuery, identity);\n\n    if (query.serviceName) {\n      tags += ` service.name=\"${query.serviceName}\"`;\n    }\n    if (query.spanName) {\n      tags += ` name=\"${query.spanName}\"`;\n    }\n\n    // Set default limit\n    if (!tempoQuery.limit) {\n      tempoQuery.limit = DEFAULT_LIMIT;\n    }\n\n    // Validate query inputs and remove spaces if valid\n    if (tempoQuery.minDuration) {\n      if (!isValidGoDuration(tempoQuery.minDuration)) {\n        throw new Error('Please enter a valid min duration.');\n      }\n      tempoQuery.minDuration = tempoQuery.minDuration.replace(/\\s/g, '');\n    }\n    if (tempoQuery.maxDuration) {\n      if (!isValidGoDuration(tempoQuery.maxDuration)) {\n        throw new Error('Please enter a valid max duration.');\n      }\n      tempoQuery.maxDuration = tempoQuery.maxDuration.replace(/\\s/g, '');\n    }\n\n    if (!Number.isInteger(tempoQuery.limit) || tempoQuery.limit <= 0) {\n      throw new Error('Please enter a valid limit.');\n    }\n\n    let searchQuery: SearchQueryParams = { tags, ...tempoQuery };\n\n    if (timeRange) {\n      searchQuery.start = timeRange.startTime;\n      searchQuery.end = timeRange.endTime;\n    }\n\n    return searchQuery;\n  }\n\n  async getServiceGraphLabels() {\n    const ds = await getDatasourceSrv().get(this.serviceMap!.datasourceUid);\n    return ds.getTagKeys!();\n  }\n\n  async getServiceGraphLabelValues(key: string) {\n    const ds = await getDatasourceSrv().get(this.serviceMap!.datasourceUid);\n    return ds.getTagValues!({ key });\n  }\n}\n\nfunction queryServiceMapPrometheus(request: DataQueryRequest<PromQuery>, datasourceUid: string) {\n  return from(getDatasourceSrv().get(datasourceUid)).pipe(\n    mergeMap((ds) => {\n      return (ds as PrometheusDatasource).query(request);\n    })\n  );\n}\n\nfunction serviceMapQuery(request: DataQueryRequest<TempoQuery>, datasourceUid: string) {\n  return queryServiceMapPrometheus(makePromServiceMapRequest(request), datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n\n      const { nodes, edges } = mapPromMetricsToServiceMap(responses, request.range);\n      nodes.fields[0].config = {\n        links: [\n          makePromLink(\n            'Request rate',\n            `rate(${totalsMetric}{server=\"\\${__data.fields.id}\"}[$__rate_interval])`,\n            datasourceUid\n          ),\n          makePromLink(\n            'Request histogram',\n            `histogram_quantile(0.9, sum(rate(${histogramMetric}{server=\"\\${__data.fields.id}\"}[$__rate_interval])) by (le, client, server))`,\n            datasourceUid\n          ),\n          makePromLink(\n            'Failed request rate',\n            `rate(${failedMetric}{server=\"\\${__data.fields.id}\"}[$__rate_interval])`,\n            datasourceUid\n          ),\n        ],\n      };\n\n      return {\n        data: [nodes, edges],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction makePromLink(title: string, metric: string, datasourceUid: string) {\n  return {\n    url: '',\n    title,\n    internal: {\n      query: {\n        expr: metric,\n      } as PromQuery,\n      datasourceUid,\n      datasourceName: 'Prometheus',\n    },\n  };\n}\n\nfunction makePromServiceMapRequest(options: DataQueryRequest<TempoQuery>): DataQueryRequest<PromQuery> {\n  return {\n    ...options,\n    targets: serviceMapMetrics.map((metric) => {\n      return {\n        refId: metric,\n        // options.targets[0] is not correct here, but not sure what should happen if you have multiple queries for\n        // service map at the same time anyway\n        expr: `delta(${metric}${options.targets[0].serviceMapQuery || ''}[$__range])`,\n        instant: true,\n      };\n    }),\n  };\n}\n","import { HistoryItem, LanguageProvider, SelectableValue } from '@grafana/data';\nimport { CompletionItemGroup, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\nimport { Value } from 'slate';\nimport { TempoDatasource } from './datasource';\n\nexport default class TempoLanguageProvider extends LanguageProvider {\n  datasource: TempoDatasource;\n  tags?: string[];\n  constructor(datasource: TempoDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    Object.assign(this, initialValues);\n  }\n\n  request = async (url: string, params = {}) => {\n    const res = await this.datasource.metadataRequest(url, params);\n    return res?.data;\n  };\n\n  start = async () => {\n    await this.fetchTags();\n    return [];\n  };\n\n  async fetchTags() {\n    const response = await this.request('/api/search/tags', []);\n    this.tags = response.tagNames;\n  }\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: { history: Array<HistoryItem<any>> } = { history: [] }\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    const query = value.endText.getText();\n    const isValue = query[query.indexOf(text) - 1] === '=';\n    if (isValue || text === '=') {\n      return this.getTagValueCompletionItems(value);\n    }\n    return this.getTagsCompletionItems();\n  };\n\n  getTagsCompletionItems = (): TypeaheadOutput => {\n    const { tags } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (tags?.length) {\n      suggestions.push({\n        label: `Tag`,\n        items: tags.map((tag) => ({ label: tag })),\n      });\n    }\n\n    return { suggestions };\n  };\n\n  async getTagValueCompletionItems(value: Value) {\n    const tags = value.endText.getText().split(' ');\n\n    let tagName = tags[tags.length - 1] ?? '';\n    tagName = tagName.split('=')[0];\n\n    const response = await this.request(`/api/search/tag/${tagName}/values`, []);\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (response && response.tagValues) {\n      suggestions.push({\n        label: `Tag Values`,\n        items: response.tagValues.map((tagValue: string) => ({ label: tagValue })),\n      });\n    }\n    return { suggestions };\n  }\n\n  async getOptions(tag: string): Promise<Array<SelectableValue<string>>> {\n    const response = await this.request(`/api/search/tag/${tag}/values`);\n    let options: Array<SelectableValue<string>> = [];\n\n    if (response && response.tagValues) {\n      options = response.tagValues.map((v: string) => ({\n        value: v,\n        label: v,\n      }));\n    }\n\n    return options;\n  }\n}\n","import React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport {\n  InlineFieldRow,\n  InlineField,\n  Input,\n  QueryField,\n  SlatePrism,\n  BracesPlugin,\n  TypeaheadInput,\n  TypeaheadOutput,\n  AsyncSelect,\n  Alert,\n  useStyles2,\n} from '@grafana/ui';\nimport { tokenizer } from '../syntax';\nimport Prism from 'prismjs';\nimport { Node } from 'slate';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2, isValidGoDuration, SelectableValue } from '@grafana/data';\nimport TempoLanguageProvider from '../language_provider';\nimport { TempoDatasource, TempoQuery } from '../datasource';\nimport { debounce } from 'lodash';\nimport { dispatch } from 'app/store/store';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n  onRunQuery: () => void;\n}\n\nconst PRISM_LANGUAGE = 'tempo';\nconst durationPlaceholder = 'e.g. 1.2s, 100ms';\nconst plugins = [\n  BracesPlugin(),\n  SlatePrism({\n    onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n    getSyntax: () => PRISM_LANGUAGE,\n  }),\n];\n\nPrism.languages[PRISM_LANGUAGE] = tokenizer;\n\nconst NativeSearch = ({ datasource, query, onChange, onBlur, onRunQuery }: Props) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const [hasSyntaxLoaded, setHasSyntaxLoaded] = useState(false);\n  const [asyncServiceNameValue, setAsyncServiceNameValue] = useState<SelectableValue<any>>({\n    value: '',\n  });\n  const [asyncSpanNameValue, setAsyncSpanNameValue] = useState<SelectableValue<any>>({\n    value: '',\n  });\n  const [error, setError] = useState(null);\n  const [inputErrors, setInputErrors] = useState<{ [key: string]: boolean }>({});\n  const [isLoading, setIsLoading] = useState<{\n    serviceName: boolean;\n    spanName: boolean;\n  }>({\n    serviceName: false,\n    spanName: false,\n  });\n\n  async function fetchOptionsCallback(nameType: string, lp: TempoLanguageProvider) {\n    try {\n      const res = await lp.getOptions(nameType === 'serviceName' ? 'service.name' : 'name');\n      setIsLoading((prevValue) => ({ ...prevValue, [nameType]: false }));\n      return res;\n    } catch (error) {\n      if (error?.status === 404) {\n        setIsLoading((prevValue) => ({ ...prevValue, [nameType]: false }));\n      } else {\n        dispatch(notifyApp(createErrorNotification('Error', error)));\n        setIsLoading((prevValue) => ({ ...prevValue, [nameType]: false }));\n      }\n      setError(error);\n      return [];\n    }\n  }\n\n  const loadOptionsOfType = useCallback(\n    (nameType: string) => {\n      setIsLoading((prevValue) => ({ ...prevValue, [nameType]: true }));\n      return fetchOptionsCallback(nameType, languageProvider);\n    },\n    [languageProvider]\n  );\n\n  const fetchOptionsOfType = useCallback(\n    (nameType: string) => debounce(() => loadOptionsOfType(nameType), 500, { leading: true, trailing: true }),\n    [loadOptionsOfType]\n  );\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        await languageProvider.start();\n        fetchOptionsCallback('serviceName', languageProvider);\n        fetchOptionsCallback('spanName', languageProvider);\n        setHasSyntaxLoaded(true);\n      } catch (error) {\n        // Display message if Tempo is connected but search 404's\n        if (error?.status === 404) {\n          setError(error);\n        } else {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        setHasSyntaxLoaded(true);\n      }\n    };\n    fetchOptions();\n  }, [languageProvider, fetchOptionsOfType]);\n\n  const onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    return await languageProvider.provideCompletionItems(typeahead);\n  };\n\n  const cleanText = (text: string) => {\n    const splittedText = text.split(/\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)/g);\n    if (splittedText.length > 1) {\n      return splittedText[splittedText.length - 1];\n    }\n    return text;\n  };\n\n  const onKeyDown = (keyEvent: React.KeyboardEvent) => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onRunQuery();\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.container}>\n        <InlineFieldRow>\n          <InlineField label=\"Service Name\" labelWidth={14} grow>\n            <AsyncSelect\n              inputId=\"service\"\n              menuShouldPortal\n              cacheOptions={false}\n              loadOptions={fetchOptionsOfType('serviceName')}\n              onOpenMenu={fetchOptionsOfType('serviceName')}\n              isLoading={isLoading.serviceName}\n              value={asyncServiceNameValue.value}\n              onChange={(v) => {\n                setAsyncServiceNameValue({\n                  value: v,\n                });\n                onChange({\n                  ...query,\n                  serviceName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a service\"\n              isClearable\n              defaultOptions\n              onKeyDown={onKeyDown}\n              aria-label={'select-service-name'}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Span Name\" labelWidth={14} grow>\n            <AsyncSelect\n              inputId=\"spanName\"\n              menuShouldPortal\n              cacheOptions={false}\n              loadOptions={fetchOptionsOfType('spanName')}\n              onOpenMenu={fetchOptionsOfType('spanName')}\n              isLoading={isLoading.spanName}\n              value={asyncSpanNameValue.value}\n              onChange={(v) => {\n                setAsyncSpanNameValue({ value: v });\n                onChange({\n                  ...query,\n                  spanName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a span\"\n              isClearable\n              defaultOptions\n              onKeyDown={onKeyDown}\n              aria-label={'select-span-name'}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Tags\" labelWidth={14} grow tooltip=\"Values should be in the logfmt format.\">\n            <QueryField\n              additionalPlugins={plugins}\n              query={query.search}\n              onTypeahead={onTypeahead}\n              onBlur={onBlur}\n              onChange={(value) => {\n                onChange({\n                  ...query,\n                  search: value,\n                });\n              }}\n              placeholder=\"http.status_code=200 error=true\"\n              cleanText={cleanText}\n              onRunQuery={onRunQuery}\n              syntaxLoaded={hasSyntaxLoaded}\n              portalOrigin=\"tempo\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Min Duration\" invalid={!!inputErrors.minDuration} labelWidth={14} grow>\n            <Input\n              id=\"minDuration\"\n              value={query.minDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                if (query.minDuration && !isValidGoDuration(query.minDuration)) {\n                  setInputErrors({ ...inputErrors, minDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, minDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  minDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Max Duration\" invalid={!!inputErrors.maxDuration} labelWidth={14} grow>\n            <Input\n              id=\"maxDuration\"\n              value={query.maxDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                if (query.maxDuration && !isValidGoDuration(query.maxDuration)) {\n                  setInputErrors({ ...inputErrors, maxDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, maxDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  maxDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Limit\"\n            invalid={!!inputErrors.limit}\n            labelWidth={14}\n            grow\n            tooltip=\"Maximum numbers of returned results\"\n          >\n            <Input\n              id=\"limit\"\n              value={query.limit || ''}\n              type=\"number\"\n              onChange={(v) => {\n                let limit = v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined;\n                if (limit && (!Number.isInteger(limit) || limit <= 0)) {\n                  setInputErrors({ ...inputErrors, limit: true });\n                } else {\n                  setInputErrors({ ...inputErrors, limit: false });\n                }\n\n                onChange({\n                  ...query,\n                  limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n                });\n              }}\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n    </>\n  );\n};\n\nexport default NativeSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 500px;\n  `,\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import { Grammar } from 'prismjs';\n\nexport const tokenizer: Grammar = {\n  key: {\n    pattern: /[^\\s]+(?==)/,\n    alias: 'attr-name',\n  },\n  operator: /[=]/,\n  value: [\n    {\n      pattern: /\"(.+)\"/,\n    },\n    {\n      pattern: /[^\\s]+/,\n    },\n  ],\n};\n","import { DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport async function getDS(uid?: string): Promise<DataSourceApi | undefined> {\n  if (!uid) {\n    return undefined;\n  }\n\n  const dsSrv = getDataSourceSrv();\n  try {\n    return await dsSrv.get(uid);\n  } catch (error) {\n    console.error('Failed to load data source', error);\n    return undefined;\n  }\n}\n","import React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { getDS } from './utils';\nimport { InlineField, InlineFieldRow } from '@grafana/ui';\nimport { AdHocVariableFilter } from '../../../../features/variables/types';\nimport { TempoQuery } from '../datasource';\nimport { AdHocFilter } from '../../../../features/variables/adhoc/picker/AdHocFilter';\nimport { PrometheusDatasource } from '../../prometheus/datasource';\n\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange,\n}: {\n  graphDatasourceUid?: string;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n}) {\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]);\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as PrometheusDatasource;\n\n  if (!graphDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a service graph datasource in the datasource settings.</div>;\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Service graph datasource is configured but the data source no longer exists. Please configure existing data\n        source to use the service graph functionality.\n      </div>\n    );\n  }\n  const filters = queryToFilter(query.serviceMapQuery || '');\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Filter\" labelWidth={14} grow>\n          <AdHocFilter\n            datasource={{ uid: graphDatasourceUid }}\n            filters={filters}\n            getTagKeysOptions={{\n              series: [\n                'traces_service_graph_request_server_seconds_sum',\n                'traces_service_graph_request_total',\n                'traces_service_graph_request_failed_total',\n              ],\n            }}\n            addFilter={(filter: AdHocVariableFilter) => {\n              onChange({\n                ...query,\n                serviceMapQuery: filtersToQuery([...filters, filter]),\n              });\n            }}\n            removeFilter={(index: number) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n            changeFilter={(index: number, filter: AdHocVariableFilter) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1, filter);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nfunction queryToFilter(query: string): AdHocVariableFilter[] {\n  let match;\n  let filters: AdHocVariableFilter[] = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: '',\n    });\n  }\n  return filters;\n}\n\nfunction filtersToQuery(filters: AdHocVariableFilter[]): string {\n  return `{${filters.map((f) => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n","import { css } from '@emotion/css';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Badge,\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  InlineLabel,\n  QueryField,\n  RadioButtonGroup,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport React from 'react';\nimport { LokiQueryField } from '../../loki/components/LokiQueryField';\nimport { LokiQuery } from '../../loki/types';\nimport { TempoDatasource, TempoQuery, TempoQueryType } from '../datasource';\nimport LokiDatasource from '../../loki/datasource';\nimport { PrometheusDatasource } from '../../prometheus/datasource';\nimport useAsync from 'react-use/lib/useAsync';\nimport NativeSearch from './NativeSearch';\nimport { getDS } from './utils';\nimport { ServiceGraphSection } from './ServiceGraphSection';\n\ninterface Props extends QueryEditorProps<TempoDatasource, TempoQuery>, Themeable2 {}\n\nconst DEFAULT_QUERY_TYPE: TempoQueryType = 'traceId';\n\ninterface State {\n  linkedDatasourceUid?: string;\n  linkedDatasource?: LokiDatasource;\n  serviceMapDatasourceUid?: string;\n  serviceMapDatasource?: PrometheusDatasource;\n}\n\nclass TempoQueryFieldComponent extends React.PureComponent<Props, State> {\n  state = {\n    linkedDatasourceUid: undefined,\n    linkedDatasource: undefined,\n    serviceMapDatasourceUid: undefined,\n    serviceMapDatasource: undefined,\n  };\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  async componentDidMount() {\n    const { datasource } = this.props;\n    // Find query field from linked datasource\n    const tracesToLogsOptions: TraceToLogsOptions = datasource.tracesToLogs || {};\n    const linkedDatasourceUid = tracesToLogsOptions.datasourceUid;\n\n    const serviceMapDsUid = datasource.serviceMap?.datasourceUid;\n\n    // Check status of linked data sources so we can show warnings if needed.\n    const [logsDs, serviceMapDs] = await Promise.all([getDS(linkedDatasourceUid), getDS(serviceMapDsUid)]);\n\n    this.setState({\n      linkedDatasourceUid: linkedDatasourceUid,\n      linkedDatasource: logsDs as LokiDatasource,\n      serviceMapDatasourceUid: serviceMapDsUid,\n      serviceMapDatasource: serviceMapDs as PrometheusDatasource,\n    });\n\n    // Set initial query type to ensure traceID field appears\n    if (!this.props.query.queryType) {\n      this.props.onChange({\n        ...this.props.query,\n        queryType: DEFAULT_QUERY_TYPE,\n      });\n    }\n  }\n\n  onChangeLinkedQuery = (value: LokiQuery) => {\n    const { query, onChange } = this.props;\n    onChange({\n      ...query,\n      linkedQuery: { ...value, refId: 'linked' },\n    });\n  };\n\n  onRunLinkedQuery = () => {\n    this.props.onRunQuery();\n  };\n\n  onClearResults = () => {\n    // Run clear query to clear results\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({\n      ...query,\n      queryType: 'clear',\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const { query, onChange, datasource } = this.props;\n    // Find query field from linked datasource\n    const tracesToLogsOptions: TraceToLogsOptions = datasource.tracesToLogs || {};\n    const logsDatasourceUid = tracesToLogsOptions.datasourceUid;\n    const graphDatasourceUid = datasource.serviceMap?.datasourceUid;\n\n    const queryTypeOptions: Array<SelectableValue<TempoQueryType>> = [\n      { value: 'traceId', label: 'TraceID' },\n      { value: 'upload', label: 'JSON file' },\n    ];\n\n    if (config.featureToggles.tempoServiceGraph) {\n      queryTypeOptions.push({ value: 'serviceMap', label: 'Service Graph' });\n    }\n\n    if (config.featureToggles.tempoSearch && !datasource?.search?.hide) {\n      queryTypeOptions.unshift({ value: 'nativeSearch', label: 'Search - Beta' });\n    }\n\n    if (logsDatasourceUid && tracesToLogsOptions?.lokiSearch !== false) {\n      if (!config.featureToggles.tempoSearch) {\n        // Place at beginning as Search if no native search\n        queryTypeOptions.unshift({ value: 'search', label: 'Search' });\n      } else {\n        // Place at end as Loki Search if native search is enabled\n        queryTypeOptions.push({ value: 'search', label: 'Loki Search' });\n      }\n    }\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\">\n            <RadioButtonGroup<TempoQueryType>\n              options={queryTypeOptions}\n              value={query.queryType}\n              onChange={(v) => {\n                this.onClearResults();\n\n                onChange({\n                  ...query,\n                  queryType: v,\n                });\n              }}\n              size=\"md\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {query.queryType === 'nativeSearch' && (\n          <p style={{ maxWidth: '65ch' }}>\n            <Badge icon=\"rocket\" text=\"Beta\" color=\"blue\" />\n            {config.featureToggles.tempoBackendSearch ? (\n              <>&nbsp;Tempo search is currently in beta.</>\n            ) : (\n              <>\n                &nbsp;Tempo search is currently in beta and is designed to return recent traces only. It ignores the\n                time range picker. We are actively working on full backend search. Look for improvements in the near\n                future!\n              </>\n            )}\n          </p>\n        )}\n        {query.queryType === 'search' && (\n          <SearchSection\n            linkedDatasourceUid={logsDatasourceUid}\n            query={query}\n            onRunQuery={this.onRunLinkedQuery}\n            onChange={this.onChangeLinkedQuery}\n          />\n        )}\n        {query.queryType === 'nativeSearch' && (\n          <NativeSearch\n            datasource={this.props.datasource}\n            query={query}\n            onChange={onChange}\n            onBlur={this.props.onBlur}\n            onRunQuery={this.props.onRunQuery}\n          />\n        )}\n        {query.queryType === 'upload' && (\n          <div className={css({ padding: this.props.theme.spacing(2) })}>\n            <FileDropzone\n              options={{ multiple: false }}\n              onLoad={(result) => {\n                this.props.datasource.uploadedJson = result;\n                this.props.onRunQuery();\n              }}\n            />\n          </div>\n        )}\n        {query.queryType === 'traceId' && (\n          <InlineFieldRow>\n            <InlineField label=\"Trace ID\" labelWidth={14} grow>\n              <QueryField\n                query={query.query}\n                onChange={(val) => {\n                  onChange({\n                    ...query,\n                    query: val,\n                    queryType: 'traceId',\n                    linkedQuery: undefined,\n                  });\n                }}\n                onBlur={this.props.onBlur}\n                onRunQuery={this.props.onRunQuery}\n                placeholder={'Enter a Trace ID (run with Shift+Enter)'}\n                portalOrigin=\"tempo\"\n              />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n        {query.queryType === 'serviceMap' && (\n          <ServiceGraphSection graphDatasourceUid={graphDatasourceUid} query={query} onChange={onChange} />\n        )}\n      </>\n    );\n  }\n}\n\ninterface SearchSectionProps {\n  linkedDatasourceUid?: string;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  query: TempoQuery;\n}\nfunction SearchSection({ linkedDatasourceUid, onChange, onRunQuery, query }: SearchSectionProps) {\n  const dsState = useAsync(() => getDS(linkedDatasourceUid), [linkedDatasourceUid]);\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as LokiDatasource;\n\n  if (ds) {\n    return (\n      <>\n        <InlineLabel>Tempo uses {ds.name} to find traces.</InlineLabel>\n\n        <LokiQueryField\n          datasource={ds}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          query={query.linkedQuery ?? ({ refId: 'linked' } as any)}\n          history={[]}\n        />\n      </>\n    );\n  }\n\n  if (!linkedDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a Traces-to-logs datasource in the datasource settings.</div>;\n  }\n\n  if (linkedDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Traces-to-logs datasource is configured but the data source no longer exists. Please configure existing data\n        source to use the search.\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport const TempoQueryField = withTheme2(TempoQueryFieldComponent);\n","import { DataSourcePlugin } from '@grafana/data';\nimport CheatSheet from './CheatSheet';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { TempoDatasource } from './datasource';\nimport { TempoQueryField } from './QueryEditor/QueryField';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setQueryEditor(TempoQueryField)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(CheatSheet);\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport React from 'react';\nimport { ServiceGraphSettings } from './ServiceGraphSettings';\nimport { config } from '@grafana/runtime';\nimport { SearchSettings } from './SearchSettings';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://tempo\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n      {config.featureToggles.tempoServiceGraph && (\n        <div className=\"gf-form-group\">\n          <ServiceGraphSettings options={options} onOptionsChange={onOptionsChange} />\n        </div>\n      )}\n      {config.featureToggles.tempoSearch && (\n        <div className=\"gf-form-group\">\n          <SearchSettings options={options} onOptionsChange={onOptionsChange} />\n        </div>\n      )}\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport default function CheatSheet() {\n  return (\n    <div>\n      <h2 id=\"tempo-cheat-sheet\">Tempo Cheat Sheet</h2>\n      <p>\n        Tempo is a trace id lookup store. Enter a trace id in the above field and hit “Run Query” to retrieve your\n        trace. Tempo is generally paired with other datasources such as Loki or Prometheus to find traces.\n      </p>\n      <p>\n        Here are some{' '}\n        <a href=\"https://grafana.com/docs/tempo/latest/guides/instrumentation/\" target=\"blank\">\n          instrumentation examples\n        </a>{' '}\n        to get you started with trace discovery through logs and metrics (exemplars).\n      </p>\n    </div>\n  );\n}\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","useStyles","getStyles","className","container","InlineFieldRow","row","InlineField","tooltip","label","labelWidth","InlineSwitch","id","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","theme","css","values","keyPlaceholder","valuePlaceholder","wrapper","length","map","idx","pair","SegmentInput","placeholder","key","e","v","i","String","InlineLabel","operator","width","onClick","slice","Icon","name","spacing","xs","palette","orange","TraceToLogsSettings","infoText","DataSourcePicker","inputId","pluginId","current","tracesToLogs","datasourceUid","noDefault","ds","uid","tags","mapTagNamesEnabled","mappedTags","tag","TagsInput","grow","Input","type","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","defaultChecked","lokiSearch","md","colors","textSemiWeak","getNonOverlappingDuration","ranges","sort","a","b","reduce","acc","range","tail","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","children","parentId","parentIds","push","undefined","getStats","duration","traceDuration","selfDuration","main","toFixedNoTrailingZeros","secondary","n","parseFloat","toFixed","makeFrames","MutableDataFrame","fields","Fields","FieldType","config","displayName","color","mode","meta","preferredVisualisationType","ServiceGraphSettings","serviceMap","Button","variant","size","fill","SearchSettings","search","hide","TempoDatasource","DataSourceWithBackend","constructor","instanceSettings","super","this","query","subQueries","filteredTargets","targets","filter","target","groupBy","t","queryType","clear","of","data","state","LoadingState","dsSrv","getDatasourceSrv","from","get","pipe","mergeMap","linkedDatasource","linkedRequest","linkedQuery","traceLinkMatcher","derivedFields","field","matcherRegex","response","error","transformTraceList","throwError","Error","nativeSearch","timeRange","startTime","unix","endTime","to","searchQuery","buildSearchQuery","_request","createTableFrameFromSearch","traces","catchError","message","upload","uploadedJson","otelTraceData","JSON","parse","batches","transformFromOTEL","request","queryServiceMapPrometheus","serviceMapMetrics","metric","refId","expr","serviceMapQuery","instant","makePromServiceMapRequest","toArray","responses","errorRes","find","res","nodes","edges","mapPromMetricsToServiceMap","links","makePromLink","totalsMetric","histogramMetric","failedMetric","traceId","handleTraceIdQuery","merge","validTargets","EMPTY","traceRequest","transformTrace","url","params","method","hideFromInspector","toPromise","apiUrl","serializeParams","req","getBackendSrv","fetch","headers","ok","status","getQueryDisplayText","result","hasOwnProperty","startCase","join","tempoQuery","pick","pickBy","identity","serviceName","spanName","limit","minDuration","isValidGoDuration","replace","maxDuration","Number","isInteger","getTagKeys","getTagValues","title","internal","datasourceName","TempoLanguageProvider","LanguageProvider","datasource","initialValues","async","metadataRequest","fetchTags","prefix","text","labelKey","wrapperClasses","emptyResult","suggestions","endText","getText","isValue","indexOf","getTagValueCompletionItems","getTagsCompletionItems","items","Object","assign","tagNames","split","tagName","tagValues","tagValue","PRISM_LANGUAGE","durationPlaceholder","plugins","BracesPlugin","SlatePrism","onlyIn","node","object","getSyntax","Prism","pattern","alias","onBlur","onRunQuery","useStyles2","languageProvider","useMemo","hasSyntaxLoaded","setHasSyntaxLoaded","useState","asyncServiceNameValue","setAsyncServiceNameValue","asyncSpanNameValue","setAsyncSpanNameValue","setError","inputErrors","setInputErrors","isLoading","setIsLoading","fetchOptionsCallback","nameType","lp","getOptions","prevValue","dispatch","notifyApp","createErrorNotification","loadOptionsOfType","useCallback","fetchOptionsOfType","debounce","leading","trailing","useEffect","fetchOptions","onKeyDown","keyEvent","shiftKey","ctrlKey","AsyncSelect","menuShouldPortal","cacheOptions","loadOptions","onOpenMenu","isClearable","defaultOptions","QueryField","additionalPlugins","onTypeahead","provideCompletionItems","typeahead","cleanText","splittedText","syntaxLoaded","portalOrigin","invalid","parseInt","Alert","severity","alert","href","getDS","getDataSourceSrv","console","ServiceGraphSection","graphDatasourceUid","dsState","useAsync","loading","filters","match","re","exec","condition","queryToFilter","AdHocFilter","getTagKeysOptions","series","addFilter","filtersToQuery","removeFilter","newFilters","splice","changeFilter","f","TempoQueryFieldComponent","React","props","linkedDatasourceUid","serviceMapDatasourceUid","serviceMapDatasource","serviceMapDsUid","logsDs","serviceMapDs","Promise","all","setState","render","tracesToLogsOptions","logsDatasourceUid","queryTypeOptions","unshift","RadioButtonGroup","onClearResults","style","maxWidth","Badge","icon","SearchSection","onRunLinkedQuery","onChangeLinkedQuery","padding","FileDropzone","multiple","onLoad","val","LokiQueryField","history","TempoQueryField","withTheme2","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","setQueryEditorHelp"],"sourceRoot":""}