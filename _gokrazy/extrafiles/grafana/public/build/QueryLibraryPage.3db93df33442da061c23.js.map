{"version":3,"file":"QueryLibraryPage.3db93df33442da061c23.js","mappings":"yJAYO,MAAMA,EAAkB,CAAC,CAAE,SAAAC,EAAU,KAAAC,EAAM,UAAAC,CAAU,IAA4B,CACtF,MAAMC,KAAQ,MAAU,EAClBC,EAASC,EAAUF,EAAOF,CAAI,EAEpC,OAAO,gBAAC,OAAI,aAAW,MAAGG,EAAO,UAAWF,CAAS,GAAIF,CAAS,CACpE,EAEMK,EAAY,CAACF,EAAsBF,KAAoB,CAC3D,UAAW;AAAA;AAAA;AAAA,iBAGIA,EAAO,OAAS;AAAA;AAAA,uBAEVE,EAAM,QAAQ;AAAA,sBACfA,EAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,GAMpC,E,gFCEO,MAAMG,EAA8BC,GAAoC,CAC7E,GAAI,CAACA,GAAY,SAAS,OACxB,MAAO,GAGT,MAAMC,EAAUD,EAAW,QAAQ,CAAC,EAAE,WACtC,OAAOA,EAAW,QAAQ,KAAME,GAAMA,EAAE,YAAY,MAAQD,GAAS,KAAOC,EAAE,YAAY,OAASD,GAAS,IAAI,CAClH,EAEME,KAAM,MAAU,CACpB,YAAa,eACb,aAAW,MAAe,CAAE,QAAS,GAAI,CAAC,EAC1C,UAAYC,IAAW,CACrB,oBAAqBA,EAAM,MAA4C,CACrE,MAAM,QAAQC,EAAKC,EAAUC,EAAcC,EAAW,CACpD,MAAO,CAAE,KAAM,QAAM,KAAiB,EAAE,gBAAgBH,CAAG,CAAE,CAC/D,CACF,CAAC,EACD,iBAAkBD,EAAM,SAA8B,CACpD,MAAM,QAAQC,EAAK,CACjB,eAAM,KAAiB,EAAE,iBAAiBA,CAAG,EACtC,CACL,KAAM,IACR,CACF,CACF,CAAC,EACD,iBAAkBD,EAAM,SAAkE,CACxF,MAAM,QAAQC,EAAK,CACjB,eAAM,KAAiB,EAAE,iBAAiBA,EAAI,MAAOA,EAAI,IAAI,EACtD,CACL,KAAM,IACR,CACF,CACF,CAAC,CACH,EACF,CAAC,EAEY,CAAE,4BAAAI,CAA4B,EAAIN,C,kDClExC,MAAMO,CAAc,CAApB,cACL,qBAAkB,MAAOC,GAAiD,CACxE,GAAI,CAACA,EAAK,OACR,MAAO,CAAC,EAEV,MAAMC,EAAYD,EAAK,IAAKE,GAAM,OAAOA,EAAE,KAAK,EAAE,KAAK,GAAG,EAC1D,SAAO,KAAc,EAAE,IAAkB,sBAAsBD,GAAW,CAC5E,EAEA,sBAAmB,MAAOE,MACjB,KAAc,EAAE,OAAO,0BAA0BA,EAAI,KAAK,EAGnE,sBAAmB,MAAOC,EAAmBC,OACpC,KAAc,EAAE,KAAK,qBAAsBD,CAAK,CACzD,CACF,CAEA,MAAME,EAAgB,IAAIP,EAEbQ,EAAmB,IAAMD,C,0PCrB/B,SAASE,EAAgBvB,EAAsB,CACpD,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAOeA,EAAM,OAAO,WAAW;AAAA;AAAA;AAAA;AAAA,wBAIxBA,EAAM,OAAO,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAMxBA,EAAM,OAAO,WAAW;AAAA;AAAA;AAAA;AAAA,GAKhD,C,sECQA,MAAMwB,GAA4BC,GAAqC,CACrE,KAAM,CAAE,SAAAC,EAAU,QAAAC,EAAS,QAAAC,EAAS,MAAAC,EAAO,UAAAC,EAAW,UAAAC,EAAW,YAAAC,EAAa,SAAAC,EAAU,KAAAC,EAAM,OAAAC,EAAQ,KAAAC,CAAK,EAAIX,EAE/G,SAAO,aACL,KAAiB,EACd,QAAQ,CACP,SAAAC,EACA,QAAAC,EACA,QAAAC,EACA,KAAAQ,EACA,UAAAN,EACA,MAAAD,EACA,UAAAE,EACA,YAAAC,EACA,SAAAC,EACA,OAAAE,EACA,KAAAD,CACF,CAAC,EACA,IAAKG,GACAA,EAAG,OAAS,aACP,CACL,MAAOA,EAAG,KACV,MAAOA,EAAG,KACV,OAAQA,EAAG,KAAK,KAAK,MAAM,MAC3B,KAAMA,EAAG,IACX,EAGK,CACL,MAAOA,EAAG,KACV,MAAOA,EAAG,KACV,OAAQA,EAAG,KAAK,KAAK,MAAM,MAC3B,KAAMA,EAAG,IACX,CACD,EACFC,GAAQA,EAAI,KACf,CACF,EAEaC,GAAwBd,GAAqC,CACxE,KAAM,CAAE,UAAAe,EAAW,OAAAC,EAAQ,SAAAC,EAAU,QAAAC,EAAS,gBAAAC,EAAiB,YAAAC,EAAa,MAAAC,EAAO,QAAAC,CAAQ,EAAItB,EACzFL,EAAUI,GAAyBC,CAAK,EAE9C,OACE,gBAAC,OAAI,aAAYuB,EAAA,wCAA+C,EAC9D,gBAACC,EAAA,IACC,aAAYD,EAAA,uCACZ,QAASD,GAAW,qBACpB,UAAU,6BACV,QAAS,GACT,YAAa,GACb,sBAAuB,GACvB,QAAA3B,EACA,UAAAoB,EACA,OAAAC,EACA,MAAAK,EACA,MAAOH,EACP,SAAWO,GAAa,CACtBR,EAASQ,GAAU,OAAS,IAAI,CAClC,EACA,gBAAAN,EACA,cAAe,IACf,YAAaC,GAAe,yBAC5B,iBAAiB,uBACjB,eAAiBM,GACXA,EAAE,SAAQ,KAA0BA,EAAE,KAAK,SAAS,EAEpD,gBAAC,KAAe,CAAC,MAAM,SAAS,QAAQ,iBACtC,gBAAC,YAAMA,EAAE,KAAM,EAAO,IAAC,gBAACC,EAAA,EAAoB,CAAC,OAAQD,EAAE,KAAK,UAAW,CACzE,EAGGA,EAAE,OAAS,EACpB,CACF,CACF,CAEJ,E,qCC1GO,MAAME,GAAa,IAAM,CAC9B,MAAMpD,KAAS,MAAWC,EAAS,EAGnC,OACE,gBAAC,OAAI,UAAWD,EAAO,MACrB,gBAAC,KAAE,UAAWA,EAAO,gBAAgB,aAAW,CAClD,CAEJ,EAEaC,GAAaF,IACjB,CACL,KAAM;AAAA;AAAA,MAGN,eAAgB;AAAA,eACLA,EAAM,OAAO,KAAK;AAAA,KAE/B,G,+GCvBK,MAAMsD,GAA0B,CACrC,MAAO,IACP,WAAY,CACV,KAAM,aACN,IAAK,SACP,EACA,UAAW,cACb,EAEaC,EAAgC,IAAM,CACjD,MAAM,6BAA6B,CACrC,ECeaC,GAAc,CAAC,CAAE,WAAApD,EAAY,mBAAAqD,CAAmB,IAAa,CACxE,MAAMxD,KAAS,MAAW,EAAS,EAC7B,CAACyD,EAASC,CAAU,KAAI,YAAsBvD,EAAW,SAAW,CAACkD,EAAY,CAAC,EAElFM,KAAQ,MAA2BxD,CAAU,EAC/C,CAAE,IAAK,cAAe,KAAM,YAAa,EACzCsD,EAAQ,CAAC,EAAE,WAET,CAACG,EAAYC,CAAa,KAAI,eAAS,KAAiB,EAAE,oBAAoBF,CAAK,CAAC,EAEpFG,EAAO,CACX,MAAO,iBACP,OAAQ,CAAC,EACT,aAAW,OAAoB,CACjC,EAEMC,EAAmBC,GAA4B,CACnDN,EAAWM,CAAU,EACrBR,EAAmB,CACjB,GAAGrD,EACH,QAAS6D,CACX,CAAC,CACH,EAEMC,EAAa,MAAOC,GAA8C,CACtE,MAAMC,EAAQ,QAAM,KAAiB,EAAE,IAAID,EAAc,GAAG,EACtDE,EAAYR,EAAa,QAAM,KAAiB,EAAE,IAAIA,EAAW,GAAG,EAAI,OACxEI,EAAa,QAAMK,GAAA,GAAcF,EAAOA,EAAM,IAAKV,EAASW,CAAS,EAE3EL,EAAgBC,CAAU,EAC1BH,EAAcK,CAAa,CAC7B,EAEMI,EAAW,SAAyC,CACxD,MAAMlC,EAAqBwB,GAAY,KAAK,MAExC,QAAM,KAAiB,EAAE,IAAI,EAD7B,QAAM,KAAiB,EAAE,IAAIA,EAAY,GAAG,EAGhD,MAAO,CACL,GAAGxB,GAAI,kBAAkB,iBAAmB,EAC5C,WAAY,CAAE,IAAKA,GAAI,IAAK,KAAMA,GAAI,IAAK,CAC7C,CACF,EAEMmC,EAAkB,SAAY,CAClC,MAAMC,EAAO,MAAMF,EAAS,EAC5BP,KAAgB,OAASN,EAASe,CAAI,CAAC,CACzC,EAEMC,EAAuB,IAAM,CACjC,MAAMC,EAAU,eAA8B,EAC9CX,KAAgB,OAASN,EAASiB,CAAO,CAAC,CAC5C,EAEA,OACE,gBAAC,WACC,gBAAC,KAAe,KACd,gBAAC,OAAI,UAAW1E,EAAO,kBAAkB,aAAW,EACpD,gBAAC,OAAI,UAAWA,EAAO,yBACrB,gBAAC2E,GAAA,GACC,SAAUV,EACV,QAASL,EACT,QAAS,GACT,MAAO,GACP,UAAW,GACX,UAAW,GACb,CACF,CACF,EACA,gBAACgB,GAAA,GACC,QAAAnB,EACA,WAAAG,EACA,gBAAAG,EACA,WAAYQ,EACZ,aAAc,IAAM,CAAC,EACrB,KAAAT,CAAA,CACF,EACA,gBAAC,KAAe,CAAC,QAAQ,KAAK,MAAM,cAEhC,gBAACe,EAAA,IACC,SAAU,GACV,KAAK,OACL,QAASN,EACT,QAAQ,YACR,aAAYxB,EAAA,+BAA8B,EAC3C,OAED,GAEAa,GAAY,KAAK,UAAYA,GAAY,KAAK,QAC9C,gBAACiB,EAAA,GAAM,CAAC,KAAK,OAAO,QAASJ,EAAsB,QAAQ,YAAY,UAAWzE,EAAO,kBACvF,gBAAC,YAAK,gBAAgB,CACxB,CAEJ,CACF,CAEJ,EAEa,GAAaD,IACjB,CACL,iBAAkB;AAAA,mBACHA,EAAM,WAAW,KAAK;AAAA;AAAA;AAAA,MAIrC,wBAAyB;AAAA;AAAA;AAAA,MAIzB,iBAAkB;AAAA,sBACAA,EAAM,QAAQ,CAAC;AAAA,KAEnC,G,+DCjIK,MAAM+E,GAAY,CAAC,CAAE,KAAAC,EAAM,SAAAtC,EAAU,eAAAuC,CAAe,IAAsB,CAC/E,MAAMhF,KAAS,MAAW,EAAS,EAE7B,CAACiF,EAAWC,CAAY,KAAI,YAAkB,EAAK,EACnD,CAACC,EAAiBC,CAAkB,KAAI,YAAwB,IAAI,EAEpEC,EAAmBC,GAAgC,CACvDJ,EAAa,EAAI,CACnB,EAEMK,EAAiBC,GAAoB,CAGzC,GAFAN,EAAa,EAAK,EAEdC,EAAiB,CACnBC,EAAmB,IAAI,EACvB,MACF,CAEIL,IAASS,GACX/C,EAAS+C,CAAO,CAEpB,EAEMC,EAAiBH,GAAkD,CAGvE,GAFgBA,EAAM,cAAc,MAAM,KAAK,EAEnC,SAAW,EAAG,CACxBF,EAAmB,8BAA8B,EACjD,MACF,CAEID,GACFC,EAAmB,IAAI,CAE3B,EAEMM,EAAmBJ,GAAkD,CACzEC,EAAcD,EAAM,cAAc,MAAM,KAAK,CAAC,CAChD,EAEMK,EAAWL,GAA8C,CAC7DA,EAAM,OAAO,OAAO,CACtB,EAEMM,EAAaN,GAA+B,CAChD,GAAIA,EAAM,MAAQ,QAAS,CACzB,GAAI,EAAEA,EAAM,kBAAkB,kBAC5B,OAGFC,EAAcD,EAAM,OAAO,KAAK,CAClC,CACF,EAEA,OACE,gCACE,gBAAC,OAAI,UAAWtF,EAAO,SACpB,CAACiF,GACA,gBAAC,KAAe,KACd,gBAAC,MAAG,UAAWjF,EAAO,SAAU+E,CAAK,EACpCC,GAAkB,gBAACa,EAAA,EAAI,CAAC,KAAK,MAAM,UAAW7F,EAAO,aAAc,KAAK,KAAK,QAASqF,CAAA,CAAiB,CAC1G,EAGDJ,GACC,gCACE,gBAACa,GAAA,GACC,KAAK,OACL,aAAcf,EACd,OAAQW,EACR,QAAAC,EACA,UAAW,GACX,UAAAC,EACA,QAAST,IAAoB,KAC7B,SAAUM,EACV,UAAWzF,EAAO,UACpB,EACCmF,GAAmB,gBAACY,GAAA,EAAsB,CAAC,WAAU,IAAEZ,CAAgB,CAC1E,CAEJ,CACF,CAEJ,EAEM,GAAapF,IACV,CACL,QAAS;AAAA;AAAA;AAAA,qBAGQA,EAAM,GAAG,QAAQ;AAAA,MAElC,aAAc;AAAA;AAAA,eAEHA,EAAM,OAAO,KAAK;AAAA;AAAA;AAAA,MAI7B,UAAW;AAAA;AAAA;AAAA,MAIX,QAAS;AAAA;AAAA,KAGX,GC/FWiG,GAA0B,CAAC,CAAE,WAAA7F,EAAY,UAAA8F,EAAW,mBAAAzC,EAAoB,QAAArC,CAAQ,IAAa,CACxG,MAAM+E,KAAY,OAAmB,EAC/BlG,KAAS,MAAW,EAAS,EAE7BmG,KAAc,UAAO,IAAI,EAEzB,CAACC,EAAWC,CAAY,KAAI,YAASlG,EAAW,KAAK,EACrD,CAACmG,EAAqBC,CAAsB,KAAI,YAAS,EAAK,EAE9DC,EAAqB,CAAC,QAAQrG,GAAY,KAAK,MAAM,KAE3D,aAAU,IAAM,CACd,MAAMsG,EAAsBnB,GAAsB,CAC5Ca,EAAY,UAAYb,EAAM,QAChCiB,EAAuB,EAAK,CAEhC,EACA,SAAS,iBAAiB,YAAaE,CAAkB,CAC3D,EAAG,CAACN,CAAW,CAAC,EAEhB,MAAMO,EAAc,SAAY,CAC9B,QAAM,KAAiB,EAAE,iBAAiB,CAAE,IAAKvG,EAAW,GAAI,CAAC,EACjE8F,EAAU,CACZ,EASMU,EAAiC,CACrC,CAAE,MAAO,mBAAoB,MAAO,kBAAmB,KAAM,MAAO,EACpE,CAAE,MAAO,oBAAqB,MAAO,aAAc,KAAM,MAAO,EAChE,CAAE,MAAO,kBAAmB,MAAO,UAAW,KAAM,SAAU,EAC9D,CACE,MAAO,wBACP,MAAO,iBACP,KAAM,cACR,EACA,CAAE,MAAO,aAAc,MAAO,MAAO,KAAM,WAAY,EACvD,CACE,MAAO,oCACP,MAAO,kBACP,KAAM,eACN,IAAK,4DACP,EACA,CACE,MAAO,sCACP,MAAO,mBACP,KAAM,cACN,IAAK,0DACP,EACA,CACE,MAAO,gCACP,MAAO,aACP,KAAM,aACN,IAAK,sDACP,CACF,EAEMC,EAAqB7B,GAAiB,CAC1CsB,EAAatB,CAAI,EACjBvB,EAAmB,CACjB,GAAGrD,EACH,MAAO4E,CACT,CAAC,CACH,EAEM8B,EAAc,MAAO1F,GAAkC,CAC3D,QAAM,KAAiB,EACpB,iBAAiBhB,EAAYgB,CAAO,EACpC,KAAK,IAAM+E,EAAU,QAAQ,eAAe,CAAC,EAC7C,MAAOY,GAAQ,CACd,MAAMC,EAAMD,EAAI,MAAM,SAAWA,EACjCZ,EAAU,QAAQa,CAAG,CACvB,CAAC,EACHd,EAAU,CACZ,EAEA,OACE,gCACE,gBAAC,OAAI,UAAWjG,EAAO,QACrB,gBAAC,KAAe,CAAC,QAAS,iBACxB,gBAAC8E,GAAS,CAAC,KAAMsB,EAAW,SAAUQ,EAAmB,eAAgBJ,CAAA,CAAoB,EAC7F,gBAAC,KAAe,KACd,gBAAC3B,EAAA,GAAM,CAAC,KAAK,QAAQ,KAAK,KAAK,QAAS,YAAa,QAASoB,EAAW,UAAW,IAAO,OAE3F,EACA,gBAACpB,EAAA,IACC,KAAM,UACN,QAAQ,YACR,KAAK,KACL,QAAS,IAAM,CACb0B,EAAuB,CAACD,CAAmB,CAC7C,GACD,WAED,EACA,gBAACzB,EAAA,GAAM,CAAC,KAAK,OAAO,KAAK,KAAK,QAAS,YAAa,QAASvB,CAA6B,EAAE,KAE5F,EAEA,gBAACuB,EAAA,GAAM,CAAC,KAAK,OAAO,KAAK,KAAK,QAAS,YAAa,QAASvB,CAA6B,CAAE,EAC5F,gBAACuB,EAAA,GAAM,CAAC,KAAK,KAAK,QAAS,UAAW,QAAS,IAAMgC,EAAY1F,CAAO,GAAG,MAE3E,EACA,gBAAC0D,EAAA,GAAM,CAAC,KAAK,YAAY,KAAK,KAAK,QAAS,cAAe,QAAS,IAAM6B,EAAY,EAAG,CAC3F,CACF,EAEA,gBAAC,KAAe,KACbJ,GACC,gBAAC,OACC,UAAU,qCACV,MAAO,CAAE,OAAQ,CAAE,EACnB,IAAKH,EACL,QAAS,IAAM,CACbI,EAAuB,EAAK,CAC9B,GAEA,gBAAC,MAAG,aAAW,MAAG,+CAAgDvG,EAAO,QAAQ,GAC9E2G,EAAgB,IAAI,CAACK,EAAQC,IAE1B,gBAAC,MAAG,IAAAA,CAAA,EAEF,gBAAC,KAAE,QAAS3D,CAA6B,EACvC,gBAAC,WACE0D,EAAO,IACN,gBAACE,GAAA,EAAY,CAAC,IAAKF,EAAO,IAAK,UAAWhH,EAAO,UAAW,EAE5D,gBAAC6F,EAAA,EAAI,CAAC,KAAMmB,EAAO,KAAM,UAAWhH,EAAO,kBAAmB,CAElE,EACA,gBAAC,QAAK,UAAU,sBAAsBgH,EAAO,KAAM,EACnD,gBAAC,QAAK,UAAU,6BAA8B,EAChD,CACF,CAEH,CACH,CACF,CAEJ,CACF,CACF,CAEJ,EAEa,GAAajH,IACjB,CACL,eAAgB;AAAA;AAAA,MAGhB,OAAQ;AAAA;AAAA;AAAA,MAIR,kBAAmB;AAAA,sBACDA,EAAM,GAAG,QAAQ;AAAA;AAAA;AAAA;AAAA,MAKnC,UAAW;AAAA;AAAA;AAAA;AAAA,MAKX,SAAU;AAAA;AAAA;AAAA,KAIZ,G,4BCpLK,MAAMoH,GAAY,CAAC,CAAE,WAAAhH,CAAW,IAAa,CAClD,MAAMH,KAAS,MAAW,EAAS,EAE7BoH,KAAc,WAAqB,KACZ,CACzB,MAAO,IACP,KAAMjH,EAAW,IAAM,CAAC,YAAa,OAAO,EAAI,CAAC,UAAU,EAC3D,gBAAiBA,EAAW,GAC9B,GAGC,CAACA,EAAW,GAAG,CAAC,EAEbkH,KAAUC,EAAA,GAAS,UACX,QAAM,sBAAmB,EAAE,OAAOF,CAAW,GAC9C,KAAK,IAAgBG,IAAU,CACxC,IAAKA,EAAK,IACV,MAAOA,EAAK,KACZ,IAAKA,EAAK,IACV,IAAKA,EAAK,IACV,KAAMA,EAAK,KACX,GAAI,IACJ,KAAMA,EAAK,MAAQ,CAAC,EACpB,OAAQA,EAAK,OACb,SAAUA,EAAK,SACf,WAAYA,EAAK,UACnB,EAAE,EACD,CAACH,CAAW,CAAC,EAEhB,GAAIC,EAAQ,QACV,OAAO,gBAACG,GAAA,EAAO,IAAC,EAGlB,MAAMC,EAAQJ,EAAQ,MAEhBK,EAAkBC,GAA2B,CACjD,IAAIC,EAAiB,kBACrB,OAAQD,EAAM,CACZ,IAAK,YACHC,EAAO,OACP,MACF,IAAK,SACHA,EAAO,SACP,MACF,IAAK,QACHA,EAAO,OACP,MACF,QACEA,EAAO,kBACP,KACJ,CAEA,OAAOA,CACT,EAEA,OAAIH,GAAO,SAAW,EAElB,gBAAC,OAAI,UAAWzH,EAAO,MACrB,gBAAC,KAAE,UAAWA,EAAO,mBAAmB,kCAAgC,CAC1E,EAKF,gBAAC,OAAI,UAAWA,EAAO,MACrB,gBAAC,KAAE,UAAWA,EAAO,mBAAmB,+EAExC,EACCyH,GAAO,IAAKF,GAET,gBAAC,OAAI,IAAKA,EAAK,KACb,gBAACM,EAAA,EAAI,KACH,gBAACA,EAAA,eACC,gBAAC,QAAK,UAAW7H,EAAO,aACrBuH,EAAK,MACN,gBAAC,KACC,KAAMA,EAAK,IACX,MAAO,kBACP,OAAO,SACP,IAAI,sBACJ,UAAWvH,EAAO,cAElB,gBAAC6F,EAAA,EAAI,CAAC,KAAK,oBAAoB,UAAW7F,EAAO,gBAAiB,CACpE,CACF,CACF,EACA,gBAAC6H,EAAA,mBACC,gBAAC,KAAE,KAAM,aAAc,OAAO,SAAS,IAAI,sBAAsB,UAAW7H,EAAO,cACjF,gBAAC6F,EAAA,EAAI,CAAC,KAAK,SAAS,UAAW7F,EAAO,oBAAqB,CAC7D,EACCuH,EAAK,QACR,EACA,gBAACM,EAAA,UAAY,UAAW7H,EAAO,YAC7B,gBAAC6F,EAAA,EAAI,CAAC,KAAM6B,EAAeH,EAAK,IAAI,EAAG,CACzC,EACA,gBAACM,EAAA,YACC,gBAAClI,GAAA,EAAe,KACd,gBAACkF,EAAA,GAAM,CAAC,KAAK,MAAM,KAAK,KAAK,QAAS,YAAa,EACnD,gBAACA,EAAA,GAAM,CAAC,KAAK,OAAO,KAAK,KAAK,QAAS,aAAa,QAEpD,CACF,CACF,CACF,CACF,CAEH,CACH,CAEJ,EAEa,GAAa9E,IACjB,CACL,KAAM;AAAA;AAAA,MAGN,KAAM;AAAA;AAAA,MAGN,WAAY;AAAA;AAAA,MAGZ,WAAY;AAAA;AAAA;AAAA,MAIZ,aAAc;AAAA;AAAA,MAGd,YAAa;AAAA;AAAA,MAGb,gBAAiB;AAAA;AAAA;AAAA,eAGNA,EAAM,OAAO,KAAK;AAAA;AAAA;AAAA,MAI7B,kBAAmB;AAAA,eACRA,EAAM,OAAO,KAAK;AAAA,MAE7B,oBAAqB;AAAA;AAAA;AAAA,eAGVA,EAAM,OAAO,KAAK;AAAA;AAAA,KAG/B,G,gBCpJK,MAAM+H,GAAe,CAAC,CAAE,WAAA3H,EAAY,QAAAgB,CAAQ,IAAa,CAC9D,MAAMnB,KAAS,MAAW,EAAS,EAE7B,CAAC+H,CAAgB,KAAI,MAA4B,EAEjDC,EAAuB,CAACC,EAAoBzC,IAAoB,CACpE,MAAM0C,EAAe/H,EAAW,UAAU,IAAKgI,IACzCA,EAAE,OAASF,EAAS,OACtBE,EAAE,KAAO3C,GAGJ2C,EACR,EAEDJ,EAAiB,CACf,MAAO,CACL,GAAG5H,EACH,UAAW+H,CACb,EACA,KAAM/G,CACR,CAAC,CACH,EAEMiH,EAAwB,CAACH,EAAoBhF,IAAqB,CACtE,MAAMiF,EAAe/H,EAAW,UAAU,IAAKgI,IACzCA,EAAE,OAASF,EAAS,OACtBE,EAAE,QAAQ,MAAQlF,GAGbkF,EACR,EAEDJ,EAAiB,CACf,MAAO,CACL,GAAG5H,EACH,UAAW+H,CACb,EACA,KAAM/G,CACR,CAAC,CACH,EAEMkH,EAAgB,IAAM,CAE1BlI,EAAW,UAAU,QAAQ,CAC3B,KAAM,eACN,QAAS,CACP,MAAO,SACT,CACF,CAAC,EAED4H,EAAiB,CAAE,MAAO5H,EAAY,KAAMgB,CAAQ,CAAC,CACvD,EAEMmH,EAAoBL,GAAuB,CAC/C,MAAMM,EAAWpI,EAAW,UAAU,IAAI,CAACgI,EAAaK,IAAkB,CACxE,GAAIL,EAAE,OAASF,EAAS,KACtB,OAAOO,CAGX,CAAC,EAEG,OAAOD,GAAa,WAEtBpI,EAAW,UAAU,OAAOoI,EAAU,CAAC,EACvCR,EAAiB,CAAE,MAAO5H,EAAY,KAAMgB,CAAQ,CAAC,EAEzD,EAEA,OACE,gBAAC,OAAI,UAAWnB,EAAO,YACrB,gBAAC,OAAI,UAAWA,EAAO,iBACrB,gBAAC,KAAe,CAAC,MAAM,OAAO,QAAQ,gBAAgB,QAAS,KAAM,OAAQ,IAC3E,gBAAC,OAAI,UAAWA,EAAO,gBAAgB,iLAE8B,gBAAC,SAAG,EACvE,gBAAC,SAAE,kCAAgC,CACrC,EACA,gBAAC6E,EAAA,GAAM,CAAC,KAAK,OAAO,KAAK,KAAK,UAAW7E,EAAO,kBAAmB,QAASqI,CAAA,EAAe,cAE3F,CACF,CACF,EACA,gBAAC,OAAI,UAAWrI,EAAO,cACrB,gBAAC,UACEG,GACCA,EAAW,WACXA,EAAW,UAAU,IAAK8H,GACxB,gBAAC,MAAG,IAAKA,GAAYA,EAAS,KAAM,UAAWjI,EAAO,kBACpD,gBAAC6H,EAAA,EAAI,KACH,gBAACA,EAAA,eACC,gBAACY,GAAA,GACC,KAAMR,GAAYA,EAAS,KAC3B,SAAWE,GAAMH,EAAqBC,EAAUE,CAAC,EACjD,eAAc,GAChB,CACF,EACA,gBAACN,EAAA,mBACC,gBAACY,GAAA,GACC,KAAMR,GAAYA,EAAS,QAAQ,MAAM,SAAS,EAClD,SAAWE,GAAMC,EAAsBH,EAAUE,CAAC,EAClD,eAAc,GAChB,CACF,EACA,gBAACN,EAAA,YACC,gBAAChD,EAAA,IACC,KAAK,YACL,KAAK,KACL,QAAS,YACT,QAAQ,uBACR,QAAS,IAAMyD,EAAiBL,CAAQ,GACzC,QAED,CACF,CACF,CACF,CACD,CACL,CACF,CACF,CAEJ,EAEa,GAAalI,IACjB,CACL,WAAY;AAAA;AAAA;AAAA,MAIZ,eAAgB;AAAA,eACLA,EAAM,OAAO,KAAK;AAAA,MAE7B,aAAc;AAAA;AAAA,MAGd,iBAAkB;AAAA;AAAA,MAGlB,kBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMnB,gBAAiB;AAAA;AAAA;AAAA,KAInB,GChII2I,GAAqB,CACzB,CACE,MAAO,SACP,OAAQ,GACR,KAAM,MACR,EACA,CACE,MAAO,YACP,OAAQ,GACR,KAAM,aACR,EACA,CACE,MAAO,UACP,OAAQ,GACR,KAAM,SACR,CACF,EAEaC,GAAqBnH,GAAiB,CACjD,KAAM,CAAE,UAAAyE,EAAW,QAAA9E,CAAQ,EAAIK,EACzBxB,KAAS,MAAW,EAAS,EAC7B,CAAC4I,EAAMC,CAAO,KAAI,YAASH,EAAW,EACtC,CAACxH,EAAO4H,CAAa,KAAI,YAAStH,EAAM,UAAU,EAExD,OACE,gBAACuH,EAAA,EAAM,CAAC,QAAS9C,EAAW,MAAO,SAAU,WAAU,GAAC,kBAAiB,IACvE,gBAAC,WACC,gBAACD,GAAA,CACC,QAAA7E,EACA,mBAAoB2H,EACpB,WAAY5H,EACZ,UAAA+E,CAAA,CACF,EACA,gBAAC,OAAI,UAAWjG,EAAO,cACrB,gBAACuD,GAAW,CAAC,mBAAoBuF,EAAe,WAAY5H,CAAA,CAAO,CACrE,EACA,gBAAC8H,EAAA,EAAO,KACLJ,EAAK,IAAI,CAACK,EAAKT,IACd,gBAACU,EAAA,GACC,IAAKV,EACL,MAAOS,EAAI,MACX,OAAQA,EAAI,OACZ,KAAMA,EAAI,KACV,YAAa,IAAMJ,EAAQD,EAAK,IAAI,CAACK,EAAKE,KAAS,CAAE,GAAGF,EAAK,OAAQE,IAAQX,CAAM,EAAE,CAAC,EACxF,CACD,CACH,EACA,gBAACY,EAAA,EAAU,KACT,gBAAC,OAAI,UAAWpJ,EAAO,YACpB4I,EAAK,CAAC,EAAE,QAAU,gBAACzB,GAAS,CAAC,WAAYjG,CAAA,CAAO,EAChD0H,EAAK,CAAC,EAAE,QAAU,gBAACd,GAAY,CAAC,WAAY5G,EAAO,QAAAC,CAAA,CAAkB,EACrEyH,EAAK,CAAC,EAAE,QAAU,gBAACxF,GAAU,IAAC,CACjC,CACF,CACF,CACF,CAEJ,EAEa,GAAarD,IACjB,CACL,aAAc;AAAA;AAAA;AAAA;AAAA,MAKd,WAAY;AAAA;AAAA;AAAA,KAId,G,2BCtFF,MAAMsJ,GAAyB,CAC7B,IAAK,CACH,MAAO,eACP,KAAM,CAAC,EACP,YAAa,sBACb,cAAe,EACf,KAAM,CACJ,KAAM,SACN,GAAI,KACN,EACA,UAAW,CACT,CACE,KAAM,OACN,KAAM,OACN,QAAS,CACP,MAAO,aACT,CACF,CACF,EACA,QAAS,CACP,CAEE,QAAS,uCACT,WAAY,CACV,KAAM,aACN,IAAK,SACP,EACA,OAAQ,CACN,OAAQ,CAAC,OAAQ,OAAO,CAC1B,EACA,UAAW,eACX,MAAO,IACP,OAAQ,CACN,MAAO,EACT,CACF,EACA,CAEE,MAAO,WACP,WAAY,CACV,KAAM,WACN,IAAK,mBACP,EACA,KAAM,GACN,KAAM,GACN,IAAK,IACL,IAAK,GACL,MAAO,EACP,MAAO,IACP,WAAY,cACZ,WAAY,EACd,CACF,CACF,CACF,EAEaC,GAAiB,CAAC,CAAE,UAAArD,EAAW,gBAAAsD,EAAiB,QAAApI,CAAQ,IAAa,CAChF,MAAMnB,KAAS,MAAW,EAAS,EAE7B,CAAC+H,CAAgB,KAAI,MAA4B,EAEjD,CAAC7G,EAAOsI,CAAQ,KAAI,YAASH,EAAW,EAE9C,OACE,gCACE,gBAACI,GAAA,GACC,gBAAiBzJ,EAAO,OACxB,MAAM,MACN,OAAO,OACP,SAAS,OACT,gBAAiB,GACjB,YAAa,GACb,MAAO,KAAK,UAAUkB,EAAM,IAAK,KAAM,CAAC,EACxC,OAASwI,GAAQF,EAAS,KAAO,CAAE,IAAK,KAAK,MAAME,CAAG,CAAE,EAAE,EAC1D,OAASA,GAAQF,EAAS,KAAO,CAAE,IAAK,KAAK,MAAME,CAAG,CAAE,EAAE,EAC1D,SAAU,GACZ,EAEA,gBAAC7E,EAAA,IACC,KAAK,SACL,UAAW7E,EAAO,aAClB,QAAS,SAAY,CACnB,MAAM+H,EAAiB,CAAE,MAAO7G,EAAM,IAAK,KAAMC,CAAQ,CAAC,EAC1D8E,EAAU,EACVsD,IAAkB,CACpB,GACD,YAED,CACF,CAEJ,EAEa,GAAaxJ,IACjB,CACL,OAAQ,QACR,aAAc;AAAA;AAAA;AAAA;AAAA,KAKhB,GC3GW4J,GAAoB,CAAC,CAAE,UAAA1D,EAAW,QAAA9E,CAAQ,IAAa,CAClE,MAAMnB,KAAS,MAAW,EAAS,EAE7B,CAAC4J,EAAMC,CAAO,KAAI,YAA2B,MAAS,EAE5D,OACE,gBAACd,EAAA,EAAM,CAAC,MAAM,eAAe,QAAS9C,EAAW,MAAO,SAAU,WAAU,GAAC,kBAAiB,IAC5F,gBAAC6D,GAAA,IACC,OAAO,qBACP,aAAc,IAAM,CAClBD,EAAQ,MAAS,CACnB,EACA,QAAS,CACP,OAAQ,QACR,SAAU,GACV,OAASE,GAA0B,CACjCF,EAAQE,EAAc,CAAC,CAAC,CAC1B,CACF,GAEA,gBAAC,WAAI,8BAA4B,CACnC,EAEC,QAAQH,CAAI,GACX,gBAAC,OAAI,UAAW5J,EAAO,cACrB,gBAACsJ,GAAc,CAAC,QAAAnI,EAAkB,UAAA8E,CAAA,CAAsB,CAC1D,CAEJ,CAEJ,EAEa,GAAalG,IACjB,CACL,aAAc;AAAA;AAAA;AAAA;AAAA,KAKhB,GCrCWiK,GAAoB,CAAC,CAAE,UAAA/D,EAAW,gBAAAsD,CAAgB,IAAa,CAC1E,MAAMvJ,KAAS,MAAW,EAAS,EAE7BiC,EAAqC,aAErCgI,EAAc,IAAM,CACxBhE,EAAU,EACVsD,EAAgB,CAClB,EAEA,OACE,gBAACR,EAAA,GACC,MAAM,gBACN,SAAS,8DACT,QAAS9C,EACT,MAAO,SACP,WAAU,GACV,kBAAiB,IAEjB,gBAAC,WACC,gBAAC4B,EAAA,EAAI,KACH,gBAACA,EAAA,eAAa,yBAAuB,EACrC,gBAACA,EAAA,kBAAiB,EAClB,gBAACA,EAAA,cACC,gBAAChC,EAAA,EAAI,CAAC,KAAM,cAAe,UAAW7F,EAAO,SAAU,CACzD,EACA,gBAAC6H,EAAA,YACC,gBAAC,KAAgB,KACd,CAAC,CAAE,UAAAqC,EAAW,UAAAC,CAAU,IAErB,gBAACtF,EAAA,IACC,KAAK,OACL,KAAK,KACL,QAAS,IAAM,CAebqF,EAAUvB,GAAmB,CAC3B,UAAWsB,EACX,QAAS,CAAE,KAAAhI,CAAK,EAChB,WAjB6B,CAC7B,MAAO,YACP,UAAW,CAAC,EACZ,QAAS,CACP,CACE,MAAO,IACP,WAAY,CACV,KAAM,aACN,IAAK,SACP,EACA,UAAW,YACb,CACF,CACF,CAKA,CAAC,CACH,GACD,cAED,CAGN,CACF,CACF,EACA,gBAAC4F,EAAA,EAAI,KACH,gBAACA,EAAA,eAAa,kBAAgB,EAC9B,gBAACA,EAAA,mBAAiB,yBAAuB,EACzC,gBAACA,EAAA,cACC,gBAAChC,EAAA,EAAI,CAAC,KAAM,SAAU,UAAW7F,EAAO,SAAU,CACpD,EACA,gBAAC6H,EAAA,YACC,gBAAC,KAAgB,KACd,CAAC,CAAE,UAAAqC,EAAW,UAAAC,CAAU,IAErB,gBAACtF,EAAA,IACC,KAAK,cACL,KAAK,KACL,QAAS,IAAM,CACbqF,EAAUP,GAAmB,CAC3B,UAAWM,EACX,QAAS,CAAE,KAAAhI,CAAK,CAClB,CAAC,CACH,GACD,MAED,CAGN,CACF,CACF,CACF,CACF,CAEJ,EAEa,GAAalC,IACjB,CACL,SAAU;AAAA;AAAA;AAAA,KAIZ,G,uCC3FF,MAAMoB,GAAU,CACd,KAAM,MACR,EAEaiJ,MAAgB,QAC3B,CAAC,CAAE,MAAAlJ,EAAO,UAAAgJ,EAAW,UAAAC,EAAW,gBAAAZ,EAAiB,OAAAc,EAAQ,KAAAC,CAAK,IAA0B,CACtF,MAAMpE,KAAY,OAAmB,EAE/BlG,KAAS,MAAW,EAAS,EAC7B,CAACuK,EAAQC,CAAS,KAAI,YAA0B,CAAC,CAAC,KAExD,aAAU,IAAM,EACa,SAAY,CACrC,MAAMC,KAAa,QAAKvJ,GAAO,QAAU,CAAC,CAAC,EAC3CsJ,GAAW,MAAM,QAAQ,IAAIC,EAAW,IAAKC,MAAU,KAAiB,EAAE,IAAIA,CAAK,CAAC,CAAC,GAAG,OAAO,OAAO,CAAC,CACzG,GAEmB,CACrB,EAAG,CAACxJ,EAAM,MAAM,CAAC,EAEjB,MAAM+I,EAAc,IAAM,CACxBE,EAAU,EACVZ,EAAgB,CAClB,EAEMoB,EAAa,SAAY,CAE7B,MAAMxK,GADS,QAAM,KAAiB,EAAE,gBAAgB,CAAC,CAAE,IAAKe,EAAM,GAAI,CAAC,CAAC,GAClD,CAAC,EAE3BgJ,EAAUvB,GAAmB,CAAE,UAAWsB,EAAa,WAAA9J,EAAwB,QAAAgB,EAAQ,CAAC,CAC1F,EAEMuF,EAAc,SAAY,CAC9B,QAAM,KAAiB,EAAE,iBAAiB,CAAE,IAAKxF,EAAM,GAAI,CAAC,EAC5DqI,EAAgB,CAClB,EAEMqB,EAAY,IAAM,CACtB,MAAMC,EAASN,GAAQ,OAAS,EAAI,QAAUA,IAAS,CAAC,GAAG,MAAQ,aACnE,OAAOO,EAAmBD,CAAM,CAClC,EAEMC,EAAsBD,GACnBA,EAAO,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAO,MAAM,CAAC,EAGlDE,EAAa,IAEf,gBAAC,WACC,gBAAC,MAAG,UAAW/K,EAAO,eACnBuK,EAAO,IAAI,CAACS,EAAK/D,IAEd,gBAAC,MAAG,IAAAA,CAAA,EACF,gBAAC,OAAI,UAAWjH,EAAO,cAAe,IAAKgL,GAAK,MAAM,KAAK,MAAM,MAAO,IAAI,YAAa,GAAE,OAE1FF,EAAmBE,EAAI,IAAI,CAC9B,CAEH,CACH,CACF,EAIEC,EAAkB,SAAY,CAClC,MAAMC,EAAS,QAAM,KAAiB,EAAE,gBAAgB,CAAC,CAAE,IAAKhK,EAAM,GAAI,CAAC,CAAC,EAC5E,GAAI,CAACgK,GAAQ,OAAQ,CACnB5H,EAA8B,EAC9B,MACF,CAEA,MAAM,UAAU,UAAU,UACxB,KAAK,UACH,CACE,GAAG4H,EAAO,CAAC,EACX,IAAK,OACL,eAAgB,MAClB,EACA,KACA,CACF,CACF,EACAhF,EAAU,QAAQ,iCAAiC,CACrD,EAEA,OACE,gBAAC,MAAG,IAAKhF,EAAM,IAAK,UAAWlB,EAAO,KAEpC,gBAAC,MAAG,QAASsD,CAA6B,EACxC,gBAACuC,EAAA,EAAI,CAAC,KAAM,OAAQ,UAAW7F,EAAO,SAAU,MAAO,8BAA+B,CACxF,EACA,gBAAC,UACC,gBAACmL,GAAA,EAAK,CAAC,MAAO,QAAS,KAAM,IAAK,KAAM,OAAQ,QAAS,8BAA+B,CAC1F,EAEA,gBAAC,MAAG,QAASR,CAAA,EAAazJ,EAAM,KAAM,EAEtC,gBAAC,MAAG,QAASyJ,CAAA,EACX,gBAAC,OACC,UAAW3K,EAAO,OAClB,IAAK4K,EAAU,IAAM,QAAU,gCAAkCL,EAAO,CAAC,GAAG,MAAM,KAAK,MAAM,MAC7F,IAAI,aACJ,MAAO,CAAE,MAAO,OAAQ,OAAQ,MAAO,EACzC,EAAE,WACWK,EAAU,EAAE,OACxBA,EAAU,IAAM,SACf,gBAACQ,GAAA,EAAO,CAAC,QAASL,EAAW,GAC3B,gBAAClF,EAAA,EAAI,CAAC,KAAM,kBAAmB,UAAW7F,EAAO,SAAU,CAC7D,CAEJ,EAEA,gBAAC,MAAG,QAAS2K,CAAA,EACX,gBAAC,OACC,aAAW,MAAG,uBAAwB3K,EAAO,MAAM,EACnD,IAAK,2CACL,IAAK,cAAcqK,GAAA,CACrB,EAAE,WACWA,CACf,EAEA,gBAAC,MAAG,QAASM,CAAA,EAAaL,CAAK,EAC/B,gBAAC,MAAG,UAAWtK,EAAO,SACpB,gBAACqL,EAAA,EAAU,CAAC,KAAK,YAAY,QAAS,QAAS,QAAS/H,CAA6B,CAAE,EACvF,gBAAC+H,EAAA,EAAU,CAAC,KAAK,OAAO,QAAS,OAAQ,QAASJ,CAAA,CAAiB,EACnE,gBAACI,EAAA,EAAU,CAAC,KAAK,SAAS,QAAS,SAAU,QAAS/H,CAA6B,CAAE,EACrF,gBAAC+H,EAAA,EAAU,CAAC,KAAK,MAAM,QAAS,WAAY,QAAS/H,CAA6B,CAAE,EACpF,gBAAC+H,EAAA,EAAU,CAAC,KAAK,YAAY,QAAS,SAAU,QAAS3E,CAAA,CAAa,CACxE,CACF,CAEJ,CACF,EAEA0D,GAAc,YAAc,gBAE5B,MAAM,GAAarK,IACV,CACL,IAAK;AAAA;AAAA;AAAA,MAIL,QAAS;AAAA;AAAA;AAAA;AAAA,MAKT,SAAU;AAAA,eACCA,EAAM,OAAO,KAAK;AAAA,MAE7B,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOT,SAAU;AAAA;AAAA,MAGV,cAAe;AAAA;AAAA;AAAA,MAIf,OAAQ;AAAA;AAAA;AAAA,MAIR,cAAe;AAAA;AAAA,KAGjB,GClBF,GAjKgC,IAAM,CACpC,MAAMC,KAAS,MAAW,EAAS,EAE7B,CAACsL,EAAgBC,CAAiB,KAAI,YAAwB,IAAI,EAClE,CAACC,EAAeC,CAAgB,KAAI,YAAiB,EAAE,EACvD,CAACC,EAAQC,CAAS,KAAI,YAAS,CAAC,EAEhC5L,KAAQ,MAAU,EAClB6L,EAAYtK,EAAgBvB,CAAK,EAGjC8L,EAAU,CAAC,mBAAoB,kBAAmB,eAAgB,oBAAqB,eAAe,EACtGC,EAAQ,CACZ,0BACA,0BACA,0BACA,2BACA,yBACF,EAEM1E,KAAc,WAAqB,IAAM,CAC7C,MAAMlG,EAAqB,CACzB,MAAO,IACP,KAAM,YACN,QAAS,GACT,KAAM,CAAC,OAAO,CAChB,EAEA,OAAIoK,GAAgB,SAClBpK,EAAM,QAAUoK,GAGdE,IACFtK,EAAM,MAAQsK,GAGTtK,CACT,EAAG,CAACoK,EAAgBE,CAAa,CAAC,KAElC,aAAU,IAAM,CAAC,EAAG,CAACE,CAAM,CAAC,EAgB5B,MAAMjE,KAdUH,EAAA,GAAS,UACX,QAAM,sBAAmB,EAAE,OAAOF,CAAW,GAC9C,KAAK,IAAgBG,IAAU,CACxC,IAAKA,EAAK,IACV,MAAOA,EAAK,KACZ,IAAKA,EAAK,IACV,IAAKA,EAAK,IACV,KAAMA,EAAK,KACX,GAAI,IACJ,KAAMA,EAAK,MAAQ,CAAC,EACpB,OAAQA,EAAK,MACf,EAAE,EACD,CAACH,EAAasE,CAAM,CAAC,EAEF,MACtB,OACE,gCACE,gBAAC,SAAM,CAAC,OAAQE,CAAA,CAAW,EAC3B,gBAAC,OAAI,UAAW5L,EAAO,cACrB,gBAAC,KAAe,CAAC,MAAM,OAAO,QAAQ,gBAAgB,QAAS,KAAM,OAAQ,IAC3E,gBAAC,KAAe,KACd,gBAAC+L,EAAA,GACC,YAAY,8CACZ,UAAW,GACX,MAAOP,EACP,SAAUC,EACV,MAAO,GACP,UAAWzL,EAAO,SACpB,EAAE,4BAEF,gBAACsC,GAAA,CACC,QAASgJ,EACT,SAAWU,GAAc,CACvBT,EAAkB,IAAMS,CAAS,CACnC,EACF,CACF,EACA,gBAAC,KAAgB,KACd,CAAC,CAAE,UAAA9B,EAAW,UAAAC,CAAU,IAErB,gBAAC,OAAI,UAAWnK,EAAO,mBACrB,gBAAC6E,EAAA,IACC,KAAK,OACL,KAAK,KACL,QAAS,IAAM,CACbqF,EAAUF,GAAmB,CAC3B,UAAWG,EACX,gBAAiB,IAAM,CACrBwB,EAAUD,EAAS,CAAC,CACtB,CACF,CAAC,CACH,GACD,cAED,CACF,CAGN,CACF,EAEA,gBAAC,KAAgB,KACd,CAAC,CAAE,UAAAxB,EAAW,UAAAC,CAAU,IAErB,gBAAC,IAAS,CAAC,UAAWnK,EAAO,UAAW,MAAO,CAAE,MAAO,OAAQ,OAAQ,MAAO,GAC5E,CAAC,CAAE,MAAA6C,EAAO,OAAAoJ,CAAO,IAEd,gBAAC,SAAM,aAAW,MAAG,+CAAgDjM,EAAO,KAAK,GAC/E,gBAAC,aACC,gBAAC,UACC,gBAAC,SAAG,EACJ,gBAAC,UAAG,QAAM,EACV,gBAAC,UAAG,oBAAkB,EACtB,gBAAC,UAAG,aAAW,EACf,gBAAC,UAAG,MAAI,EACR,gBAAC,UAAG,MAAI,EACR,gBAAC,SAAG,CACN,CACF,EACA,gBAAC,aACE,CAAC,QAAQyH,GAAO,MAAM,GACrB,gBAAC,MAAG,UAAWzH,EAAO,eACpB,gBAAC,SAAG,EACJ,gBAAC,SAAG,EACJ,gBAAC,SAAG,EACJ,gBAAC,UACC,gBAAC,OAAI,UAAWA,EAAO,QAAQ,SAAO,CACxC,EACA,gBAAC,SAAG,EACJ,gBAAC,SAAG,EACJ,gBAAC,SAAG,CACN,EAED,QAAQyH,GAAO,MAAM,GACpBA,EAAO,IAAI,CAACF,EAAMN,IAEd,gBAACmD,GAAA,CACC,MAAO7C,EACP,IAAKA,EAAK,IACV,UAAA2C,EACA,UAAAC,EACA,gBAAiB,IAAMwB,EAAUD,EAAS,CAAC,EAC3C,OAAQzE,EAAM4E,EAAQ,OAASA,EAAQ5E,CAAG,EAAI4E,EAAQ5E,EAAM4E,EAAQ,MAAM,EAC1E,KAAM5E,EAAM6E,EAAM,OAASA,EAAM7E,CAAG,EAAI6E,EAAM7E,EAAM6E,EAAM,MAAM,EAClE,CAEH,CACL,CACF,CAGN,CAGN,CACF,CACF,CAEJ,EAIa,GAAa/L,IACjB,CACL,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQd,UAAW;AAAA;AAAA,MAGX,kBAAmB;AAAA;AAAA,MAGnB,aAAc;AAAA;AAAA;AAAA,MAId,SAAU;AAAA;AAAA,MAGV,MAAO;AAAA;AAAA;AAAA;AAAA,wBAIaA,EAAM,OAAO,WAAW;AAAA;AAAA;AAAA,MAI5C,OAAQ;AAAA,eACGA,EAAM,OAAO,KAAK;AAAA,MAE7B,cAAe;AAAA;AAAA,KAGjB,GCjNWmM,GAAU,IAAM,CAC3B,MAAMlM,KAAS,MAAW,EAAS,EAEnC,OACE,gBAAC,OAAI,UAAWA,EAAO,cACrB,gBAAC,GAAuB,IAAC,CAC3B,CAEJ,EAEa,GAAaD,IACjB,CACL,aAAc;AAAA;AAAA,KAGhB,GCbI,GAAc,CAClB,CACE,MAAO,UACP,OAAQ,EACV,CACF,EA8BA,GA5ByB,IAAM,CAC7B,MAAMoM,KAAWC,EAAA,GAAY,OAAO,EAE9B,CAACxD,EAAMC,CAAO,KAAI,YAAS,EAAW,EAE5C,OAAKwD,EAAA,kCAKH,gBAACC,EAAA,EAAI,CAAC,SAAAH,CAAA,EACJ,gBAACG,EAAA,gBACC,gBAACtD,EAAA,EAAO,KACLJ,EAAK,IAAI,CAACK,EAAKT,IACd,gBAACU,EAAA,GACC,IAAKV,EACL,MAAOS,EAAI,MACX,OAAQA,EAAI,OACZ,YAAa,IAAMJ,EAAQD,EAAK,IAAI,CAACK,EAAKE,KAAS,CAAE,GAAGF,EAAK,OAAQE,IAAQX,CAAM,EAAE,CAAC,EACxF,CACD,CACH,EACA,gBAACY,EAAA,EAAU,KAAER,EAAK,CAAC,EAAE,QAAU,gBAACsD,GAAO,IAAC,CAAG,CAC7C,CACF,EAlBO,gBAACK,EAAA,EAAK,CAAC,MAAM,4CAA2C,iCAA+B,CAoBlG,C,8FCJO,MAAM3H,UAAwB,eAAqB,CAAnD,kCACL,mBAAiB1D,GAAqB,CACpC,KAAK,MAAM,gBAAgB,KAAK,MAAM,QAAQ,OAAQqG,GAASA,IAASrG,CAAK,CAAC,CAChF,EAsDA,iBAAesL,GAAsB,CACnC,KAAM,CAAE,QAAA/I,EAAS,WAAAG,CAAW,EAAI,KAAK,SAErC,MAAkB,4BAA6B,CAC7C,WAAY4I,EAAO,OAAO,MAC1B,gBAAiB/I,EAAQ,OACzB,eAAgBG,EAAW,IAC7B,CAAC,CACH,EAEA,eAAa4I,GAAuB,CAClC,KAAM,CAAE,QAAA/I,EAAS,gBAAAM,EAAiB,WAAAH,CAAW,EAAI,KAAK,MAEtD,GAAI,CAAC4I,GAAU,CAACA,EAAO,YACrB,OAGF,MAAMC,EAAaD,EAAO,OAAO,MAC3BE,EAAWF,EAAO,YAAY,MACpC,GAAIC,IAAeC,EAAU,IAC3B,MAAkB,6BAA8B,CAC9C,WAAAD,EACA,SAAAC,EACA,gBAAiBjJ,EAAQ,OACzB,eAAgBG,EAAW,IAC7B,CAAC,EACD,MACF,CAEA,MAAM+I,EAAS,MAAM,KAAKlJ,CAAO,EAC3B,CAACmJ,CAAO,EAAID,EAAO,OAAOF,EAAY,CAAC,EAC7CE,EAAO,OAAOD,EAAU,EAAGE,CAAO,EAClC7I,EAAgB4I,CAAM,KAEtB,MAAkB,0BAA2B,CAC3C,WAAAF,EACA,SAAAC,EACA,gBAAiBjJ,EAAQ,OACzB,eAAgBG,EAAW,IAC7B,CAAC,CACH,EA5FA,cAAc1C,EAAkBsH,EAAe,CAC7C,KAAM,CAAE,QAAA/E,EAAS,gBAAAM,CAAgB,EAAI,KAAK,MAG1CA,EACEN,EAAQ,IAAI,CAAC8D,EAAMsF,IACbA,IAAcrE,EACTtH,EAEFqG,CACR,CACH,CACF,CAEA,mBAAmBuF,EAAwCtE,EAAe,CACxE,KAAM,CAAE,QAAA/E,EAAS,gBAAAM,CAAgB,EAAI,KAAK,MAEtC,KAAK,MAAM,oBACb,KAAK,MAAM,mBAAmB+I,EAAYrJ,EAAQ+E,CAAK,CAAC,EAG1DzE,EACEN,EAAQ,IAAI,CAAC8D,EAAMsF,IAAc,CAC/B,GAAIA,IAAcrE,EAChB,OAAOjB,EAGT,MAAMwF,EAA+B,CACnC,KAAMD,EAAW,KACjB,IAAKA,EAAW,GAClB,EAEA,OAAIvF,EAAK,eACU,KAAiB,EAAE,oBAAoBA,EAAK,UAAU,GAEzD,OAASuF,EAAW,KACzB,CACL,GAAGvF,EACH,WAAYwF,CACd,EAIG,CACL,MAAOxF,EAAK,MACZ,KAAMA,EAAK,KACX,WAAYwF,CACd,CACF,CAAC,CACH,CACF,CA4CA,QAAS,CACP,KAAM,CACJ,WAAAnJ,EACA,KAAAE,EACA,QAAAL,EACA,IAAAuJ,EACA,QAAAC,EACA,SAAAC,EACA,WAAAC,EACA,aAAAC,EACA,cAAAC,EACA,eAAAC,EACA,eAAAC,CACF,EAAI,KAAK,MAET,OACE,gBAAC,KAAe,CAAC,YAAa,KAAK,YAAa,UAAW,KAAK,WAC9D,gBAAC,KAAS,CAAC,YAAY,uBAAuB,UAAU,YACpDC,GAEE,gBAAC,OAAI,IAAKA,EAAS,SAAW,GAAGA,EAAS,gBACvC/J,EAAQ,IAAI,CAACvC,EAAOsH,IAAU,CAC7B,MAAMiF,EAAqBC,EAAsBxM,EAAO0C,CAAU,EAC5D+J,EAA6B/J,EAAW,KAAK,MAC9CgK,GAAyC,KAAK,mBAAmBA,EAAUpF,CAAK,EACjF,OAEJ,OACE,gBAAC,KACC,GAAItH,EAAM,MACV,MAAAsH,EACA,IAAKtH,EAAM,MACX,KAAA4C,EACA,MAAA5C,EACA,WAAYuM,EACZ,mBAAoBE,EACpB,SAAWzM,GAAU,KAAK,cAAcA,EAAOsH,CAAK,EACpD,cAAe,KAAK,cACpB,WAAA2E,EACA,WAAYC,EACZ,cAAAC,EACA,eAAAC,EACA,eAAAC,EACA,QAAA9J,EACA,IAAAuJ,EACA,QAAAC,EACA,SAAAC,CAAA,CACF,CAEJ,CAAC,EACAM,EAAS,WACZ,CAGN,CACF,CAEJ,CACF,CAEA,MAAME,EAAwB,CAC5BxM,EACA2M,IAEK3M,EAAM,eAGW,KAAiB,EAAE,oBAAoBA,EAAM,UAAU,GACrD2M,C,uEC3MnB,eAAexJ,EACpByJ,EACAC,EACAtK,EACAW,EACsB,CACtB,IAAI4J,EAAcvK,EAClB,MAAMwK,EAAa,CAAE,KAAMH,EAAO,KAAM,IAAKC,CAA8B,EACrEG,EAAgB,CAAE,GAAGJ,GAAQ,kBAAkB,gBAAmB,EAAG,WAAAG,EAAY,MAAO,GAAI,EAGlG,GAAI7J,GAAW,KAAK,KAAO0J,EAAO,KAAK,GAAI,CAEzC,GAAIA,EAAO,KAAK,MACd,OAAOrK,EACT,MAES,KAAsBW,CAAS,MAAK,MAAsB0J,CAAM,EAAG,CAC1E,MAAMK,EAAkB,MAAM/J,EAAU,wBAAwBX,CAAO,EACvEuK,EAAc,MAAMF,EAAO,0BAA0BK,CAAe,CACtE,SAES/J,GAAa0J,EAAO,cAC3BE,EAAc,MAAMF,EAAO,cAAcrK,EAASW,CAAS,MAI3D,OAAO,CAAC8J,CAAa,CAEzB,CAEA,OAAIF,EAAY,SAAW,EAClB,CAACE,CAAa,EAIhBF,EAAY,IAAK9M,IAClB,IAAC,MAAsBA,EAAM,UAAU,GAAK,CAAC4M,EAAO,KAAK,QAC3D5M,EAAM,WAAa+M,GAEd/M,EACR,CACH,C","sources":["webpack://grafana/./public/app/features/plugins/admin/components/HorizontalGroup.tsx","webpack://grafana/./public/app/features/query-library/api/SavedQueriesApi.ts","webpack://grafana/./public/app/features/query-library/api/SavedQueriesSrv.ts","webpack://grafana/./public/app/features/query-library/globalStyles.ts","webpack://grafana/./public/app/features/query-library/components/DatasourceTypePicker.tsx","webpack://grafana/./public/app/features/query-library/components/HistoryTab.tsx","webpack://grafana/./public/app/features/query-library/utils.ts","webpack://grafana/./public/app/features/query-library/components/QueryEditor.tsx","webpack://grafana/./public/app/features/query-library/components/QueryName.tsx","webpack://grafana/./public/app/features/query-library/components/QueryEditorDrawerHeader.tsx","webpack://grafana/./public/app/features/query-library/components/UsagesTab.tsx","webpack://grafana/./public/app/features/query-library/components/VariablesTab.tsx","webpack://grafana/./public/app/features/query-library/components/QueryEditorDrawer.tsx","webpack://grafana/./public/app/features/query-library/components/CreateNewQuery.tsx","webpack://grafana/./public/app/features/query-library/components/QueryImportDrawer.tsx","webpack://grafana/./public/app/features/query-library/components/QueryCreateDrawer.tsx","webpack://grafana/./public/app/features/query-library/components/QueryListItem.tsx","webpack://grafana/./public/app/features/query-library/components/QueryLibrarySearchTable.tsx","webpack://grafana/./public/app/features/query-library/components/Queries.tsx","webpack://grafana/./public/app/features/query-library/components/QueryLibraryPage.tsx","webpack://grafana/./public/app/features/query/components/QueryEditorRows.tsx","webpack://grafana/./public/app/features/query/state/updateQueries.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ninterface HorizontalGroupProps {\n  children: React.ReactNode;\n  wrap?: boolean;\n  className?: string;\n}\n\nexport const HorizontalGroup = ({ children, wrap, className }: HorizontalGroupProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, wrap);\n\n  return <div className={cx(styles.container, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2, wrap?: boolean) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: ${wrap ? 'wrap' : 'no-wrap'};\n    & > * {\n      margin-bottom: ${theme.spacing()};\n      margin-right: ${theme.spacing()};\n    }\n    & > *:last-child {\n      margin-right: 0;\n    }\n  `,\n});\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nimport { DataQuery } from '@grafana/data/src';\n\nimport { SavedQueryUpdateOpts } from '../components/QueryEditorDrawer';\n\nimport { getSavedQuerySrv } from './SavedQueriesSrv';\n\nexport type SavedQueryRef = {\n  uid?: string;\n};\n\nexport type Variable = {\n  name: string;\n  type?: string;\n  current: {\n    value: string | number;\n  };\n};\n\ntype SavedQueryMeta = {\n  title: string;\n  description?: string;\n  tags?: string[];\n  schemaVersion?: number;\n  variables: Variable[];\n};\n\ntype SavedQueryData<TQuery extends DataQuery = DataQuery> = {\n  queries: TQuery[];\n};\n\nexport type SavedQuery<TQuery extends DataQuery = DataQuery> = SavedQueryMeta & SavedQueryData<TQuery> & SavedQueryRef;\n\nexport const isQueryWithMixedDatasource = (savedQuery: SavedQuery): boolean => {\n  if (!savedQuery?.queries?.length) {\n    return false;\n  }\n\n  const firstDs = savedQuery.queries[0].datasource;\n  return savedQuery.queries.some((q) => q.datasource?.uid !== firstDs?.uid || q.datasource?.type !== firstDs?.type);\n};\n\nconst api = createApi({\n  reducerPath: 'savedQueries',\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    getSavedQueryByUids: build.query<SavedQuery[] | null, SavedQueryRef[]>({\n      async queryFn(arg, queryApi, extraOptions, baseQuery) {\n        return { data: await getSavedQuerySrv().getSavedQueries(arg) };\n      },\n    }),\n    deleteSavedQuery: build.mutation<null, SavedQueryRef>({\n      async queryFn(arg) {\n        await getSavedQuerySrv().deleteSavedQuery(arg);\n        return {\n          data: null,\n        };\n      },\n    }),\n    updateSavedQuery: build.mutation<null, { query: SavedQuery; opts: SavedQueryUpdateOpts }>({\n      async queryFn(arg) {\n        await getSavedQuerySrv().updateSavedQuery(arg.query, arg.opts);\n        return {\n          data: null,\n        };\n      },\n    }),\n  }),\n});\n\nexport const { useUpdateSavedQueryMutation } = api;\n","import { getBackendSrv } from 'app/core/services/backend_srv';\nimport { SavedQueryUpdateOpts } from 'app/features/query-library/components/QueryEditorDrawer';\n\nimport { SavedQuery, SavedQueryRef } from './SavedQueriesApi';\n\nexport class SavedQuerySrv {\n  getSavedQueries = async (refs: SavedQueryRef[]): Promise<SavedQuery[]> => {\n    if (!refs.length) {\n      return [];\n    }\n    const uidParams = refs.map((r) => `uid=${r.uid}`).join('&');\n    return getBackendSrv().get<SavedQuery[]>(`/api/query-library?${uidParams}`);\n  };\n\n  deleteSavedQuery = async (ref: SavedQueryRef): Promise<void> => {\n    return getBackendSrv().delete(`/api/query-library?uid=${ref.uid}`);\n  };\n\n  updateSavedQuery = async (query: SavedQuery, options: SavedQueryUpdateOpts): Promise<void> => {\n    return getBackendSrv().post(`/api/query-library`, query);\n  };\n}\n\nconst savedQuerySrv = new SavedQuerySrv();\n\nexport const getSavedQuerySrv = () => savedQuerySrv;\n","import { css } from '@emotion/react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport function getGlobalStyles(theme: GrafanaTheme2) {\n  return css`\n    .filter-table {\n      border-collapse: separate;\n      border-spacing: 0 5px;\n\n      tbody {\n        tr:nth-child(odd) {\n          background: ${theme.colors.background.secondary};\n        }\n\n        tr {\n          background: ${theme.colors.background.secondary};\n        }\n      }\n\n      &--hover {\n        tbody tr:hover {\n          background: ${theme.colors.background.primary};\n        }\n      }\n    }\n  `;\n}\n","// Libraries\nimport { uniqBy } from 'lodash';\nimport React from 'react';\n\n// Components\nimport { DataSourceInstanceSettings, isUnsignedPluginSignature } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv } from '@grafana/runtime/src';\nimport { HorizontalGroup, PluginSignatureBadge, Select } from '@grafana/ui';\n\nexport type DatasourceTypePickerProps = {\n  onChange: (ds: string | null) => void;\n  current: string | null; // type\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  placeholder?: string;\n  tracing?: boolean;\n  mixed?: boolean;\n  dashboard?: boolean;\n  metrics?: boolean;\n  type?: string | string[];\n  annotations?: boolean;\n  variables?: boolean;\n  alerting?: boolean;\n  pluginId?: string;\n  /** If true,we show only DSs with logs; and if true, pluginId shouldnt be passed in */\n  logs?: boolean;\n  width?: number;\n  inputId?: string;\n  filter?: (dataSource: DataSourceInstanceSettings) => boolean;\n  onClear?: () => void;\n};\n\nconst getDataSourceTypeOptions = (props: DatasourceTypePickerProps) => {\n  const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } = props;\n\n  return uniqBy(\n    getDataSourceSrv()\n      .getList({\n        alerting,\n        tracing,\n        metrics,\n        logs,\n        dashboard,\n        mixed,\n        variables,\n        annotations,\n        pluginId,\n        filter,\n        type,\n      })\n      .map((ds) => {\n        if (ds.type === 'datasource') {\n          return {\n            value: ds.type,\n            label: ds.type,\n            imgUrl: ds.meta.info.logos.small,\n            meta: ds.meta,\n          };\n        }\n\n        return {\n          value: ds.type,\n          label: ds.type,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        };\n      }),\n    (opt) => opt.value\n  );\n};\n\nexport const DatasourceTypePicker = (props: DatasourceTypePickerProps) => {\n  const { autoFocus, onBlur, onChange, current, openMenuOnFocus, placeholder, width, inputId } = props;\n  const options = getDataSourceTypeOptions(props);\n\n  return (\n    <div aria-label={selectors.components.DataSourcePicker.container}>\n      <Select\n        aria-label={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isMulti={false}\n        isClearable={true}\n        backspaceRemovesValue={true}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        value={current}\n        onChange={(newValue) => {\n          onChange(newValue?.value ?? null);\n        }}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder ?? 'Select datasource type'}\n        noOptionsMessage=\"No datasources found\"\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature)) {\n            return (\n              <HorizontalGroup align=\"center\" justify=\"space-between\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </HorizontalGroup>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const HistoryTab = () => {\n  const styles = useStyles2(getStyles);\n\n  // @TODO Implement history\n  return (\n    <div className={styles.wrap}>\n      <p className={styles.tabDescription}>No history.</p>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      padding: 20px 5px 5px 5px;\n    `,\n    tabDescription: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import { DataQuery } from '@grafana/data/src';\n\nexport const defaultQuery: DataQuery = {\n  refId: 'A',\n  datasource: {\n    type: 'datasource',\n    uid: 'grafana',\n  },\n  queryType: 'measurements',\n};\n\nexport const implementationComingSoonAlert = () => {\n  alert('Implementation coming soon!');\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  getDefaultTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors/src';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\nimport { QueryEditorRows } from 'app/features/query/components/QueryEditorRows';\n\nimport { addQuery } from '../../../core/utils/query';\nimport { dataSource as expressionDatasource } from '../../expressions/ExpressionDatasource';\nimport { updateQueries } from '../../query/state/updateQueries';\nimport { isQueryWithMixedDatasource, SavedQuery } from '../api/SavedQueriesApi';\nimport { defaultQuery } from '../utils';\n\ntype Props = {\n  savedQuery: SavedQuery;\n  onSavedQueryChange: (newQuery: SavedQuery) => void;\n};\n\nexport const QueryEditor = ({ savedQuery, onSavedQueryChange }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queries, setQueries] = useState<DataQuery[]>(savedQuery.queries ?? [defaultQuery]);\n\n  const dsRef = isQueryWithMixedDatasource(savedQuery)\n    ? { uid: '-- Mixed --', type: 'datasource' }\n    : queries[0].datasource;\n\n  const [dsSettings, setDsSettings] = useState(getDataSourceSrv().getInstanceSettings(dsRef));\n\n  const data = {\n    state: LoadingState.NotStarted,\n    series: [],\n    timeRange: getDefaultTimeRange(),\n  };\n\n  const onQueriesChange = (newQueries: DataQuery[]) => {\n    setQueries(newQueries);\n    onSavedQueryChange({\n      ...savedQuery,\n      queries: newQueries,\n    });\n  };\n\n  const onDsChange = async (newDsSettings: DataSourceInstanceSettings) => {\n    const newDs = await getDataSourceSrv().get(newDsSettings.uid);\n    const currentDS = dsSettings ? await getDataSourceSrv().get(dsSettings.uid) : undefined;\n    const newQueries = await updateQueries(newDs, newDs.uid, queries, currentDS);\n\n    onQueriesChange(newQueries);\n    setDsSettings(newDsSettings);\n  };\n\n  const newQuery = async (): Promise<Partial<DataQuery>> => {\n    const ds: DataSourceApi = !dsSettings?.meta.mixed // TODO remove the asyncs and use prefetched ds apis\n      ? await getDataSourceSrv().get(dsSettings!.uid)\n      : await getDataSourceSrv().get();\n\n    return {\n      ...ds?.getDefaultQuery?.(CoreApp.PanelEditor),\n      datasource: { uid: ds?.uid, type: ds?.type },\n    };\n  };\n\n  const onAddQueryClick = async () => {\n    const newQ = await newQuery();\n    onQueriesChange(addQuery(queries, newQ));\n  };\n\n  const onAddExpressionClick = () => {\n    const newExpr = expressionDatasource.newQuery();\n    onQueriesChange(addQuery(queries, newExpr));\n  };\n\n  return (\n    <div>\n      <HorizontalGroup>\n        <div className={styles.dataSourceHeader}>Data source</div>\n        <div className={styles.dataSourcePickerWrapper}>\n          <DataSourcePicker\n            onChange={onDsChange}\n            current={dsSettings}\n            metrics={true}\n            mixed={true}\n            dashboard={true}\n            variables={true}\n          />\n        </div>\n      </HorizontalGroup>\n      <QueryEditorRows\n        queries={queries}\n        dsSettings={dsSettings!}\n        onQueriesChange={onQueriesChange}\n        onAddQuery={onAddQueryClick}\n        onRunQueries={() => {}}\n        data={data}\n      />\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        {\n          <Button\n            disabled={false}\n            icon=\"plus\"\n            onClick={onAddQueryClick}\n            variant=\"secondary\"\n            aria-label={selectors.components.QueryTab.addQuery}\n          >\n            Query\n          </Button>\n        }\n        {(dsSettings?.meta.alerting || dsSettings?.meta.mixed) && (\n          <Button icon=\"plus\" onClick={onAddExpressionClick} variant=\"secondary\" className={styles.expressionButton}>\n            <span>Expression&nbsp;</span>\n          </Button>\n        )}\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    dataSourceHeader: css`\n      font-size: ${theme.typography.size.sm};\n      margin-top: 5px;\n      margin-bottom: 20px;\n    `,\n    dataSourcePickerWrapper: css`\n      margin-top: 5px;\n      margin-bottom: 20px;\n    `,\n    expressionButton: css`\n      margin-right: ${theme.spacing(2)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, FieldValidationMessage, HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nexport interface QueryNameProps {\n  name: string;\n  editingEnabled: boolean;\n  onChange: (v: string) => void;\n}\n\nexport const QueryName = ({ name, onChange, editingEnabled }: QueryNameProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const onEditQueryName = (event: React.SyntheticEvent) => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = (newName: string) => {\n    setIsEditing(false);\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (name !== newName) {\n      onChange(newName);\n    }\n  };\n\n  const onInputChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty name is not allowed');\n      return;\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditLayerBlur = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.select();\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      if (!(event.target instanceof HTMLInputElement)) {\n        return;\n      }\n\n      onEndEditName(event.target.value);\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        {!isEditing && (\n          <HorizontalGroup>\n            <h2 className={styles.h2Style}>{name}</h2>\n            {editingEnabled && <Icon name=\"pen\" className={styles.nameEditIcon} size=\"md\" onClick={onEditQueryName} />}\n          </HorizontalGroup>\n        )}\n\n        {isEditing && (\n          <>\n            <Input\n              type=\"text\"\n              defaultValue={name}\n              onBlur={onEditLayerBlur}\n              onFocus={onFocus}\n              autoFocus={true}\n              onKeyDown={onKeyDown}\n              invalid={validationError !== null}\n              onChange={onInputChange}\n              className={styles.nameInput}\n            />\n            {validationError && <FieldValidationMessage horizontal>{validationError}</FieldValidationMessage>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      display: flex;\n      align-items: center;\n      margin-left: ${theme.v1.spacing.xs};\n    `,\n    nameEditIcon: css`\n      cursor: pointer;\n      color: ${theme.colors.text.secondary};\n      width: 12px;\n      height: 12px;\n    `,\n    nameInput: css`\n      max-width: 300px;\n      margin: -8px 0;\n    `,\n    h2Style: css`\n      margin-bottom: 0;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Button, HorizontalGroup, Icon, IconName, useStyles2 } from '@grafana/ui';\nimport { SanitizedSVG } from 'app/core/components/SVG/SanitizedSVG';\n\nimport { useAppNotification } from '../../../core/copy/appNotification';\nimport { SavedQuery } from '../api/SavedQueriesApi';\nimport { getSavedQuerySrv } from '../api/SavedQueriesSrv';\nimport { implementationComingSoonAlert } from '../utils';\n\nimport { SavedQueryUpdateOpts } from './QueryEditorDrawer';\nimport { QueryName } from './QueryName';\n\ntype Props = {\n  onSavedQueryChange: (newQuery: SavedQuery) => void;\n  savedQuery: SavedQuery;\n  onDismiss: () => void;\n  options: SavedQueryUpdateOpts;\n};\n\nexport const QueryEditorDrawerHeader = ({ savedQuery, onDismiss, onSavedQueryChange, options }: Props) => {\n  const notifyApp = useAppNotification();\n  const styles = useStyles2(getStyles);\n\n  const dropdownRef = useRef(null);\n\n  const [queryName, setQueryName] = useState(savedQuery.title);\n  const [showUseQueryOptions, setShowUseQueryOptions] = useState(false);\n\n  const nameEditingEnabled = !Boolean(savedQuery?.uid?.length);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current !== event.target) {\n        setShowUseQueryOptions(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n  }, [dropdownRef]);\n\n  const deleteQuery = async () => {\n    await getSavedQuerySrv().deleteSavedQuery({ uid: savedQuery.uid });\n    onDismiss();\n  };\n\n  type queryOption = {\n    label: string;\n    value: string;\n    icon: IconName;\n    src?: string;\n  };\n\n  const useQueryOptions: queryOption[] = [\n    { label: 'Add to dashboard', value: 'dashboard-panel', icon: 'apps' },\n    { label: 'Create alert rule', value: 'alert-rule', icon: 'bell' },\n    { label: 'View in explore', value: 'explore', icon: 'compass' },\n    {\n      label: 'Create recorded query',\n      value: 'recorded-query',\n      icon: 'record-audio',\n    },\n    { label: 'Create SLO', value: 'slo', icon: 'crosshair' },\n    {\n      label: 'Add to incident in Grafana OnCall',\n      value: 'incident-oncall',\n      icon: 'record-audio',\n      src: 'public/app/features/query-library/img/grafana_incident.svg',\n    },\n    {\n      label: 'Create incident in Grafana Incident',\n      value: 'incident-grafana',\n      icon: 'heart-break',\n      src: 'public/app/features/query-library/img/grafana_oncall.svg',\n    },\n    {\n      label: 'Create forecast in Grafana ML',\n      value: 'grafana-ml',\n      icon: 'grafana-ml',\n      src: 'public/app/features/query-library/img/grafana_ml.svg',\n    },\n  ];\n\n  const onQueryNameChange = (name: string) => {\n    setQueryName(name);\n    onSavedQueryChange({\n      ...savedQuery,\n      title: name,\n    });\n  };\n\n  const onQuerySave = async (options: SavedQueryUpdateOpts) => {\n    await getSavedQuerySrv()\n      .updateSavedQuery(savedQuery, options)\n      .then(() => notifyApp.success('Query updated'))\n      .catch((err) => {\n        const msg = err.data?.message || err;\n        notifyApp.warning(msg);\n      });\n    onDismiss();\n  };\n\n  return (\n    <>\n      <div className={styles.header}>\n        <HorizontalGroup justify={'space-between'}>\n          <QueryName name={queryName} onChange={onQueryNameChange} editingEnabled={nameEditingEnabled} />\n          <HorizontalGroup>\n            <Button icon=\"times\" size=\"md\" variant={'secondary'} onClick={onDismiss} autoFocus={false}>\n              Close\n            </Button>\n            <Button\n              icon={'grafana'}\n              variant=\"secondary\"\n              size=\"md\"\n              onClick={() => {\n                setShowUseQueryOptions(!showUseQueryOptions);\n              }}\n            >\n              Use query\n            </Button>\n            <Button icon=\"sync\" size=\"md\" variant={'secondary'} onClick={implementationComingSoonAlert}>\n              Run\n            </Button>\n            {/*<Button icon=\"share-alt\" size=\"sm\" variant={'secondary'}>Export</Button>*/}\n            <Button icon=\"lock\" size=\"md\" variant={'secondary'} onClick={implementationComingSoonAlert} />\n            <Button size=\"md\" variant={'primary'} onClick={() => onQuerySave(options)}>\n              Save\n            </Button>\n            <Button icon=\"trash-alt\" size=\"md\" variant={'destructive'} onClick={() => deleteQuery()} />\n          </HorizontalGroup>\n        </HorizontalGroup>\n        {/*@TODO Nicer submenu*/}\n        <HorizontalGroup>\n          {showUseQueryOptions && (\n            <div\n              className=\"panel-menu-container dropdown open\"\n              style={{ height: 0 }}\n              ref={dropdownRef}\n              onClick={() => {\n                setShowUseQueryOptions(false);\n              }}\n            >\n              <ul className={cx('dropdown-menu dropdown-menu--menu panel-menu', styles.dropdown)}>\n                {useQueryOptions.map((option, key) => {\n                  return (\n                    <li key={key}>\n                      {/*eslint-disable-next-line jsx-a11y/anchor-is-valid*/}\n                      <a onClick={implementationComingSoonAlert}>\n                        <div>\n                          {option.src ? (\n                            <SanitizedSVG src={option.src} className={styles.optionSvg} />\n                          ) : (\n                            <Icon name={option.icon} className={styles.menuIconClassName} />\n                          )}\n                        </div>\n                        <span className=\"dropdown-item-text\">{option.label}</span>\n                        <span className=\"dropdown-menu-item-shortcut\" />\n                      </a>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          )}\n        </HorizontalGroup>\n      </div>\n    </>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cascaderButton: css`\n      height: 24px;\n    `,\n    header: css`\n      padding-top: 5px;\n      padding-bottom: 15px;\n    `,\n    menuIconClassName: css`\n      margin-right: ${theme.v1.spacing.sm};\n      a::after {\n        display: none;\n      }\n    `,\n    optionSvg: css`\n      margin-right: 8px;\n      width: 16px;\n      height: 16px;\n    `,\n    dropdown: css`\n      left: 609px;\n      top: 2px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Button, Card, Icon, IconName, Spinner, useStyles2 } from '@grafana/ui/src';\n\nimport { HorizontalGroup } from '../../plugins/admin/components/HorizontalGroup';\nimport { getGrafanaSearcher, SearchQuery } from '../../search/service';\nimport { SavedQuery } from '../api/SavedQueriesApi';\nimport { QueryItem } from '../types';\n\ntype Props = {\n  savedQuery: SavedQuery;\n};\n\nexport const UsagesTab = ({ savedQuery }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const searchQuery = useMemo<SearchQuery>(() => {\n    const query: SearchQuery = {\n      query: '*',\n      kind: savedQuery.uid ? ['dashboard', 'alert'] : ['newQuery'], // workaround for new queries\n      saved_query_uid: savedQuery.uid,\n    };\n\n    return query;\n  }, [savedQuery.uid]);\n\n  const results = useAsync(async () => {\n    const raw = await getGrafanaSearcher().search(searchQuery);\n    return raw.view.map<QueryItem>((item) => ({\n      uid: item.uid,\n      title: item.name,\n      url: item.url,\n      uri: item.url,\n      type: item.kind,\n      id: 321, // do not use me!\n      tags: item.tags ?? [],\n      ds_uid: item.ds_uid,\n      location: item.location,\n      panel_type: item.panel_type,\n    }));\n  }, [searchQuery]);\n\n  if (results.loading) {\n    return <Spinner />;\n  }\n\n  const found = results.value;\n\n  const getIconForKind = (kind: string): IconName => {\n    let icon: IconName = 'question-circle';\n    switch (kind) {\n      case 'dashboard':\n        icon = 'apps';\n        break;\n      case 'folder':\n        icon = 'folder';\n        break;\n      case 'alert':\n        icon = 'bell';\n        break;\n      default:\n        icon = 'question-circle';\n        break;\n    }\n\n    return icon;\n  };\n\n  if (found?.length === 0) {\n    return (\n      <div className={styles.wrap}>\n        <p className={styles.usagesDescription}>This query is not used anywhere.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrap}>\n      <p className={styles.usagesDescription}>\n        This query is used in the places below. Modifying will affect all its usages.\n      </p>\n      {found?.map((item) => {\n        return (\n          <div key={item.uid}>\n            <Card>\n              <Card.Heading>\n                <span className={styles.cardHeading}>\n                  {item.title}\n                  <a\n                    href={item.url}\n                    title={'Open in new tab'}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={styles.externalLink}\n                  >\n                    <Icon name=\"external-link-alt\" className={styles.cardHeadingIcon} />\n                  </a>\n                </span>\n              </Card.Heading>\n              <Card.Description>\n                <a href={'dashboards'} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.externalLink}>\n                  <Icon name=\"folder\" className={styles.cardDescriptionIcon} />\n                </a>\n                {item.location}\n              </Card.Description>\n              <Card.Figure className={styles.cardFigure}>\n                <Icon name={getIconForKind(item.type)} />\n              </Card.Figure>\n              <Card.Tags>\n                <HorizontalGroup>\n                  <Button icon=\"eye\" size=\"sm\" variant={'secondary'} />\n                  <Button icon=\"link\" size=\"sm\" variant={'secondary'}>\n                    Unlink\n                  </Button>\n                </HorizontalGroup>\n              </Card.Tags>\n            </Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      padding: 20px 5px 5px 5px;\n    `,\n    info: css`\n      padding-bottom: 30px;\n    `,\n    folderIcon: css`\n      margin-right: 5px;\n    `,\n    cardFigure: css`\n      margin-right: 0;\n      margin-top: 15px;\n    `,\n    externalLink: css`\n      margin-left: 5px;\n    `,\n    cardHeading: css`\n      display: flex;\n    `,\n    cardHeadingIcon: css`\n      width: 13px;\n      height: 13px;\n      color: ${theme.colors.text.secondary};\n      display: flex;\n      align-self: center;\n    `,\n    usagesDescription: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    cardDescriptionIcon: css`\n      width: 16px;\n      height: 16px;\n      color: ${theme.colors.text.secondary};\n      margin-right: 5px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, HorizontalGroup, useStyles2 } from '@grafana/ui';\nimport { LayerName } from 'app/core/components/Layers/LayerName';\n\nimport { SavedQuery, useUpdateSavedQueryMutation, Variable } from '../api/SavedQueriesApi';\n\nimport { SavedQueryUpdateOpts } from './QueryEditorDrawer';\n\ntype Props = {\n  savedQuery: SavedQuery;\n  options: SavedQueryUpdateOpts;\n};\n\nexport const VariablesTab = ({ savedQuery, options }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [updateSavedQuery] = useUpdateSavedQueryMutation();\n\n  const onVariableNameChange = (variable: Variable, newName: string) => {\n    const newVariables = savedQuery.variables.map((v: Variable) => {\n      if (v.name === variable.name) {\n        v.name = newName;\n      }\n\n      return v;\n    });\n\n    updateSavedQuery({\n      query: {\n        ...savedQuery,\n        variables: newVariables,\n      },\n      opts: options,\n    });\n  };\n\n  const onVariableValueChange = (variable: Variable, newValue: string) => {\n    const newVariables = savedQuery.variables.map((v: Variable) => {\n      if (v.name === variable.name) {\n        v.current.value = newValue;\n      }\n\n      return v;\n    });\n\n    updateSavedQuery({\n      query: {\n        ...savedQuery,\n        variables: newVariables,\n      },\n      opts: options,\n    });\n  };\n\n  const onAddVariable = () => {\n    // NOTE: doing mutation to force re-render\n    savedQuery.variables.unshift({\n      name: 'New variable',\n      current: {\n        value: 'General',\n      },\n    });\n\n    updateSavedQuery({ query: savedQuery, opts: options });\n  };\n\n  const onRemoveVariable = (variable: Variable) => {\n    const varIndex = savedQuery.variables.map((v: Variable, index: number) => {\n      if (v.name === variable.name) {\n        return index;\n      }\n      return;\n    });\n\n    if (typeof varIndex === 'number') {\n      // NOTE: doing mutation vs filter to force re-render\n      savedQuery.variables.splice(varIndex, 1);\n      updateSavedQuery({ query: savedQuery, opts: options });\n    }\n  };\n\n  return (\n    <div className={styles.tabWrapper}>\n      <div className={styles.variablesHeader}>\n        <HorizontalGroup width=\"100%\" justify=\"space-between\" spacing={'md'} height={25}>\n          <div className={styles.tabDescription}>\n            Variables enable more interactive and dynamic queries. Instead of hard-coding things like server or sensor\n            names in your metric queries you can use variables in their place. <br />\n            <b>Variable support is coming soon!</b>\n          </div>\n          <Button icon=\"plus\" size=\"md\" className={styles.addVariableButton} onClick={onAddVariable}>\n            Add variable\n          </Button>\n        </HorizontalGroup>\n      </div>\n      <div className={styles.variableList}>\n        <ul>\n          {savedQuery &&\n            savedQuery.variables &&\n            savedQuery.variables.map((variable: Variable) => (\n              <li key={variable && variable.name} className={styles.variableListItem}>\n                <Card>\n                  <Card.Heading>\n                    <LayerName\n                      name={variable && variable.name}\n                      onChange={(v) => onVariableNameChange(variable, v)}\n                      overrideStyles\n                    />\n                  </Card.Heading>\n                  <Card.Description>\n                    <LayerName\n                      name={variable && variable.current.value.toString()}\n                      onChange={(v) => onVariableValueChange(variable, v)}\n                      overrideStyles\n                    />\n                  </Card.Description>\n                  <Card.Tags>\n                    <Button\n                      icon=\"trash-alt\"\n                      size=\"sm\"\n                      variant={'secondary'}\n                      tooltip=\"Delete this variable\"\n                      onClick={() => onRemoveVariable(variable)}\n                    >\n                      Delete\n                    </Button>\n                  </Card.Tags>\n                </Card>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tabWrapper: css`\n      flex: 1;\n      padding: 20px 5px 5px 5px;\n    `,\n    tabDescription: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    variableList: css`\n      padding-bottom: 20px;\n    `,\n    variableListItem: css`\n      list-style: none;\n    `,\n    addVariableButton: css`\n      display: flex;\n      align-self: center;\n      margin: auto;\n      margin-bottom: 15px;\n    `,\n    variablesHeader: css`\n      margin-top: 15px;\n      margin-bottom: 20px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { DataQuery } from '@grafana/data/src/types/query';\nimport { Drawer, IconName, Tab, TabContent, TabsBar, useStyles2 } from '@grafana/ui';\n\nimport { SavedQuery } from '../api/SavedQueriesApi';\n\nimport { HistoryTab } from './HistoryTab';\nimport { QueryEditor } from './QueryEditor';\nimport { QueryEditorDrawerHeader } from './QueryEditorDrawerHeader';\nimport { UsagesTab } from './UsagesTab';\nimport { VariablesTab } from './VariablesTab';\n\nexport type SavedQueryUpdateOpts = { message?: string } & (\n  | {\n      type: 'create-new';\n    }\n  | {\n      type: 'edit';\n    }\n);\n\ntype Props = {\n  onDismiss: () => void;\n  savedQuery: SavedQuery<DataQuery>;\n  options: SavedQueryUpdateOpts;\n};\n\ntype tab = {\n  label: string;\n  active: boolean;\n  icon: IconName;\n};\n\nconst initialTabs: tab[] = [\n  {\n    label: 'Usages',\n    active: true,\n    icon: 'link',\n  },\n  {\n    label: 'Variables',\n    active: false,\n    icon: 'info-circle',\n  },\n  {\n    label: 'History',\n    active: false,\n    icon: 'history',\n  },\n];\n\nexport const QueryEditorDrawer = (props: Props) => {\n  const { onDismiss, options } = props;\n  const styles = useStyles2(getStyles);\n  const [tabs, setTabs] = useState(initialTabs);\n  const [query, setSavedQuery] = useState(props.savedQuery);\n\n  return (\n    <Drawer onClose={onDismiss} width={'1000px'} expandable scrollableContent>\n      <div>\n        <QueryEditorDrawerHeader\n          options={options}\n          onSavedQueryChange={setSavedQuery}\n          savedQuery={query}\n          onDismiss={onDismiss}\n        />\n        <div className={styles.queryWrapper}>\n          <QueryEditor onSavedQueryChange={setSavedQuery} savedQuery={query} />\n        </div>\n        <TabsBar>\n          {tabs.map((tab, index) => (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab.active}\n              icon={tab.icon}\n              onChangeTab={() => setTabs(tabs.map((tab, idx) => ({ ...tab, active: idx === index })))}\n            />\n          ))}\n        </TabsBar>\n        <TabContent>\n          <div className={styles.tabWrapper}>\n            {tabs[0].active && <UsagesTab savedQuery={query} />}\n            {tabs[1].active && <VariablesTab savedQuery={query} options={options} />}\n            {tabs[2].active && <HistoryTab />}\n          </div>\n        </TabContent>\n      </div>\n    </Drawer>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    queryWrapper: css`\n      max-height: calc(60vh);\n      overflow-y: scroll;\n      margin-bottom: 50px;\n    `,\n    tabWrapper: css`\n      overflow-y: scroll;\n      max-height: calc(27vh);\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, useStyles2 } from '@grafana/ui';\n\nimport { SavedQuery, useUpdateSavedQueryMutation } from '../api/SavedQueriesApi';\n\nimport { SavedQueryUpdateOpts } from './QueryEditorDrawer';\n\ntype Props = {\n  options: SavedQueryUpdateOpts;\n  onDismiss: () => void;\n  updateComponent?: () => void;\n};\n\ninterface QueryForm {\n  val: SavedQuery;\n}\n\nconst initialForm: QueryForm = {\n  val: {\n    title: 'ds-variables',\n    tags: [],\n    description: 'example description',\n    schemaVersion: 1,\n    time: {\n      from: 'now-6h',\n      to: 'now',\n    },\n    variables: [\n      {\n        name: 'var1',\n        type: 'text',\n        current: {\n          value: 'hello world',\n        },\n      },\n    ],\n    queries: [\n      {\n        // @ts-ignore\n        channel: 'plugin/testdata/random-flakey-stream',\n        datasource: {\n          type: 'datasource',\n          uid: 'grafana',\n        },\n        filter: {\n          fields: ['Time', 'Value'],\n        },\n        queryType: 'measurements',\n        refId: 'A',\n        search: {\n          query: '',\n        },\n      },\n      {\n        // @ts-ignore\n        alias: 'my-alias',\n        datasource: {\n          type: 'testdata',\n          uid: 'PD8C576611E62080A',\n        },\n        drop: 11,\n        hide: false,\n        max: 1000,\n        min: 10,\n        noise: 5,\n        refId: 'B',\n        scenarioId: 'random_walk',\n        startValue: 10,\n      },\n    ],\n  },\n};\n\nexport const CreateNewQuery = ({ onDismiss, updateComponent, options }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [updateSavedQuery] = useUpdateSavedQueryMutation();\n\n  const [query, setQuery] = useState(initialForm);\n\n  return (\n    <>\n      <CodeEditor\n        containerStyles={styles.editor}\n        width=\"80%\"\n        height=\"70vh\"\n        language=\"json\"\n        showLineNumbers={false}\n        showMiniMap={true}\n        value={JSON.stringify(query.val, null, 2)}\n        onBlur={(val) => setQuery(() => ({ val: JSON.parse(val) }))}\n        onSave={(val) => setQuery(() => ({ val: JSON.parse(val) }))}\n        readOnly={false}\n      />\n\n      <Button\n        type=\"submit\"\n        className={styles.submitButton}\n        onClick={async () => {\n          await updateSavedQuery({ query: query.val, opts: options });\n          onDismiss();\n          updateComponent?.();\n        }}\n      >\n        Save query\n      </Button>\n    </>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editor: css``,\n    submitButton: css`\n      align-self: flex-end;\n      margin-bottom: 25px;\n      margin-top: 25px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Drawer, FileDropzone, useStyles2 } from '@grafana/ui';\n\nimport { CreateNewQuery } from './CreateNewQuery';\nimport { SavedQueryUpdateOpts } from './QueryEditorDrawer';\n\ntype Props = {\n  options: SavedQueryUpdateOpts;\n  onDismiss: () => void;\n};\n\nexport const QueryImportDrawer = ({ onDismiss, options }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [file, setFile] = useState<File | undefined>(undefined);\n\n  return (\n    <Drawer title=\"Import query\" onClose={onDismiss} width={'1000px'} expandable scrollableContent>\n      <FileDropzone\n        readAs=\"readAsBinaryString\"\n        onFileRemove={() => {\n          setFile(undefined);\n        }}\n        options={{\n          accept: '.json',\n          multiple: false,\n          onDrop: (acceptedFiles: File[]) => {\n            setFile(acceptedFiles[0]);\n          },\n        }}\n      >\n        <div>Drag and drop here or browse</div>\n      </FileDropzone>\n\n      {Boolean(file) && (\n        <div className={styles.queryPreview}>\n          <CreateNewQuery options={options} onDismiss={onDismiss} />\n        </div>\n      )}\n    </Drawer>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    queryPreview: css`\n      margin-top: 20px;\n      margin-bottom: 20px;\n      margin-left: 170px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, Drawer, Icon, ModalsController, useStyles2 } from '@grafana/ui';\n\nimport { SavedQuery } from '../api/SavedQueriesApi';\n\nimport { QueryEditorDrawer, SavedQueryUpdateOpts } from './QueryEditorDrawer';\nimport { QueryImportDrawer } from './QueryImportDrawer';\n\ntype Props = {\n  onDismiss: () => void;\n  updateComponent: () => void;\n};\n\nexport const QueryCreateDrawer = ({ onDismiss, updateComponent }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const type: SavedQueryUpdateOpts['type'] = 'create-new';\n\n  const closeDrawer = () => {\n    onDismiss();\n    updateComponent();\n  };\n\n  return (\n    <Drawer\n      title=\"Add new query\"\n      subtitle=\"You can create a new query from builder or import from file\"\n      onClose={onDismiss}\n      width={'1000px'}\n      expandable\n      scrollableContent\n    >\n      <div>\n        <Card>\n          <Card.Heading>Create by query builder</Card.Heading>\n          <Card.Description></Card.Description>\n          <Card.Figure>\n            <Icon name={'list-ui-alt'} className={styles.cardIcon} />\n          </Card.Figure>\n          <Card.Tags>\n            <ModalsController>\n              {({ showModal, hideModal }) => {\n                return (\n                  <Button\n                    icon=\"plus\"\n                    size=\"md\"\n                    onClick={() => {\n                      const savedQuery: SavedQuery = {\n                        title: 'New Query',\n                        variables: [],\n                        queries: [\n                          {\n                            refId: 'A',\n                            datasource: {\n                              type: 'datasource',\n                              uid: 'grafana',\n                            },\n                            queryType: 'randomWalk',\n                          },\n                        ],\n                      };\n                      showModal(QueryEditorDrawer, {\n                        onDismiss: closeDrawer,\n                        options: { type },\n                        savedQuery,\n                      });\n                    }}\n                  >\n                    Create query\n                  </Button>\n                );\n              }}\n            </ModalsController>\n          </Card.Tags>\n        </Card>\n        <Card>\n          <Card.Heading>Import from file</Card.Heading>\n          <Card.Description>Supported formats: JSON</Card.Description>\n          <Card.Figure>\n            <Icon name={'import'} className={styles.cardIcon} />\n          </Card.Figure>\n          <Card.Tags>\n            <ModalsController>\n              {({ showModal, hideModal }) => {\n                return (\n                  <Button\n                    icon=\"arrow-right\"\n                    size=\"md\"\n                    onClick={() => {\n                      showModal(QueryImportDrawer, {\n                        onDismiss: closeDrawer,\n                        options: { type },\n                      });\n                    }}\n                  >\n                    Next\n                  </Button>\n                );\n              }}\n            </ModalsController>\n          </Card.Tags>\n        </Card>\n      </div>\n    </Drawer>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardIcon: css`\n      width: 30px;\n      height: 30px;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { uniq } from 'lodash';\nimport React, { memo, useEffect, useState } from 'react';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data/src';\nimport { getDataSourceSrv } from '@grafana/runtime/src';\nimport { Icon, Tooltip } from '@grafana/ui';\nimport { Badge, IconButton, useStyles2 } from '@grafana/ui/src';\n\nimport { useAppNotification } from '../../../core/copy/appNotification';\nimport { getSavedQuerySrv } from '../api/SavedQueriesSrv';\nimport { QueryItem } from '../types';\nimport { implementationComingSoonAlert } from '../utils';\n\nimport { QueryEditorDrawer } from './QueryEditorDrawer';\n\ntype QueryListItemProps = {\n  query: QueryItem;\n  showModal: <T>(component: React.ComponentType<T>, props: T) => void;\n  hideModal: () => void;\n  updateComponent: () => void;\n  author: string;\n  date: string;\n};\n\nconst options = {\n  type: 'edit',\n} as const;\n\nexport const QueryListItem = memo(\n  ({ query, showModal, hideModal, updateComponent, author, date }: QueryListItemProps) => {\n    const notifyApp = useAppNotification();\n\n    const styles = useStyles2(getStyles);\n    const [dsInfo, setDsInfo] = useState<DataSourceApi[]>([]);\n\n    useEffect(() => {\n      const getQueryDsInstance = async () => {\n        const uniqueUids = uniq(query?.ds_uid ?? []);\n        setDsInfo((await Promise.all(uniqueUids.map((dsUid) => getDataSourceSrv().get(dsUid)))).filter(Boolean));\n      };\n\n      getQueryDsInstance();\n    }, [query.ds_uid]);\n\n    const closeDrawer = () => {\n      hideModal();\n      updateComponent();\n    };\n\n    const openDrawer = async () => {\n      const result = await getSavedQuerySrv().getSavedQueries([{ uid: query.uid }]);\n      const savedQuery = result[0];\n\n      showModal(QueryEditorDrawer, { onDismiss: closeDrawer, savedQuery: savedQuery, options });\n    };\n\n    const deleteQuery = async () => {\n      await getSavedQuerySrv().deleteSavedQuery({ uid: query.uid });\n      updateComponent();\n    };\n\n    const getDsType = () => {\n      const dsType = dsInfo?.length > 1 ? 'mixed' : dsInfo?.[0]?.type ?? 'datasource';\n      return startWithUpperCase(dsType);\n    };\n\n    const startWithUpperCase = (dsType: string) => {\n      return dsType.charAt(0).toUpperCase() + dsType.slice(1);\n    };\n\n    const getTooltip = () => {\n      return (\n        <div>\n          <ul className={styles.dsTooltipList}>\n            {dsInfo.map((dsI, key) => {\n              return (\n                <li key={key}>\n                  <img className={styles.dsTooltipIcon} src={dsI?.meta?.info.logos.small} alt=\"datasource\" />\n                  &nbsp;\n                  {startWithUpperCase(dsI.type)}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      );\n    };\n\n    const copyToClipboard = async () => {\n      const models = await getSavedQuerySrv().getSavedQueries([{ uid: query.uid }]);\n      if (!models?.length) {\n        implementationComingSoonAlert();\n        return;\n      }\n\n      await navigator.clipboard.writeText(\n        JSON.stringify(\n          {\n            ...models[0],\n            uid: undefined,\n            storageOptions: undefined,\n          },\n          null,\n          2\n        )\n      );\n      notifyApp.success('Query JSON copied to clipboard!');\n    };\n\n    return (\n      <tr key={query.uid} className={styles.row}>\n        {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions*/}\n        <td onClick={implementationComingSoonAlert}>\n          <Icon name={'lock'} className={styles.disabled} title={'Implementation coming soon!'} />\n        </td>\n        <td>\n          <Badge color={'green'} text={'1'} icon={'link'} tooltip={'Implementation coming soon!'} />\n        </td>\n        {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions*/}\n        <td onClick={openDrawer}>{query.title}</td>\n        {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions*/}\n        <td onClick={openDrawer}>\n          <img\n            className={styles.dsIcon}\n            src={getDsType() === 'Mixed' ? 'public/img/icn-datasource.svg' : dsInfo[0]?.meta?.info.logos.small}\n            alt=\"datasource\"\n            style={{ width: '16px', height: '16px' }}\n          />\n          &nbsp;&nbsp;{getDsType()}&nbsp;\n          {getDsType() === 'Mixed' && (\n            <Tooltip content={getTooltip()}>\n              <Icon name={'question-circle'} className={styles.infoIcon} />\n            </Tooltip>\n          )}\n        </td>\n        {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions*/}\n        <td onClick={openDrawer}>\n          <img\n            className={cx('filter-table__avatar', styles.dsIcon)}\n            src={'/avatar/46d229b033af06a191ff2267bca9ae56'}\n            alt={`Avatar for ${author}`}\n          />\n          &nbsp;&nbsp;{author}\n        </td>\n        {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions*/}\n        <td onClick={openDrawer}>{date}</td>\n        <td className={styles.tableTr}>\n          <IconButton name=\"share-alt\" tooltip={'Share'} onClick={implementationComingSoonAlert} />\n          <IconButton name=\"copy\" tooltip={'Copy'} onClick={copyToClipboard} />\n          <IconButton name=\"upload\" tooltip={'Upload'} onClick={implementationComingSoonAlert} />\n          <IconButton name=\"cog\" tooltip={'Settings'} onClick={implementationComingSoonAlert} />\n          <IconButton name=\"trash-alt\" tooltip={'Delete'} onClick={deleteQuery} />\n        </td>\n      </tr>\n    );\n  }\n);\n\nQueryListItem.displayName = 'QueryListItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    row: css`\n      height: 70px;\n      cursor: pointer;\n    `,\n    tableTr: css`\n      display: flex;\n      justify-content: space-between;\n      margin-top: 22px;\n    `,\n    disabled: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    gitIcon: css`\n      width: 30px;\n      height: 30px;\n      margin-left: 10px;\n      margin-top: 1px;\n      opacity: 0.8;\n    `,\n    infoIcon: css`\n      margin-top: -2px;\n    `,\n    dsTooltipIcon: css`\n      width: 11px;\n      height: 11px;\n    `,\n    dsIcon: css`\n      width: 16px !important;\n      height: 16px !important;\n    `,\n    dsTooltipList: css`\n      list-style-type: none;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { Global } from '@emotion/react';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, FilterInput, HorizontalGroup, ModalsController, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { getGrafanaSearcher, SearchQuery } from '../../search/service';\nimport { getGlobalStyles } from '../globalStyles';\nimport { QueryItem } from '../types';\n\nimport { DatasourceTypePicker } from './DatasourceTypePicker';\nimport { QueryCreateDrawer } from './QueryCreateDrawer';\nimport { QueryListItem } from './QueryListItem';\n\nconst QueryLibrarySearchTable = () => {\n  const styles = useStyles2(getStyles);\n\n  const [datasourceType, setDatasourceType] = useState<string | null>(null);\n  const [searchQueryBy, setSearchByQuery] = useState<string>('');\n  const [reload, setReload] = useState(0);\n\n  const theme = useTheme2();\n  const globalCSS = getGlobalStyles(theme);\n\n  // @TODO update with real data\n  const authors = ['Artur Wierzbicki', 'Drew Slobodnjak', 'Nathan Marrs', 'Raphael Batyrbaev', 'Adela Almasan'];\n  const dates = [\n    'August 17, 2022, 2:32pm',\n    'August 17, 2022, 4:10pm',\n    'August 18, 2022, 1:00am',\n    'August 18, 2022, 12:00pm',\n    'August 19, 2022, 2:33pm',\n  ];\n\n  const searchQuery = useMemo<SearchQuery>(() => {\n    const query: SearchQuery = {\n      query: '*',\n      sort: 'name_sort',\n      explain: true,\n      kind: ['query'],\n    };\n\n    if (datasourceType?.length) {\n      query.ds_type = datasourceType;\n    }\n\n    if (searchQueryBy) {\n      query.query = searchQueryBy;\n    }\n\n    return query;\n  }, [datasourceType, searchQueryBy]);\n\n  useEffect(() => {}, [reload]);\n\n  const results = useAsync(async () => {\n    const raw = await getGrafanaSearcher().search(searchQuery);\n    return raw.view.map<QueryItem>((item) => ({\n      uid: item.uid,\n      title: item.name,\n      url: item.url,\n      uri: item.url,\n      type: item.kind,\n      id: 123, // do not use me!\n      tags: item.tags ?? [],\n      ds_uid: item.ds_uid,\n    }));\n  }, [searchQuery, reload]);\n\n  const found = results.value;\n  return (\n    <>\n      <Global styles={globalCSS} />\n      <div className={styles.tableWrapper}>\n        <HorizontalGroup width=\"100%\" justify=\"space-between\" spacing={'md'} height={25}>\n          <HorizontalGroup>\n            <FilterInput\n              placeholder=\"Search queries by name, source, or variable\"\n              autoFocus={true}\n              value={searchQueryBy}\n              onChange={setSearchByQuery}\n              width={50}\n              className={styles.searchBy}\n            />\n            Filter by datasource type\n            <DatasourceTypePicker\n              current={datasourceType}\n              onChange={(newDsType) => {\n                setDatasourceType(() => newDsType);\n              }}\n            />\n          </HorizontalGroup>\n          <ModalsController>\n            {({ showModal, hideModal }) => {\n              return (\n                <div className={styles.createQueryButton}>\n                  <Button\n                    icon=\"plus\"\n                    size=\"md\"\n                    onClick={() => {\n                      showModal(QueryCreateDrawer, {\n                        onDismiss: hideModal,\n                        updateComponent: () => {\n                          setReload(reload + 1);\n                        },\n                      });\n                    }}\n                  >\n                    Create query\n                  </Button>\n                </div>\n              );\n            }}\n          </ModalsController>\n        </HorizontalGroup>\n\n        <ModalsController>\n          {({ showModal, hideModal }) => {\n            return (\n              <AutoSizer className={styles.autosizer} style={{ width: '100%', height: '100%' }}>\n                {({ width, height }) => {\n                  return (\n                    <table className={cx('filter-table form-inline filter-table--hover', styles.table)}>\n                      <thead>\n                        <tr>\n                          <th />\n                          <th>Status</th>\n                          <th>Name and raw query</th>\n                          <th>Data Source</th>\n                          <th>User</th>\n                          <th>Date</th>\n                          <th />\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {!Boolean(found?.length) && (\n                          <tr className={styles.transparentBg}>\n                            <td />\n                            <td />\n                            <td />\n                            <td>\n                              <div className={styles.noData}>No data</div>\n                            </td>\n                            <td />\n                            <td />\n                            <th />\n                          </tr>\n                        )}\n                        {Boolean(found?.length) &&\n                          found!.map((item, key) => {\n                            return (\n                              <QueryListItem\n                                query={item}\n                                key={item.uid}\n                                showModal={showModal}\n                                hideModal={hideModal}\n                                updateComponent={() => setReload(reload + 1)}\n                                author={key < authors.length ? authors[key] : authors[key - authors.length]}\n                                date={key < dates.length ? dates[key] : dates[key - dates.length]}\n                              />\n                            );\n                          })}\n                      </tbody>\n                    </table>\n                  );\n                }}\n              </AutoSizer>\n            );\n          }}\n        </ModalsController>\n      </div>\n    </>\n  );\n};\n\nexport default QueryLibrarySearchTable;\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tableWrapper: css`\n      height: 100%;\n      margin-top: 20px;\n      margin-bottom: 20px;\n      display: flex;\n      flex-direction: column;\n      align-items: flex-start;\n    `,\n    autosizer: css`\n      margin-top: 40px;\n    `,\n    createQueryButton: css`\n      text-align: center;\n    `,\n    filtersGroup: css`\n      padding-top: 10px;\n      margin-top: 30px;\n    `,\n    searchBy: css`\n      margin-right: 15px;\n    `,\n    table: css`\n      font-size: 14px;\n      &tbody {\n        &tr: {\n          background: ${theme.colors.background.secondary};\n        }\n      }\n    `,\n    noData: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    transparentBg: css`\n      background: transparent !important;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { useStyles2 } from '@grafana/ui/src';\n\nimport QueryLibrarySearchTable from './QueryLibrarySearchTable';\n\nexport const Queries = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.tableWrapper}>\n      <QueryLibrarySearchTable />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tableWrapper: css`\n      height: 100%;\n    `,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { config } from '@grafana/runtime/src';\nimport { Alert, Tab, TabsBar, TabContent } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { useNavModel } from '../../../core/hooks/useNavModel';\n\nimport { Queries } from './Queries';\n\nconst initialTabs = [\n  {\n    label: 'Queries',\n    active: true,\n  },\n];\n\nconst QueryLibraryPage = () => {\n  const navModel = useNavModel('query');\n\n  const [tabs, setTabs] = useState(initialTabs);\n\n  if (!config.featureToggles.panelTitleSearch) {\n    return <Alert title=\"Missing feature toggle: panelTitleSearch\">Query library requires searchV2</Alert>;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <TabsBar>\n          {tabs.map((tab, index) => (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab.active}\n              onChangeTab={() => setTabs(tabs.map((tab, idx) => ({ ...tab, active: idx === index })))}\n            />\n          ))}\n        </TabsBar>\n        <TabContent>{tabs[0].active && <Queries />}</TabContent>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default QueryLibraryPage;\n","import React, { PureComponent } from 'react';\nimport { DragDropContext, DragStart, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  EventBusExtended,\n  HistoryItem,\n  PanelData,\n} from '@grafana/data';\nimport { getDataSourceSrv, reportInteraction } from '@grafana/runtime';\n\nimport { QueryEditorRow } from './QueryEditorRow';\n\ninterface Props {\n  // The query configuration\n  queries: DataQuery[];\n  dsSettings: DataSourceInstanceSettings;\n\n  // Query editing\n  onQueriesChange: (queries: DataQuery[]) => void;\n  onAddQuery: (query: DataQuery) => void;\n  onRunQueries: () => void;\n\n  // Query Response Data\n  data: PanelData;\n\n  // Misc\n  app?: CoreApp;\n  history?: Array<HistoryItem<DataQuery>>;\n  eventBus?: EventBusExtended;\n  onQueryCopied?: () => void;\n  onQueryRemoved?: () => void;\n  onQueryToggled?: (queryStatus?: boolean | undefined) => void;\n  onDatasourceChange?: (dataSource: DataSourceInstanceSettings, query: DataQuery) => void;\n}\n\nexport class QueryEditorRows extends PureComponent<Props> {\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(this.props.queries.filter((item) => item !== query));\n  };\n\n  onChangeQuery(query: DataQuery, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    // update query in array\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return query;\n        }\n        return item;\n      })\n    );\n  }\n\n  onDataSourceChange(dataSource: DataSourceInstanceSettings, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    if (this.props.onDatasourceChange) {\n      this.props.onDatasourceChange(dataSource, queries[index]);\n    }\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        const dataSourceRef: DataSourceRef = {\n          type: dataSource.type,\n          uid: dataSource.uid,\n        };\n\n        if (item.datasource) {\n          const previous = getDataSourceSrv().getInstanceSettings(item.datasource);\n\n          if (previous?.type === dataSource.type) {\n            return {\n              ...item,\n              datasource: dataSourceRef,\n            };\n          }\n        }\n\n        return {\n          refId: item.refId,\n          hide: item.hide,\n          datasource: dataSourceRef,\n        };\n      })\n    );\n  }\n\n  onDragStart = (result: DragStart) => {\n    const { queries, dsSettings } = this.props;\n\n    reportInteraction('query_row_reorder_started', {\n      startIndex: result.source.index,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange, dsSettings } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      reportInteraction('query_row_reorder_canceled', {\n        startIndex,\n        endIndex,\n        numberOfQueries: queries.length,\n        datasourceType: dsSettings.type,\n      });\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n\n    reportInteraction('query_row_reorder_ended', {\n      startIndex,\n      endIndex,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  render() {\n    const {\n      dsSettings,\n      data,\n      queries,\n      app,\n      history,\n      eventBus,\n      onAddQuery,\n      onRunQueries,\n      onQueryCopied,\n      onQueryRemoved,\n      onQueryToggled,\n    } = this.props;\n\n    return (\n      <DragDropContext onDragStart={this.onDragStart} onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const dataSourceSettings = getDataSourceSettings(query, dsSettings);\n                  const onChangeDataSourceSettings = dsSettings.meta.mixed\n                    ? (settings: DataSourceInstanceSettings) => this.onDataSourceChange(settings, index)\n                    : undefined;\n\n                  return (\n                    <QueryEditorRow\n                      id={query.refId}\n                      index={index}\n                      key={query.refId}\n                      data={data}\n                      query={query}\n                      dataSource={dataSourceSettings}\n                      onChangeDataSource={onChangeDataSourceSettings}\n                      onChange={(query) => this.onChangeQuery(query, index)}\n                      onRemoveQuery={this.onRemoveQuery}\n                      onAddQuery={onAddQuery}\n                      onRunQuery={onRunQueries}\n                      onQueryCopied={onQueryCopied}\n                      onQueryRemoved={onQueryRemoved}\n                      onQueryToggled={onQueryToggled}\n                      queries={queries}\n                      app={app}\n                      history={history}\n                      eventBus={eventBus}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nconst getDataSourceSettings = (\n  query: DataQuery,\n  groupSettings: DataSourceInstanceSettings\n): DataSourceInstanceSettings => {\n  if (!query.datasource) {\n    return groupSettings;\n  }\n  const querySettings = getDataSourceSrv().getInstanceSettings(query.datasource);\n  return querySettings || groupSettings;\n};\n","import { CoreApp, DataQuery, DataSourceApi, hasQueryExportSupport, hasQueryImportSupport } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nexport async function updateQueries(\n  nextDS: DataSourceApi,\n  nextDSUidOrVariableExpression: string,\n  queries: DataQuery[],\n  currentDS?: DataSourceApi\n): Promise<DataQuery[]> {\n  let nextQueries = queries;\n  const datasource = { type: nextDS.type, uid: nextDSUidOrVariableExpression };\n  const DEFAULT_QUERY = { ...nextDS?.getDefaultQuery?.(CoreApp.PanelEditor), datasource, refId: 'A' };\n\n  // we are changing data source type\n  if (currentDS?.meta.id !== nextDS.meta.id) {\n    // If changing to mixed do nothing\n    if (nextDS.meta.mixed) {\n      return queries;\n    }\n    // when both data sources support abstract queries\n    else if (hasQueryExportSupport(currentDS) && hasQueryImportSupport(nextDS)) {\n      const abstractQueries = await currentDS.exportToAbstractQueries(queries);\n      nextQueries = await nextDS.importFromAbstractQueries(abstractQueries);\n    }\n    // when datasource supports query import\n    else if (currentDS && nextDS.importQueries) {\n      nextQueries = await nextDS.importQueries(queries, currentDS);\n    }\n    // Otherwise clear queries\n    else {\n      return [DEFAULT_QUERY];\n    }\n  }\n\n  if (nextQueries.length === 0) {\n    return [DEFAULT_QUERY];\n  }\n\n  // Set data source on all queries except expression queries\n  return nextQueries.map((query) => {\n    if (!isExpressionReference(query.datasource) && !nextDS.meta.mixed) {\n      query.datasource = datasource;\n    }\n    return query;\n  });\n}\n"],"names":["HorizontalGroup","children","wrap","className","theme","styles","getStyles","isQueryWithMixedDatasource","savedQuery","firstDs","q","api","build","arg","queryApi","extraOptions","baseQuery","useUpdateSavedQueryMutation","SavedQuerySrv","refs","uidParams","r","ref","query","options","savedQuerySrv","getSavedQuerySrv","getGlobalStyles","getDataSourceTypeOptions","props","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","filter","logs","ds","opt","DatasourceTypePicker","autoFocus","onBlur","onChange","current","openMenuOnFocus","placeholder","width","inputId","selectors","Select","newValue","o","PluginSignatureBadge","HistoryTab","defaultQuery","implementationComingSoonAlert","QueryEditor","onSavedQueryChange","queries","setQueries","dsRef","dsSettings","setDsSettings","data","onQueriesChange","newQueries","onDsChange","newDsSettings","newDs","currentDS","updateQueries","newQuery","onAddQueryClick","newQ","onAddExpressionClick","newExpr","DataSourcePicker","QueryEditorRows","Button","QueryName","name","editingEnabled","isEditing","setIsEditing","validationError","setValidationError","onEditQueryName","event","onEndEditName","newName","onInputChange","onEditLayerBlur","onFocus","onKeyDown","Icon","Input","FieldValidationMessage","QueryEditorDrawerHeader","onDismiss","notifyApp","dropdownRef","queryName","setQueryName","showUseQueryOptions","setShowUseQueryOptions","nameEditingEnabled","handleClickOutside","deleteQuery","useQueryOptions","onQueryNameChange","onQuerySave","err","msg","option","key","SanitizedSVG","UsagesTab","searchQuery","results","useAsync","item","Spinner","found","getIconForKind","kind","icon","Card","VariablesTab","updateSavedQuery","onVariableNameChange","variable","newVariables","v","onVariableValueChange","onAddVariable","onRemoveVariable","varIndex","index","LayerName","initialTabs","QueryEditorDrawer","tabs","setTabs","setSavedQuery","Drawer","TabsBar","tab","Tab","idx","TabContent","initialForm","CreateNewQuery","updateComponent","setQuery","CodeEditor","val","QueryImportDrawer","file","setFile","FileDropzone","acceptedFiles","QueryCreateDrawer","closeDrawer","showModal","hideModal","QueryListItem","author","date","dsInfo","setDsInfo","uniqueUids","dsUid","openDrawer","getDsType","dsType","startWithUpperCase","getTooltip","dsI","copyToClipboard","models","Badge","Tooltip","IconButton","datasourceType","setDatasourceType","searchQueryBy","setSearchByQuery","reload","setReload","globalCSS","authors","dates","FilterInput","newDsType","height","Queries","navModel","useNavModel","config","Page","Alert","result","startIndex","endIndex","update","removed","itemIndex","dataSource","dataSourceRef","app","history","eventBus","onAddQuery","onRunQueries","onQueryCopied","onQueryRemoved","onQueryToggled","provided","dataSourceSettings","getDataSourceSettings","onChangeDataSourceSettings","settings","groupSettings","nextDS","nextDSUidOrVariableExpression","nextQueries","datasource","DEFAULT_QUERY","abstractQueries"],"sourceRoot":""}