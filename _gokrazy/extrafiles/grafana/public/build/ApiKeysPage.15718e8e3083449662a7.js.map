{"version":3,"file":"ApiKeysPage.15718e8e3083449662a7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/api-keys/state/selectors.ts","webpack://grafana/./public/app/features/api-keys/state/actions.ts","webpack://grafana/./public/app/features/api-keys/ApiKeysAddedModal.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysForm.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysActionBar.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysTable.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysController.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysPage.tsx"],"sourcesContent":["import { ApiKeysState } from 'app/types';\n\nexport const getApiKeysCount = (state: ApiKeysState) =>\n  state.includeExpired ? state.keysIncludingExpired.length : state.keys.length;\n\nexport const getApiKeys = (state: ApiKeysState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n  const keysToFilter = state.includeExpired ? state.keysIncludingExpired : state.keys;\n\n  return keysToFilter.filter((key) => {\n    return regex.test(key.name) || regex.test(key.role);\n  });\n};\n\nexport const getIncludeExpired = (state: ApiKeysState) => state.includeExpired;\n\nexport const getIncludeExpiredDisabled = (state: ApiKeysState) =>\n  state.keys.length === 0 && state.keysIncludingExpired.length > 0;\n","import { getBackendSrv } from 'app/core/services/backend_srv';\nimport { ApiKey, ThunkResult } from 'app/types';\nimport { apiKeysLoaded, includeExpiredToggled, isFetching, setSearchQuery } from './reducers';\n\nexport function addApiKey(apiKey: ApiKey, openModal: (key: string) => void): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys());\n    openModal(result.key);\n  };\n}\n\nexport function loadApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(isFetching());\n    const [keys, keysIncludingExpired] = await Promise.all([\n      getBackendSrv().get('/api/auth/keys?includeExpired=false'),\n      getBackendSrv().get('/api/auth/keys?includeExpired=true'),\n    ]);\n    dispatch(apiKeysLoaded({ keys, keysIncludingExpired }));\n  };\n}\n\nexport function deleteApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    getBackendSrv()\n      .delete(`/api/auth/keys/${id}`)\n      .then(() => dispatch(loadApiKeys()));\n  };\n}\n\nexport function toggleIncludeExpired(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(includeExpiredToggled());\n  };\n}\n","import React, { useCallback } from 'react';\nimport { css } from '@emotion/css';\nimport { Alert, Field, Modal, useStyles2, Input, Icon, ClipboardButton } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { notifyApp } from '../../core/actions';\nimport { dispatch } from '../../store/store';\nimport { createSuccessNotification } from '../../core/copy/appNotification';\n\nexport interface Props {\n  onDismiss: () => void;\n  apiKey: string;\n  rootPath: string;\n}\n\nexport function ApiKeysAddedModal({ onDismiss, apiKey, rootPath }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const getClipboardText = useCallback(() => apiKey, [apiKey]);\n  const onClipboardCopy = () => {\n    dispatch(notifyApp(createSuccessNotification('Content copied to clipboard')));\n  };\n  return (\n    <Modal title=\"API Key Created\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <Field label=\"Key\">\n        <Input\n          id=\"Key\"\n          value={apiKey}\n          readOnly\n          addonAfter={\n            <ClipboardButton variant=\"primary\" getText={getClipboardText} onClipboardCopy={onClipboardCopy}>\n              <Icon name=\"copy\" /> Copy\n            </ClipboardButton>\n          }\n        />\n      </Field>\n      <Alert severity=\"info\" title=\"You will only be able to view this key here once!\">\n        It is not stored in this form, so be sure to copy it now.\n      </Alert>\n\n      <p className=\"text-muted\">You can authenticate a request using the Authorization HTTP header, example:</p>\n      <pre className={styles.small}>\n        curl -H &quot;Authorization: Bearer {apiKey}&quot; {rootPath}/api/dashboards/home\n      </pre>\n    </Modal>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    label: css`\n      padding: ${theme.spacing(1)};\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    small: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.bodySmall.fontWeight};\n    `,\n  };\n}\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from 'react';\nimport { EventsWithValidation, LegacyForms, ValidationEvents, Button, Select, InlineField } from '@grafana/ui';\nimport { NewApiKey, OrgRole } from '../../types';\nimport { rangeUtil, SelectableValue } from '@grafana/data';\nimport { SlideDown } from '../../core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nconst { Input } = LegacyForms;\nconst ROLE_OPTIONS: Array<SelectableValue<OrgRole>> = Object.keys(OrgRole).map((role) => ({\n  label: role,\n  value: role as OrgRole,\n}));\n\ninterface Props {\n  show: boolean;\n  onClose: () => void;\n  onKeyAdded: (apiKey: NewApiKey) => void;\n  disabled: boolean;\n}\n\nfunction isValidInterval(value: string): boolean {\n  if (!value) {\n    return true;\n  }\n  try {\n    rangeUtil.intervalToSeconds(value);\n    return true;\n  } catch {}\n  return false;\n}\n\nconst timeRangeValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: isValidInterval,\n      errorMessage: 'Not a valid duration',\n    },\n  ],\n};\n\nconst tooltipText =\n  'The API key life duration. For example, 1d if your key is going to last for one day. Supported units are: s,m,h,d,w,M,y';\n\nexport const ApiKeysForm: FC<Props> = ({ show, onClose, onKeyAdded, disabled }) => {\n  const [name, setName] = useState<string>('');\n  const [role, setRole] = useState<OrgRole>(OrgRole.Viewer);\n  const [secondsToLive, setSecondsToLive] = useState<string>('');\n  useEffect(() => {\n    setName('');\n    setRole(OrgRole.Viewer);\n    setSecondsToLive('');\n  }, [show]);\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (isValidInterval(secondsToLive)) {\n      onKeyAdded({ name, role, secondsToLive });\n      onClose();\n    }\n  };\n  const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n  };\n  const onRoleChange = (role: SelectableValue<OrgRole>) => {\n    setRole(role.value!);\n  };\n  const onSecondsToLiveChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSecondsToLive(event.currentTarget.value);\n  };\n\n  return (\n    <SlideDown in={show}>\n      <div className=\"gf-form-inline cta-form\">\n        <CloseButton onClick={onClose} />\n        <form className=\"gf-form-group\" onSubmit={onSubmit}>\n          <h5>Add API Key</h5>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-21\">\n              <span className=\"gf-form-label\">Key name</span>\n              <Input type=\"text\" className=\"gf-form-input\" value={name} placeholder=\"Name\" onChange={onNameChange} />\n            </div>\n            <div className=\"gf-form\">\n              <InlineField label=\"Role\">\n                <Select\n                  inputId=\"role-select\"\n                  value={role}\n                  onChange={onRoleChange}\n                  options={ROLE_OPTIONS}\n                  menuShouldPortal\n                />\n              </InlineField>\n            </div>\n            <div className=\"gf-form max-width-21\">\n              <InlineField tooltip={tooltipText} label=\"Time to live\">\n                <Input\n                  id=\"time-to-live-input\"\n                  type=\"text\"\n                  placeholder=\"1d\"\n                  validationEvents={timeRangeValidationEvents}\n                  value={secondsToLive}\n                  onChange={onSecondsToLiveChange}\n                />\n              </InlineField>\n            </div>\n            <div className=\"gf-form\">\n              <Button disabled={disabled}>Add</Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </SlideDown>\n  );\n};\n","import React, { FC } from 'react';\nimport { Button, FilterInput } from '@grafana/ui';\n\ninterface Props {\n  searchQuery: string;\n  disabled: boolean;\n  onAddClick: () => void;\n  onSearchChange: (value: string) => void;\n}\n\nexport const ApiKeysActionBar: FC<Props> = ({ searchQuery, disabled, onAddClick, onSearchChange }) => {\n  return (\n    <div className=\"page-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput placeholder=\"Search keys\" value={searchQuery} onChange={onSearchChange} />\n      </div>\n      <Button className=\"pull-right\" onClick={onAddClick} disabled={disabled}>\n        Add API key\n      </Button>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { DeleteButton, Icon, IconName, Tooltip, useTheme2 } from '@grafana/ui';\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\n\nimport { ApiKey } from '../../types';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  apiKeys: ApiKey[];\n  timeZone: TimeZone;\n  onDelete: (apiKey: ApiKey) => void;\n  canRead: boolean;\n  canDelete: boolean;\n}\n\nexport const ApiKeysTable: FC<Props> = ({ apiKeys, timeZone, onDelete, canRead, canDelete }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className=\"filter-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Role</th>\n          <th>Expires</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      {canRead && apiKeys.length > 0 ? (\n        <tbody>\n          {apiKeys.map((key) => {\n            const isExpired = Boolean(key.expiration && Date.now() > new Date(key.expiration).getTime());\n            return (\n              <tr key={key.id} className={styles.tableRow(isExpired)}>\n                <td>{key.name}</td>\n                <td>{key.role}</td>\n                <td>\n                  {formatDate(key.expiration, timeZone)}\n                  {isExpired && (\n                    <span className={styles.tooltipContainer}>\n                      <Tooltip content=\"This API key has expired.\">\n                        <Icon name={'exclamation-triangle' as IconName} />\n                      </Tooltip>\n                    </span>\n                  )}\n                </td>\n                <td>\n                  <DeleteButton\n                    aria-label=\"Delete API key\"\n                    size=\"sm\"\n                    onConfirm={() => onDelete(key)}\n                    disabled={!canDelete}\n                  />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      ) : null}\n    </table>\n  );\n};\n\nfunction formatDate(expiration: string | undefined, timeZone: TimeZone): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (isExpired: boolean) => css`\n    color: ${isExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { FC, useCallback, useState } from 'react';\n\ninterface Api {\n  isAdding: boolean;\n  toggleIsAdding: () => void;\n}\n\ninterface Props {\n  children: (props: Api) => JSX.Element;\n}\n\nexport const ApiKeysController: FC<Props> = ({ children }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false);\n  const toggleIsAdding = useCallback(() => {\n    setIsAdding(!isAdding);\n  }, [isAdding]);\n\n  return children({ isAdding, toggleIsAdding });\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n// Utils\nimport { AccessControlAction, ApiKey, NewApiKey, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getApiKeys, getApiKeysCount, getIncludeExpired, getIncludeExpiredDisabled } from './state/selectors';\nimport { addApiKey, deleteApiKey, loadApiKeys, toggleIncludeExpired } from './state/actions';\nimport Page from 'app/core/components/Page/Page';\nimport { ApiKeysAddedModal } from './ApiKeysAddedModal';\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { InlineField, InlineSwitch, VerticalGroup } from '@grafana/ui';\nimport { rangeUtil } from '@grafana/data';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { setSearchQuery } from './state/reducers';\nimport { ApiKeysForm } from './ApiKeysForm';\nimport { ApiKeysActionBar } from './ApiKeysActionBar';\nimport { ApiKeysTable } from './ApiKeysTable';\nimport { ApiKeysController } from './ApiKeysController';\nimport { ShowModalReactEvent } from 'app/types/events';\nimport { contextSrv } from 'app/core/core';\n\nfunction mapStateToProps(state: StoreState) {\n  const canRead = contextSrv.hasAccess(AccessControlAction.ActionAPIKeysRead, true);\n  const canCreate = contextSrv.hasAccess(AccessControlAction.ActionAPIKeysCreate, true);\n  const canDelete = contextSrv.hasAccess(AccessControlAction.ActionAPIKeysDelete, true);\n\n  return {\n    navModel: getNavModel(state.navIndex, 'apikeys'),\n    apiKeys: getApiKeys(state.apiKeys),\n    searchQuery: state.apiKeys.searchQuery,\n    apiKeysCount: getApiKeysCount(state.apiKeys),\n    hasFetched: state.apiKeys.hasFetched,\n    timeZone: getTimeZone(state.user),\n    includeExpired: getIncludeExpired(state.apiKeys),\n    includeExpiredDisabled: getIncludeExpiredDisabled(state.apiKeys),\n    canRead: canRead,\n    canCreate: canCreate,\n    canDelete: canDelete,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadApiKeys,\n  deleteApiKey,\n  setSearchQuery,\n  toggleIncludeExpired,\n  addApiKey,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  isAdding: boolean;\n}\n\nexport class ApiKeysPageUnconnected extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.fetchApiKeys();\n  }\n\n  async fetchApiKeys() {\n    await this.props.loadApiKeys();\n  }\n\n  onDeleteApiKey = (key: ApiKey) => {\n    this.props.deleteApiKey(key.id!);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onIncludeExpiredChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.toggleIncludeExpired();\n  };\n\n  onAddApiKey = (newApiKey: NewApiKey) => {\n    const openModal = (apiKey: string) => {\n      const rootPath = window.location.origin + config.appSubUrl;\n\n      appEvents.publish(\n        new ShowModalReactEvent({\n          props: {\n            apiKey,\n            rootPath,\n          },\n          component: ApiKeysAddedModal,\n        })\n      );\n    };\n\n    const secondsToLive = newApiKey.secondsToLive;\n    try {\n      const secondsToLiveAsNumber = secondsToLive ? rangeUtil.intervalToSeconds(secondsToLive) : null;\n      const apiKey: ApiKey = {\n        ...newApiKey,\n        secondsToLive: secondsToLiveAsNumber,\n      };\n      this.props.addApiKey(apiKey, openModal);\n      this.setState((prevState: State) => {\n        return {\n          ...prevState,\n          isAdding: false,\n        };\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const {\n      hasFetched,\n      navModel,\n      apiKeysCount,\n      apiKeys,\n      searchQuery,\n      timeZone,\n      includeExpired,\n      includeExpiredDisabled,\n      canRead,\n      canCreate,\n      canDelete,\n    } = this.props;\n\n    if (!hasFetched) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>{}</Page.Contents>\n        </Page>\n      );\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={false}>\n          <ApiKeysController>\n            {({ isAdding, toggleIsAdding }) => {\n              const showCTA = !isAdding && apiKeysCount === 0;\n              const showTable = apiKeysCount > 0;\n              return (\n                <>\n                  {showCTA ? (\n                    <EmptyListCTA\n                      title=\"You haven't added any API keys yet.\"\n                      buttonIcon=\"key-skeleton-alt\"\n                      onClick={toggleIsAdding}\n                      buttonTitle=\"New API key\"\n                      proTip=\"Remember, you can provide view-only API access to other applications.\"\n                      buttonDisabled={!canCreate}\n                    />\n                  ) : null}\n                  {showTable ? (\n                    <ApiKeysActionBar\n                      searchQuery={searchQuery}\n                      disabled={isAdding || !canCreate}\n                      onAddClick={toggleIsAdding}\n                      onSearchChange={this.onSearchQueryChange}\n                    />\n                  ) : null}\n                  <ApiKeysForm\n                    show={isAdding}\n                    onClose={toggleIsAdding}\n                    onKeyAdded={this.onAddApiKey}\n                    disabled={!canCreate}\n                  />\n                  {showTable ? (\n                    <VerticalGroup>\n                      <InlineField disabled={includeExpiredDisabled} label=\"Include expired keys\">\n                        <InlineSwitch id=\"showExpired\" value={includeExpired} onChange={this.onIncludeExpiredChange} />\n                      </InlineField>\n                      <ApiKeysTable\n                        apiKeys={apiKeys}\n                        timeZone={timeZone}\n                        onDelete={this.onDeleteApiKey}\n                        canRead={canRead}\n                        canDelete={canDelete}\n                      />\n                    </VerticalGroup>\n                  ) : null}\n                </>\n              );\n            }}\n          </ApiKeysController>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst ApiKeysPage = connector(ApiKeysPageUnconnected);\nexport default ApiKeysPage;\n"],"names":["getApiKeysCount","state","includeExpired","keysIncludingExpired","length","keys","getApiKeys","regex","RegExp","searchQuery","filter","key","test","name","role","getIncludeExpired","getIncludeExpiredDisabled","loadApiKeys","async","dispatch","isFetching","Promise","all","getBackendSrv","get","apiKeysLoaded","ApiKeysAddedModal","onDismiss","apiKey","rootPath","styles","useStyles2","getStyles","getClipboardText","useCallback","Modal","title","onClickBackdrop","isOpen","Field","label","Input","id","value","readOnly","addonAfter","ClipboardButton","variant","getText","onClipboardCopy","notifyApp","createSuccessNotification","Icon","Alert","severity","className","small","theme","css","spacing","colors","background","secondary","shape","borderRadius","typography","bodySmall","fontSize","fontWeight","LegacyForms","ROLE_OPTIONS","Object","OrgRole","map","isValidInterval","rangeUtil","timeRangeValidationEvents","EventsWithValidation","rule","errorMessage","ApiKeysForm","show","onClose","onKeyAdded","disabled","setName","useState","setRole","secondsToLive","setSecondsToLive","useEffect","SlideDown","in","CloseButton","onClick","onSubmit","event","preventDefault","type","placeholder","onChange","currentTarget","InlineField","Select","inputId","options","menuShouldPortal","tooltip","validationEvents","Button","ApiKeysActionBar","onAddClick","onSearchChange","FilterInput","ApiKeysTable","apiKeys","timeZone","onDelete","canRead","canDelete","useTheme2","style","width","isExpired","Boolean","expiration","Date","now","getTime","tableRow","formatDate","tooltipContainer","Tooltip","content","DeleteButton","size","onConfirm","dateTimeFormat","text","primary","ApiKeysController","children","isAdding","setIsAdding","toggleIsAdding","mapDispatchToProps","deleteApiKey","delete","then","setSearchQuery","toggleIncludeExpired","includeExpiredToggled","addApiKey","openModal","result","post","connector","connect","contextSrv","AccessControlAction","canCreate","navModel","getNavModel","navIndex","apiKeysCount","hasFetched","getTimeZone","user","includeExpiredDisabled","ApiKeysPageUnconnected","PureComponent","constructor","props","super","this","newApiKey","window","location","origin","config","appEvents","ShowModalReactEvent","component","secondsToLiveAsNumber","setState","prevState","err","console","error","componentDidMount","fetchApiKeys","render","Page","isLoading","showCTA","showTable","EmptyListCTA","buttonIcon","buttonTitle","proTip","buttonDisabled","onSearchQueryChange","onAddApiKey","VerticalGroup","InlineSwitch","onIncludeExpiredChange","onDeleteApiKey"],"sourceRoot":""}