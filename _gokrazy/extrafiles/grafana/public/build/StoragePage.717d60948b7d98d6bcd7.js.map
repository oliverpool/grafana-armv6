{"version":3,"file":"StoragePage.717d60948b7d98d6bcd7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/storage/AddRootView.tsx","webpack://grafana/./public/app/features/storage/Breadcrumb.tsx","webpack://grafana/./public/app/features/storage/CreateNewFolderModal.tsx","webpack://grafana/./public/app/features/storage/FileView.tsx","webpack://grafana/./public/app/features/storage/FolderView.tsx","webpack://grafana/./public/app/features/storage/RootView.tsx","webpack://grafana/./public/app/features/storage/UploadButton.tsx","webpack://grafana/./public/app/features/storage/StoragePage.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { StorageView } from './types';\n\ninterface Props {\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nexport function AddRootView({ onPathChange }: Props) {\n  return (\n    <div>\n      <div>TODO... Add ROOT</div>\n      <Button variant=\"secondary\" onClick={() => onPathChange('/')}>\n        Cancel\n      </Button>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, IconName, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  rootIcon?: IconName;\n  pathName: string;\n  onPathChange: (path: string) => void;\n}\n\nexport function Breadcrumb({ pathName, onPathChange, rootIcon }: Props) {\n  const styles = useStyles2(getStyles);\n  const paths = pathName.split('/').filter(Boolean);\n\n  return (\n    <ul className={styles.breadCrumb}>\n      {rootIcon && (\n        <li>\n          <Icon name={rootIcon} onClick={() => onPathChange('')} />\n        </li>\n      )}\n      {paths.map((path, index) => {\n        let url = '/' + paths.slice(0, index + 1).join('/');\n        const onClickBreadcrumb = () => onPathChange(url);\n        const isLastBreadcrumb = index === paths.length - 1;\n        return (\n          <li key={uniqueId(path)} onClick={isLastBreadcrumb ? undefined : onClickBreadcrumb}>\n            {path}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    breadCrumb: css`\n      list-style: none;\n      padding: ${theme.spacing(2, 1)};\n\n      li {\n        display: inline;\n\n        :not(:last-child) {\n          color: ${theme.colors.text.link};\n          cursor: pointer;\n        }\n        + li:before {\n          content: '>';\n          padding: ${theme.spacing(1)};\n          color: ${theme.colors.text.secondary};\n        }\n      }\n    `,\n  };\n}\n","import React from 'react';\nimport { SubmitHandler, Validate } from 'react-hook-form';\n\nimport { Button, Field, Form, Input, Modal } from '@grafana/ui';\n\ntype FormModel = { folderName: string };\n\ninterface Props {\n  onSubmit: SubmitHandler<FormModel>;\n  onDismiss: () => void;\n  validate: Validate<string>;\n}\n\nconst initialFormModel = { folderName: '' };\n\nexport function CreateNewFolderModal({ validate, onDismiss, onSubmit }: Props) {\n  return (\n    <Modal onDismiss={onDismiss} isOpen={true} title=\"New Folder\">\n      <Form defaultValues={initialFormModel} onSubmit={onSubmit} maxWidth={'none'}>\n        {({ register, errors }) => (\n          <>\n            <Field\n              label=\"Folder name\"\n              invalid={!!errors.folderName}\n              error={errors.folderName && errors.folderName.message}\n            >\n              <Input\n                id=\"folder-name-input\"\n                {...register('folderName', {\n                  required: 'Folder name is required.',\n                  validate: { validate },\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button type=\"submit\">Create</Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n","import { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React, { useMemo } from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { CodeEditor, useStyles2 } from '@grafana/ui';\nimport { SanitizedSVG } from 'app/core/components/SVG/SanitizedSVG';\n\nimport { getGrafanaStorage } from './storage';\nimport { StorageView } from './types';\n\ninterface FileDisplayInfo {\n  category?: 'svg' | 'image' | 'text';\n  language?: string; // match code editor\n}\n\ninterface Props {\n  listing: DataFrame;\n  path: string;\n  onPathChange: (p: string, view?: StorageView) => void;\n  view: StorageView;\n}\n\nexport function FileView({ listing, path, onPathChange, view }: Props) {\n  const styles = useStyles2(getStyles);\n  const info = useMemo(() => getFileDisplayInfo(path), [path]);\n  const body = useAsync(async () => {\n    if (info.category === 'text') {\n      const rsp = await getGrafanaStorage().get(path);\n      if (isString(rsp)) {\n        return rsp;\n      }\n      return JSON.stringify(rsp, null, 2);\n    }\n    return null;\n  }, [info, path]);\n\n  switch (view) {\n    case StorageView.Config:\n      return <div>CONFIGURE?</div>;\n    case StorageView.Perms:\n      return <div>Permissions</div>;\n    case StorageView.History:\n      return <div>TODO... history</div>;\n  }\n\n  let src = `api/storage/read/${path}`;\n  if (src.endsWith('/')) {\n    src = src.substring(0, src.length - 1);\n  }\n\n  switch (info.category) {\n    case 'svg':\n      return (\n        <div>\n          <SanitizedSVG src={src} className={styles.icon} />\n        </div>\n      );\n    case 'image':\n      return (\n        <div>\n          <a target={'_self'} href={src}>\n            <img src={src} alt=\"File preview\" className={styles.img} />\n          </a>\n        </div>\n      );\n    case 'text':\n      return (\n        <div className={styles.tableWrapper}>\n          <AutoSizer>\n            {({ width, height }) => (\n              <CodeEditor\n                width={width}\n                height={height}\n                value={body.value ?? ''}\n                showLineNumbers={false}\n                readOnly={true}\n                language={info.language ?? 'text'}\n                showMiniMap={false}\n                onBlur={(text: string) => {\n                  console.log('CHANGED!', text);\n                }}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      );\n  }\n\n  return (\n    <div>\n      FILE: <a href={src}>{path}</a>\n    </div>\n  );\n}\n\nfunction getFileDisplayInfo(path: string): FileDisplayInfo {\n  const idx = path.lastIndexOf('.');\n  if (idx < 0) {\n    return {};\n  }\n  const suffix = path.substring(idx + 1).toLowerCase();\n  switch (suffix) {\n    case 'svg':\n      return { category: 'svg' };\n    case 'jpg':\n    case 'jpeg':\n    case 'png':\n    case 'webp':\n    case 'gif':\n      return { category: 'image' };\n\n    case 'geojson':\n    case 'json':\n      return { category: 'text', language: 'json' };\n    case 'text':\n    case 'go':\n    case 'md':\n      return { category: 'text' };\n  }\n  return {};\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  uploadSpot: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n  img: css`\n    max-width: 100%;\n    // max-height: 147px;\n    // fill: ${theme.colors.text.primary};\n  `,\n  icon: css`\n    // max-width: 100%;\n    // max-height: 147px;\n    // fill: ${theme.colors.text.primary};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Table, useStyles2 } from '@grafana/ui';\n\nimport { StorageView } from './types';\n\ninterface Props {\n  listing: DataFrame;\n  view: StorageView;\n}\n\nexport function FolderView({ listing, view }: Props) {\n  const styles = useStyles2(getStyles);\n\n  switch (view) {\n    case StorageView.Config:\n      return <div>CONFIGURE?</div>;\n    case StorageView.Perms:\n      return <div>Permissions</div>;\n  }\n\n  return (\n    <div className={styles.tableWrapper}>\n      <AutoSizer>\n        {({ width, height }) => (\n          <div style={{ width: `${width}px`, height: `${height}px` }}>\n            <Table\n              height={height}\n              width={width}\n              data={listing}\n              noHeader={false}\n              showTypeIcons={false}\n              resizable={false}\n            />\n          </div>\n        )}\n      </AutoSizer>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  uploadSpot: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport {\n  Alert,\n  Button,\n  Card,\n  FilterInput,\n  HorizontalGroup,\n  Icon,\n  IconName,\n  TagList,\n  useStyles2,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { getGrafanaStorage } from './storage';\nimport { StorageInfo, StorageView } from './types';\n\ninterface Props {\n  root: DataFrame;\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nexport function RootView({ root, onPathChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const storage = useAsync(getGrafanaStorage().getConfig);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  let base = location.pathname;\n  if (!base.endsWith('/')) {\n    base += '/';\n  }\n\n  const roots = useMemo(() => {\n    let show = storage.value ?? [];\n    if (searchQuery?.length) {\n      const lower = searchQuery.toLowerCase();\n      show = show.filter((r) => {\n        const v = r.config;\n        const isMatch = v.name.toLowerCase().indexOf(lower) >= 0 || v.description.toLowerCase().indexOf(lower) >= 0;\n        if (isMatch) {\n          return true;\n        }\n        return false;\n      });\n    }\n\n    const base: StorageInfo[] = [];\n    const content: StorageInfo[] = [];\n    for (const r of show ?? []) {\n      if (r.config.underContentRoot) {\n        content.push(r);\n      } else if (r.config.prefix !== 'content') {\n        base.push(r);\n      }\n    }\n    return { base, content };\n  }, [searchQuery, storage]);\n\n  const renderRoots = (pfix: string, roots: StorageInfo[]) => {\n    return (\n      <VerticalGroup>\n        {roots.map((s) => {\n          const ok = s.ready;\n          return (\n            <Card key={s.config.prefix} href={ok ? `admin/storage/${pfix}${s.config.prefix}/` : undefined}>\n              <Card.Heading>{s.config.name}</Card.Heading>\n              <Card.Meta className={styles.clickable}>\n                {s.config.description}\n                {s.config.git?.remote && <a href={s.config.git?.remote}>{s.config.git?.remote}</a>}\n              </Card.Meta>\n              {s.notice?.map((notice) => (\n                <Alert key={notice.text} severity={notice.severity} title={notice.text} />\n              ))}\n\n              <Card.Tags className={styles.clickable}>\n                <HorizontalGroup>\n                  <TagList tags={getTags(s)} />\n                </HorizontalGroup>\n              </Card.Tags>\n              <Card.Figure className={styles.clickable}>\n                <Icon name={getIconName(s.config.type)} size=\"xxxl\" className={styles.secondaryTextColor} />\n              </Card.Figure>\n            </Card>\n          );\n        })}\n      </VerticalGroup>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput placeholder=\"Search Storage\" value={searchQuery} onChange={setSearchQuery} />\n        </div>\n        <Button className=\"pull-right\" onClick={() => onPathChange('', StorageView.AddRoot)}>\n          Add Root\n        </Button>\n      </div>\n\n      <div>{renderRoots('', roots.base)}</div>\n\n      <div>\n        <h3>Content</h3>\n        {renderRoots('content/', roots.content)}\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    secondaryTextColor: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    clickable: css`\n      pointer-events: none;\n    `,\n  };\n}\n\nfunction getTags(v: StorageInfo) {\n  const tags: string[] = [];\n  if (v.builtin) {\n    tags.push('Builtin');\n  }\n\n  // Error\n  if (!v.ready) {\n    tags.push('Not ready');\n  }\n  return tags;\n}\n\nexport function getIconName(type: string): IconName {\n  switch (type) {\n    case 'git':\n      return 'code-branch';\n    case 'disk':\n      return 'folder-open';\n    case 'sql':\n      return 'database';\n    default:\n      return 'folder-open';\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { FormEvent, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmModal, FileUpload, useStyles2 } from '@grafana/ui';\n\nimport { filenameAlreadyExists, getGrafanaStorage } from './storage';\nimport { StorageView, UploadReponse } from './types';\n\ninterface Props {\n  setErrorMessages: (errors: string[]) => void;\n  setPath: (p: string, view?: StorageView) => void;\n  path: string;\n  fileNames: string[];\n}\n\nconst fileFormats = 'image/jpg, image/jpeg, image/png, image/gif, image/webp';\n\nexport function UploadButton({ setErrorMessages, setPath, path, fileNames }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const [file, setFile] = useState<File | undefined>(undefined);\n  const [filenameExists, setFilenameExists] = useState(false);\n  const [fileUploadKey, setFileUploadKey] = useState(1);\n  const [isConfirmOpen, setIsConfirmOpen] = useState(true);\n\n  useEffect(() => {\n    setFileUploadKey((prev) => prev + 1);\n  }, [file]);\n\n  const onUpload = (rsp: UploadReponse) => {\n    console.log('Uploaded: ' + path);\n    if (rsp.path) {\n      setPath(rsp.path);\n    } else {\n      setPath(path); // back to data\n    }\n  };\n\n  const doUpload = async (fileToUpload: File, overwriteExistingFile: boolean) => {\n    if (!fileToUpload) {\n      setErrorMessages(['Please select a file.']);\n      return;\n    }\n\n    const rsp = await getGrafanaStorage().upload(path, fileToUpload, overwriteExistingFile);\n    if (rsp.status !== 200) {\n      setErrorMessages([rsp.message]);\n    } else {\n      onUpload(rsp);\n    }\n  };\n\n  const onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    setErrorMessages([]);\n\n    const fileToUpload =\n      event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0]\n        ? event.currentTarget.files[0]\n        : undefined;\n    if (fileToUpload) {\n      setFile(fileToUpload);\n\n      const fileExists = filenameAlreadyExists(fileToUpload.name, fileNames);\n      if (!fileExists) {\n        setFilenameExists(false);\n        doUpload(fileToUpload, false).then((r) => {});\n      } else {\n        setFilenameExists(true);\n        setIsConfirmOpen(true);\n      }\n    }\n  };\n\n  const onOverwriteConfirm = () => {\n    if (file) {\n      doUpload(file, true).then((r) => {});\n      setIsConfirmOpen(false);\n    }\n  };\n\n  const onOverwriteDismiss = () => {\n    setFile(undefined);\n    setFilenameExists(false);\n    setIsConfirmOpen(false);\n  };\n\n  return (\n    <>\n      <FileUpload accept={fileFormats} onFileUpload={onFileUpload} key={fileUploadKey} className={styles.uploadButton}>\n        Upload\n      </FileUpload>\n\n      {file && filenameExists && (\n        <ConfirmModal\n          isOpen={isConfirmOpen}\n          body={\n            <div>\n              <p>{file?.name}</p>\n              <p>A file with this name already exists.</p>\n              <p>What would you like to do?</p>\n            </div>\n          }\n          title={'This file already exists'}\n          confirmText={'Replace'}\n          onConfirm={onOverwriteConfirm}\n          onDismiss={onOverwriteDismiss}\n        />\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  uploadButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, GrafanaTheme2, isDataFrame, ValueLinkConfig } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { useStyles2, Spinner, TabsBar, Tab, Button, HorizontalGroup, LinkButton, Alert, toIconName } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { AddRootView } from './AddRootView';\nimport { Breadcrumb } from './Breadcrumb';\nimport { CreateNewFolderModal } from './CreateNewFolderModal';\nimport { FileView } from './FileView';\nimport { FolderView } from './FolderView';\nimport { RootView } from './RootView';\nimport { UploadButton } from './UploadButton';\nimport { getGrafanaStorage, filenameAlreadyExists } from './storage';\nimport { StorageView } from './types';\n\ninterface RouteParams {\n  path: string;\n}\n\ninterface QueryParams {\n  view: StorageView;\n}\n\nconst folderNameRegex = /^[a-z\\d!\\-_.*'() ]+$/;\nconst folderNameMaxLength = 256;\n\ninterface Props extends GrafanaRouteComponentProps<RouteParams, QueryParams> {}\n\nconst getParentPath = (path: string) => {\n  const lastSlashIdx = path.lastIndexOf('/');\n  if (lastSlashIdx < 1) {\n    return '';\n  }\n\n  return path.substring(0, lastSlashIdx);\n};\n\nexport default function StoragePage(props: Props) {\n  const styles = useStyles2(getStyles);\n  const navModel = useNavModel('storage');\n  const path = props.match.params.path ?? '';\n  const view = props.queryParams.view ?? StorageView.Data;\n  const setPath = (p: string, view?: StorageView) => {\n    let url = ('/admin/storage/' + p).replace('//', '/');\n    if (view && view !== StorageView.Data) {\n      url += '?view=' + view;\n    }\n    locationService.push(url);\n  };\n\n  const [isAddingNewFolder, setIsAddingNewFolder] = useState(false);\n  const [errorMessages, setErrorMessages] = useState<string[]>([]);\n\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage()\n      .list(path)\n      .then((frame) => {\n        if (frame) {\n          const name = frame.fields[0];\n          frame.fields[0] = {\n            ...name,\n            getLinks: (cfg: ValueLinkConfig) => {\n              const n = name.values.get(cfg.valueRowIndex ?? 0);\n              const p = path + '/' + n;\n              return [\n                {\n                  title: `Open ${n}`,\n                  href: `/admin/storage/${p}`,\n                  target: '_self',\n                  origin: name,\n                  onClick: () => {\n                    setPath(p);\n                  },\n                },\n              ];\n            },\n          };\n        }\n        return frame;\n      });\n  }, [path]);\n\n  const isFolder = useMemo(() => {\n    let isFolder = path?.indexOf('/') < 0;\n    if (listing.value) {\n      const length = listing.value.length;\n      if (length === 1) {\n        const first = listing.value.fields[0].values.get(0) as string;\n        isFolder = !path.endsWith(first);\n      } else {\n        // TODO: handle files/folders which do not exist\n        isFolder = true;\n      }\n    }\n    return isFolder;\n  }, [path, listing]);\n\n  const fileNames = useMemo(() => {\n    return (\n      listing.value?.fields\n        ?.find((f) => f.name === 'name')\n        ?.values?.toArray()\n        ?.filter((v) => typeof v === 'string') ?? []\n    );\n  }, [listing]);\n\n  const renderView = () => {\n    const isRoot = !path?.length || path === '/';\n    switch (view) {\n      case StorageView.AddRoot:\n        if (!isRoot) {\n          setPath('');\n          return <Spinner />;\n        }\n        return <AddRootView onPathChange={setPath} />;\n    }\n\n    const frame = listing.value;\n    if (!isDataFrame(frame)) {\n      return <></>;\n    }\n\n    if (isRoot) {\n      return <RootView root={frame} onPathChange={setPath} />;\n    }\n\n    const opts = [{ what: StorageView.Data, text: 'Data' }];\n\n    // Root folders have a config page\n    if (path.indexOf('/') < 0) {\n      opts.push({ what: StorageView.Config, text: 'Configure' });\n    }\n\n    // Lets only apply permissions to folders (for now)\n    if (isFolder) {\n      // opts.push({ what: StorageView.Perms, text: 'Permissions' });\n    } else {\n      // TODO: only if the file exists in a storage engine with\n      opts.push({ what: StorageView.History, text: 'History' });\n    }\n\n    const canAddFolder = isFolder && (path.startsWith('resources') || path.startsWith('content'));\n    const canDelete = path.startsWith('resources/') || path.startsWith('content/');\n    const canViewDashboard = config.featureToggles.dashboardsFromStorage && path.startsWith('content/');\n\n    const getErrorMessages = () => {\n      return (\n        <div className={styles.errorAlert}>\n          <Alert title=\"Upload failed\" severity=\"error\" onRemove={clearAlert}>\n            {errorMessages.map((error) => {\n              return <div key={error}>{error}</div>;\n            })}\n          </Alert>\n        </div>\n      );\n    };\n\n    const clearAlert = () => {\n      setErrorMessages([]);\n    };\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup width=\"100%\" justify=\"space-between\" spacing={'md'} height={25}>\n          <Breadcrumb pathName={path} onPathChange={setPath} rootIcon={toIconName(navModel.node.icon ?? '')} />\n          <HorizontalGroup>\n            {canViewDashboard && (\n              <LinkButton icon=\"dashboard\" href={`g/${path.substring(path.indexOf('/') + 1)}`}>\n                Dashboard\n              </LinkButton>\n            )}\n\n            {canAddFolder && (\n              <>\n                <UploadButton path={path} setErrorMessages={setErrorMessages} fileNames={fileNames} setPath={setPath} />\n                <Button onClick={() => setIsAddingNewFolder(true)}>New Folder</Button>\n              </>\n            )}\n            {canDelete && (\n              <Button\n                variant=\"destructive\"\n                onClick={() => {\n                  const text = isFolder\n                    ? 'Are you sure you want to delete this folder and all its contents?'\n                    : 'Are you sure you want to delete this file?';\n\n                  const parentPath = getParentPath(path);\n                  appEvents.publish(\n                    new ShowConfirmModalEvent({\n                      title: `Delete ${isFolder ? 'folder' : 'file'}`,\n                      text,\n                      icon: 'trash-alt',\n                      yesText: 'Delete',\n                      onConfirm: () =>\n                        getGrafanaStorage()\n                          .delete({ path, isFolder })\n                          .then(() => {\n                            setPath(parentPath);\n                          }),\n                    })\n                  );\n                }}\n              >\n                Delete\n              </Button>\n            )}\n          </HorizontalGroup>\n        </HorizontalGroup>\n\n        {errorMessages.length > 0 && getErrorMessages()}\n\n        <TabsBar>\n          {opts.map((opt) => (\n            <Tab\n              key={opt.what}\n              label={opt.text}\n              active={opt.what === view}\n              onChangeTab={() => setPath(path, opt.what)}\n            />\n          ))}\n        </TabsBar>\n        {isFolder ? (\n          <FolderView listing={frame} view={view} />\n        ) : (\n          <FileView path={path} listing={frame} onPathChange={setPath} view={view} />\n        )}\n\n        {isAddingNewFolder && (\n          <CreateNewFolderModal\n            onSubmit={async ({ folderName }) => {\n              const folderPath = `${path}/${folderName}`;\n              const res = await getGrafanaStorage().createFolder(folderPath);\n              if (typeof res?.error !== 'string') {\n                setPath(folderPath);\n                setIsAddingNewFolder(false);\n              }\n            }}\n            onDismiss={() => {\n              setIsAddingNewFolder(false);\n            }}\n            validate={(folderName) => {\n              const lowerCase = folderName.toLowerCase();\n\n              if (filenameAlreadyExists(folderName, fileNames)) {\n                return 'A file or a folder with the same name already exists';\n              }\n\n              if (!folderNameRegex.test(lowerCase)) {\n                return 'Name contains illegal characters';\n              }\n\n              if (folderName.length > folderNameMaxLength) {\n                return `Name is too long, maximum length: ${folderNameMaxLength} characters`;\n              }\n\n              return true;\n            }}\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={listing.loading}>{renderView()}</Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n  errorAlert: css`\n    padding-top: 20px;\n  `,\n  uploadButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n"],"names":["AddRootView","onPathChange","Button","Breadcrumb","pathName","rootIcon","styles","getStyles","paths","Icon","path","index","url","onClickBreadcrumb","isLastBreadcrumb","theme","initialFormModel","CreateNewFolderModal","validate","onDismiss","onSubmit","Modal","Form","register","errors","Field","Input","FileView","listing","view","info","getFileDisplayInfo","body","useAsync","rsp","src","SanitizedSVG","width","height","CodeEditor","text","idx","FolderView","Table","RootView","root","storage","searchQuery","setSearchQuery","base","roots","show","lower","r","v","content","renderRoots","pfix","s","ok","Card","notice","Alert","TagList","getTags","getIconName","FilterInput","tags","type","fileFormats","UploadButton","setErrorMessages","setPath","fileNames","file","setFile","filenameExists","setFilenameExists","fileUploadKey","setFileUploadKey","isConfirmOpen","setIsConfirmOpen","prev","onUpload","doUpload","fileToUpload","overwriteExistingFile","onFileUpload","event","onOverwriteConfirm","onOverwriteDismiss","FileUpload","ConfirmModal","folderNameRegex","folderNameMaxLength","getParentPath","lastSlashIdx","StoragePage","props","navModel","useNavModel","p","isAddingNewFolder","setIsAddingNewFolder","errorMessages","frame","name","cfg","n","isFolder","first","f","renderView","isRoot","Spinner","opts","canAddFolder","canDelete","canViewDashboard","config","getErrorMessages","clearAlert","error","parentPath","TabsBar","opt","Tab","folderName","folderPath","lowerCase","Page"],"sourceRoot":""}