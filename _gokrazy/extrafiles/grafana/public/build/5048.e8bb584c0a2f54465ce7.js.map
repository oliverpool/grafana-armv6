{"version":3,"file":"5048.e8bb584c0a2f54465ce7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/RuleLocation.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleActionsButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleConfigStatus.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { Icon } from '@grafana/ui';\n\ninterface RuleLocationProps {\n  namespace: string;\n  group?: string;\n}\n\nconst RuleLocation: FC<RuleLocationProps> = ({ namespace, group }) => {\n  if (!group) {\n    return <>{namespace}</>;\n  }\n\n  return (\n    <>\n      {namespace} <Icon name=\"angle-right\" /> {group}\n    </>\n  );\n};\n\nexport { RuleLocation };\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, ClipboardButton, ConfirmModal, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\n\nimport { useIsRuleEditable } from '../../hooks/useIsRuleEditable';\nimport { deleteRuleAction } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { createViewLink } from '../../utils/misc';\nimport * as ruleId from '../../utils/rule-id';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { createUrl } from '../../utils/url';\n\nexport const matchesWidth = (width: number) => window.matchMedia(`(max-width: ${width}px)`).matches;\n\ninterface Props {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n}\n\nexport const RuleActionsButtons: FC<Props> = ({ rule, rulesSource }) => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const notifyApp = useAppNotification();\n  const style = useStyles2(getStyles);\n  const { namespace, group, rulerRule } = rule;\n  const [ruleToDelete, setRuleToDelete] = useState<CombinedRule>();\n  const [provRuleCloneUrl, setProvRuleCloneUrl] = useState<string | undefined>(undefined);\n\n  const rulesSourceName = getRulesSourceName(rulesSource);\n\n  const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n  const buttons: JSX.Element[] = [];\n\n  const isFederated = isFederatedRuleGroup(group);\n  const { isEditable, isRemovable } = useIsRuleEditable(rulesSourceName, rulerRule);\n  const returnTo = location.pathname + location.search;\n  const isViewMode = inViewMode(location.pathname);\n\n  const deleteRule = () => {\n    if (ruleToDelete && ruleToDelete.rulerRule) {\n      const identifier = ruleId.fromRulerRule(\n        getRulesSourceName(ruleToDelete.namespace.rulesSource),\n        ruleToDelete.namespace.name,\n        ruleToDelete.group.name,\n        ruleToDelete.rulerRule\n      );\n\n      dispatch(deleteRuleAction(identifier, { navigateTo: isViewMode ? '/alerting/list' : undefined }));\n      setRuleToDelete(undefined);\n    }\n  };\n\n  const buildShareUrl = () => {\n    if (isCloudRulesSource(rulesSource)) {\n      const { appUrl, appSubUrl } = config;\n      const baseUrl = appSubUrl !== '' ? `${appUrl}${appSubUrl}/` : config.appUrl;\n      const ruleUrl = `${encodeURIComponent(rulesSource.name)}/${encodeURIComponent(rule.name)}`;\n      return `${baseUrl}alerting/${ruleUrl}/find`;\n    }\n\n    return window.location.href.split('?')[0];\n  };\n\n  const sourceName = getRulesSourceName(rulesSource);\n\n  if (!isViewMode) {\n    buttons.push(\n      <Tooltip placement=\"top\" content={'View'}>\n        <LinkButton\n          className={style.button}\n          title=\"View\"\n          size=\"sm\"\n          key=\"view\"\n          variant=\"secondary\"\n          icon=\"eye\"\n          href={createViewLink(rulesSource, rule, returnTo)}\n        ></LinkButton>\n      </Tooltip>\n    );\n  }\n\n  if (isEditable && rulerRule && !isFederated) {\n    const identifier = ruleId.fromRulerRule(sourceName, namespace.name, group.name, rulerRule);\n\n    if (!isProvisioned) {\n      const editURL = createUrl(`/alerting/${encodeURIComponent(ruleId.stringifyIdentifier(identifier))}/edit`, {\n        returnTo,\n      });\n\n      if (isViewMode) {\n        buttons.push(\n          <ClipboardButton\n            key=\"copy\"\n            icon=\"copy\"\n            onClipboardError={(copiedText) => {\n              notifyApp.error('Error while copying URL', copiedText);\n            }}\n            className={style.button}\n            size=\"sm\"\n            getText={buildShareUrl}\n          >\n            Copy link to rule\n          </ClipboardButton>\n        );\n      }\n\n      buttons.push(\n        <Tooltip placement=\"top\" content={'Edit'}>\n          <LinkButton\n            title=\"Edit\"\n            className={style.button}\n            size=\"sm\"\n            key=\"edit\"\n            variant=\"secondary\"\n            icon=\"pen\"\n            href={editURL}\n          />\n        </Tooltip>\n      );\n    }\n\n    const cloneUrl = createUrl('/alerting/new', { copyFrom: ruleId.stringifyIdentifier(identifier) });\n    // For provisioned rules an additional confirmation step is required\n    // Users have to be aware that the cloned rule will NOT be marked as provisioned\n    buttons.push(\n      <Tooltip placement=\"top\" content=\"Duplicate\">\n        <LinkButton\n          title=\"Duplicate\"\n          className={style.button}\n          size=\"sm\"\n          key=\"clone\"\n          variant=\"secondary\"\n          icon=\"copy\"\n          href={isProvisioned ? undefined : cloneUrl}\n          onClick={isProvisioned ? () => setProvRuleCloneUrl(cloneUrl) : undefined}\n        />\n      </Tooltip>\n    );\n  }\n\n  if (isRemovable && rulerRule && !isFederated && !isProvisioned) {\n    buttons.push(\n      <Tooltip placement=\"top\" content={'Delete'}>\n        <Button\n          title=\"Delete\"\n          className={style.button}\n          size=\"sm\"\n          type=\"button\"\n          key=\"delete\"\n          variant=\"secondary\"\n          icon=\"trash-alt\"\n          onClick={() => setRuleToDelete(rule)}\n        />\n      </Tooltip>\n    );\n  }\n\n  if (buttons.length) {\n    return (\n      <>\n        <Stack gap={1}>\n          {buttons.map((button, index) => (\n            <React.Fragment key={index}>{button}</React.Fragment>\n          ))}\n        </Stack>\n        {!!ruleToDelete && (\n          <ConfirmModal\n            isOpen={true}\n            title=\"Delete rule\"\n            body=\"Deleting this rule will permanently remove it from your alert rule list. Are you sure you want to delete this rule?\"\n            confirmText=\"Yes, delete\"\n            icon=\"exclamation-triangle\"\n            onConfirm={deleteRule}\n            onDismiss={() => setRuleToDelete(undefined)}\n          />\n        )}\n        <ConfirmModal\n          isOpen={!!provRuleCloneUrl}\n          title=\"Clone provisioned rule\"\n          body={\n            <div>\n              <p>\n                The new rule will <span className={style.bold}>NOT</span> be marked as a provisioned rule.\n              </p>\n              <p>\n                You will need to set a new alert group for the cloned rule because the original one has been provisioned\n                and cannot be used for rules created in the UI.\n              </p>\n            </div>\n          }\n          confirmText=\"Clone\"\n          onConfirm={() => provRuleCloneUrl && locationService.push(provRuleCloneUrl)}\n          onDismiss={() => setProvRuleCloneUrl(undefined)}\n        />\n      </>\n    );\n  }\n\n  return null;\n};\n\nfunction inViewMode(pathname: string): boolean {\n  return pathname.endsWith('/view');\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    padding: 0 ${theme.spacing(2)};\n  `,\n  bold: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { config } from '@grafana/runtime/src';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui/src';\n\nimport { CombinedRule } from '../../../../../types/unified-alerting';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\n\ninterface RuleConfigStatusProps {\n  rule: CombinedRule;\n}\n\nexport function RuleConfigStatus({ rule }: RuleConfigStatusProps) {\n  const styles = useStyles2(getStyles);\n\n  const { exceedsLimit } = useMemo(\n    () => checkEvaluationIntervalGlobalLimit(rule.group.interval),\n    [rule.group.interval]\n  );\n\n  if (!exceedsLimit) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      theme=\"error\"\n      content={\n        <div>\n          A minimum evaluation interval of{' '}\n          <span className={styles.globalLimitValue}>{config.unifiedAlerting.minInterval}</span> has been configured in\n          Grafana and will be used instead of the {rule.group.interval} interval configured for the Rule Group.\n        </div>\n      }\n    >\n      <Icon name=\"stopwatch-slash\" className={styles.icon} />\n    </Tooltip>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    globalLimitValue: css`\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    icon: css`\n      fill: ${theme.colors.warning.text};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { isRecordingRulerRule } from '../../utils/rules';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\n\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\n// The limit is set to 15 in order to upkeep the good performance\n// and to encourage users to go to the rule details page to see the rest of the instances\n// We don't want to paginate the instances list on the alert list page\nconst INSTANCES_DISPLAY_LIMIT = 15;\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} isViewMode={false} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {<EvaluationBehaviorSummary rule={rule} />}\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances rule={rule} itemsDisplayLimit={INSTANCES_DISPLAY_LIMIT} />\n    </div>\n  );\n};\n\ninterface EvaluationBehaviorSummaryProps {\n  rule: CombinedRule;\n}\n\nconst EvaluationBehaviorSummary = ({ rule }: EvaluationBehaviorSummaryProps) => {\n  let forDuration: string | undefined;\n  let every = rule.group.interval;\n\n  // recording rules don't have a for duration\n  if (!isRecordingRulerRule(rule.rulerRule)) {\n    forDuration = rule.rulerRule?.for;\n  }\n\n  return (\n    <>\n      {every && (\n        <DetailsField label=\"Evaluate\" horizontal={true}>\n          Every {every}\n        </DetailsField>\n      )}\n      {forDuration && (\n        <DetailsField label=\"For\" horizontal={true}>\n          {forDuration}\n        </DetailsField>\n      )}\n    </>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { Annotation } from '../../utils/constants';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { RuleLocation } from '../RuleLocation';\nimport { Tokenize } from '../Tokenize';\n\nimport { RuleActionsButtons } from './RuleActionsButtons';\nimport { RuleConfigStatus } from './RuleConfigStatus';\nimport { RuleDetails } from './RuleDetails';\nimport { RuleHealth } from './RuleHealth';\nimport { RuleState } from './RuleState';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    return rules.map((rule, ruleIdx) => {\n      return {\n        id: `${rule.namespace.name}-${rule.group.name}-${rule.name}-${ruleIdx}`,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n        pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }}\n        paginationStyles={styles.pagination}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  pagination: css`\n    display: flex;\n    margin: 0;\n    padding-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(0.25)};\n    justify-content: center;\n    border-left: 1px solid ${theme.colors.border.strong};\n    border-right: 1px solid ${theme.colors.border.strong};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'provisioned',\n        label: '',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const rulerRule = rule.rulerRule;\n          const isGrafanaManagedRule = isGrafanaRulerRule(rulerRule);\n\n          if (!isGrafanaManagedRule) {\n            return null;\n          }\n\n          const provenance = rulerRule.grafana_alert.provenance;\n          return provenance ? <ProvisioningBadge /> : null;\n        },\n        size: '100px',\n      },\n      {\n        id: 'warnings',\n        label: '',\n        renderCell: ({ data: combinedRule }) => <RuleConfigStatus rule={combinedRule} />,\n        size: '45px',\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule, group } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          return <Tokenize input={rule.annotations[Annotation.summary] ?? ''} />;\n        },\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          // ungrouped rules are rules that are in the \"default\" group name\n          const isUngrouped = group.name === 'default';\n          const groupName = isUngrouped ? (\n            <RuleLocation namespace={namespace.name} />\n          ) : (\n            <RuleLocation namespace={namespace.name} group={group.name} />\n          );\n\n          return groupName;\n        },\n        size: 5,\n      });\n    }\n    columns.push({\n      id: 'actions',\n      label: 'Actions',\n      // eslint-disable-next-line react/display-name\n      renderCell: ({ data: rule }) => {\n        return <RuleActionsButtons rule={rule} rulesSource={rule.namespace.rulesSource} />;\n      },\n      size: '200px',\n    });\n\n    return columns;\n  }, [showSummaryColumn, showGroupColumn, hasRuler, rulerRulesLoaded]);\n}\n","import { useCallback } from 'react';\n\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler() {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const hasRuler = useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n\n  const rulerRulesLoaded = useCallback(\n    (rulesSource: RulesSource) => {\n      const rulesSourceName = getRulesSourceName(rulesSource);\n      const result = rulerRules[rulesSourceName]?.result;\n\n      return Boolean(result);\n    },\n    [rulerRules]\n  );\n\n  return { hasRuler, rulerRulesLoaded };\n}\n"],"names":["DynamicTableWithGuidelines","renderExpandedContent","props","styles","getStyles","item","index","items","_","theme","RuleLocation","namespace","group","matchesWidth","width","RuleActionsButtons","rule","rulesSource","dispatch","location","notifyApp","style","rulerRule","ruleToDelete","setRuleToDelete","provRuleCloneUrl","setProvRuleCloneUrl","rulesSourceName","isProvisioned","buttons","isFederated","isEditable","isRemovable","useIsRuleEditable","returnTo","isViewMode","inViewMode","deleteRule","identifier","buildShareUrl","appUrl","appSubUrl","config","baseUrl","ruleUrl","sourceName","Tooltip","editURL","ClipboardButton","copiedText","cloneUrl","Button","button","ConfirmModal","pathname","RuleConfigStatus","exceedsLimit","Icon","INSTANCES_DISPLAY_LIMIT","RuleDetails","annotations","value","RuleDetailsActionButtons","EvaluationBehaviorSummary","DetailsField","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","RuleDetailsDataSources","RuleDetailsMatchingInstances","forDuration","every","RulesTable","rules","className","showGuidelines","emptyMessage","showGroupColumn","showSummaryColumn","wrapperClass","ruleIdx","columns","useColumns","TableComponent","DynamicTable","hasRuler","rulerRulesLoaded","useHasRuler","promRule","isDeleting","isCreating","RuleState","Provisioning","combinedRule","RuleHealth","Tokenize","rulerRules","state","result"],"sourceRoot":""}