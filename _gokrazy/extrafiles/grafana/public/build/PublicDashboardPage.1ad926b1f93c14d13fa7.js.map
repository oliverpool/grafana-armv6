{"version":3,"file":"PublicDashboardPage.1ad926b1f93c14d13fa7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/components/PublicDashboardFooter/PublicDashboardsFooter.tsx","webpack://grafana/./public/app/features/dashboard/containers/PublicDashboardPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface PublicDashboardFooterCfg {\n  hide: boolean;\n  text: string;\n  logo: string;\n  link: string;\n}\n\nexport const PublicDashboardFooter = function () {\n  const styles = useStyles2(getStyles);\n  const conf = getPublicDashboardFooterConfig();\n\n  return conf.hide ? null : (\n    <div className={styles.footer}>\n      <a className={styles.link} href={conf.link} target=\"_blank\" rel=\"noreferrer noopener\">\n        {conf.text} <img className={styles.logoImg} alt=\"\" src={conf.logo}></img>\n      </a>\n    </div>\n  );\n};\n\nexport function setPublicDashboardFooterConfigFn(fn: typeof getPublicDashboardFooterConfig) {\n  getPublicDashboardFooterConfig = fn;\n}\nexport let getPublicDashboardFooterConfig = (): PublicDashboardFooterCfg => ({\n  hide: false,\n  text: 'powered by Grafana',\n  logo: 'public/img/grafana_icon.svg',\n  link: 'https://grafana.com/',\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  footer: css`\n    display: flex;\n    justify-content: end;\n    height: 30px;\n    padding: ${theme.spacing(0, 2, 0, 1)};\n  `,\n  link: css`\n    display: flex;\n    gap: 4px;\n    justify-content: end;\n    align-items: center;\n  `,\n  logoImg: css`\n    height: 100%;\n    padding: ${theme.spacing(0.25, 0, 0.5, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, PageLayoutType, TimeZone } from '@grafana/data';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { useSelector, useDispatch } from 'app/types';\n\nimport { DashNavTimeControls } from '../components/DashNav/DashNavTimeControls';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { PublicDashboardFooter } from '../components/PublicDashboardFooter/PublicDashboardsFooter';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel } from '../state';\nimport { initDashboard } from '../state/initDashboard';\n\ninterface PublicDashboardPageRouteParams {\n  accessToken?: string;\n}\n\ninterface PublicDashboardPageRouteSearchParams {\n  from?: string;\n  to?: string;\n  refresh?: string;\n}\n\nexport type Props = GrafanaRouteComponentProps<PublicDashboardPageRouteParams, PublicDashboardPageRouteSearchParams>;\n\nconst Toolbar = ({ dashboard }: { dashboard: DashboardModel }) => {\n  const dispatch = useDispatch();\n\n  const onChangeTimeZone = (timeZone: TimeZone) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n  };\n\n  return (\n    <PageToolbar title={dashboard.title} buttonOverflowAlignment=\"right\">\n      {!dashboard.timepicker.hidden && (\n        <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={onChangeTimeZone} />\n      )}\n    </PageToolbar>\n  );\n};\n\nconst PublicDashboardPage = (props: Props) => {\n  const { match, route, location } = props;\n  const dispatch = useDispatch();\n  const context = useGrafana();\n  const prevProps = usePrevious(props);\n  const styles = useStyles2(getStyles);\n  const dashboardState = useSelector((store) => store.dashboard);\n  const dashboard = dashboardState.getModel();\n\n  useEffect(() => {\n    dispatch(\n      initDashboard({\n        routeName: route.routeName,\n        fixUrl: false,\n        accessToken: match.params.accessToken,\n        keybindingSrv: context.keybindings,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (prevProps?.location.search !== location.search) {\n      const prevUrlParams = prevProps?.queryParams;\n      const urlParams = props.queryParams;\n\n      const updateTimeRangeFromUrl =\n        (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) &&\n        !dashboard?.timepicker.hidden;\n\n      if (updateTimeRangeFromUrl) {\n        getTimeSrv().updateTimeRangeFromUrl();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n    }\n  }, [prevProps, location.search, props.queryParams, dashboard?.timepicker.hidden]);\n\n  if (!dashboard) {\n    return <DashboardLoading initPhase={dashboardState.initPhase} />;\n  }\n\n  return (\n    <Page\n      pageNav={{ text: dashboard.title }}\n      layout={PageLayoutType.Custom}\n      toolbar={<Toolbar dashboard={dashboard} />}\n    >\n      {dashboardState.initError && <DashboardFailed initError={dashboardState.initError} />}\n      <div className={styles.gridContainer}>\n        <DashboardGrid dashboard={dashboard} isEditable={false} viewPanel={null} editPanel={null} />\n      </div>\n      <PublicDashboardFooter />\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  gridContainer: css({\n    flex: 1,\n    padding: theme.spacing(0, 2, 2, 2),\n    overflow: 'auto',\n  }),\n});\n\nexport default PublicDashboardPage;\n"],"names":["PublicDashboardFooter","styles","getStyles","conf","getPublicDashboardFooterConfig","setPublicDashboardFooterConfigFn","fn","theme","Toolbar","dashboard","dispatch","onChangeTimeZone","timeZone","PageToolbar","DashNavTimeControls","PublicDashboardPage","props","match","route","location","context","prevProps","usePrevious","dashboardState","store","initDashboard","prevUrlParams","urlParams","Page","DashboardFailed","DashboardGrid","DashboardLoading"],"sourceRoot":""}