{"version":3,"file":"mysqlPlugin.a2247cf1881a7c577c3f.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/sql/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/mysql/fields.ts","webpack://grafana/./public/app/plugins/datasource/mysql/mySqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlDatasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, SecretTextArea } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { labelWidth, editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <InlineField\n          tooltip={\n            <span>To authenticate with an TLS/SSL client certificate, provide the client certificate here.</span>\n          }\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showCACert ? (\n        <InlineField\n          tooltip={<span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Root Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showKeyPair ? (\n        <InlineField\n          tooltip={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Key\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n    </>\n  );\n};\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { MySQLQuery } from './types';\n\nexport default class MySQLQueryModel {\n  target: Partial<MySQLQuery>;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target: Partial<MySQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  getDatabase() {\n    return this.target.dataset;\n  }\n}\n","import { RAQBFieldTypes, SQLSelectableValue } from 'app/features/plugins/sql/types';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import MySQLQueryModel from './MySqlQueryModel';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? `'${dataset}'` : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(queryModel: MySQLQueryModel, table: string, type?: string, timeColumn?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(queryModel, table);\n\n  switch (type) {\n    case 'time': {\n      query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n      break;\n    }\n    case 'metric': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n    case 'value': {\n      query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n      query += ' AND column_name <> ' + quoteIdentAsLiteral(queryModel, timeColumn!);\n      break;\n    }\n    case 'group': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n  }\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(queryModel: MySQLQueryModel, table: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(queryModel, parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(queryModel, parts[1]);\n    return query;\n  } else {\n    const database = queryModel.getDatabase() !== undefined ? `'${queryModel.getDatabase()}'` : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(queryModel, table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(queryModel: MySQLQueryModel, value: string) {\n  return queryModel.quoteLiteral(queryModel.unquoteIdentifier(value));\n}\n","import {\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  TableDefinition,\n  TableIdentifier,\n} from '@grafana/experimental';\n\ninterface CompletionProviderGetterArgs {\n  getMeta: React.MutableRefObject<(t?: TableIdentifier) => Promise<TableDefinition[]>>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getMeta }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    tables: {\n      resolve: getMeta.current,\n    },\n    columns: {\n      resolve: getMeta.current,\n    },\n  });\n","import { DataSourceInstanceSettings, ScopedVars, TimeRange } from '@grafana/data';\nimport { CompletionItemKind, LanguageDefinition, TableIdentifier } from '@grafana/experimental';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport { DB, SQLQuery } from 'app/features/plugins/sql/types';\nimport { formatSQL } from 'app/features/plugins/sql/utils/formatSQL';\n\nimport MySQLQueryModel from './MySqlQueryModel';\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery, showDatabases } from './mySqlMetaQuery';\nimport { getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { MySQLOptions } from './types';\n\nexport class MySqlDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<MySQLOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryModel(target?: Partial<SQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): MySQLQueryModel {\n    return new MySQLQueryModel(target!, templateSrv, scopedVars);\n  }\n\n  getSqlLanguageDefinition(db: DB): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getMeta: { current: (identifier?: TableIdentifier) => this.fetchMeta(identifier) },\n    };\n    this.sqlLanguageDefinition = {\n      id: 'sql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<string[]>(showDatabases(), { refId: 'datasets' });\n    return datasets.map((t) => t[0]);\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const tables = await this.runSql<string[]>(buildTableQuery(dataset), { refId: 'tables' });\n    return tables.map((t) => t[0]);\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const queryString = buildColumnQuery(this.getQueryModel(query), query.table!);\n    const frame = await this.runSql<string[]>(queryString, { refId: 'fields' });\n    const fields = frame.map((f) => ({ name: f[0], text: f[0], value: f[0], type: f[1], label: f[0] }));\n    return mapFieldsToTypes(fields);\n  }\n\n  async fetchMeta(identifier?: TableIdentifier) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    if (!identifier?.schema && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: `${defaultDB}.${t}`, kind: CompletionItemKind.Class }));\n    } else if (!identifier?.schema && !defaultDB) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      if (!identifier?.table && !defaultDB) {\n        const tables = await this.fetchTables(identifier?.schema);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (identifier?.table && identifier.schema) {\n        const fields = await this.fetchFields({ dataset: identifier.schema, table: identifier.table });\n        return fields.map((t) => ({ name: t.value, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      functions: () => ['VARIANCE', 'STDDEV'],\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(this.db),\n    };\n  }\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, FieldSet, InlineField, InlineFieldRow, InlineSwitch, Input, Link, SecretInput } from '@grafana/ui';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { TLSSecretsConfig } from 'app/features/plugins/sql/components/configuration/TLSSecretsConfig';\nimport { useMigrateDatabaseField } from 'app/features/plugins/sql/components/configuration/useMigrateDatabaseField';\n\nimport { MySQLOptions } from '../types';\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MySQLOptions>) => {\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  useMigrateDatabaseField(props);\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSwitchChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      updateDatasourcePluginJsonDataOption(props, property, event.currentTarget.checked);\n    };\n  };\n\n  const mediumWidth = 20;\n  const shortWidth = 15;\n  const longWidth = 40;\n\n  return (\n    <>\n      <FieldSet label=\"MySQL Connection\" width={400}>\n        <InlineField labelWidth={shortWidth} label=\"Host\">\n          <Input\n            width={longWidth}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:3306\"\n            onChange={onDSOptionChanged('url')}\n          ></Input>\n        </InlineField>\n        <InlineField labelWidth={shortWidth} label=\"Database\">\n          <Input\n            width={longWidth}\n            name=\"database\"\n            value={jsonData.database || ''}\n            placeholder=\"database name\"\n            onChange={onUpdateDatasourceJsonDataOption(props, 'database')}\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={shortWidth} label=\"User\">\n            <Input\n              width={shortWidth}\n              value={options.user || ''}\n              placeholder=\"user\"\n              onChange={onDSOptionChanged('user')}\n            ></Input>\n          </InlineField>\n          <InlineField labelWidth={shortWidth - 5} label=\"Password\">\n            <SecretInput\n              width={shortWidth}\n              placeholder=\"Password\"\n              isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n              onReset={onResetPassword}\n              onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n            ></SecretInput>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField\n          tooltip={\n            <span>\n              Specify the time zone used in the database session, e.g. <code>Europe/Berlin</code> or\n              <code>+02:00</code>. This is necessary, if the timezone of the database (or the host of the database) is\n              set to something other than UTC. The value is set in the session with\n              <code>SET time_zone=&apos;...&apos;</code>. If you leave this field empty, the timezone is not updated.\n              You can find more information in the MySQL documentation.\n            </span>\n          }\n          label=\"Session timezone\"\n          labelWidth={mediumWidth}\n        >\n          <Input\n            width={longWidth - 5}\n            value={jsonData.timezone || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timezone')}\n            placeholder=\"(default)\"\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={mediumWidth} htmlFor=\"tlsAuth\" label=\"TLS Client Auth\">\n            <InlineSwitch\n              id=\"tlsAuth\"\n              onChange={onSwitchChanged('tlsAuth')}\n              value={jsonData.tlsAuth || false}\n            ></InlineSwitch>\n          </InlineField>\n          <InlineField\n            labelWidth={mediumWidth}\n            tooltip=\"Needed for verifing self-signed TLS Certs\"\n            htmlFor=\"tlsCaCert\"\n            label=\"With CA Cert\"\n          >\n            <InlineSwitch\n              id=\"tlsCaCert\"\n              onChange={onSwitchChanged('tlsAuthWithCACert')}\n              value={jsonData.tlsAuthWithCACert || false}\n            ></InlineSwitch>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField labelWidth={mediumWidth} htmlFor=\"skipTLSVerify\" label=\"Skip TLS Verify\">\n          <InlineSwitch\n            id=\"skipTLSVerify\"\n            onChange={onSwitchChanged('tlsSkipVerify')}\n            value={jsonData.tlsSkipVerify || false}\n          ></InlineSwitch>\n        </InlineField>\n      </FieldSet>\n\n      {jsonData.tlsAuth || jsonData.tlsAuthWithCACert ? (\n        <FieldSet label=\"TLS/SSL Auth Details\">\n          <TLSSecretsConfig\n            showCACert={jsonData.tlsAuthWithCACert}\n            showKeyPair={jsonData.tlsAuth}\n            editorProps={props}\n            labelWidth={25}\n          ></TLSSecretsConfig>\n        </FieldSet>\n      ) : null}\n\n      <ConnectionLimits\n        labelWidth={shortWidth}\n        jsonData={jsonData}\n        onPropertyChanged={(property, value) => {\n          updateDatasourcePluginJsonDataOption(props, property, value);\n        }}\n      ></ConnectionLimits>\n\n      <FieldSet label=\"MySQL details\">\n        <InlineField\n          tooltip={\n            <span>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n              <code>1m</code> if your data is written every minute.\n            </span>\n          }\n          labelWidth={mediumWidth}\n          label=\"Min time interval\"\n        >\n          <Input\n            placeholder=\"1m\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          ></Input>\n        </InlineField>\n      </FieldSet>\n\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <strong>Highly</strong> recommend you create a specific MySQL user with restricted permissions.\n        Check out the{' '}\n        <Link rel=\"noreferrer\" target=\"_blank\" href=\"http://docs.grafana.org/features/datasources/mysql/\">\n          MySQL Data Source Docs\n        </Link>{' '}\n        for more information.\n      </Alert>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { MySqlDatasource } from './MySqlDatasource';\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MySQLOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MySqlDatasource, SQLQuery, MySQLOptions>(MySqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["TLSSecretsConfig","props","labelWidth","editorProps","showCACert","showKeyPair","secureJsonFields","MySQLQueryModel","target","templateSrv","scopedVars","value","mapFieldsToTypes","columns","fields","col","type","mapColumnTypeToIcon","buildTableQuery","dataset","showDatabases","buildColumnQuery","queryModel","table","timeColumn","query","buildTableConstraint","quoteIdentAsLiteral","parts","getSqlCompletionProvider","getMeta","monaco","language","MySqlDatasource","SqlDatasource","instanceSettings","db","args","identifier","formatSQL","t","queryString","f","defaultDB","d","range","ConfigurationEditor","options","onOptionsChange","jsonData","useMigrateDatabaseField","onResetPassword","onDSOptionChanged","property","event","onSwitchChanged","mediumWidth","shortWidth","longWidth","FieldSet","InlineField","Input","InlineFieldRow","SecretInput","ConnectionLimits","Alert","Link"],"sourceRoot":""}