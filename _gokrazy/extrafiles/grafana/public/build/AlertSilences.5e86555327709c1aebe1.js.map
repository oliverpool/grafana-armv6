{"version":3,"file":"AlertSilences.5e86555327709c1aebe1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchedSilencedRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useSilenceNavData.ts","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRuleNamespaces.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { Alert, AlertingRule } from 'app/types/unified-alerting';\n\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { fetchAllPromAndRulerRulesAction } from '../../state/actions';\nimport { MatcherFieldValue, SilenceFormFields } from '../../types/silence-form';\nimport { findAlertInstancesWithMatchers } from '../../utils/matchers';\nimport { isAlertingRule } from '../../utils/rules';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\ntype MatchedRulesTableItemProps = DynamicTableItemProps<{\n  matchedInstance: Alert;\n}>;\ntype MatchedRulesTableColumnProps = DynamicTableColumnProps<{ matchedInstance: Alert }>;\n\nexport const MatchedSilencedRules = () => {\n  const [matchedAlertRules, setMatchedAlertRules] = useState<MatchedRulesTableItemProps[]>([]);\n  const formApi = useFormContext<SilenceFormFields>();\n  const dispatch = useDispatch();\n  const { watch } = formApi;\n  const matchers: MatcherFieldValue[] = watch('matchers');\n  const styles = useStyles2(getStyles);\n  const columns = useColumns();\n\n  useEffect(() => {\n    dispatch(fetchAllPromAndRulerRulesAction());\n  }, [dispatch]);\n\n  const combinedNamespaces = useCombinedRuleNamespaces();\n  useDebounce(\n    () => {\n      const matchedInstances = combinedNamespaces.flatMap((namespace) => {\n        return namespace.groups.flatMap((group) => {\n          return group.rules\n            .map((combinedRule) => combinedRule.promRule)\n            .filter((rule): rule is AlertingRule => isAlertingRule(rule))\n            .flatMap((rule) => findAlertInstancesWithMatchers(rule.alerts ?? [], matchers));\n        });\n      });\n      setMatchedAlertRules(matchedInstances);\n    },\n    500,\n    [combinedNamespaces, matchers]\n  );\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Affected alert instances\n        {matchedAlertRules.length > 0 ? (\n          <Badge className={styles.badge} color=\"blue\" text={matchedAlertRules.length} />\n        ) : null}\n      </h4>\n      <div className={styles.table}>\n        {matchers.every((matcher) => !matcher.value && !matcher.name) ? (\n          <span>Add a valid matcher to see affected alerts</span>\n        ) : (\n          <>\n            <DynamicTable items={matchedAlertRules.slice(0, 5) ?? []} isExpandable={false} cols={columns} />\n            {matchedAlertRules.length > 5 && (\n              <div className={styles.moreMatches}>and {matchedAlertRules.length - 5} more</div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useColumns(): MatchedRulesTableColumnProps[] {\n  return [\n    {\n      id: 'state',\n      label: 'State',\n      renderCell: function renderStateTag({ data: { matchedInstance } }) {\n        return <AlertStateTag state={matchedInstance.state} />;\n      },\n      size: '160px',\n    },\n    {\n      id: 'labels',\n      label: 'Labels',\n      renderCell: function renderName({ data: { matchedInstance } }) {\n        return <AlertLabels labels={matchedInstance.labels} />;\n      },\n      size: '250px',\n    },\n    {\n      id: 'created',\n      label: 'Created',\n      renderCell: function renderSummary({ data: { matchedInstance } }) {\n        return (\n          <>\n            {matchedInstance.activeAt.startsWith('0001')\n              ? '-'\n              : dateTime(matchedInstance.activeAt).format('YYYY-MM-DD HH:mm:ss')}\n          </>\n        );\n      },\n      size: '400px',\n    },\n  ];\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    max-width: ${theme.breakpoints.values.lg}px;\n  `,\n  moreMatches: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  title: css`\n    display: flex;\n    align-items: center;\n  `,\n  badge: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Input, IconButton, InputControl, useStyles2, Select } from '@grafana/ui';\nimport { MatcherOperator } from 'app/plugins/datasource/alertmanager/types';\n\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = formApi;\n\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`} data-testid=\"matcher\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <InputControl\n                      control={control}\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          onChange={(value) => onChange(value.value)}\n                          className={styles.matcherOptions}\n                          options={matcherFieldOptions}\n                          aria-label=\"operator\"\n                        />\n                      )}\n                      defaultValue={matcher.operator || matcherFieldOptions[0].value}\n                      name={`matchers.${index}.operator` as const}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher = { name: '', value: '', operator: MatcherOperator.equal };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matcherOptions: css`\n      min-width: 140px;\n    `,\n    matchers: css`\n      max-width: ${theme.breakpoints.values.sm}px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\n\nimport { dateTime } from '@grafana/data';\nimport { Field, TimeRangeInput } from '@grafana/ui';\n\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n        placeholder={'Select time range'}\n      />\n    </Field>\n  );\n};\n\nconst styles = {\n  timeRange: css`\n    width: 400px;\n  `,\n};\n","import { css, cx } from '@emotion/css';\nimport { pickBy } from 'lodash';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\n\nimport {\n  DefaultTimeZone,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { MatcherOperator, Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { matcherToMatcherField, matcherFieldToMatcher } from '../../utils/alertmanager';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\nimport { makeAMLink } from '../../utils/misc';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { MatchedSilencedRules } from './MatchedSilencedRules';\nimport MatchersField from './MatchersField';\nimport { SilencePeriod } from './SilencePeriod';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (searchParams: URLSearchParams): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const comment = searchParams.get('comment');\n  const matchers = searchParams.getAll('matcher');\n\n  const formMatchers = parseQueryParamMatchers(matchers);\n  if (formMatchers.length) {\n    defaults.matchers = formMatchers.map(matcherToMatcherField);\n  }\n\n  if (comment) {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (searchParams: URLSearchParams, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers?.map(matcherToMatcherField) || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: `created ${dateTime().format('YYYY-MM-DD HH:mm')}`,\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', operator: MatcherOperator.equal }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(searchParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [urlSearchParams] = useURLSearchParams();\n\n  const defaultValues = useMemo(() => getDefaultFormValues(urlSearchParams, silence), [silence, urlSearchParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => (state.unifiedAlerting.updateSilence = initialAsyncRequestState));\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers: matchersFields } = data;\n    const matchers = matchersFields.map(matcherFieldToMatcher);\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n  const userLogged = Boolean(config.bootData.user.isSignedIn && config.bootData.user.name);\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={cx(styles.flexRow, styles.silencePeriod)}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea\n              {...register('comment', { required: { value: true, message: 'Required.' } })}\n              rows={5}\n              placeholder=\"Details about the silence\"\n            />\n          </Field>\n          {!userLogged && (\n            <Field\n              className={cx(styles.field, styles.createdBy)}\n              label=\"Created By\"\n              required\n              error={formState.errors.createdBy?.message}\n              invalid={!!formState.errors.createdBy}\n            >\n              <Input\n                {...register('createdBy', { required: { value: true, message: 'Required.' } })}\n                placeholder=\"Who's creating the silence\"\n              />\n            </Field>\n          )}\n          <MatchedSilencedRules />\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n  textArea: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n  silencePeriod: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n});\n\nexport default SilencesEditor;\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Button, ButtonProps } from '@grafana/ui/src/components/Button';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => {\n  const styles = useStyles2(getStyle);\n  return <Button variant=\"secondary\" size=\"xs\" className={cx(styles.wrapper, className)} {...restProps} />;\n};\n\nexport const getStyle = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    height: 24px;\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  if (contextSrv.hasAccess(permissions.create, contextSrv.isEditor)) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FC, useState } from 'react';\n\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getAlertTableStyles } from '../../styles/table';\n\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div> {duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div> {createdBy}</div>\n      <div className={styles.title}>Affected alerts</div>\n      <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: grid;\n    grid-template-columns: 1fr 9fr;\n    grid-row-gap: 1rem;\n  `,\n  title: css`\n    color: ${theme.colors.text.primary};\n  `,\n  row: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import { css } from '@emotion/css';\nimport { debounce, uniqueId } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Label, Icon, Input, Tooltip, RadioButtonGroup, useStyles2, Button, Field } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\n\nconst stateOptions: SelectableValue[] = Object.entries(SilenceState).map(([key, value]) => ({\n  label: key,\n  value,\n}));\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const handleSilenceStateChange = (state: string) => {\n    setQueryParams({ silenceState: state });\n  };\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n      <Field className={styles.rowChild} label=\"State\">\n        <RadioButtonGroup options={stateOptions} value={silenceState} onChange={handleSilenceStateChange} />\n      </Field>\n      {(queryString || silenceState) && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    width: 360px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    padding-bottom: ${theme.spacing(2)};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n  rowChild: css`\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: 0;\n    max-height: 52px;\n  `,\n  fieldLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { expireSilenceAction } from '../../state/actions';\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  const { silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n\n  const showExpiredSilencesBanner =\n    !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n\n  const columns = useColumns(alertManagerSourceName);\n\n  const items = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilences.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <>\n          <SilencesFilter />\n          <Authorize actions={[permissions.create]} fallback={contextSrv.isEditor}>\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          </Authorize>\n          {!!items.length ? (\n            <>\n              <DynamicTable\n                items={items}\n                cols={columns}\n                isExpandable\n                renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n              />\n              {showExpiredSilencesBanner && (\n                <div className={styles.callout}>\n                  <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                  <span>Expired silences are automatically deleted after 5 days.</span>\n                </div>\n              )}\n            </>\n          ) : (\n            'No matching silences found'\n          )}\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nconst useFilteredSilences = (silences: Silence[]) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n        if (!stateMatches) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const showActions = contextSrv.hasAccess(permissions.update, contextSrv.isEditor);\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: 4,\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 10,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 4,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: 7,\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <Stack gap={0.5}>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </Stack>\n          );\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles, permissions]);\n}\n\nexport default SilencesTable;\n","import { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { NavModelItem } from '@grafana/data';\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell-slash',\n  breadcrumbs: [{ title: 'Silences', url: 'alerting/silences' }],\n};\n\nexport function useSilenceNavData() {\n  const { isExact, path } = useRouteMatch();\n  const [pageNav, setPageNav] = useState<Pick<NavModelItem, 'id' | 'text' | 'icon'> | undefined>();\n\n  useEffect(() => {\n    if (path === '/alerting/silence/new') {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-new',\n        text: 'Add silence',\n      });\n    } else if (path === '/alerting/silence/:id/edit') {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-edit',\n        text: 'Edit silence',\n      });\n    }\n  }, [path, isExact]);\n\n  return pageNav;\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\n\nimport { Alert, withErrorBoundary } from '@grafana/ui';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { featureDiscoveryApi } from './api/featureDiscoveryApi';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useSilenceNavData } from './hooks/useSilenceNavData';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\n\nconst Silences = () => {\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const dispatch = useDispatch();\n  const { useGetAlertmanagerChoiceQuery } = alertmanagerApi;\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const pageNav = useSilenceNavData();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  const { currentData: amFeatures } = featureDiscoveryApi.useDiscoverAmFeaturesQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    { skip: !alertManagerSourceName }\n  );\n\n  const { currentData: alertmanagerChoice } = useGetAlertmanagerChoiceQuery();\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  const mimirLazyInitError =\n    error?.message?.includes('the Alertmanager is not configured') && amFeatures?.lazyConfigInit;\n\n  if (!alertManagerSourceName) {\n    return isRoot ? (\n      <AlertingPageWrapper pageId=\"silences\" pageNav={pageNav}>\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    ) : (\n      <Redirect to=\"/alerting/silences\" />\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\" isLoading={loading} pageNav={pageNav}>\n      <AlertManagerPicker\n        disabled={!isRoot}\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      <GrafanaAlertmanagerDeliveryWarning\n        currentAlertmanager={alertManagerSourceName}\n        alertmanagerChoice={alertmanagerChoice}\n      />\n\n      {mimirLazyInitError && (\n        <Alert title=\"The selected Alertmanager has no configuration\" severity=\"warning\">\n          Create a new contact point to create a configuration using the default values or contact your administrator to\n          set up the Alertmanager.\n        </Alert>\n      )}\n      {error && !loading && !mimirLazyInitError && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && !mimirLazyInitError && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoice: build.query<AlertmanagerChoice, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n      transformResponse: (response: AlertmanagersChoiceResponse) => response.alertmanagersChoice,\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  alertmanagerChoice?: AlertmanagerChoice;\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({\n  alertmanagerChoice,\n  currentAlertmanager,\n}: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  if (currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME) {\n    return null;\n  }\n\n  if (alertmanagerChoice !== AlertmanagerChoice.External) {\n    return null;\n  }\n\n  return (\n    <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n      Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n      will not affect delivery of your alerts!\n      <div className={styles.adminHint}>\n        You can change the configuration on the Alerting Admin page. If you do not have access, contact your\n        Administrator\n      </div>\n    </Alert>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { isEqual } from 'lodash';\nimport { useMemo, useRef } from 'react';\n\nimport {\n  CombinedRule,\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  Rule,\n  RuleGroup,\n  RuleNamespace,\n  RulesSource,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO, RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport {\n  getAllRulesSources,\n  getRulesSourceByName,\n  isCloudRulesSource,\n  isGrafanaRulesSource,\n} from '../utils/datasource';\nimport { isAlertingRule, isAlertingRulerRule, isRecordingRulerRule } from '../utils/rules';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface CacheValue {\n  promRules?: RuleNamespace[];\n  rulerRules?: RulerRulesConfigDTO | null;\n  result: CombinedRuleNamespace[];\n}\n\n// this little monster combines prometheus rules and ruler rules to produce a unified data structure\n// can limit to a single rules source\nexport function useCombinedRuleNamespaces(rulesSourceName?: string): CombinedRuleNamespace[] {\n  const promRulesResponses = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesResponses = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  // cache results per rules source, so we only recalculate those for which results have actually changed\n  const cache = useRef<Record<string, CacheValue>>({});\n\n  const rulesSources = useMemo((): RulesSource[] => {\n    if (rulesSourceName) {\n      const rulesSource = getRulesSourceByName(rulesSourceName);\n      if (!rulesSource) {\n        throw new Error(`Unknown rules source: ${rulesSourceName}`);\n      }\n      return [rulesSource];\n    }\n    return getAllRulesSources();\n  }, [rulesSourceName]);\n\n  return useMemo(\n    () =>\n      rulesSources\n        .map((rulesSource): CombinedRuleNamespace[] => {\n          const rulesSourceName = isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n          const promRules = promRulesResponses[rulesSourceName]?.result;\n          const rulerRules = rulerRulesResponses[rulesSourceName]?.result;\n\n          const cached = cache.current[rulesSourceName];\n          if (cached && cached.promRules === promRules && cached.rulerRules === rulerRules) {\n            return cached.result;\n          }\n          const namespaces: Record<string, CombinedRuleNamespace> = {};\n\n          // first get all the ruler rules in\n          Object.entries(rulerRules || {}).forEach(([namespaceName, groups]) => {\n            const namespace: CombinedRuleNamespace = {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            };\n            namespaces[namespaceName] = namespace;\n            addRulerGroupsToCombinedNamespace(namespace, groups);\n          });\n\n          // then correlate with prometheus rules\n          promRules?.forEach(({ name: namespaceName, groups }) => {\n            const ns = (namespaces[namespaceName] = namespaces[namespaceName] || {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            });\n\n            addPromGroupsToCombinedNamespace(ns, groups);\n          });\n\n          const result = Object.values(namespaces);\n\n          cache.current[rulesSourceName] = { promRules, rulerRules, result };\n          return result;\n        })\n        .flat(),\n    [promRulesResponses, rulerRulesResponses, rulesSources]\n  );\n}\n\n// merge all groups in case of grafana managed, essentially treating namespaces (folders) as groups\nexport function flattenGrafanaManagedRules(namespaces: CombinedRuleNamespace[]) {\n  return namespaces.map((namespace) => {\n    const newNamespace: CombinedRuleNamespace = {\n      ...namespace,\n      groups: [],\n    };\n\n    // add default group with ungrouped rules\n    newNamespace.groups.push({\n      name: 'default',\n      rules: sortRulesByName(namespace.groups.flatMap((group) => group.rules)),\n    });\n\n    return newNamespace;\n  });\n}\n\nexport function sortRulesByName(rules: CombinedRule[]) {\n  return rules.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction addRulerGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RulerRuleGroupDTO[] = []): void {\n  namespace.groups = groups.map((group) => {\n    const combinedGroup: CombinedRuleGroup = {\n      name: group.name,\n      interval: group.interval,\n      source_tenants: group.source_tenants,\n      rules: [],\n    };\n    combinedGroup.rules = group.rules.map((rule) => rulerRuleToCombinedRule(rule, namespace, combinedGroup));\n    return combinedGroup;\n  });\n}\n\nfunction addPromGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RuleGroup[]): void {\n  const existingGroupsByName = new Map<string, CombinedRuleGroup>();\n  namespace.groups.forEach((group) => existingGroupsByName.set(group.name, group));\n\n  groups.forEach((group) => {\n    let combinedGroup = existingGroupsByName.get(group.name);\n    if (!combinedGroup) {\n      combinedGroup = {\n        name: group.name,\n        rules: [],\n      };\n      namespace.groups.push(combinedGroup);\n      existingGroupsByName.set(group.name, combinedGroup);\n    }\n\n    const combinedRulesByName = new Map<string, CombinedRule[]>();\n    combinedGroup!.rules.forEach((r) => {\n      // Prometheus rules do not have to be unique by name\n      const existingRule = combinedRulesByName.get(r.name);\n      existingRule ? existingRule.push(r) : combinedRulesByName.set(r.name, [r]);\n    });\n\n    (group.rules ?? []).forEach((rule) => {\n      const existingRule = getExistingRuleInGroup(rule, combinedRulesByName, namespace.rulesSource);\n      if (existingRule) {\n        existingRule.promRule = rule;\n      } else {\n        combinedGroup!.rules.push(promRuleToCombinedRule(rule, namespace, combinedGroup!));\n      }\n    });\n  });\n}\n\nfunction promRuleToCombinedRule(rule: Rule, namespace: CombinedRuleNamespace, group: CombinedRuleGroup): CombinedRule {\n  return {\n    name: rule.name,\n    query: rule.query,\n    labels: rule.labels || {},\n    annotations: isAlertingRule(rule) ? rule.annotations || {} : {},\n    promRule: rule,\n    namespace: namespace,\n    group,\n  };\n}\n\nfunction rulerRuleToCombinedRule(\n  rule: RulerRuleDTO,\n  namespace: CombinedRuleNamespace,\n  group: CombinedRuleGroup\n): CombinedRule {\n  return isAlertingRulerRule(rule)\n    ? {\n        name: rule.alert,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : isRecordingRulerRule(rule)\n    ? {\n        name: rule.record,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : {\n        name: rule.grafana_alert.title,\n        query: '',\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      };\n}\n\n// find existing rule in group that matches the given prom rule\nfunction getExistingRuleInGroup(\n  rule: Rule,\n  existingCombinedRulesMap: Map<string, CombinedRule[]>,\n  rulesSource: RulesSource\n): CombinedRule | undefined {\n  // Using Map of name-based rules is important performance optimization for the code below\n  // Otherwise we would perform find method multiple times on (possibly) thousands of rules\n\n  const nameMatchingRules = existingCombinedRulesMap.get(rule.name);\n  if (!nameMatchingRules) {\n    return undefined;\n  }\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    // assume grafana groups have only the one rule. check name anyway because paranoid\n    return nameMatchingRules[0];\n  }\n\n  // try finding a rule that matches name, labels, annotations and query\n  const strictlyMatchingRule = nameMatchingRules.find(\n    (combinedRule) => !combinedRule.promRule && isCombinedRuleEqualToPromRule(combinedRule, rule, true)\n  );\n  if (strictlyMatchingRule) {\n    return strictlyMatchingRule;\n  }\n\n  // if that fails, try finding a rule that only matches name, labels and annotations.\n  // loki & prom can sometimes modify the query so it doesnt match, eg `2 > 1` becomes `1`\n  const looselyMatchingRule = nameMatchingRules.find(\n    (combinedRule) => !combinedRule.promRule && isCombinedRuleEqualToPromRule(combinedRule, rule, false)\n  );\n  if (looselyMatchingRule) {\n    return looselyMatchingRule;\n  }\n\n  return undefined;\n}\n\nfunction isCombinedRuleEqualToPromRule(combinedRule: CombinedRule, rule: Rule, checkQuery = true): boolean {\n  if (combinedRule.name === rule.name) {\n    return isEqual(\n      [checkQuery ? hashQuery(combinedRule.query) : '', combinedRule.labels, combinedRule.annotations],\n      [checkQuery ? hashQuery(rule.query) : '', rule.labels || {}, isAlertingRule(rule) ? rule.annotations || {} : {}]\n    );\n  }\n  return false;\n}\n\n// there can be slight differences in how prom & ruler render a query, this will hash them accounting for the differences\nfunction hashQuery(query: string) {\n  // one of them might be wrapped in parens\n  if (query.length > 1 && query[0] === '(' && query[query.length - 1] === ')') {\n    query = query.slice(1, -1);\n  }\n  // whitespace could be added or removed\n  query = query.replace(/\\s|\\n/g, '');\n  // labels matchers can be reordered, so sort the enitre string, esentially comparing just the character counts\n  return query.split('').sort().join('');\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n"],"names":["MatchedSilencedRules","matchedAlertRules","setMatchedAlertRules","formApi","dispatch","watch","matchers","styles","getStyles","columns","useColumns","combinedNamespaces","useCombinedRuleNamespaces","useDebounce","matchedInstances","namespace","group","combinedRule","rule","Badge","matcher","DynamicTable","matchedInstance","AlertStateTag","AlertLabels","theme","MatchersField","className","control","register","errors","append","remove","Field","index","Input","InputControl","onChange","ref","field","Select","value","IconButton","Button","newMatcher","SilencePeriod","getValues","onChangeStartsAt","startsAt","startsAtInvalid","onChangeEndsAt","endsAt","endsAtInvalid","onChangeTimeZone","timeZone","invalid","from","to","TimeRangeInput","newValue","defaultsFromQuery","searchParams","defaults","comment","formMatchers","getDefaultFormValues","silence","now","interval","config","SilencesEditor","alertManagerSourceName","urlSearchParams","useURLSearchParams","defaultValues","formAPI","loading","useUnifiedAlertingSelector","state","useCleanup","handleSubmit","formState","setValue","clearErrors","onSubmit","data","id","createdBy","matchersFields","payload","duration","prevDuration","setPrevDuration","startValue","nextDuration","userLogged","FieldSet","TextArea","ActionButton","restProps","getStyle","NoSilencesSplash","permissions","EmptyListCTA","CallToActionCard","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","alertName","name","labelKey","labelValue","CollapseToggle","collapsed","AmAlertStateTag","SilencedAlertsTable","silencedAlerts","tableStyles","SilenceDetails","dateDisplayFormat","startsAtDate","endsAtDate","silenceStateToState","SilenceStateTag","StateTag","stateOptions","key","getQueryStringKey","SilencesFilter","queryStringKey","setQueryStringKey","queryParams","setQueryParams","useQueryParams","queryString","silenceState","handleQueryStringChange","e","target","handleSilenceStateChange","clearFilters","inputInvalid","Label","Tooltip","Icon","RadioButtonGroup","SilencesTable","silences","alertManagerAlerts","filteredSilences","useFilteredSilences","showExpiredSilencesBanner","items","findSilencedAlerts","Authorize","Link","silenceIdsString","isEqual","isRegex","handleExpireSilenceClick","showActions","status","Matchers","ActionIcon","defaultPageNav","useSilenceNavData","isExact","path","pageNav","setPageNav","Silences","alertManagers","setAlertManagerSourceName","useAlertManagerSourceName","useGetAlertmanagerChoiceQuery","alertmanagerApi","alertsRequests","alertsRequest","location","isRoot","amFeatures","featureDiscoveryApi","alertmanagerChoice","fetchAll","result","error","getSilenceById","mimirLazyInitError","AlertingPageWrapper","AlertManagerPicker","GrafanaAlertmanagerDeliveryWarning","Alert","match","NoAlertManagerWarning","build","response","children","pageId","isLoading","actions","fallback","action","currentAlertmanager","NoAlertManagersAvailable","OtherAlertManagersAvailable","availableAlertManagers","_","hasOtherAMs","tooltip","icon","onClick","tooltipPlacement","rest","ariaLabel","alertStateToState","useIsAlertManagerAvailable","alertManagerName","am","updateQueryParams","isAlertManagerAvailable","update","querySource","storeSource","useAlertManagersByPermission","accessType","rulesSourceName","promRulesResponses","rulerRulesResponses","cache","rulesSources","rulesSource","promRules","rulerRules","cached","namespaces","namespaceName","groups","addRulerGroupsToCombinedNamespace","ns","addPromGroupsToCombinedNamespace","flattenGrafanaManagedRules","newNamespace","sortRulesByName","rules","a","b","combinedGroup","rulerRuleToCombinedRule","existingGroupsByName","combinedRulesByName","r","existingRule","getExistingRuleInGroup","promRuleToCombinedRule","existingCombinedRulesMap","nameMatchingRules","strictlyMatchingRule","isCombinedRuleEqualToPromRule","looselyMatchingRule","checkQuery","hashQuery","query","search","searchValues","replace","getAlertTableStyles"],"sourceRoot":""}